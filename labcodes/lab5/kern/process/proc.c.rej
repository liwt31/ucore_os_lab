--- home/wtli/OS/OSbak/labcodes/lab4/kern/process/proc.c	2017-02-26 17:12:48.619510661 +0800
+++ kern/process/proc.c	2017-04-11 20:01:13.125006172 +0800
@@ -102,6 +102,12 @@
      *       uint32_t flags;                             // Process flag
      *       char name[PROC_NAME_LEN + 1];               // Process name
      */
+        memset(proc, 0, sizeof(struct proc_struct));
+        //might not be necessary because PROC_UNINIT = 0
+        //proc->state = PROC_UNINIT; 
+        proc->pid = -1;
+        extern uintptr_t boot_cr3;
+        proc->cr3 = boot_cr3;
     }
     return proc;
 }
@@ -296,6 +302,28 @@
     //    5. insert proc_struct into hash_list && proc_list
     //    6. call wakeup_proc to make the new child process RUNNABLE
     //    7. set ret vaule using child proc's pid
+    if ((proc = alloc_proc()) == NULL){
+        goto fork_out;
+    }
+	proc->parent = current;
+    if ((setup_kstack(proc)) == -E_NO_MEM){
+        goto bad_fork_cleanup_proc;
+    }
+    if (copy_mm(clone_flags, proc) != 0){
+        goto bad_fork_cleanup_kstack;
+    }
+    copy_thread(proc, stack ? stack:proc->kstack + KSTACKSIZE, tf);
+	bool intr_flag;
+	local_intr_save(intr_flag);
+	{
+		proc->pid = get_pid();
+		hash_proc(proc);
+		list_add(&proc_list, &proc->list_link);
+		nr_process ++;
+	}
+	local_intr_restore(intr_flag);
+	wakeup_proc(proc);
+    ret = proc->pid;
 fork_out:
     return ret;
 
