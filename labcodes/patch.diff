diff -Nru lab1/boot/bootasm.S lab2/boot/bootasm.S
--- lab1/boot/bootasm.S	2017-02-26 22:44:09.996640622 +0800
+++ lab2/boot/bootasm.S	2017-02-25 15:39:39.991783592 +0800
@@ -8,6 +8,7 @@
 .set PROT_MODE_CSEG,        0x8                     # kernel code segment selector
 .set PROT_MODE_DSEG,        0x10                    # kernel data segment selector
 .set CR0_PE_ON,             0x1                     # protected mode enable flag
+.set SMAP,                  0x534d4150
 
 # start address should be 0:7c00, in real mode, the beginning address of the running bootloader
 .globl start
@@ -25,8 +26,7 @@
     # Enable A20:
     #  For backwards compatibility with the earliest PCs, physical
     #  address line 20 is tied low, so that addresses higher than
-    #  1MB wrap around to zero by default. This code undoes this
-    #  No need to pay much attention to this code. Take it as a necessary preparation to enable protection mode.
+    #  1MB wrap around to zero by default. This code undoes this.
 seta20.1:
     inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
     testb $0x2, %al
@@ -43,13 +43,30 @@
     movb $0xdf, %al                                 # 0xdf -> port 0x60
     outb %al, $0x60                                 # 0xdf = 11011111, means set P2's A20 bit(the 1 bit) to 1
 
+probe_memory:
+    movl $0, 0x8000
+    xorl %ebx, %ebx
+    movw $0x8004, %di
+start_probe:
+    movl $0xE820, %eax
+    movl $20, %ecx
+    movl $SMAP, %edx
+    int $0x15
+    jnc cont
+    movw $12345, 0x8000
+    jmp finish_probe
+cont:
+    addw $20, %di
+    incl 0x8000
+    cmpl $0, %ebx
+    jnz start_probe
+finish_probe:
+
     # Switch from real to protected mode, using a bootstrap GDT
     # and segment translation that makes virtual addresses
     # identical to physical addresses, so that the
     # effective memory map does not change during the switch.
-    # GDT: global descriptor table.
     lgdt gdtdesc
-	# load gdt, real mode instr
     movl %cr0, %eax
     orl $CR0_PE_ON, %eax
     movl %eax, %cr0
@@ -77,19 +94,14 @@
 spin:
     jmp spin
 
+.data
 # Bootstrap GDT
 .p2align 2                                          # force 4 byte alignment
 gdt:
-	# Fisrt seg descriptor, left blank is requested.
     SEG_NULLASM                                     # null seg
-	# Next 2 segs are for code and data repectively
-	# The first num parameter is the starting address, and the second is the length
-	# they actually overlap and have maximum space
-	# This is for the convenience of education. The protection is weak this way.
     SEG_ASM(STA_X|STA_R, 0x0, 0xffffffff)           # code seg for bootloader and kernel
     SEG_ASM(STA_W, 0x0, 0xffffffff)                 # data seg for bootloader and kernel
 
-# Description of gdt
 gdtdesc:
     .word 0x17                                      # sizeof(gdt) - 1
     .long gdt                                       # address gdt
diff -Nru lab1/boot/bootmain.c lab2/boot/bootmain.c
--- lab1/boot/bootmain.c	2017-02-26 14:18:56.951575580 +0800
+++ lab2/boot/bootmain.c	2017-02-25 15:39:39.991783592 +0800
@@ -37,7 +37,6 @@
 static void
 waitdisk(void) {
     while ((inb(0x1F7) & 0xC0) != 0x40)
-	// inb : assembly language, read(in) a byte(b) from a certain port
         /* do nothing */;
 }
 
@@ -48,12 +47,10 @@
     waitdisk();
 
     outb(0x1F2, 1);                         // count = 1
-	// num of sector to read
     outb(0x1F3, secno & 0xFF);
     outb(0x1F4, (secno >> 8) & 0xFF);
     outb(0x1F5, (secno >> 16) & 0xFF);
     outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0);
-	// 1F3 to 1F6, address of LBA
     outb(0x1F7, 0x20);                      // cmd 0x20 - read sectors
 
     // wait for disk to be ready
@@ -61,7 +58,6 @@
 
     // read a sector
     insl(0x1F0, dst, SECTSIZE / 4);
-	// import double word string from port
 }
 
 /* *
@@ -70,8 +66,7 @@
  * */
 static void
 readseg(uintptr_t va, uint32_t count, uint32_t offset) {
-    intptr_t end_va = va + count;
-	// intptr_t : simply another name for int32_t. Why not uint32_t ?
+    uintptr_t end_va = va + count;
 
     // round down to sector boundary
     va -= offset % SECTSIZE;
@@ -92,11 +87,9 @@
 bootmain(void) {
     // read the 1st page off disk
     readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);
-	// uintptr_t uint_32.
 
     // is this a valid ELF?
     if (ELFHDR->e_magic != ELF_MAGIC) {
-	// if the reading process goes wrong, the e_magic will not be initialized properly.
         goto bad;
     }
 
diff -Nru lab1/cscope.out lab2/cscope.out
--- lab1/cscope.out	1970-01-01 08:00:00.000000000 +0800
+++ lab2/cscope.out	2017-03-07 16:16:16.715684524 +0800
@@ -0,0 +1,87375 @@
+cscope 15 $HOME/OS/ucore_os_lab/labcodes/lab2               0000486744
+	@boot/asm.h
+
+1 #i‚de‡
+__BOOT_ASM_H__
+
+
+2 
+	#__BOOT_ASM_H__
+
+
+	)
+
+7 
+	#SEG_NULLASM
+ \
+
+8 .
+w‹d
+ 0, 0; \
+
+9 .
+byã
+ 0, 0, 0, 0
+
+	)
+
+11 
+	#SEG_ASM
+(
+ty≥
+,
+ba£
+,
+lim
+) \
+
+12 .
+	`w‹d
+ (((
+lim
+Ë>> 12Ë& 0xffff), ((
+ba£
+) & 0xffff); \
+
+13 .
+	`byã
+ (((
+ba£
+Ë>> 16Ë& 0xff), (0x90 | (
+ty≥
+)), \
+
+14 (0xC0 | (((
+lim
+Ë>> 28Ë& 0xf)), (((
+ba£
+Ë>> 24Ë& 0xff)
+
+	)
+
+18 
+	#STA_X
+ 0x8
+
+19 
+	#STA_E
+ 0x4
+
+20 
+	#STA_C
+ 0x4
+
+21 
+	#STA_W
+ 0x2
+
+22 
+	#STA_R
+ 0x2
+
+23 
+	#STA_A
+ 0x1
+
+24 
+
+	)
+
+	@boot/bootmain.c
+
+1 
+	~<defs.h
+>
+
+2 
+	~<x86.h
+>
+
+3 
+	~<ñf.h
+>
+
+33 
+	#SECTSIZE
+ 512
+
+	)
+
+34 
+	#ELFHDR
+ ((
+ñfhdr
+ *)0x10000)
+
+35 
+
+	)
+
+38 
+	$waôdisk
+() {
+
+39 (
+	`öb
+(0x1F7) & 0xC0) != 0x40)
+
+41 
+	}
+}
+
+45 
+	$ªad£˘
+(*
+d°
+, 
+uöt32_t
+ 
+£˙o
+) {
+
+47 
+	`waôdisk
+();
+
+49 
+	`outb
+(0x1F2, 1);
+
+50 
+	`outb
+(0x1F3, 
+£˙o
+ & 0xFF);
+
+51 
+	`outb
+(0x1F4, (
+£˙o
+ >> 8) & 0xFF);
+
+52 
+	`outb
+(0x1F5, (
+£˙o
+ >> 16) & 0xFF);
+
+53 
+	`outb
+(0x1F6, ((
+£˙o
+ >> 24) & 0xF) | 0xE0);
+
+54 
+	`outb
+(0x1F7, 0x20);
+
+57 
+	`waôdisk
+();
+
+60 
+	`ö¶
+(0x1F0, 
+d°
+, 
+SECTSIZE
+ / 4);
+
+61 
+	}
+}
+
+68 
+	$ªad£g
+(
+uöçå_t
+ 
+va
+, 
+uöt32_t
+ 
+cou¡
+, uöt32_à
+off£t
+) {
+
+69 
+uöçå_t
+ 
+íd_va
+ = 
+va
+ + 
+cou¡
+;
+
+72 
+va
+ -
+off£t
+ % 
+SECTSIZE
+;
+
+75 
+uöt32_t
+ 
+£˙o
+ = (
+off£t
+ / 
+SECTSIZE
+) + 1;
+
+80 ; 
+va
+ < 
+íd_va
+; v®+
+SECTSIZE
+, 
+£˙o
+ ++) {
+
+81 
+	`ªad£˘
+((*)
+va
+, 
+£˙o
+);
+
+83 
+	}
+}
+
+87 
+	$boŸmaö
+() {
+
+89 
+	`ªad£g
+((
+uöçå_t
+)
+ELFHDR
+, 
+SECTSIZE
+ * 8, 0);
+
+92 i‡(
+ELFHDR
+->
+e_magic
+ !
+ELF_MAGIC
+) {
+
+93 
+bad
+;
+
+96 
+¥oghdr
+ *
+ph
+, *
+ïh
+;
+
+99 
+ph
+ = (
+¥oghdr
+ *)((
+uöçå_t
+)
+ELFHDR
+ + ELFHDR->
+e_phoff
+);
+
+100 
+ïh
+ = 
+ph
+ + 
+ELFHDR
+->
+e_phnum
+;
+
+101 ; 
+ph
+ < 
+ïh
+;Öh ++) {
+
+102 
+	`ªad£g
+(
+ph
+->
+p_va
+ & 0xFFFFFF,Öh->
+p_memsz
+,Öh->
+p_off£t
+);
+
+107 (((*)())(
+ELFHDR
+->
+e_íåy
+ & 0xFFFFFF))();
+
+109 
+bad
+:
+
+110 
+	`outw
+(0x8A00, 0x8A00);
+
+111 
+	`outw
+(0x8A00, 0x8E00);
+
+115 
+	}
+}
+
+	@kern/debug/assert.h
+
+1 #i‚de‡
+__KERN_DEBUG_ASSERT_H__
+
+
+2 
+	#__KERN_DEBUG_ASSERT_H__
+
+
+	)
+
+4 
+	~<defs.h
+>
+
+6 
+__w¨n
+(c⁄° *
+fûe
+, 
+löe
+, c⁄° *
+fmt
+, ...);
+
+7 
+__n‹ëu∫
+ 
+__∑nic
+(c⁄° *
+fûe
+, 
+löe
+, c⁄° *
+fmt
+, ...);
+
+9 
+	#w¨n
+(...) \
+
+10 
+	`__w¨n
+(
+__FILE__
+, 
+__LINE__
+, 
+__VA_ARGS__
+)
+
+	)
+
+12 
+	#∑nic
+(...) \
+
+13 
+	`__∑nic
+(
+__FILE__
+, 
+__LINE__
+, 
+__VA_ARGS__
+)
+
+	)
+
+15 
+	#as£π
+(
+x
+) \
+
+17 i‡(!(
+x
+)) { \
+
+18 
+	`∑nic
+("assertion failed: %s", #x); \
+
+20 } 0)
+
+	)
+
+23 
+	#°©ic_as£π
+(
+x
+) \
+
+24 
+x
+Ë{ 0: (x): ; }
+
+	)
+
+	@kern/debug/kdebug.c
+
+1 
+	~<defs.h
+>
+
+2 
+	~<x86.h
+>
+
+3 
+	~<°ab.h
+>
+
+4 
+	~<°dio.h
+>
+
+5 
+	~<°rög.h
+>
+
+6 
+	~<sync.h
+>
+
+7 
+	~<kdebug.h
+>
+
+8 
+	~<km⁄ô‹.h
+>
+
+9 
+	~<as£π.h
+>
+
+11 
+	#STACKFRAME_DEPTH
+ 20
+
+	)
+
+13 c⁄° 
+°ab
+ 
+__STAB_BEGIN__
+[];
+
+14 c⁄° 
+°ab
+ 
+__STAB_END__
+[];
+
+15 c⁄° 
+__STABSTR_BEGIN__
+[];
+
+16 c⁄° 
+__STABSTR_END__
+[];
+
+19 
+	seùdebugöfo
+ {
+
+20 c⁄° *
+	meù_fûe
+;
+
+21 
+	meù_löe
+;
+
+22 c⁄° *
+	meù_‚_«me
+;
+
+23 
+	meù_‚_«mñí
+;
+
+24 
+uöçå_t
+ 
+	meù_‚_addr
+;
+
+25 
+	meù_‚_«rg
+;
+
+70 
+	$°ab_bö£¨ch
+(c⁄° 
+°ab
+ *
+°abs
+, *
+ªgi⁄_À·
+, *
+ªgi⁄_right
+,
+
+71 
+ty≥
+, 
+uöçå_t
+ 
+addr
+) {
+
+72 
+l
+ = *
+ªgi⁄_À·
+, 
+r
+ = *
+ªgi⁄_right
+, 
+™y_m©ches
+ = 0;
+
+74 
+l
+ <
+r
+) {
+
+75 
+åue_m
+ = (
+l
+ + 
+r
+Ë/ 2, 
+m
+ =Årue_m;
+
+78 
+m
+ >
+l
+ && 
+°abs
+[m].
+n_ty≥
+ !
+ty≥
+) {
+
+79 
+m
+ --;
+
+81 i‡(
+m
+ < 
+l
+) {
+
+82 
+l
+ = 
+åue_m
+ + 1;
+
+87 
+™y_m©ches
+ = 1;
+
+88 i‡(
+°abs
+[
+m
+].
+n_vÆue
+ < 
+addr
+) {
+
+89 *
+ªgi⁄_À·
+ = 
+m
+;
+
+90 
+l
+ = 
+åue_m
+ + 1;
+
+91 } i‡(
+°abs
+[
+m
+].
+n_vÆue
+ > 
+addr
+) {
+
+92 *
+ªgi⁄_right
+ = 
+m
+ - 1;
+
+93 
+r
+ = 
+m
+ - 1;
+
+97 *
+ªgi⁄_À·
+ = 
+m
+;
+
+98 
+l
+ = 
+m
+;
+
+99 
+addr
+ ++;
+
+103 i‡(!
+™y_m©ches
+) {
+
+104 *
+ªgi⁄_right
+ = *
+ªgi⁄_À·
+ - 1;
+
+108 
+l
+ = *
+ªgi⁄_right
+;
+
+109 ; 
+l
+ > *
+ªgi⁄_À·
+ && 
+°abs
+[l].
+n_ty≥
+ !
+ty≥
+;Ü --)
+
+111 *
+ªgi⁄_À·
+ = 
+l
+;
+
+113 
+	}
+}
+
+122 
+	$debugöfo_eù
+(
+uöçå_t
+ 
+addr
+, 
+eùdebugöfo
+ *
+öfo
+) {
+
+123 c⁄° 
+°ab
+ *
+°abs
+, *
+°ab_íd
+;
+
+124 c⁄° *
+°ab°r
+, *
+°ab°r_íd
+;
+
+126 
+öfo
+->
+eù_fûe
+ = "<unknown>";
+
+127 
+öfo
+->
+eù_löe
+ = 0;
+
+128 
+öfo
+->
+eù_‚_«me
+ = "<unknown>";
+
+129 
+öfo
+->
+eù_‚_«mñí
+ = 9;
+
+130 
+öfo
+->
+eù_‚_addr
+ = 
+addr
+;
+
+131 
+öfo
+->
+eù_‚_«rg
+ = 0;
+
+133 
+°abs
+ = 
+__STAB_BEGIN__
+;
+
+134 
+°ab_íd
+ = 
+__STAB_END__
+;
+
+135 
+°ab°r
+ = 
+__STABSTR_BEGIN__
+;
+
+136 
+°ab°r_íd
+ = 
+__STABSTR_END__
+;
+
+139 i‡(
+°ab°r_íd
+ <
+°ab°r
+ || stabstr_end[-1] != 0) {
+
+149 
+lfûe
+ = 0, 
+rfûe
+ = (
+°ab_íd
+ - 
+°abs
+) - 1;
+
+150 
+	`°ab_bö£¨ch
+(
+°abs
+, &
+lfûe
+, &
+rfûe
+, 
+N_SO
+, 
+addr
+);
+
+151 i‡(
+lfûe
+ == 0)
+
+156 
+lfun
+ = 
+lfûe
+, 
+rfun
+ = 
+rfûe
+;
+
+157 
+Œöe
+, 
+æöe
+;
+
+158 
+	`°ab_bö£¨ch
+(
+°abs
+, &
+lfun
+, &
+rfun
+, 
+N_FUN
+, 
+addr
+);
+
+160 i‡(
+lfun
+ <
+rfun
+) {
+
+163 i‡(
+°abs
+[
+lfun
+].
+n_°rx
+ < 
+°ab°r_íd
+ - 
+°ab°r
+) {
+
+164 
+öfo
+->
+eù_‚_«me
+ = 
+°ab°r
+ + 
+°abs
+[
+lfun
+].
+n_°rx
+;
+
+166 
+öfo
+->
+eù_‚_addr
+ = 
+°abs
+[
+lfun
+].
+n_vÆue
+;
+
+167 
+addr
+ -
+öfo
+->
+eù_‚_addr
+;
+
+169 
+Œöe
+ = 
+lfun
+;
+
+170 
+æöe
+ = 
+rfun
+;
+
+174 
+öfo
+->
+eù_‚_addr
+ = 
+addr
+;
+
+175 
+Œöe
+ = 
+lfûe
+;
+
+176 
+æöe
+ = 
+rfûe
+;
+
+178 
+öfo
+->
+eù_‚_«mñí
+ = 
+	`°rföd
+(öfo->
+eù_‚_«me
+, ':') - info->eip_fn_name;
+
+183 
+	`°ab_bö£¨ch
+(
+°abs
+, &
+Œöe
+, &
+æöe
+, 
+N_SLINE
+, 
+addr
+);
+
+184 i‡(
+Œöe
+ <
+æöe
+) {
+
+185 
+öfo
+->
+eù_löe
+ = 
+°abs
+[
+æöe
+].
+n_desc
+;
+
+194 
+Œöe
+ >
+lfûe
+
+
+195 && 
+°abs
+[
+Œöe
+].
+n_ty≥
+ !
+N_SOL
+
+
+196 && (
+°abs
+[
+Œöe
+].
+n_ty≥
+ !
+N_SO
+ || !°abs[Œöe].
+n_vÆue
+)) {
+
+197 
+Œöe
+ --;
+
+199 i‡(
+Œöe
+ >
+lfûe
+ && 
+°abs
+[Œöe].
+n_°rx
+ < 
+°ab°r_íd
+ - 
+°ab°r
+) {
+
+200 
+öfo
+->
+eù_fûe
+ = 
+°ab°r
+ + 
+°abs
+[
+Œöe
+].
+n_°rx
+;
+
+205 i‡(
+lfun
+ < 
+rfun
+) {
+
+206 
+Œöe
+ = 
+lfun
+ + 1;
+
+207 
+Œöe
+ < 
+rfun
+ && 
+°abs
+[Œöe].
+n_ty≥
+ =
+N_PSYM
+;
+
+208 
+Œöe
+ ++) {
+
+209 
+öfo
+->
+eù_‚_«rg
+ ++;
+
+213 
+	}
+}
+
+221 
+	$¥öt_kînöfo
+() {
+
+222 
+ëext
+[], 
+ed©a
+[], 
+íd
+[], 
+kîn_öô
+[];
+
+223 
+	`˝rötf
+("Special kernel symbols:\n");
+
+224 
+	`˝rötf
+("É¡ry 0x%08x (phys)\n", 
+kîn_öô
+);
+
+225 
+	`˝rötf
+("Éãxà 0x%08x (phys)\n", 
+ëext
+);
+
+226 
+	`˝rötf
+("Éd©® 0x%08x (phys)\n", 
+ed©a
+);
+
+227 
+	`˝rötf
+("Énd 0x%08x (phys)\n", 
+íd
+);
+
+228 
+	`˝rötf
+("Kî√»execuèbÀ mem‹y foŸ¥öt: %dKB\n", (
+íd
+ - 
+kîn_öô
+ + 1023)/1024);
+
+229 
+	}
+}
+
+236 
+	$¥öt_debugöfo
+(
+uöçå_t
+ 
+eù
+) {
+
+237 
+eùdebugöfo
+ 
+öfo
+;
+
+238 i‡(
+	`debugöfo_eù
+(
+eù
+, &
+öfo
+) != 0) {
+
+239 
+	`˝rötf
+(" <unknow>: -- 0x%08x --\n", 
+eù
+);
+
+242 
+‚«me
+[256];
+
+243 
+j
+;
+
+244 
+j
+ = 0; j < 
+öfo
+.
+eù_‚_«mñí
+; j ++) {
+
+245 
+‚«me
+[
+j
+] = 
+öfo
+.
+eù_‚_«me
+[j];
+
+247 
+‚«me
+[
+j
+] = '\0';
+
+248 
+	`˝rötf
+(" %s:%d: %s+%d\n", 
+öfo
+.
+eù_fûe
+, info.
+eù_löe
+,
+
+249 
+‚«me
+, 
+eù
+ - 
+öfo
+.
+eù_‚_addr
+);
+
+251 
+	}
+}
+
+253 
+__noölöe
+ 
+uöt32_t
+
+
+254 
+	$ªad_eù
+() {
+
+255 
+uöt32_t
+ 
+eù
+;
+
+256 
+asm
+ vﬁ©ûe("mov»4(%%ebp), %0" : "Ù" (
+eù
+));
+
+257  
+eù
+;
+
+258 
+	}
+}
+
+295 
+	$¥öt_°ack‰ame
+() {
+
+308 
+	}
+}
+
+	@kern/debug/kdebug.h
+
+1 #i‚de‡
+__KERN_DEBUG_KDEBUG_H__
+
+
+2 
+	#__KERN_DEBUG_KDEBUG_H__
+
+
+	)
+
+4 
+	~<defs.h
+>
+
+5 
+	~<å≠.h
+>
+
+7 
+¥öt_kînöfo
+();
+
+8 
+¥öt_°ack‰ame
+();
+
+9 
+¥öt_debugöfo
+(
+uöçå_t
+ 
+eù
+);
+
+	@kern/debug/kmonitor.c
+
+1 
+	~<°dio.h
+>
+
+2 
+	~<°rög.h
+>
+
+3 
+	~<mmu.h
+>
+
+4 
+	~<å≠.h
+>
+
+5 
+	~<km⁄ô‹.h
+>
+
+6 
+	~<kdebug.h
+>
+
+13 
+	scomm™d
+ {
+
+14 c⁄° *
+	m«me
+;
+
+15 c⁄° *
+	mdesc
+;
+
+17 (*
+	mfunc
+)(
+	m¨gc
+, **
+	m¨gv
+, 
+å≠‰ame
+ *
+	mtf
+);
+
+20 
+comm™d
+ 
+	gcomm™ds
+[] = {
+
+21 {"hñp", "Di•œyÅhi†li° o‡comm™ds.", 
+m⁄_hñp
+},
+
+22 {"kînöfo", "Di•œy inf‹m©i⁄ábouàthêkî√l.", 
+m⁄_kînöfo
+},
+
+23 {"backåa˚", "Pröàbackåa˚ o‡°ack føme.", 
+m⁄_backåa˚
+},
+
+27 
+boﬁ
+ 
+is_kî√l_∑nic
+();
+
+29 
+	#NCOMMANDS
+ ((
+comm™ds
+)/(
+comm™d
+))
+
+	)
+
+33 
+	#MAXARGS
+ 16
+
+	)
+
+34 
+	#WHITESPACE
+ " \t\n\r"
+
+	)
+
+38 
+	$∑r£
+(*
+buf
+, **
+¨gv
+) {
+
+39 
+¨gc
+ = 0;
+
+42 *
+buf
+ !'\0' && 
+	`°rchr
+(
+WHITESPACE
+, *bufË!
+NULL
+) {
+
+43 *
+buf
+ ++ = '\0';
+
+45 i‡(*
+buf
+ == '\0') {
+
+50 i‡(
+¨gc
+ =
+MAXARGS
+ - 1) {
+
+51 
+	`˝rötf
+("Toÿm™yárgumít†(max %d).\n", 
+MAXARGS
+);
+
+53 
+¨gv
+[
+¨gc
+ ++] = 
+buf
+;
+
+54 *
+buf
+ !'\0' && 
+	`°rchr
+(
+WHITESPACE
+, *bufË=
+NULL
+) {
+
+55 
+buf
+ ++;
+
+58  
+¨gc
+;
+
+59 
+	}
+}
+
+66 
+	$runcmd
+(*
+buf
+, 
+å≠‰ame
+ *
+tf
+) {
+
+67 *
+¨gv
+[
+MAXARGS
+];
+
+68 
+¨gc
+ = 
+	`∑r£
+(
+buf
+, 
+¨gv
+);
+
+69 i‡(
+¨gc
+ == 0) {
+
+72 
+i
+;
+
+73 
+i
+ = 0; i < 
+NCOMMANDS
+; i ++) {
+
+74 i‡(
+	`°rcmp
+(
+comm™ds
+[
+i
+].
+«me
+, 
+¨gv
+[0]) == 0) {
+
+75  
+comm™ds
+[
+i
+].
+	`func
+(
+¨gc
+ - 1, 
+¨gv
+ + 1, 
+tf
+);
+
+78 
+	`˝rötf
+("Unknow¿comm™d '%s'\n", 
+¨gv
+[0]);
+
+80 
+	}
+}
+
+85 
+	$km⁄ô‹
+(
+å≠‰ame
+ *
+tf
+) {
+
+86 
+	`˝rötf
+("WelcomeÅoÅhe kernel debug monitor!!\n");
+
+87 
+	`˝rötf
+("Type 'help' foráÜist of commands.\n");
+
+89 i‡(
+tf
+ !
+NULL
+) {
+
+90 
+	`¥öt_å≠‰ame
+(
+tf
+);
+
+93 *
+buf
+;
+
+95 i‡((
+buf
+ = 
+	`ªadlöe
+("K> ")Ë!
+NULL
+) {
+
+96 i‡(
+	`runcmd
+(
+buf
+, 
+tf
+) < 0) {
+
+101 
+	}
+}
+
+105 
+	$m⁄_hñp
+(
+¨gc
+, **
+¨gv
+, 
+å≠‰ame
+ *
+tf
+) {
+
+106 
+i
+;
+
+107 
+i
+ = 0; i < 
+NCOMMANDS
+; i ++) {
+
+108 
+	`˝rötf
+("%†- %s\n", 
+comm™ds
+[
+i
+].
+«me
+, comm™ds[i].
+desc
+);
+
+111 
+	}
+}
+
+118 
+	$m⁄_kînöfo
+(
+¨gc
+, **
+¨gv
+, 
+å≠‰ame
+ *
+tf
+) {
+
+119 
+	`¥öt_kînöfo
+();
+
+121 
+	}
+}
+
+128 
+	$m⁄_backåa˚
+(
+¨gc
+, **
+¨gv
+, 
+å≠‰ame
+ *
+tf
+) {
+
+129 
+	`¥öt_°ack‰ame
+();
+
+131 
+	}
+}
+
+	@kern/debug/kmonitor.h
+
+1 #i‚de‡
+__KERN_DEBUG_MONITOR_H__
+
+
+2 
+	#__KERN_DEBUG_MONITOR_H__
+
+
+	)
+
+4 
+	~<å≠.h
+>
+
+6 
+km⁄ô‹
+(
+å≠‰ame
+ *
+tf
+);
+
+8 
+m⁄_hñp
+(
+¨gc
+, **
+¨gv
+, 
+å≠‰ame
+ *
+tf
+);
+
+9 
+m⁄_kînöfo
+(
+¨gc
+, **
+¨gv
+, 
+å≠‰ame
+ *
+tf
+);
+
+10 
+m⁄_backåa˚
+(
+¨gc
+, **
+¨gv
+, 
+å≠‰ame
+ *
+tf
+);
+
+11 
+m⁄_c⁄töue
+(
+¨gc
+, **
+¨gv
+, 
+å≠‰ame
+ *
+tf
+);
+
+12 
+m⁄_°ï
+(
+¨gc
+, **
+¨gv
+, 
+å≠‰ame
+ *
+tf
+);
+
+13 
+m⁄_bªakpoöt
+(
+¨gc
+, **
+¨gv
+, 
+å≠‰ame
+ *
+tf
+);
+
+14 
+m⁄_w©chpoöt
+(
+¨gc
+, **
+¨gv
+, 
+å≠‰ame
+ *
+tf
+);
+
+15 
+m⁄_dñëe_dr
+(
+¨gc
+, **
+¨gv
+, 
+å≠‰ame
+ *
+tf
+);
+
+16 
+m⁄_li°_dr
+(
+¨gc
+, **
+¨gv
+, 
+å≠‰ame
+ *
+tf
+);
+
+	@kern/debug/panic.c
+
+1 
+	~<defs.h
+>
+
+2 
+	~<°dio.h
+>
+
+3 
+	~<öå.h
+>
+
+4 
+	~<km⁄ô‹.h
+>
+
+6 
+boﬁ
+ 
+	gis_∑nic
+ = 0;
+
+13 
+	$__∑nic
+(c⁄° *
+fûe
+, 
+löe
+, c⁄° *
+fmt
+, ...) {
+
+14 i‡(
+is_∑nic
+) {
+
+15 
+∑nic_dód
+;
+
+17 
+is_∑nic
+ = 1;
+
+20 
+va_li°
+ 
+≠
+;
+
+21 
+	`va_°¨t
+(
+≠
+, 
+fmt
+);
+
+22 
+	`˝rötf
+("kî√»∑ni¯© %s:%d:\¿ ", 
+fûe
+, 
+löe
+);
+
+23 
+	`v˝rötf
+(
+fmt
+, 
+≠
+);
+
+24 
+	`˝rötf
+("\n");
+
+25 
+	`va_íd
+(
+≠
+);
+
+27 
+∑nic_dód
+:
+
+28 
+	`öå_dißbÀ
+();
+
+30 
+	`km⁄ô‹
+(
+NULL
+);
+
+32 
+	}
+}
+
+36 
+	$__w¨n
+(c⁄° *
+fûe
+, 
+löe
+, c⁄° *
+fmt
+, ...) {
+
+37 
+va_li°
+ 
+≠
+;
+
+38 
+	`va_°¨t
+(
+≠
+, 
+fmt
+);
+
+39 
+	`˝rötf
+("kî√»w¨nögáà%s:%d:\¿ ", 
+fûe
+, 
+löe
+);
+
+40 
+	`v˝rötf
+(
+fmt
+, 
+≠
+);
+
+41 
+	`˝rötf
+("\n");
+
+42 
+	`va_íd
+(
+≠
+);
+
+43 
+	}
+}
+
+45 
+boﬁ
+
+
+46 
+	$is_kî√l_∑nic
+() {
+
+47  
+is_∑nic
+;
+
+48 
+	}
+}
+
+	@kern/debug/stab.h
+
+1 #i‚de‡
+__KERN_DEBUG_STAB_H__
+
+
+2 
+	#__KERN_DEBUG_STAB_H__
+
+
+	)
+
+4 
+	~<defs.h
+>
+
+17 
+	#N_GSYM
+ 0x20
+
+18 
+	#N_FNAME
+ 0x22
+
+19 
+	#N_FUN
+ 0x24
+
+20 
+	#N_STSYM
+ 0x26
+
+21 
+	#N_LCSYM
+ 0x28
+
+22 
+	#N_MAIN
+ 0x2a
+
+23 
+	#N_PC
+ 0x30
+
+24 
+	#N_RSYM
+ 0x40
+
+25 
+	#N_SLINE
+ 0x44
+
+26 
+	#N_DSLINE
+ 0x46
+
+27 
+	#N_BSLINE
+ 0x48
+
+28 
+	#N_SSYM
+ 0x60
+
+29 
+	#N_SO
+ 0x64
+
+30 
+	#N_LSYM
+ 0x80
+
+31 
+	#N_BINCL
+ 0x82
+
+32 
+	#N_SOL
+ 0x84
+
+33 
+	#N_PSYM
+ 0xa0
+
+34 
+	#N_EINCL
+ 0xa2
+
+35 
+	#N_ENTRY
+ 0xa4
+
+36 
+	#N_LBRAC
+ 0xc0
+
+37 
+	#N_EXCL
+ 0xc2
+
+38 
+	#N_RBRAC
+ 0xe0
+
+39 
+	#N_BCOMM
+ 0xe2
+
+40 
+	#N_ECOMM
+ 0xe4
+
+41 
+	#N_ECOML
+ 0xe8
+
+42 
+	#N_LENG
+ 0xfe
+
+43 
+
+	)
+
+45 
+	s°ab
+ {
+
+46 
+uöt32_t
+ 
+	mn_°rx
+;
+
+47 
+uöt8_t
+ 
+	mn_ty≥
+;
+
+48 
+uöt8_t
+ 
+	mn_Ÿhî
+;
+
+49 
+uöt16_t
+ 
+	mn_desc
+;
+
+50 
+uöçå_t
+ 
+	mn_vÆue
+;
+
+	@kern/driver/clock.c
+
+1 
+	~<x86.h
+>
+
+2 
+	~<å≠.h
+>
+
+3 
+	~<°dio.h
+>
+
+4 
+	~<picúq.h
+>
+
+11 
+	#IO_TIMER1
+ 0x040
+
+12 
+
+	)
+
+18 
+	#TIMER_FREQ
+ 1193182
+
+	)
+
+19 
+	#TIMER_DIV
+(
+x
+Ë((
+TIMER_FREQ
+ + (xË/ 2Ë/ (x))
+
+	)
+
+21 
+	#TIMER_MODE
+ (
+IO_TIMER1
+ + 3)
+
+22 
+	#TIMER_SEL0
+ 0x00
+
+23 
+	#TIMER_RATEGEN
+ 0x04
+
+24 
+	#TIMER_16BIT
+ 0x30
+
+25 
+
+	)
+
+26 vﬁ©ûê
+size_t
+ 
+	gticks
+;
+
+33 
+	$˛ock_öô
+() {
+
+35 
+	`outb
+(
+TIMER_MODE
+, 
+TIMER_SEL0
+ | 
+TIMER_RATEGEN
+ | 
+TIMER_16BIT
+);
+
+36 
+	`outb
+(
+IO_TIMER1
+, 
+	`TIMER_DIV
+(100) % 256);
+
+37 
+	`outb
+(
+IO_TIMER1
+, 
+	`TIMER_DIV
+(100) / 256);
+
+40 
+ticks
+ = 0;
+
+42 
+	`˝rötf
+("++ setupÅimer interrupts\n");
+
+43 
+	`pic_íabÀ
+(
+IRQ_TIMER
+);
+
+44 
+	}
+}
+
+	@kern/driver/clock.h
+
+1 #i‚de‡
+__KERN_DRIVER_CLOCK_H__
+
+
+2 
+	#__KERN_DRIVER_CLOCK_H__
+
+
+	)
+
+4 
+	~<defs.h
+>
+
+6 vﬁ©ûê
+size_t
+ 
+ticks
+;
+
+8 
+˛ock_öô
+();
+
+	@kern/driver/console.c
+
+1 
+	~<defs.h
+>
+
+2 
+	~<x86.h
+>
+
+3 
+	~<°dio.h
+>
+
+4 
+	~<°rög.h
+>
+
+5 
+	~<kbdªg.h
+>
+
+6 
+	~<picúq.h
+>
+
+7 
+	~<å≠.h
+>
+
+8 
+	~<memœyout.h
+>
+
+9 
+	~<sync.h
+>
+
+13 
+	$dñay
+() {
+
+14 
+	`öb
+(0x84);
+
+15 
+	`öb
+(0x84);
+
+16 
+	`öb
+(0x84);
+
+17 
+	`öb
+(0x84);
+
+18 
+	}
+}
+
+21 
+	#COM1
+ 0x3F8
+
+	)
+
+23 
+	#COM_RX
+ 0
+
+24 
+	#COM_TX
+ 0
+
+25 
+	#COM_DLL
+ 0
+
+26 
+	#COM_DLM
+ 1
+
+27 
+	#COM_IER
+ 1
+
+28 
+	#COM_IER_RDI
+ 0x01
+
+29 
+	#COM_IIR
+ 2
+
+30 
+	#COM_FCR
+ 2
+
+31 
+	#COM_LCR
+ 3
+
+32 
+	#COM_LCR_DLAB
+ 0x80
+
+33 
+	#COM_LCR_WLEN8
+ 0x03
+
+34 
+	#COM_MCR
+ 4
+
+35 
+	#COM_MCR_RTS
+ 0x02
+
+36 
+	#COM_MCR_DTR
+ 0x01
+
+37 
+	#COM_MCR_OUT2
+ 0x08
+
+38 
+	#COM_LSR
+ 5
+
+39 
+	#COM_LSR_DATA
+ 0x01
+
+40 
+	#COM_LSR_TXRDY
+ 0x20
+
+41 
+	#COM_LSR_TSRE
+ 0x40
+
+42 
+
+	)
+
+43 
+	#MONO_BASE
+ 0x3B4
+
+	)
+
+44 
+	#MONO_BUF
+ 0xB0000
+
+	)
+
+45 
+	#CGA_BASE
+ 0x3D4
+
+	)
+
+46 
+	#CGA_BUF
+ 0xB8000
+
+	)
+
+47 
+	#CRT_ROWS
+ 25
+
+	)
+
+48 
+	#CRT_COLS
+ 80
+
+	)
+
+49 
+	#CRT_SIZE
+ (
+CRT_ROWS
+ * 
+CRT_COLS
+)
+
+	)
+
+51 
+	#LPTPORT
+ 0x378
+
+	)
+
+53 
+uöt16_t
+ *
+	g¸t_buf
+;
+
+54 
+uöt16_t
+ 
+	g¸t_pos
+;
+
+55 
+uöt16_t
+ 
+	gaddr_6845
+;
+
+60 
+	$cga_öô
+() {
+
+61 vﬁ©ûê
+uöt16_t
+ *
+˝
+ = (uöt16_à*)(
+CGA_BUF
+ + 
+KERNBASE
+);
+
+62 
+uöt16_t
+ 
+was
+ = *
+˝
+;
+
+63 *
+˝
+ = (
+uöt16_t
+) 0xA55A;
+
+64 i‡(*
+˝
+ != 0xA55A) {
+
+65 
+˝
+ = (
+uöt16_t
+*)(
+MONO_BUF
+ + 
+KERNBASE
+);
+
+66 
+addr_6845
+ = 
+MONO_BASE
+;
+
+68 *
+˝
+ = 
+was
+;
+
+69 
+addr_6845
+ = 
+CGA_BASE
+;
+
+73 
+uöt32_t
+ 
+pos
+;
+
+74 
+	`outb
+(
+addr_6845
+, 14);
+
+75 
+pos
+ = 
+	`öb
+(
+addr_6845
+ + 1) << 8;
+
+76 
+	`outb
+(
+addr_6845
+, 15);
+
+77 
+pos
+ |
+	`öb
+(
+addr_6845
+ + 1);
+
+79 
+¸t_buf
+ = (
+uöt16_t
+*Ë
+˝
+;
+
+80 
+¸t_pos
+ = 
+pos
+;
+
+81 
+	}
+}
+
+83 
+boﬁ
+ 
+	g£rül_exi°s
+ = 0;
+
+86 
+	$£rül_öô
+() {
+
+88 
+	`outb
+(
+COM1
+ + 
+COM_FCR
+, 0);
+
+91 
+	`outb
+(
+COM1
+ + 
+COM_LCR
+, 
+COM_LCR_DLAB
+);
+
+92 
+	`outb
+(
+COM1
+ + 
+COM_DLL
+, (
+uöt8_t
+) (115200 / 9600));
+
+93 
+	`outb
+(
+COM1
+ + 
+COM_DLM
+, 0);
+
+96 
+	`outb
+(
+COM1
+ + 
+COM_LCR
+, 
+COM_LCR_WLEN8
+ & ~
+COM_LCR_DLAB
+);
+
+99 
+	`outb
+(
+COM1
+ + 
+COM_MCR
+, 0);
+
+101 
+	`outb
+(
+COM1
+ + 
+COM_IER
+, 
+COM_IER_RDI
+);
+
+105 
+£rül_exi°s
+ = (
+	`öb
+(
+COM1
+ + 
+COM_LSR
+) != 0xFF);
+
+106 (Ë
+	`öb
+(
+COM1
++
+COM_IIR
+);
+
+107 (Ë
+	`öb
+(
+COM1
++
+COM_RX
+);
+
+109 i‡(
+£rül_exi°s
+) {
+
+110 
+	`pic_íabÀ
+(
+IRQ_COM1
+);
+
+112 
+	}
+}
+
+115 
+	$Õt_putc_sub
+(
+c
+) {
+
+116 
+i
+;
+
+117 
+i
+ = 0; !(
+	`öb
+(
+LPTPORT
+ + 1) & 0x80) && i < 12800; i ++) {
+
+118 
+	`dñay
+();
+
+120 
+	`outb
+(
+LPTPORT
+ + 0, 
+c
+);
+
+121 
+	`outb
+(
+LPTPORT
+ + 2, 0x08 | 0x04 | 0x01);
+
+122 
+	`outb
+(
+LPTPORT
+ + 2, 0x08);
+
+123 
+	}
+}
+
+127 
+	$Õt_putc
+(
+c
+) {
+
+128 i‡(
+c
+ != '\b') {
+
+129 
+	`Õt_putc_sub
+(
+c
+);
+
+132 
+	`Õt_putc_sub
+('\b');
+
+133 
+	`Õt_putc_sub
+(' ');
+
+134 
+	`Õt_putc_sub
+('\b');
+
+136 
+	}
+}
+
+140 
+	$cga_putc
+(
+c
+) {
+
+142 i‡(!(
+c
+ & ~0xFF)) {
+
+143 
+c
+ |= 0x0700;
+
+146 
+c
+ & 0xff) {
+
+148 i‡(
+¸t_pos
+ > 0) {
+
+149 
+¸t_pos
+ --;
+
+150 
+¸t_buf
+[
+¸t_pos
+] = (
+c
+ & ~0xff) | ' ';
+
+154 
+¸t_pos
+ +
+CRT_COLS
+;
+
+156 
+¸t_pos
+ -(¸t_po†% 
+CRT_COLS
+);
+
+159 
+¸t_buf
+[
+¸t_pos
+ ++] = 
+c
+;
+
+164 i‡(
+¸t_pos
+ >
+CRT_SIZE
+) {
+
+165 
+i
+;
+
+166 
+	`memmove
+(
+¸t_buf
+, cπ_bu‡+ 
+CRT_COLS
+, (
+CRT_SIZE
+ - CRT_COLSË* (
+uöt16_t
+));
+
+167 
+i
+ = 
+CRT_SIZE
+ - 
+CRT_COLS
+; i < CRT_SIZE; i ++) {
+
+168 
+¸t_buf
+[
+i
+] = 0x0700 | ' ';
+
+170 
+¸t_pos
+ -
+CRT_COLS
+;
+
+174 
+	`outb
+(
+addr_6845
+, 14);
+
+175 
+	`outb
+(
+addr_6845
+ + 1, 
+¸t_pos
+ >> 8);
+
+176 
+	`outb
+(
+addr_6845
+, 15);
+
+177 
+	`outb
+(
+addr_6845
+ + 1, 
+¸t_pos
+);
+
+178 
+	}
+}
+
+181 
+	$£rül_putc_sub
+(
+c
+) {
+
+182 
+i
+;
+
+183 
+i
+ = 0; !(
+	`öb
+(
+COM1
+ + 
+COM_LSR
+Ë& 
+COM_LSR_TXRDY
+) && i < 12800; i ++) {
+
+184 
+	`dñay
+();
+
+186 
+	`outb
+(
+COM1
+ + 
+COM_TX
+, 
+c
+);
+
+187 
+	}
+}
+
+191 
+	$£rül_putc
+(
+c
+) {
+
+192 i‡(
+c
+ != '\b') {
+
+193 
+	`£rül_putc_sub
+(
+c
+);
+
+196 
+	`£rül_putc_sub
+('\b');
+
+197 
+	`£rül_putc_sub
+(' ');
+
+198 
+	`£rül_putc_sub
+('\b');
+
+200 
+	}
+}
+
+208 
+	#CONSBUFSIZE
+ 512
+
+	)
+
+211 
+uöt8_t
+ 
+	mbuf
+[
+CONSBUFSIZE
+];
+
+212 
+uöt32_t
+ 
+	mΩos
+;
+
+213 
+uöt32_t
+ 
+	mwpos
+;
+
+214 } 
+	gc⁄s
+;
+
+221 
+	$c⁄s_öå
+((*
+¥oc
+)()) {
+
+222 
+c
+;
+
+223 (
+c
+ = (*
+¥oc
+)()) != -1) {
+
+224 i‡(
+c
+ != 0) {
+
+225 
+c⁄s
+.
+buf
+[c⁄s.
+wpos
+ ++] = 
+c
+;
+
+226 i‡(
+c⁄s
+.
+wpos
+ =
+CONSBUFSIZE
+) {
+
+227 
+c⁄s
+.
+wpos
+ = 0;
+
+231 
+	}
+}
+
+235 
+	$£rül_¥oc_d©a
+() {
+
+236 i‡(!(
+	`öb
+(
+COM1
+ + 
+COM_LSR
+Ë& 
+COM_LSR_DATA
+)) {
+
+239 
+c
+ = 
+	`öb
+(
+COM1
+ + 
+COM_RX
+);
+
+240 i‡(
+c
+ == 127) {
+
+241 
+c
+ = '\b';
+
+243  
+c
+;
+
+244 
+	}
+}
+
+248 
+	$£rül_öå
+() {
+
+249 i‡(
+£rül_exi°s
+) {
+
+250 
+	`c⁄s_öå
+(
+£rül_¥oc_d©a
+);
+
+252 
+	}
+}
+
+256 
+	#NO
+ 0
+
+	)
+
+258 
+	#SHIFT
+ (1<<0)
+
+	)
+
+259 
+	#CTL
+ (1<<1)
+
+	)
+
+260 
+	#ALT
+ (1<<2)
+
+	)
+
+262 
+	#CAPSLOCK
+ (1<<3)
+
+	)
+
+263 
+	#NUMLOCK
+ (1<<4)
+
+	)
+
+264 
+	#SCROLLLOCK
+ (1<<5)
+
+	)
+
+266 
+	#E0ESC
+ (1<<6)
+
+	)
+
+268 
+uöt8_t
+ 
+	gshi·code
+[256] = {
+
+269 [0x1D] 
+CTL
+,
+
+270 [0x2A] 
+SHIFT
+,
+
+271 [0x36] 
+SHIFT
+,
+
+272 [0x38] 
+ALT
+,
+
+273 [0x9D] 
+CTL
+,
+
+274 [0xB8] 
+ALT
+
+
+277 
+uöt8_t
+ 
+	gtoggÀcode
+[256] = {
+
+278 [0x3A] 
+CAPSLOCK
+,
+
+279 [0x45] 
+NUMLOCK
+,
+
+280 [0x46] 
+SCROLLLOCK
+
+
+283 
+uöt8_t
+ 
+	gn‹mÆm≠
+[256] = {
+
+284 
+NO
+, 0x1B, '1', '2', '3', '4', '5', '6',
+
+287 'o', 'p', '[', ']', '\n', 
+NO
+, 'a', 's',
+
+289 '\'', '`', 
+NO
+, '\\', 'z', 'x', 'c', 'v',
+
+290 'b', 'n', 'm', ',', '.', '/', 
+NO
+, '*',
+
+291 
+NO
+, ' ', NO, NO, NO, NO, NO, NO,
+
+292 
+NO
+, NO, NO, NO, NO, NO, NO, '7',
+
+294 '2', '3', '0', '.', 
+NO
+, NO, NO, NO,
+
+295 [0xC7] 
+KEY_HOME
+, [0x9C] '\n' ,
+
+296 [0xB5] '/' , [0xC8] 
+KEY_UP
+,
+
+297 [0xC9] 
+KEY_PGUP
+, [0xCB] 
+KEY_LF
+,
+
+298 [0xCD] 
+KEY_RT
+, [0xCF] 
+KEY_END
+,
+
+299 [0xD0] 
+KEY_DN
+, [0xD1] 
+KEY_PGDN
+,
+
+300 [0xD2] 
+KEY_INS
+, [0xD3] 
+KEY_DEL
+
+
+303 
+uöt8_t
+ 
+	gshi·m≠
+[256] = {
+
+304 
+NO
+, 033, '!', '@', '#', '$', '%', '^',
+
+307 'O', 'P', '{', '}', '\n', 
+NO
+, 'A', 'S',
+
+309 '"', '~', 
+NO
+, '|', 'Z', 'X', 'C', 'V',
+
+310 'B', 'N', 'M', '<', '>', '?', 
+NO
+, '*',
+
+311 
+NO
+, ' ', NO, NO, NO, NO, NO, NO,
+
+312 
+NO
+, NO, NO, NO, NO, NO, NO, '7',
+
+314 '2', '3', '0', '.', 
+NO
+, NO, NO, NO,
+
+315 [0xC7] 
+KEY_HOME
+, [0x9C] '\n' ,
+
+316 [0xB5] '/' , [0xC8] 
+KEY_UP
+,
+
+317 [0xC9] 
+KEY_PGUP
+, [0xCB] 
+KEY_LF
+,
+
+318 [0xCD] 
+KEY_RT
+, [0xCF] 
+KEY_END
+,
+
+319 [0xD0] 
+KEY_DN
+, [0xD1] 
+KEY_PGDN
+,
+
+320 [0xD2] 
+KEY_INS
+, [0xD3] 
+KEY_DEL
+
+
+323 
+	#C
+(
+x
+Ë(x - '@')
+
+	)
+
+325 
+uöt8_t
+ 
+	g˘lm≠
+[256] = {
+
+326 
+NO
+, NO, NO, NO, NO, NO, NO, NO,
+
+327 
+NO
+, NO, NO, NO, NO, NO, NO, NO,
+
+328 
+C
+('Q'), C('W'), C('E'), C('R'), C('T'), C('Y'), C('U'), C('I'),
+
+329 
+C
+('O'), C('P'), 
+NO
+, NO, '\r', NO, C('A'), C('S'),
+
+330 
+C
+('D'), C('F'), C('G'), C('H'), C('J'), C('K'), C('L'), 
+NO
+,
+
+331 
+NO
+, NO, NO, 
+C
+('\\'), C('Z'), C('X'), C('C'), C('V'),
+
+332 
+C
+('B'), C('N'), C('M'), 
+NO
+, NO, C('/'), NO, NO,
+
+333 [0x97] 
+KEY_HOME
+,
+
+334 [0xB5] 
+C
+('/'), [0xC8] 
+KEY_UP
+,
+
+335 [0xC9] 
+KEY_PGUP
+, [0xCB] 
+KEY_LF
+,
+
+336 [0xCD] 
+KEY_RT
+, [0xCF] 
+KEY_END
+,
+
+337 [0xD0] 
+KEY_DN
+, [0xD1] 
+KEY_PGDN
+,
+
+338 [0xD2] 
+KEY_INS
+, [0xD3] 
+KEY_DEL
+
+
+341 
+uöt8_t
+ *
+	gch¨code
+[4] = {
+
+342 
+n‹mÆm≠
+,
+
+343 
+shi·m≠
+,
+
+344 
+˘lm≠
+,
+
+345 
+˘lm≠
+
+
+355 
+	$kbd_¥oc_d©a
+() {
+
+356 
+c
+;
+
+357 
+uöt8_t
+ 
+d©a
+;
+
+358 
+uöt32_t
+ 
+shi·
+;
+
+360 i‡((
+	`öb
+(
+KBSTATP
+Ë& 
+KBS_DIB
+) == 0) {
+
+364 
+d©a
+ = 
+	`öb
+(
+KBDATAP
+);
+
+366 i‡(
+d©a
+ == 0xE0) {
+
+368 
+shi·
+ |
+E0ESC
+;
+
+370 } i‡(
+d©a
+ & 0x80) {
+
+372 
+d©a
+ = (
+shi·
+ & 
+E0ESC
+ ? data : data & 0x7F);
+
+373 
+shi·
+ &~(
+shi·code
+[
+d©a
+] | 
+E0ESC
+);
+
+375 } i‡(
+shi·
+ & 
+E0ESC
+) {
+
+377 
+d©a
+ |= 0x80;
+
+378 
+shi·
+ &~
+E0ESC
+;
+
+381 
+shi·
+ |
+shi·code
+[
+d©a
+];
+
+382 
+shi·
+ ^
+toggÀcode
+[
+d©a
+];
+
+384 
+c
+ = 
+ch¨code
+[
+shi·
+ & (
+CTL
+ | 
+SHIFT
+)][
+d©a
+];
+
+385 i‡(
+shi·
+ & 
+CAPSLOCK
+) {
+
+386 i‡('a' <
+c
+ && c <= 'z')
+
+387 
+c
+ += 'A' - 'a';
+
+388 i‡('A' <
+c
+ && c <= 'Z')
+
+389 
+c
+ += 'a' - 'A';
+
+394 i‡(!(~
+shi·
+ & (
+CTL
+ | 
+ALT
+)Ë&& 
+c
+ =
+KEY_DEL
+) {
+
+395 
+	`˝rötf
+("Rebooting!\n");
+
+396 
+	`outb
+(0x92, 0x3);
+
+398  
+c
+;
+
+399 
+	}
+}
+
+403 
+	$kbd_öå
+() {
+
+404 
+	`c⁄s_öå
+(
+kbd_¥oc_d©a
+);
+
+405 
+	}
+}
+
+408 
+	$kbd_öô
+() {
+
+410 
+	`kbd_öå
+();
+
+411 
+	`pic_íabÀ
+(
+IRQ_KBD
+);
+
+412 
+	}
+}
+
+416 
+	$c⁄s_öô
+() {
+
+417 
+	`cga_öô
+();
+
+418 
+	`£rül_öô
+();
+
+419 
+	`kbd_öô
+();
+
+420 i‡(!
+£rül_exi°s
+) {
+
+421 
+	`˝rötf
+("serialÖort doesÇotÉxist!!\n");
+
+423 
+	}
+}
+
+427 
+	$c⁄s_putc
+(
+c
+) {
+
+428 
+boﬁ
+ 
+öå_Êag
+;
+
+429 
+	`loˇl_öå_ßve
+(
+öå_Êag
+);
+
+431 
+	`Õt_putc
+(
+c
+);
+
+432 
+	`cga_putc
+(
+c
+);
+
+433 
+	`£rül_putc
+(
+c
+);
+
+435 
+	`loˇl_öå_ª°‹e
+(
+öå_Êag
+);
+
+436 
+	}
+}
+
+443 
+	$c⁄s_gëc
+() {
+
+444 
+c
+ = 0;
+
+445 
+boﬁ
+ 
+öå_Êag
+;
+
+446 
+	`loˇl_öå_ßve
+(
+öå_Êag
+);
+
+451 
+	`£rül_öå
+();
+
+452 
+	`kbd_öå
+();
+
+455 i‡(
+c⁄s
+.
+Ωos
+ !c⁄s.
+wpos
+) {
+
+456 
+c
+ = 
+c⁄s
+.
+buf
+[c⁄s.
+Ωos
+ ++];
+
+457 i‡(
+c⁄s
+.
+Ωos
+ =
+CONSBUFSIZE
+) {
+
+458 
+c⁄s
+.
+Ωos
+ = 0;
+
+462 
+	`loˇl_öå_ª°‹e
+(
+öå_Êag
+);
+
+463  
+c
+;
+
+464 
+	}
+}
+
+	@kern/driver/console.h
+
+1 #i‚de‡
+__KERN_DRIVER_CONSOLE_H__
+
+
+2 
+	#__KERN_DRIVER_CONSOLE_H__
+
+
+	)
+
+4 
+c⁄s_öô
+();
+
+5 
+c⁄s_putc
+(
+c
+);
+
+6 
+c⁄s_gëc
+();
+
+7 
+£rül_öå
+();
+
+8 
+kbd_öå
+();
+
+	@kern/driver/intr.c
+
+1 
+	~<x86.h
+>
+
+2 
+	~<öå.h
+>
+
+6 
+	$öå_íabÀ
+() {
+
+7 
+	`°i
+();
+
+8 
+	}
+}
+
+12 
+	$öå_dißbÀ
+() {
+
+13 
+	`˛i
+();
+
+14 
+	}
+}
+
+	@kern/driver/intr.h
+
+1 #i‚de‡
+__KERN_DRIVER_INTR_H__
+
+
+2 
+	#__KERN_DRIVER_INTR_H__
+
+
+	)
+
+4 
+öå_íabÀ
+();
+
+5 
+öå_dißbÀ
+();
+
+	@kern/driver/kbdreg.h
+
+1 #i‚de‡
+__KERN_DRIVER_KBDREG_H__
+
+
+2 
+	#__KERN_DRIVER_KBDREG_H__
+
+
+	)
+
+5 
+	#KEY_HOME
+ 0xE0
+
+	)
+
+6 
+	#KEY_END
+ 0xE1
+
+	)
+
+7 
+	#KEY_UP
+ 0xE2
+
+	)
+
+8 
+	#KEY_DN
+ 0xE3
+
+	)
+
+9 
+	#KEY_LF
+ 0xE4
+
+	)
+
+10 
+	#KEY_RT
+ 0xE5
+
+	)
+
+11 
+	#KEY_PGUP
+ 0xE6
+
+	)
+
+12 
+	#KEY_PGDN
+ 0xE7
+
+	)
+
+13 
+	#KEY_INS
+ 0xE8
+
+	)
+
+14 
+	#KEY_DEL
+ 0xE9
+
+	)
+
+19 
+	#KBSTATP
+ 0x64
+
+20 
+	#KBS_DIB
+ 0x01
+
+21 
+	#KBS_IBF
+ 0x02
+
+22 
+	#KBS_WARM
+ 0x04
+
+23 
+	#BS_OCMD
+ 0x08
+
+24 
+	#KBS_NOSEC
+ 0x10
+
+25 
+	#KBS_TERR
+ 0x20
+
+26 
+	#KBS_RERR
+ 0x40
+
+27 
+	#KBS_PERR
+ 0x80
+
+28 
+
+	)
+
+29 
+	#KBCMDP
+ 0x64
+
+30 
+	#KBC_RAMREAD
+ 0x20
+
+31 
+	#KBC_RAMWRITE
+ 0x60
+
+32 
+	#KBC_AUXDISABLE
+ 0xa7
+
+33 
+	#KBC_AUXENABLE
+ 0xa8
+
+34 
+	#KBC_AUXTEST
+ 0xa9
+
+35 
+	#KBC_KBDECHO
+ 0xd2
+
+36 
+	#KBC_AUXECHO
+ 0xd3
+
+37 
+	#KBC_AUXWRITE
+ 0xd4
+
+38 
+	#KBC_SELFTEST
+ 0xaa
+
+39 
+	#KBC_KBDTEST
+ 0xab
+
+40 
+	#KBC_KBDDISABLE
+ 0xad
+
+41 
+	#KBC_KBDENABLE
+ 0xae
+
+42 
+	#KBC_PULSE0
+ 0xfe
+
+43 
+	#KBC_PULSE1
+ 0xfd
+
+44 
+	#KBC_PULSE2
+ 0xfb
+
+45 
+	#KBC_PULSE3
+ 0xf7
+
+46 
+
+	)
+
+47 
+	#KBDATAP
+ 0x60
+
+48 
+	#KBOUTP
+ 0x60
+
+49 
+
+	)
+
+50 
+	#K_RDCMDBYTE
+ 0x20
+
+	)
+
+51 
+	#K_LDCMDBYTE
+ 0x60
+
+	)
+
+53 
+	#KC8_TRANS
+ 0x40
+
+54 
+	#KC8_MDISABLE
+ 0x20
+
+55 
+	#KC8_KDISABLE
+ 0x10
+
+56 
+	#KC8_IGNSEC
+ 0x08
+
+57 
+	#KC8_CPU
+ 0x04
+
+58 
+	#KC8_MENABLE
+ 0x02
+
+59 
+	#KC8_KENABLE
+ 0x01
+
+60 
+	#CMDBYTE
+ (
+KC8_TRANS
+|
+KC8_CPU
+|
+KC8_MENABLE
+|
+KC8_KENABLE
+)
+
+	)
+
+63 
+	#KBC_RESET
+ 0xFF
+
+64 
+	#KBC_RESEND
+ 0xFE
+
+65 
+	#KBC_SETDEFAULT
+ 0xF6
+
+66 
+	#KBC_DISABLE
+ 0xF5
+
+67 
+	#KBC_ENABLE
+ 0xF4
+
+68 
+	#KBC_TYPEMATIC
+ 0xF3
+
+69 
+	#KBC_SETTABLE
+ 0xF0
+
+70 
+	#KBC_MODEIND
+ 0xED
+
+71 
+	#KBC_ECHO
+ 0xEE
+
+72 
+
+	)
+
+74 
+	#KBR_EXTENDED
+ 0xE0
+
+75 
+	#KBR_RESEND
+ 0xFE
+
+76 
+	#KBR_ACK
+ 0xFA
+
+77 
+	#KBR_OVERRUN
+ 0x00
+
+78 
+	#KBR_FAILURE
+ 0xFD
+
+79 
+	#KBR_BREAK
+ 0xF0
+
+80 
+	#KBR_RSTDONE
+ 0xAA
+
+81 
+	#KBR_ECHO
+ 0xEE
+
+82 
+
+	)
+
+	@kern/driver/picirq.c
+
+1 
+	~<defs.h
+>
+
+2 
+	~<x86.h
+>
+
+3 
+	~<picúq.h
+>
+
+6 
+	#IO_PIC1
+ 0x20
+
+7 
+	#IO_PIC2
+ 0xA0
+
+8 
+
+	)
+
+9 
+	#IRQ_SLAVE
+ 2
+
+10 
+
+	)
+
+13 
+uöt16_t
+ 
+	gúq_mask
+ = 0xFFFF & ~(1 << 
+IRQ_SLAVE
+);
+
+14 
+boﬁ
+ 
+	gdid_öô
+ = 0;
+
+17 
+	$pic_£tmask
+(
+uöt16_t
+ 
+mask
+) {
+
+18 
+úq_mask
+ = 
+mask
+;
+
+19 i‡(
+did_öô
+) {
+
+20 
+	`outb
+(
+IO_PIC1
+ + 1, 
+mask
+);
+
+21 
+	`outb
+(
+IO_PIC2
+ + 1, 
+mask
+ >> 8);
+
+23 
+	}
+}
+
+26 
+	$pic_íabÀ
+(
+úq
+) {
+
+27 
+	`pic_£tmask
+(
+úq_mask
+ & ~(1 << 
+úq
+));
+
+28 
+	}
+}
+
+32 
+	$pic_öô
+() {
+
+33 
+did_öô
+ = 1;
+
+36 
+	`outb
+(
+IO_PIC1
+ + 1, 0xFF);
+
+37 
+	`outb
+(
+IO_PIC2
+ + 1, 0xFF);
+
+45 
+	`outb
+(
+IO_PIC1
+, 0x11);
+
+48 
+	`outb
+(
+IO_PIC1
+ + 1, 
+IRQ_OFFSET
+);
+
+52 
+	`outb
+(
+IO_PIC1
+ + 1, 1 << 
+IRQ_SLAVE
+);
+
+62 
+	`outb
+(
+IO_PIC1
+ + 1, 0x3);
+
+65 
+	`outb
+(
+IO_PIC2
+, 0x11);
+
+66 
+	`outb
+(
+IO_PIC2
+ + 1, 
+IRQ_OFFSET
+ + 8);
+
+67 
+	`outb
+(
+IO_PIC2
+ + 1, 
+IRQ_SLAVE
+);
+
+70 
+	`outb
+(
+IO_PIC2
+ + 1, 0x3);
+
+76 
+	`outb
+(
+IO_PIC1
+, 0x68);
+
+77 
+	`outb
+(
+IO_PIC1
+, 0x0a);
+
+79 
+	`outb
+(
+IO_PIC2
+, 0x68);
+
+80 
+	`outb
+(
+IO_PIC2
+, 0x0a);
+
+82 i‡(
+úq_mask
+ != 0xFFFF) {
+
+83 
+	`pic_£tmask
+(
+úq_mask
+);
+
+85 
+	}
+}
+
+	@kern/driver/picirq.h
+
+1 #i‚de‡
+__KERN_DRIVER_PICIRQ_H__
+
+
+2 
+	#__KERN_DRIVER_PICIRQ_H__
+
+
+	)
+
+4 
+pic_öô
+();
+
+5 
+pic_íabÀ
+(
+úq
+);
+
+7 
+	#IRQ_OFFSET
+ 32
+
+	)
+
+	@kern/init/init.c
+
+1 
+	~<defs.h
+>
+
+2 
+	~<°dio.h
+>
+
+3 
+	~<°rög.h
+>
+
+4 
+	~<c⁄sﬁe.h
+>
+
+5 
+	~<kdebug.h
+>
+
+6 
+	~<picúq.h
+>
+
+7 
+	~<å≠.h
+>
+
+8 
+	~<˛ock.h
+>
+
+9 
+	~<öå.h
+>
+
+10 
+	~<pmm.h
+>
+
+11 
+	~<km⁄ô‹.h
+>
+
+13 
+	$kîn_öô
+(Ë
+	`__©åibuã__
+((
+n‹ëu∫
+));
+
+14 
+	`gøde_backåa˚
+();
+
+15 
+	`œb1_swôch_ã°
+();
+
+18 
+	$kîn_öô
+() {
+
+19 
+ed©a
+[], 
+íd
+[];
+
+20 
+	`mem£t
+(
+ed©a
+, 0, 
+íd
+ -Édata);
+
+22 
+	`c⁄s_öô
+();
+
+24 c⁄° *
+mesßge
+ = "(THU.CST) os isÜoading ...";
+
+25 
+	`˝rötf
+("%s\n\n", 
+mesßge
+);
+
+27 
+	`¥öt_kînöfo
+();
+
+29 
+	`gøde_backåa˚
+();
+
+31 
+	`pmm_öô
+();
+
+33 
+	`pic_öô
+();
+
+34 
+	`idt_öô
+();
+
+36 
+	`˛ock_öô
+();
+
+37 
+	`öå_íabÀ
+();
+
+45 
+	}
+}
+
+47 
+__©åibuã__
+((
+noölöe
+))
+
+48 
+	$gøde_backåa˚2
+(
+¨g0
+, 
+¨g1
+, 
+¨g2
+, 
+¨g3
+) {
+
+49 
+	`m⁄_backåa˚
+(0, 
+NULL
+, NULL);
+
+50 
+	}
+}
+
+52 
+__©åibuã__
+((
+noölöe
+))
+
+53 
+	$gøde_backåa˚1
+(
+¨g0
+, 
+¨g1
+) {
+
+54 
+	`gøde_backåa˚2
+(
+¨g0
+, ()&¨g0, 
+¨g1
+, ()&arg1);
+
+55 
+	}
+}
+
+57 
+__©åibuã__
+((
+noölöe
+))
+
+58 
+	$gøde_backåa˚0
+(
+¨g0
+, 
+¨g1
+, 
+¨g2
+) {
+
+59 
+	`gøde_backåa˚1
+(
+¨g0
+, 
+¨g2
+);
+
+60 
+	}
+}
+
+63 
+	$gøde_backåa˚
+() {
+
+64 
+	`gøde_backåa˚0
+(0, ()
+kîn_öô
+, 0xffff0000);
+
+65 
+	}
+}
+
+68 
+	$œb1_¥öt_cur_°©us
+() {
+
+69 
+round
+ = 0;
+
+70 
+uöt16_t
+ 
+ªg1
+, 
+ªg2
+, 
+ªg3
+, 
+ªg4
+;
+
+71 
+asm
+ volatile (
+
+76 : "=m"(
+ªg1
+), "=m"(
+ªg2
+), "=m"(
+ªg3
+), "=m"(
+ªg4
+));
+
+77 
+	`˝rötf
+("%d: @rög %d\n", 
+round
+, 
+ªg1
+ & 3);
+
+78 
+	`˝rötf
+("%d: c†%x\n", 
+round
+, 
+ªg1
+);
+
+79 
+	`˝rötf
+("%d: d†%x\n", 
+round
+, 
+ªg2
+);
+
+80 
+	`˝rötf
+("%d:É†%x\n", 
+round
+, 
+ªg3
+);
+
+81 
+	`˝rötf
+("%d: s†%x\n", 
+round
+, 
+ªg4
+);
+
+82 
+round
+ ++;
+
+83 
+	}
+}
+
+86 
+	$œb1_swôch_to_u£r
+() {
+
+88 
+	}
+}
+
+91 
+	$œb1_swôch_to_kî√l
+() {
+
+93 
+	}
+}
+
+96 
+	$œb1_swôch_ã°
+() {
+
+97 
+	`œb1_¥öt_cur_°©us
+();
+
+98 
+	`˝rötf
+("+++ switchÅo user mode +++\n");
+
+99 
+	`œb1_swôch_to_u£r
+();
+
+100 
+	`œb1_¥öt_cur_°©us
+();
+
+101 
+	`˝rötf
+("+++ switchÅo kernel mode +++\n");
+
+102 
+	`œb1_swôch_to_kî√l
+();
+
+103 
+	`œb1_¥öt_cur_°©us
+();
+
+104 
+	}
+}
+
+	@kern/libs/readline.c
+
+1 
+	~<°dio.h
+>
+
+3 
+	#BUFSIZE
+ 1024
+
+	)
+
+4 
+	gbuf
+[
+BUFSIZE
+];
+
+25 
+	$ªadlöe
+(c⁄° *
+¥om±
+) {
+
+26 i‡(
+¥om±
+ !
+NULL
+) {
+
+27 
+	`˝rötf
+("%s", 
+¥om±
+);
+
+29 
+i
+ = 0, 
+c
+;
+
+31 
+c
+ = 
+	`gëch¨
+();
+
+32 i‡(
+c
+ < 0) {
+
+33  
+NULL
+;
+
+35 i‡(
+c
+ >' ' && 
+i
+ < 
+BUFSIZE
+ - 1) {
+
+36 
+	`˝utch¨
+(
+c
+);
+
+37 
+buf
+[
+i
+ ++] = 
+c
+;
+
+39 i‡(
+c
+ ='\b' && 
+i
+ > 0) {
+
+40 
+	`˝utch¨
+(
+c
+);
+
+41 
+i
+ --;
+
+43 i‡(
+c
+ == '\n' || c == '\r') {
+
+44 
+	`˝utch¨
+(
+c
+);
+
+45 
+buf
+[
+i
+] = '\0';
+
+46  
+buf
+;
+
+49 
+	}
+}
+
+	@kern/libs/stdio.c
+
+1 
+	~<defs.h
+>
+
+2 
+	~<°dio.h
+>
+
+3 
+	~<c⁄sﬁe.h
+>
+
+12 
+	$˝utch
+(
+c
+, *
+˙t
+) {
+
+13 
+	`c⁄s_putc
+(
+c
+);
+
+14 (*
+˙t
+) ++;
+
+15 
+	}
+}
+
+27 
+	$v˝rötf
+(c⁄° *
+fmt
+, 
+va_li°
+ 
+≠
+) {
+
+28 
+˙t
+ = 0;
+
+29 
+	`v¥ötfmt
+((*)
+˝utch
+, &
+˙t
+, 
+fmt
+, 
+≠
+);
+
+30  
+˙t
+;
+
+31 
+	}
+}
+
+40 
+	$˝rötf
+(c⁄° *
+fmt
+, ...) {
+
+41 
+va_li°
+ 
+≠
+;
+
+42 
+˙t
+;
+
+43 
+	`va_°¨t
+(
+≠
+, 
+fmt
+);
+
+44 
+˙t
+ = 
+	`v˝rötf
+(
+fmt
+, 
+≠
+);
+
+45 
+	`va_íd
+(
+≠
+);
+
+46  
+˙t
+;
+
+47 
+	}
+}
+
+51 
+	$˝utch¨
+(
+c
+) {
+
+52 
+	`c⁄s_putc
+(
+c
+);
+
+53 
+	}
+}
+
+60 
+	$˝uts
+(c⁄° *
+°r
+) {
+
+61 
+˙t
+ = 0;
+
+62 
+c
+;
+
+63 (
+c
+ = *
+°r
+ ++) != '\0') {
+
+64 
+	`˝utch
+(
+c
+, &
+˙t
+);
+
+66 
+	`˝utch
+('\n', &
+˙t
+);
+
+67  
+˙t
+;
+
+68 
+	}
+}
+
+72 
+	$gëch¨
+() {
+
+73 
+c
+;
+
+74 (
+c
+ = 
+	`c⁄s_gëc
+()) == 0)
+
+76  
+c
+;
+
+77 
+	}
+}
+
+	@kern/mm/default_pmm.c
+
+1 
+	~<pmm.h
+>
+
+2 
+	~<li°.h
+>
+
+3 
+	~<°rög.h
+>
+
+4 
+	~<deÁu…_pmm.h
+>
+
+57 
+‰ì_¨ó_t
+ 
+	g‰ì_¨ó
+;
+
+59 
+	#‰ì_li°
+ (
+‰ì_¨ó
+.
+‰ì_li°
+)
+
+	)
+
+60 
+	#ƒ_‰ì
+ (
+‰ì_¨ó
+.
+ƒ_‰ì
+)
+
+	)
+
+63 
+	$deÁu…_öô
+() {
+
+64 
+	`li°_öô
+(&
+‰ì_li°
+);
+
+65 
+ƒ_‰ì
+ = 0;
+
+66 
+	}
+}
+
+69 
+	$deÁu…_öô_memm≠
+(
+Page
+ *
+ba£
+, 
+size_t
+ 
+n
+) {
+
+70 
+	`as£π
+(
+n
+ > 0);
+
+71 
+Page
+ *
+p
+ = 
+ba£
+;
+
+72 ; 
+p
+ !
+ba£
+ + 
+n
+;Ö ++) {
+
+73 
+	`as£π
+(
+	`PageRe£rved
+(
+p
+));
+
+74 
+p
+->
+Êags
+ =Ö->
+¥›îty
+ = 0;
+
+75 
+	`£t_∑ge_ªf
+(
+p
+, 0);
+
+77 
+ba£
+->
+¥›îty
+ = 
+n
+;
+
+78 
+	`SëPagePr›îty
+(
+ba£
+);
+
+79 
+ƒ_‰ì
+ +
+n
+;
+
+80 
+	`li°_add
+(&
+‰ì_li°
+, &(
+ba£
+->
+∑ge_lök
+));
+
+81 
+	}
+}
+
+83 
+Page
+ *
+
+84 
+	$deÁu…_Æloc_∑ges
+(
+size_t
+ 
+n
+) {
+
+85 
+	`as£π
+(
+n
+ > 0);
+
+86 i‡(
+n
+ > 
+ƒ_‰ì
+) {
+
+87  
+NULL
+;
+
+89 
+Page
+ *
+∑ge
+ = 
+NULL
+;
+
+90 
+li°_íåy_t
+ *
+À
+ = &
+‰ì_li°
+;
+
+91 (
+À
+ = 
+	`li°_√xt
+÷e)Ë!&
+‰ì_li°
+) {
+
+92 
+Page
+ *
+p
+ = 
+	`À2∑ge
+(
+À
+, 
+∑ge_lök
+);
+
+93 i‡(
+p
+->
+¥›îty
+ >
+n
+) {
+
+94 
+∑ge
+ = 
+p
+;
+
+98 i‡(
+∑ge
+ !
+NULL
+) {
+
+99 
+	`li°_dñ
+(&(
+∑ge
+->
+∑ge_lök
+));
+
+100 i‡(
+∑ge
+->
+¥›îty
+ > 
+n
+) {
+
+101 
+Page
+ *
+p
+ = 
+∑ge
+ + 
+n
+;
+
+102 
+p
+->
+¥›îty
+ = 
+∑ge
+->¥›îty - 
+n
+;
+
+103 
+	`li°_add
+(&
+‰ì_li°
+, &(
+p
+->
+∑ge_lök
+));
+
+105 
+ƒ_‰ì
+ -
+n
+;
+
+106 
+	`CÀ¨PagePr›îty
+(
+∑ge
+);
+
+108  
+∑ge
+;
+
+109 
+	}
+}
+
+112 
+	$deÁu…_‰ì_∑ges
+(
+Page
+ *
+ba£
+, 
+size_t
+ 
+n
+) {
+
+113 
+	`as£π
+(
+n
+ > 0);
+
+114 
+Page
+ *
+p
+ = 
+ba£
+;
+
+115 ; 
+p
+ !
+ba£
+ + 
+n
+;Ö ++) {
+
+116 
+	`as£π
+(!
+	`PageRe£rved
+(
+p
+Ë&& !
+	`PagePr›îty
+(p));
+
+117 
+p
+->
+Êags
+ = 0;
+
+118 
+	`£t_∑ge_ªf
+(
+p
+, 0);
+
+120 
+ba£
+->
+¥›îty
+ = 
+n
+;
+
+121 
+	`SëPagePr›îty
+(
+ba£
+);
+
+122 
+li°_íåy_t
+ *
+À
+ = 
+	`li°_√xt
+(&
+‰ì_li°
+);
+
+123 
+À
+ !&
+‰ì_li°
+) {
+
+124 
+p
+ = 
+	`À2∑ge
+(
+À
+, 
+∑ge_lök
+);
+
+125 
+À
+ = 
+	`li°_√xt
+(le);
+
+126 i‡(
+ba£
+ + ba£->
+¥›îty
+ =
+p
+) {
+
+127 
+ba£
+->
+¥›îty
+ +
+p
+->property;
+
+128 
+	`CÀ¨PagePr›îty
+(
+p
+);
+
+129 
+	`li°_dñ
+(&(
+p
+->
+∑ge_lök
+));
+
+131 i‡(
+p
+ +Ö->
+¥›îty
+ =
+ba£
+) {
+
+132 
+p
+->
+¥›îty
+ +
+ba£
+->property;
+
+133 
+	`CÀ¨PagePr›îty
+(
+ba£
+);
+
+134 
+ba£
+ = 
+p
+;
+
+135 
+	`li°_dñ
+(&(
+p
+->
+∑ge_lök
+));
+
+138 
+ƒ_‰ì
+ +
+n
+;
+
+139 
+	`li°_add
+(&
+‰ì_li°
+, &(
+ba£
+->
+∑ge_lök
+));
+
+140 
+	}
+}
+
+142 
+size_t
+
+
+143 
+	$deÁu…_ƒ_‰ì_∑ges
+() {
+
+144  
+ƒ_‰ì
+;
+
+145 
+	}
+}
+
+148 
+	$basic_check
+() {
+
+149 
+Page
+ *
+p0
+, *
+p1
+, *
+p2
+;
+
+150 
+p0
+ = 
+p1
+ = 
+p2
+ = 
+NULL
+;
+
+151 
+	`as£π
+((
+p0
+ = 
+	`Æloc_∑ge
+()Ë!
+NULL
+);
+
+152 
+	`as£π
+((
+p1
+ = 
+	`Æloc_∑ge
+()Ë!
+NULL
+);
+
+153 
+	`as£π
+((
+p2
+ = 
+	`Æloc_∑ge
+()Ë!
+NULL
+);
+
+155 
+	`as£π
+(
+p0
+ !
+p1
+ &&Ö0 !
+p2
+ &&Ö1 !=Ö2);
+
+156 
+	`as£π
+(
+	`∑ge_ªf
+(
+p0
+Ë=0 &&Öage_ªf(
+p1
+Ë=0 &&Öage_ªf(
+p2
+) == 0);
+
+158 
+	`as£π
+(
+	`∑ge2∑
+(
+p0
+Ë< 
+≈age
+ * 
+PGSIZE
+);
+
+159 
+	`as£π
+(
+	`∑ge2∑
+(
+p1
+Ë< 
+≈age
+ * 
+PGSIZE
+);
+
+160 
+	`as£π
+(
+	`∑ge2∑
+(
+p2
+Ë< 
+≈age
+ * 
+PGSIZE
+);
+
+162 
+li°_íåy_t
+ 
+‰ì_li°_°‹e
+ = 
+‰ì_li°
+;
+
+163 
+	`li°_öô
+(&
+‰ì_li°
+);
+
+164 
+	`as£π
+(
+	`li°_em±y
+(&
+‰ì_li°
+));
+
+166 
+ƒ_‰ì_°‹e
+ = 
+ƒ_‰ì
+;
+
+167 
+ƒ_‰ì
+ = 0;
+
+169 
+	`as£π
+(
+	`Æloc_∑ge
+(Ë=
+NULL
+);
+
+171 
+	`‰ì_∑ge
+(
+p0
+);
+
+172 
+	`‰ì_∑ge
+(
+p1
+);
+
+173 
+	`‰ì_∑ge
+(
+p2
+);
+
+174 
+	`as£π
+(
+ƒ_‰ì
+ == 3);
+
+176 
+	`as£π
+((
+p0
+ = 
+	`Æloc_∑ge
+()Ë!
+NULL
+);
+
+177 
+	`as£π
+((
+p1
+ = 
+	`Æloc_∑ge
+()Ë!
+NULL
+);
+
+178 
+	`as£π
+((
+p2
+ = 
+	`Æloc_∑ge
+()Ë!
+NULL
+);
+
+180 
+	`as£π
+(
+	`Æloc_∑ge
+(Ë=
+NULL
+);
+
+182 
+	`‰ì_∑ge
+(
+p0
+);
+
+183 
+	`as£π
+(!
+	`li°_em±y
+(&
+‰ì_li°
+));
+
+185 
+Page
+ *
+p
+;
+
+186 
+	`as£π
+((
+p
+ = 
+	`Æloc_∑ge
+()Ë=
+p0
+);
+
+187 
+	`as£π
+(
+	`Æloc_∑ge
+(Ë=
+NULL
+);
+
+189 
+	`as£π
+(
+ƒ_‰ì
+ == 0);
+
+190 
+‰ì_li°
+ = 
+‰ì_li°_°‹e
+;
+
+191 
+ƒ_‰ì
+ = 
+ƒ_‰ì_°‹e
+;
+
+193 
+	`‰ì_∑ge
+(
+p
+);
+
+194 
+	`‰ì_∑ge
+(
+p1
+);
+
+195 
+	`‰ì_∑ge
+(
+p2
+);
+
+196 
+	}
+}
+
+201 
+	$deÁu…_check
+() {
+
+202 
+cou¡
+ = 0, 
+tŸÆ
+ = 0;
+
+203 
+li°_íåy_t
+ *
+À
+ = &
+‰ì_li°
+;
+
+204 (
+À
+ = 
+	`li°_√xt
+÷e)Ë!&
+‰ì_li°
+) {
+
+205 
+Page
+ *
+p
+ = 
+	`À2∑ge
+(
+À
+, 
+∑ge_lök
+);
+
+206 
+	`as£π
+(
+	`PagePr›îty
+(
+p
+));
+
+207 
+cou¡
+ ++, 
+tŸÆ
+ +
+p
+->
+¥›îty
+;
+
+209 
+	`as£π
+(
+tŸÆ
+ =
+	`ƒ_‰ì_∑ges
+());
+
+211 
+	`basic_check
+();
+
+213 
+Page
+ *
+p0
+ = 
+	`Æloc_∑ges
+(5), *
+p1
+, *
+p2
+;
+
+214 
+	`as£π
+(
+p0
+ !
+NULL
+);
+
+215 
+	`as£π
+(!
+	`PagePr›îty
+(
+p0
+));
+
+217 
+li°_íåy_t
+ 
+‰ì_li°_°‹e
+ = 
+‰ì_li°
+;
+
+218 
+	`li°_öô
+(&
+‰ì_li°
+);
+
+219 
+	`as£π
+(
+	`li°_em±y
+(&
+‰ì_li°
+));
+
+220 
+	`as£π
+(
+	`Æloc_∑ge
+(Ë=
+NULL
+);
+
+222 
+ƒ_‰ì_°‹e
+ = 
+ƒ_‰ì
+;
+
+223 
+ƒ_‰ì
+ = 0;
+
+225 
+	`‰ì_∑ges
+(
+p0
+ + 2, 3);
+
+226 
+	`as£π
+(
+	`Æloc_∑ges
+(4Ë=
+NULL
+);
+
+227 
+	`as£π
+(
+	`PagePr›îty
+(
+p0
+ + 2Ë&&Ö0[2].
+¥›îty
+ == 3);
+
+228 
+	`as£π
+((
+p1
+ = 
+	`Æloc_∑ges
+(3)Ë!
+NULL
+);
+
+229 
+	`as£π
+(
+	`Æloc_∑ge
+(Ë=
+NULL
+);
+
+230 
+	`as£π
+(
+p0
+ + 2 =
+p1
+);
+
+232 
+p2
+ = 
+p0
+ + 1;
+
+233 
+	`‰ì_∑ge
+(
+p0
+);
+
+234 
+	`‰ì_∑ges
+(
+p1
+, 3);
+
+235 
+	`as£π
+(
+	`PagePr›îty
+(
+p0
+Ë&&Ö0->
+¥›îty
+ == 1);
+
+236 
+	`as£π
+(
+	`PagePr›îty
+(
+p1
+Ë&&Ö1->
+¥›îty
+ == 3);
+
+238 
+	`as£π
+((
+p0
+ = 
+	`Æloc_∑ge
+()Ë=
+p2
+ - 1);
+
+239 
+	`‰ì_∑ge
+(
+p0
+);
+
+240 
+	`as£π
+((
+p0
+ = 
+	`Æloc_∑ges
+(2)Ë=
+p2
+ + 1);
+
+242 
+	`‰ì_∑ges
+(
+p0
+, 2);
+
+243 
+	`‰ì_∑ge
+(
+p2
+);
+
+245 
+	`as£π
+((
+p0
+ = 
+	`Æloc_∑ges
+(5)Ë!
+NULL
+);
+
+246 
+	`as£π
+(
+	`Æloc_∑ge
+(Ë=
+NULL
+);
+
+248 
+	`as£π
+(
+ƒ_‰ì
+ == 0);
+
+249 
+ƒ_‰ì
+ = 
+ƒ_‰ì_°‹e
+;
+
+251 
+‰ì_li°
+ = 
+‰ì_li°_°‹e
+;
+
+252 
+	`‰ì_∑ges
+(
+p0
+, 5);
+
+254 
+À
+ = &
+‰ì_li°
+;
+
+255 (
+À
+ = 
+	`li°_√xt
+÷e)Ë!&
+‰ì_li°
+) {
+
+256 
+Page
+ *
+p
+ = 
+	`À2∑ge
+(
+À
+, 
+∑ge_lök
+);
+
+257 
+cou¡
+ --, 
+tŸÆ
+ -
+p
+->
+¥›îty
+;
+
+259 
+	`as£π
+(
+cou¡
+ == 0);
+
+260 
+	`as£π
+(
+tŸÆ
+ == 0);
+
+261 
+	}
+}
+
+263 c⁄° 
+pmm_m™agî
+ 
+	gdeÁu…_pmm_m™agî
+ = {
+
+264 .
+«me
+ = "default_pmm_manager",
+
+265 .
+	göô
+ = 
+deÁu…_öô
+,
+
+266 .
+	göô_memm≠
+ = 
+deÁu…_öô_memm≠
+,
+
+267 .
+	gÆloc_∑ges
+ = 
+deÁu…_Æloc_∑ges
+,
+
+268 .
+	g‰ì_∑ges
+ = 
+deÁu…_‰ì_∑ges
+,
+
+269 .
+	gƒ_‰ì_∑ges
+ = 
+deÁu…_ƒ_‰ì_∑ges
+,
+
+270 .
+	gcheck
+ = 
+deÁu…_check
+,
+
+	@kern/mm/default_pmm.h
+
+1 #i‚de‡
+__KERN_MM_DEFAULT_PMM_H__
+
+
+2 
+	#__KERN_MM_DEFAULT_PMM_H__
+
+
+	)
+
+4 
+	~<pmm.h
+>
+
+6 c⁄° 
+pmm_m™agî
+ 
+deÁu…_pmm_m™agî
+;
+
+	@kern/mm/memlayout.h
+
+1 #i‚de‡
+__KERN_MM_MEMLAYOUT_H__
+
+
+2 
+	#__KERN_MM_MEMLAYOUT_H__
+
+
+	)
+
+7 
+	#SEG_KTEXT
+ 1
+
+	)
+
+8 
+	#SEG_KDATA
+ 2
+
+	)
+
+9 
+	#SEG_UTEXT
+ 3
+
+	)
+
+10 
+	#SEG_UDATA
+ 4
+
+	)
+
+11 
+	#SEG_TSS
+ 5
+
+	)
+
+14 
+	#GD_KTEXT
+ ((
+SEG_KTEXT
+) << 3)
+
+15 
+	#GD_KDATA
+ ((
+SEG_KDATA
+) << 3)
+
+16 
+	#GD_UTEXT
+ ((
+SEG_UTEXT
+) << 3)
+
+17 
+	#GD_UDATA
+ ((
+SEG_UDATA
+) << 3)
+
+18 
+	#GD_TSS
+ ((
+SEG_TSS
+) << 3)
+
+19 
+
+	)
+
+20 
+	#DPL_KERNEL
+ (0)
+
+	)
+
+21 
+	#DPL_USER
+ (3)
+
+	)
+
+23 
+	#KERNEL_CS
+ ((
+GD_KTEXT
+Ë| 
+DPL_KERNEL
+)
+
+	)
+
+24 
+	#KERNEL_DS
+ ((
+GD_KDATA
+Ë| 
+DPL_KERNEL
+)
+
+	)
+
+25 
+	#USER_CS
+ ((
+GD_UTEXT
+Ë| 
+DPL_USER
+)
+
+	)
+
+26 
+	#USER_DS
+ ((
+GD_UDATA
+Ë| 
+DPL_USER
+)
+
+	)
+
+56 
+	#KERNBASE
+ 0xC0000000
+
+	)
+
+57 
+	#KMEMSIZE
+ 0x38000000
+
+58 
+	#KERNTOP
+ (
+KERNBASE
+ + 
+KMEMSIZE
+)
+
+	)
+
+66 
+	#VPT
+ 0xFAC00000
+
+	)
+
+68 
+	#KSTACKPAGE
+ 2
+
+69 
+	#KSTACKSIZE
+ (
+KSTACKPAGE
+ * 
+PGSIZE
+)
+
+70 
+
+	)
+
+71 #i‚de‡
+__ASSEMBLER__
+
+
+73 
+	~<defs.h
+>
+
+74 
+	~<©omic.h
+>
+
+75 
+	~<li°.h
+>
+
+77 
+uöçå_t
+ 
+	t±e_t
+;
+
+78 
+uöçå_t
+ 
+	tpde_t
+;
+
+81 
+	#E820MAX
+ 20
+
+82 
+	#E820_ARM
+ 1
+
+83 
+	#E820_ARR
+ 2
+
+84 
+
+	)
+
+85 
+	se820m≠
+ {
+
+86 
+	mƒ_m≠
+;
+
+88 
+uöt64_t
+ 
+	maddr
+;
+
+89 
+uöt64_t
+ 
+	msize
+;
+
+90 
+uöt32_t
+ 
+	mty≥
+;
+
+91 } 
+__©åibuã__
+((
+∑cked
+)Ë
+	mm≠
+[
+E820MAX
+];
+
+99 
+	sPage
+ {
+
+100 
+	mªf
+;
+
+101 
+uöt32_t
+ 
+	mÊags
+;
+
+102 
+	m¥›îty
+;
+
+103 
+li°_íåy_t
+ 
+	m∑ge_lök
+;
+
+107 
+	#PG_ª£rved
+ 0
+
+108 
+	#PG_¥›îty
+ 1
+
+109 
+
+	)
+
+110 
+	#SëPageRe£rved
+(
+∑ge
+Ë
+	`£t_bô
+(
+PG_ª£rved
+, &(’age)->
+Êags
+))
+
+	)
+
+111 
+	#CÀ¨PageRe£rved
+(
+∑ge
+Ë
+	`˛ór_bô
+(
+PG_ª£rved
+, &(’age)->
+Êags
+))
+
+	)
+
+112 
+	#PageRe£rved
+(
+∑ge
+Ë
+	`ã°_bô
+(
+PG_ª£rved
+, &(’age)->
+Êags
+))
+
+	)
+
+113 
+	#SëPagePr›îty
+(
+∑ge
+Ë
+	`£t_bô
+(
+PG_¥›îty
+, &(’age)->
+Êags
+))
+
+	)
+
+114 
+	#CÀ¨PagePr›îty
+(
+∑ge
+Ë
+	`˛ór_bô
+(
+PG_¥›îty
+, &(’age)->
+Êags
+))
+
+	)
+
+115 
+	#PagePr›îty
+(
+∑ge
+Ë
+	`ã°_bô
+(
+PG_¥›îty
+, &(’age)->
+Êags
+))
+
+	)
+
+118 
+	#À2∑ge
+(
+À
+, 
+membî
+) \
+
+119 
+	`to_°ru˘
+((
+À
+), 
+Page
+, 
+membî
+)
+
+	)
+
+123 
+li°_íåy_t
+ 
+	m‰ì_li°
+;
+
+124 
+	mƒ_‰ì
+;
+
+125 } 
+	t‰ì_¨ó_t
+;
+
+	@kern/mm/mmu.h
+
+1 #i‚de‡
+__KERN_MM_MMU_H__
+
+
+2 
+	#__KERN_MM_MMU_H__
+
+
+	)
+
+5 
+	#FL_CF
+ 0x00000001
+
+6 
+	#FL_PF
+ 0x00000004
+
+7 
+	#FL_AF
+ 0x00000010
+
+8 
+	#FL_ZF
+ 0x00000040
+
+9 
+	#FL_SF
+ 0x00000080
+
+10 
+	#FL_TF
+ 0x00000100
+
+11 
+	#FL_IF
+ 0x00000200
+
+12 
+	#FL_DF
+ 0x00000400
+
+13 
+	#FL_OF
+ 0x00000800
+
+14 
+	#FL_IOPL_MASK
+ 0x00003000
+
+15 
+	#FL_IOPL_0
+ 0x00000000
+
+16 
+	#FL_IOPL_1
+ 0x00001000
+
+17 
+	#FL_IOPL_2
+ 0x00002000
+
+18 
+	#FL_IOPL_3
+ 0x00003000
+
+19 
+	#FL_NT
+ 0x00004000
+
+20 
+	#FL_RF
+ 0x00010000
+
+21 
+	#FL_VM
+ 0x00020000
+
+22 
+	#FL_AC
+ 0x00040000
+
+23 
+	#FL_VIF
+ 0x00080000
+
+24 
+	#FL_VIP
+ 0x00100000
+
+25 
+	#FL_ID
+ 0x00200000
+
+26 
+
+	)
+
+28 
+	#STA_X
+ 0x8
+
+29 
+	#STA_E
+ 0x4
+
+30 
+	#STA_C
+ 0x4
+
+31 
+	#STA_W
+ 0x2
+
+32 
+	#STA_R
+ 0x2
+
+33 
+	#STA_A
+ 0x1
+
+34 
+
+	)
+
+36 
+	#STS_T16A
+ 0x1
+
+37 
+	#STS_LDT
+ 0x2
+
+38 
+	#STS_T16B
+ 0x3
+
+39 
+	#STS_CG16
+ 0x4
+
+40 
+	#STS_TG
+ 0x5
+
+41 
+	#STS_IG16
+ 0x6
+
+42 
+	#STS_TG16
+ 0x7
+
+43 
+	#STS_T32A
+ 0x9
+
+44 
+	#STS_T32B
+ 0xB
+
+45 
+	#STS_CG32
+ 0xC
+
+46 
+	#STS_IG32
+ 0xE
+
+47 
+	#STS_TG32
+ 0xF
+
+48 
+
+	)
+
+49 #ifde‡
+__ASSEMBLER__
+
+
+51 
+	#SEG_NULL
+ \
+
+52 .
+w‹d
+ 0, 0; \
+
+53 .
+byã
+ 0, 0, 0, 0
+
+	)
+
+55 
+	#SEG_ASM
+(
+ty≥
+,
+ba£
+,
+lim
+) \
+
+56 .
+	`w‹d
+ (((
+lim
+Ë>> 12Ë& 0xffff), ((
+ba£
+) & 0xffff); \
+
+57 .
+	`byã
+ (((
+ba£
+Ë>> 16Ë& 0xff), (0x90 | (
+ty≥
+)), \
+
+58 (0xC0 | (((
+lim
+Ë>> 28Ë& 0xf)), (((
+ba£
+Ë>> 24Ë& 0xff)
+
+	)
+
+62 
+	~<defs.h
+>
+
+65 
+	sg©edesc
+ {
+
+66 
+	mgd_off_15_0
+ : 16;
+
+67 
+	mgd_ss
+ : 16;
+
+68 
+	mgd_¨gs
+ : 5;
+
+69 
+	mgd_rsv1
+ : 3;
+
+70 
+	mgd_ty≥
+ : 4;
+
+71 
+	mgd_s
+ : 1;
+
+72 
+	mgd_d∂
+ : 2;
+
+73 
+	mgd_p
+ : 1;
+
+74 
+	mgd_off_31_16
+ : 16;
+
+86 
+	#SETGATE
+(
+g©e
+, 
+i°øp
+, 
+£l
+, 
+off
+, 
+d∂
+) { \
+
+87 (
+g©e
+).
+gd_off_15_0
+ = (
+uöt32_t
+)(
+off
+) & 0xffff; \
+
+88 (
+g©e
+).
+gd_ss
+ = (
+£l
+); \
+
+89 (
+g©e
+).
+gd_¨gs
+ = 0; \
+
+90 (
+g©e
+).
+gd_rsv1
+ = 0; \
+
+91 (
+g©e
+).
+gd_ty≥
+ = (
+i°øp
+Ë? 
+STS_TG32
+ : 
+STS_IG32
+; \
+
+92 (
+g©e
+).
+gd_s
+ = 0; \
+
+93 (
+g©e
+).
+gd_d∂
+ = (
+d∂
+); \
+
+94 (
+g©e
+).
+gd_p
+ = 1; \
+
+95 (
+g©e
+).
+gd_off_31_16
+ = (
+uöt32_t
+)(
+off
+) >> 16; \
+
+96 }
+
+	)
+
+99 
+	#SETCALLGATE
+(
+g©e
+, 
+ss
+, 
+off
+, 
+d∂
+) { \
+
+100 (
+g©e
+).
+gd_off_15_0
+ = (
+uöt32_t
+)(
+off
+) & 0xffff; \
+
+101 (
+g©e
+).
+gd_ss
+ = (
+ss
+); \
+
+102 (
+g©e
+).
+gd_¨gs
+ = 0; \
+
+103 (
+g©e
+).
+gd_rsv1
+ = 0; \
+
+104 (
+g©e
+).
+gd_ty≥
+ = 
+STS_CG32
+; \
+
+105 (
+g©e
+).
+gd_s
+ = 0; \
+
+106 (
+g©e
+).
+gd_d∂
+ = (
+d∂
+); \
+
+107 (
+g©e
+).
+gd_p
+ = 1; \
+
+108 (
+g©e
+).
+gd_off_31_16
+ = (
+uöt32_t
+)(
+off
+) >> 16; \
+
+109 }
+
+	)
+
+112 
+	s£gdesc
+ {
+
+113 
+	msd_lim_15_0
+ : 16;
+
+114 
+	msd_ba£_15_0
+ : 16;
+
+115 
+	msd_ba£_23_16
+ : 8;
+
+116 
+	msd_ty≥
+ : 4;
+
+117 
+	msd_s
+ : 1;
+
+118 
+	msd_d∂
+ : 2;
+
+119 
+	msd_p
+ : 1;
+
+120 
+	msd_lim_19_16
+ : 4;
+
+121 
+	msd_avl
+ : 1;
+
+122 
+	msd_rsv1
+ : 1;
+
+123 
+	msd_db
+ : 1;
+
+124 
+	msd_g
+ : 1;
+
+125 
+	msd_ba£_31_24
+ : 8;
+
+128 
+	#SEG_NULL
+ \
+
+129 (
+£gdesc
+Ë{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
+
+	)
+
+131 
+	#SEG
+(
+ty≥
+, 
+ba£
+, 
+lim
+, 
+d∂
+) \
+
+132 (
+£gdesc
+) { \
+
+133 ((
+lim
+Ë>> 12Ë& 0xffff, (
+ba£
+) & 0xffff, \
+
+134 ((
+ba£
+Ë>> 16Ë& 0xff, 
+ty≥
+, 1, 
+d∂
+, 1, \
+
+135 ()(
+lim
+) >> 28, 0, 0, 1, 1, \
+
+136 (Ë(
+ba£
+) >> 24 \
+
+137 }
+
+	)
+
+139 
+	#SEGTSS
+(
+ty≥
+, 
+ba£
+, 
+lim
+, 
+d∂
+) \
+
+140 (
+£gdesc
+) { \
+
+141 (
+lim
+Ë& 0xffff, (
+ba£
+) & 0xffff, \
+
+142 ((
+ba£
+Ë>> 16Ë& 0xff, 
+ty≥
+, 0, 
+d∂
+, 1, \
+
+143 (Ë(
+lim
+) >> 16, 0, 0, 1, 0, \
+
+144 (Ë(
+ba£
+) >> 24 \
+
+145 }
+
+	)
+
+148 
+	sèsk°©e
+ {
+
+149 
+uöt32_t
+ 
+	mts_lök
+;
+
+150 
+uöçå_t
+ 
+	mts_e•0
+;
+
+151 
+uöt16_t
+ 
+	mts_ss0
+;
+
+152 
+uöt16_t
+ 
+	mts_∑ddög1
+;
+
+153 
+uöçå_t
+ 
+	mts_e•1
+;
+
+154 
+uöt16_t
+ 
+	mts_ss1
+;
+
+155 
+uöt16_t
+ 
+	mts_∑ddög2
+;
+
+156 
+uöçå_t
+ 
+	mts_e•2
+;
+
+157 
+uöt16_t
+ 
+	mts_ss2
+;
+
+158 
+uöt16_t
+ 
+	mts_∑ddög3
+;
+
+159 
+uöçå_t
+ 
+	mts_¸3
+;
+
+160 
+uöçå_t
+ 
+	mts_eù
+;
+
+161 
+uöt32_t
+ 
+	mts_eÊags
+;
+
+162 
+uöt32_t
+ 
+	mts_óx
+;
+
+163 
+uöt32_t
+ 
+	mts_ecx
+;
+
+164 
+uöt32_t
+ 
+	mts_edx
+;
+
+165 
+uöt32_t
+ 
+	mts_ebx
+;
+
+166 
+uöçå_t
+ 
+	mts_e•
+;
+
+167 
+uöçå_t
+ 
+	mts_ebp
+;
+
+168 
+uöt32_t
+ 
+	mts_esi
+;
+
+169 
+uöt32_t
+ 
+	mts_edi
+;
+
+170 
+uöt16_t
+ 
+	mts_es
+;
+
+171 
+uöt16_t
+ 
+	mts_∑ddög4
+;
+
+172 
+uöt16_t
+ 
+	mts_cs
+;
+
+173 
+uöt16_t
+ 
+	mts_∑ddög5
+;
+
+174 
+uöt16_t
+ 
+	mts_ss
+;
+
+175 
+uöt16_t
+ 
+	mts_∑ddög6
+;
+
+176 
+uöt16_t
+ 
+	mts_ds
+;
+
+177 
+uöt16_t
+ 
+	mts_∑ddög7
+;
+
+178 
+uöt16_t
+ 
+	mts_fs
+;
+
+179 
+uöt16_t
+ 
+	mts_∑ddög8
+;
+
+180 
+uöt16_t
+ 
+	mts_gs
+;
+
+181 
+uöt16_t
+ 
+	mts_∑ddög9
+;
+
+182 
+uöt16_t
+ 
+	mts_ldt
+;
+
+183 
+uöt16_t
+ 
+	mts_∑ddög10
+;
+
+184 
+uöt16_t
+ 
+	mts_t
+;
+
+185 
+uöt16_t
+ 
+	mts_iomb
+;
+
+186 } 
+__©åibuã__
+((
+∑cked
+));
+
+204 
+	#PDX
+(
+œ
+Ë((((
+uöçå_t
+)÷a)Ë>> 
+PDXSHIFT
+Ë& 0x3FF)
+
+	)
+
+207 
+	#PTX
+(
+œ
+Ë((((
+uöçå_t
+)÷a)Ë>> 
+PTXSHIFT
+Ë& 0x3FF)
+
+	)
+
+210 
+	#PPN
+(
+œ
+Ë(((
+uöçå_t
+)÷a)Ë>> 
+PTXSHIFT
+)
+
+	)
+
+213 
+	#PGOFF
+(
+œ
+Ë(((
+uöçå_t
+)÷a)Ë& 0xFFF)
+
+	)
+
+216 
+	#PGADDR
+(
+d
+, 
+t
+, 
+o
+Ë((
+uöçå_t
+)((dË<< 
+PDXSHIFT
+ | (tË<< 
+PTXSHIFT
+ | (o)))
+
+	)
+
+219 
+	#PTE_ADDR
+(
+±e
+Ë((
+uöçå_t
+)’ãË& ~0xFFF)
+
+	)
+
+220 
+	#PDE_ADDR
+(
+pde
+Ë
+	`PTE_ADDR
+’de)
+
+	)
+
+223 
+	#NPDEENTRY
+ 1024
+
+224 
+	#NPTEENTRY
+ 1024
+
+225 
+
+	)
+
+226 
+	#PGSIZE
+ 4096
+
+227 
+	#PGSHIFT
+ 12
+
+228 
+	#PTSIZE
+ (
+PGSIZE
+ * 
+NPTEENTRY
+)
+
+229 
+	#PTSHIFT
+ 22
+
+230 
+
+	)
+
+231 
+	#PTXSHIFT
+ 12
+
+232 
+	#PDXSHIFT
+ 22
+
+233 
+
+	)
+
+235 
+	#PTE_P
+ 0x001
+
+236 
+	#PTE_W
+ 0x002
+
+237 
+	#PTE_U
+ 0x004
+
+238 
+	#PTE_PWT
+ 0x008
+
+239 
+	#PTE_PCD
+ 0x010
+
+240 
+	#PTE_A
+ 0x020
+
+241 
+	#PTE_D
+ 0x040
+
+242 
+	#PTE_PS
+ 0x080
+
+243 
+	#PTE_MBZ
+ 0x180
+
+244 
+	#PTE_AVAIL
+ 0xE00
+
+247 
+
+	)
+
+248 
+	#PTE_USER
+ (
+PTE_U
+ | 
+PTE_W
+ | 
+PTE_P
+)
+
+	)
+
+251 
+	#CR0_PE
+ 0x00000001
+
+252 
+	#CR0_MP
+ 0x00000002
+
+253 
+	#CR0_EM
+ 0x00000004
+
+254 
+	#CR0_TS
+ 0x00000008
+
+255 
+	#CR0_ET
+ 0x00000010
+
+256 
+	#CR0_NE
+ 0x00000020
+
+257 
+	#CR0_WP
+ 0x00010000
+
+258 
+	#CR0_AM
+ 0x00040000
+
+259 
+	#CR0_NW
+ 0x20000000
+
+260 
+	#CR0_CD
+ 0x40000000
+
+261 
+	#CR0_PG
+ 0x80000000
+
+262 
+
+	)
+
+263 
+	#CR4_PCE
+ 0x00000100
+
+264 
+	#CR4_MCE
+ 0x00000040
+
+265 
+	#CR4_PSE
+ 0x00000010
+
+266 
+	#CR4_DE
+ 0x00000008
+
+267 
+	#CR4_TSD
+ 0x00000004
+
+268 
+	#CR4_PVI
+ 0x00000002
+
+269 
+	#CR4_VME
+ 0x00000001
+
+270 
+
+	)
+
+	@kern/mm/pmm.c
+
+1 
+	~<defs.h
+>
+
+2 
+	~<x86.h
+>
+
+3 
+	~<°dio.h
+>
+
+4 
+	~<°rög.h
+>
+
+5 
+	~<mmu.h
+>
+
+6 
+	~<memœyout.h
+>
+
+7 
+	~<pmm.h
+>
+
+8 
+	~<deÁu…_pmm.h
+>
+
+9 
+	~<sync.h
+>
+
+10 
+	~<îr‹.h
+>
+
+32 
+èsk°©e
+ 
+	gts
+ = {0};
+
+35 
+Page
+ *
+	g∑ges
+;
+
+37 
+size_t
+ 
+	g≈age
+ = 0;
+
+40 
+pde_t
+ *
+	gboŸ_pgdú
+ = 
+NULL
+;
+
+42 
+uöçå_t
+ 
+	gboŸ_¸3
+;
+
+45 c⁄° 
+pmm_m™agî
+ *
+	gpmm_m™agî
+;
+
+60 
+±e_t
+ * c⁄° 
+	gv±
+ = (±e_à*)
+VPT
+;
+
+61 
+pde_t
+ * c⁄° 
+	gvpd
+ = (pde_à*)
+PGADDR
+(
+PDX
+(
+VPT
+), PDX(VPT), 0);
+
+76 
+£gdesc
+ 
+	ggdt
+[] = {
+
+77 
+SEG_NULL
+,
+
+78 [
+SEG_KTEXT
+] = 
+SEG
+(
+STA_X
+ | 
+STA_R
+, 0x0, 0xFFFFFFFF, 
+DPL_KERNEL
+),
+
+79 [
+SEG_KDATA
+] = 
+SEG
+(
+STA_W
+, 0x0, 0xFFFFFFFF, 
+DPL_KERNEL
+),
+
+80 [
+SEG_UTEXT
+] = 
+SEG
+(
+STA_X
+ | 
+STA_R
+, 0x0, 0xFFFFFFFF, 
+DPL_USER
+),
+
+81 [
+SEG_UDATA
+] = 
+SEG
+(
+STA_W
+, 0x0, 0xFFFFFFFF, 
+DPL_USER
+),
+
+82 [
+SEG_TSS
+] = 
+SEG_NULL
+,
+
+85 
+p£udodesc
+ 
+	ggdt_pd
+ = {
+
+86 (
+gdt
+Ë- 1, (
+uöçå_t
+)gdt
+
+89 
+check_Æloc_∑ge
+();
+
+90 
+check_pgdú
+();
+
+91 
+check_boŸ_pgdú
+();
+
+97 
+ölöe
+ 
+
+98 
+	$lgdt
+(
+p£udodesc
+ *
+pd
+) {
+
+99 
+asm
+ vﬁ©ûê("lgdà(%0)" :: "r" (
+pd
+));
+
+100 
+asm
+ vﬁ©ûê("movw %%ax, %%gs" :: "a" (
+USER_DS
+));
+
+101 
+asm
+ vﬁ©ûê("movw %%ax, %%fs" :: "a" (
+USER_DS
+));
+
+102 
+asm
+ vﬁ©ûê("movw %%ax, %%es" :: "a" (
+KERNEL_DS
+));
+
+103 
+asm
+ vﬁ©ûê("movw %%ax, %%ds" :: "a" (
+KERNEL_DS
+));
+
+104 
+asm
+ vﬁ©ûê("movw %%ax, %%ss" :: "a" (
+KERNEL_DS
+));
+
+106 
+asm
+ vﬁ©ûê("ljm∞%0, $1f\¿1:\n" :: "i" (
+KERNEL_CS
+));
+
+107 
+	}
+}
+
+115 
+	$lﬂd_e•0
+(
+uöçå_t
+ 
+e•0
+) {
+
+116 
+ts
+.
+ts_e•0
+ = 
+e•0
+;
+
+117 
+	}
+}
+
+121 
+	$gdt_öô
+() {
+
+123 
+	`lﬂd_e•0
+((
+uöçå_t
+)
+boŸ°ackt›
+);
+
+124 
+ts
+.
+ts_ss0
+ = 
+KERNEL_DS
+;
+
+127 
+gdt
+[
+SEG_TSS
+] = 
+	`SEGTSS
+(
+STS_T32A
+, (
+uöçå_t
+)&
+ts
+, —s), 
+DPL_KERNEL
+);
+
+130 
+	`lgdt
+(&
+gdt_pd
+);
+
+133 
+	`…r
+(
+GD_TSS
+);
+
+134 
+	}
+}
+
+138 
+	$öô_pmm_m™agî
+() {
+
+139 
+pmm_m™agî
+ = &
+deÁu…_pmm_m™agî
+;
+
+140 
+	`˝rötf
+("mem‹y m™agemít: %s\n", 
+pmm_m™agî
+->
+«me
+);
+
+141 
+pmm_m™agî
+->
+	`öô
+();
+
+142 
+	}
+}
+
+146 
+	$öô_memm≠
+(
+Page
+ *
+ba£
+, 
+size_t
+ 
+n
+) {
+
+147 
+pmm_m™agî
+->
+	`öô_memm≠
+(
+ba£
+, 
+n
+);
+
+148 
+	}
+}
+
+151 
+Page
+ *
+
+152 
+	$Æloc_∑ges
+(
+size_t
+ 
+n
+) {
+
+153 
+Page
+ *
+∑ge
+=
+NULL
+;
+
+154 
+boﬁ
+ 
+öå_Êag
+;
+
+155 
+	`loˇl_öå_ßve
+(
+öå_Êag
+);
+
+157 
+∑ge
+ = 
+pmm_m™agî
+->
+	`Æloc_∑ges
+(
+n
+);
+
+159 
+	`loˇl_öå_ª°‹e
+(
+öå_Êag
+);
+
+160  
+∑ge
+;
+
+161 
+	}
+}
+
+165 
+	$‰ì_∑ges
+(
+Page
+ *
+ba£
+, 
+size_t
+ 
+n
+) {
+
+166 
+boﬁ
+ 
+öå_Êag
+;
+
+167 
+	`loˇl_öå_ßve
+(
+öå_Êag
+);
+
+169 
+pmm_m™agî
+->
+	`‰ì_∑ges
+(
+ba£
+, 
+n
+);
+
+171 
+	`loˇl_öå_ª°‹e
+(
+öå_Êag
+);
+
+172 
+	}
+}
+
+176 
+size_t
+
+
+177 
+	$ƒ_‰ì_∑ges
+() {
+
+178 
+size_t
+ 
+ªt
+;
+
+179 
+boﬁ
+ 
+öå_Êag
+;
+
+180 
+	`loˇl_öå_ßve
+(
+öå_Êag
+);
+
+182 
+ªt
+ = 
+pmm_m™agî
+->
+	`ƒ_‰ì_∑ges
+();
+
+184 
+	`loˇl_öå_ª°‹e
+(
+öå_Êag
+);
+
+185  
+ªt
+;
+
+186 
+	}
+}
+
+190 
+	$∑ge_öô
+() {
+
+191 
+e820m≠
+ *
+memm≠
+ = (e820m≠ *)(0x8000 + 
+KERNBASE
+);
+
+192 
+uöt64_t
+ 
+max∑
+ = 0;
+
+194 
+	`˝rötf
+("e820map:\n");
+
+195 
+i
+;
+
+196 
+i
+ = 0; i < 
+memm≠
+->
+ƒ_m≠
+; i ++) {
+
+197 
+uöt64_t
+ 
+begö
+ = 
+memm≠
+->
+m≠
+[
+i
+].
+addr
+, 
+íd
+ = begö + memm≠->m≠[i].
+size
+;
+
+198 
+	`˝rötf
+(" memory: %08llx, [%08llx, %08llx],Åype = %d.\n",
+
+199 
+memm≠
+->
+m≠
+[
+i
+].
+size
+, 
+begö
+, 
+íd
+ - 1, memm≠->m≠[i].
+ty≥
+);
+
+200 i‡(
+memm≠
+->
+m≠
+[
+i
+].
+ty≥
+ =
+E820_ARM
+) {
+
+201 i‡(
+max∑
+ < 
+íd
+ && 
+begö
+ < 
+KMEMSIZE
+) {
+
+202 
+max∑
+ = 
+íd
+;
+
+206 i‡(
+max∑
+ > 
+KMEMSIZE
+) {
+
+207 
+max∑
+ = 
+KMEMSIZE
+;
+
+210 
+íd
+[];
+
+212 
+≈age
+ = 
+max∑
+ / 
+PGSIZE
+;
+
+213 
+∑ges
+ = (
+Page
+ *)
+	`ROUNDUP
+((*)
+íd
+, 
+PGSIZE
+);
+
+215 
+i
+ = 0; i < 
+≈age
+; i ++) {
+
+216 
+	`SëPageRe£rved
+(
+∑ges
+ + 
+i
+);
+
+219 
+uöçå_t
+ 
+‰ìmem
+ = 
+	`PADDR
+((uöçå_t)
+∑ges
+ + (
+Page
+Ë* 
+≈age
+);
+
+221 
+i
+ = 0; i < 
+memm≠
+->
+ƒ_m≠
+; i ++) {
+
+222 
+uöt64_t
+ 
+begö
+ = 
+memm≠
+->
+m≠
+[
+i
+].
+addr
+, 
+íd
+ = begö + memm≠->m≠[i].
+size
+;
+
+223 i‡(
+memm≠
+->
+m≠
+[
+i
+].
+ty≥
+ =
+E820_ARM
+) {
+
+224 i‡(
+begö
+ < 
+‰ìmem
+) {
+
+225 
+begö
+ = 
+‰ìmem
+;
+
+227 i‡(
+íd
+ > 
+KMEMSIZE
+) {
+
+228 
+íd
+ = 
+KMEMSIZE
+;
+
+230 i‡(
+begö
+ < 
+íd
+) {
+
+231 
+begö
+ = 
+	`ROUNDUP
+(begö, 
+PGSIZE
+);
+
+232 
+íd
+ = 
+	`ROUNDDOWN
+”nd, 
+PGSIZE
+);
+
+233 i‡(
+begö
+ < 
+íd
+) {
+
+234 
+	`öô_memm≠
+(
+	`∑2∑ge
+(
+begö
+), (
+íd
+ - begöË/ 
+PGSIZE
+);
+
+239 
+	}
+}
+
+242 
+	$íabÀ_∑gög
+() {
+
+243 
+	`l¸3
+(
+boŸ_¸3
+);
+
+246 
+uöt32_t
+ 
+¸0
+ = 
+	`r¸0
+();
+
+247 
+¸0
+ |
+CR0_PE
+ | 
+CR0_PG
+ | 
+CR0_AM
+ | 
+CR0_WP
+ | 
+CR0_NE
+ | 
+CR0_TS
+ | 
+CR0_EM
+ | 
+CR0_MP
+;
+
+248 
+¸0
+ &~(
+CR0_TS
+ | 
+CR0_EM
+);
+
+249 
+	`l¸0
+(
+¸0
+);
+
+250 
+	}
+}
+
+259 
+	$boŸ_m≠_£gmít
+(
+pde_t
+ *
+pgdú
+, 
+uöçå_t
+ 
+œ
+, 
+size_t
+ 
+size
+, uöçå_à
+∑
+, 
+uöt32_t
+ 
+≥rm
+) {
+
+260 
+	`as£π
+(
+	`PGOFF
+(
+œ
+Ë=PGOFF(
+∑
+));
+
+261 
+size_t
+ 
+n
+ = 
+	`ROUNDUP
+(
+size
+ + 
+	`PGOFF
+(
+œ
+), 
+PGSIZE
+) / PGSIZE;
+
+262 
+œ
+ = 
+	`ROUNDDOWN
+÷a, 
+PGSIZE
+);
+
+263 
+∑
+ = 
+	`ROUNDDOWN
+’a, 
+PGSIZE
+);
+
+264 ; 
+n
+ > 0;Ç --, 
+œ
+ +
+PGSIZE
+, 
+∑
+ += PGSIZE) {
+
+265 
+±e_t
+ *
+±ï
+ = 
+	`gë_±e
+(
+pgdú
+, 
+œ
+, 1);
+
+266 
+	`as£π
+(
+±ï
+ !
+NULL
+);
+
+267 *
+±ï
+ = 
+∑
+ | 
+PTE_P
+ | 
+≥rm
+;
+
+269 
+	}
+}
+
+275 
+	$boŸ_Æloc_∑ge
+() {
+
+276 
+Page
+ *
+p
+ = 
+	`Æloc_∑ge
+();
+
+277 i‡(
+p
+ =
+NULL
+) {
+
+278 
+	`∑nic
+("boot_alloc_page failed.\n");
+
+280  
+	`∑ge2kva
+(
+p
+);
+
+281 
+	}
+}
+
+286 
+	$pmm_öô
+() {
+
+292 
+	`öô_pmm_m™agî
+();
+
+296 
+	`∑ge_öô
+();
+
+299 
+	`check_Æloc_∑ge
+();
+
+302 
+boŸ_pgdú
+ = 
+	`boŸ_Æloc_∑ge
+();
+
+303 
+	`mem£t
+(
+boŸ_pgdú
+, 0, 
+PGSIZE
+);
+
+304 
+boŸ_¸3
+ = 
+	`PADDR
+(
+boŸ_pgdú
+);
+
+306 
+	`check_pgdú
+();
+
+308 
+	`°©ic_as£π
+(
+KERNBASE
+ % 
+PTSIZE
+ =0 && 
+KERNTOP
+ % PTSIZE == 0);
+
+312 
+boŸ_pgdú
+[
+	`PDX
+(
+VPT
+)] = 
+	`PADDR
+(boŸ_pgdúË| 
+PTE_P
+ | 
+PTE_W
+;
+
+317 
+	`boŸ_m≠_£gmít
+(
+boŸ_pgdú
+, 
+KERNBASE
+, 
+KMEMSIZE
+, 0, 
+PTE_W
+);
+
+321 
+boŸ_pgdú
+[0] = boŸ_pgdú[
+	`PDX
+(
+KERNBASE
+)];
+
+323 
+	`íabÀ_∑gög
+();
+
+328 
+	`gdt_öô
+();
+
+331 
+boŸ_pgdú
+[0] = 0;
+
+335 
+	`check_boŸ_pgdú
+();
+
+337 
+	`¥öt_pgdú
+();
+
+339 
+	}
+}
+
+348 
+±e_t
+ *
+
+349 
+	$gë_±e
+(
+pde_t
+ *
+pgdú
+, 
+uöçå_t
+ 
+œ
+, 
+boﬁ
+ 
+¸óã
+) {
+
+372 
+pde_t
+ *
+pdï
+ = 
+NULL
+;
+
+377 
+uöçå_t
+ 
+∑
+ = 0;
+
+381  
+NULL
+;
+
+383 
+	}
+}
+
+386 
+Page
+ *
+
+387 
+	$gë_∑ge
+(
+pde_t
+ *
+pgdú
+, 
+uöçå_t
+ 
+œ
+, 
+±e_t
+ **
+±ï_°‹e
+) {
+
+388 
+±e_t
+ *
+±ï
+ = 
+	`gë_±e
+(
+pgdú
+, 
+œ
+, 0);
+
+389 i‡(
+±ï_°‹e
+ !
+NULL
+) {
+
+390 *
+±ï_°‹e
+ = 
+±ï
+;
+
+392 i‡(
+±ï
+ !
+NULL
+ && *±ï & 
+PTE_P
+) {
+
+393  
+	`±e2∑ge
+(*
+±ï
+);
+
+395  
+NULL
+;
+
+396 
+	}
+}
+
+401 
+ölöe
+ 
+
+402 
+	$∑ge_ªmove_±e
+(
+pde_t
+ *
+pgdú
+, 
+uöçå_t
+ 
+œ
+, 
+±e_t
+ *
+±ï
+) {
+
+421 
+Page
+ *
+∑ge
+ = 
+NULL
+;
+
+428 
+	}
+}
+
+432 
+	$∑ge_ªmove
+(
+pde_t
+ *
+pgdú
+, 
+uöçå_t
+ 
+œ
+) {
+
+433 
+±e_t
+ *
+±ï
+ = 
+	`gë_±e
+(
+pgdú
+, 
+œ
+, 0);
+
+434 i‡(
+±ï
+ !
+NULL
+) {
+
+435 
+	`∑ge_ªmove_±e
+(
+pgdú
+, 
+œ
+, 
+±ï
+);
+
+437 
+	}
+}
+
+448 
+	$∑ge_ö£π
+(
+pde_t
+ *
+pgdú
+, 
+Page
+ *
+∑ge
+, 
+uöçå_t
+ 
+œ
+, 
+uöt32_t
+ 
+≥rm
+) {
+
+449 
+±e_t
+ *
+±ï
+ = 
+	`gë_±e
+(
+pgdú
+, 
+œ
+, 1);
+
+450 i‡(
+±ï
+ =
+NULL
+) {
+
+451  -
+E_NO_MEM
+;
+
+453 
+	`∑ge_ªf_öc
+(
+∑ge
+);
+
+454 i‡(*
+±ï
+ & 
+PTE_P
+) {
+
+455 
+Page
+ *
+p
+ = 
+	`±e2∑ge
+(*
+±ï
+);
+
+456 i‡(
+p
+ =
+∑ge
+) {
+
+457 
+	`∑ge_ªf_dec
+(
+∑ge
+);
+
+460 
+	`∑ge_ªmove_±e
+(
+pgdú
+, 
+œ
+, 
+±ï
+);
+
+463 *
+±ï
+ = 
+	`∑ge2∑
+(
+∑ge
+Ë| 
+PTE_P
+ | 
+≥rm
+;
+
+464 
+	`éb_övÆid©e
+(
+pgdú
+, 
+œ
+);
+
+466 
+	}
+}
+
+471 
+	$éb_övÆid©e
+(
+pde_t
+ *
+pgdú
+, 
+uöçå_t
+ 
+œ
+) {
+
+472 i‡(
+	`r¸3
+(Ë=
+	`PADDR
+(
+pgdú
+)) {
+
+473 
+	`övÕg
+((*)
+œ
+);
+
+475 
+	}
+}
+
+478 
+	$check_Æloc_∑ge
+() {
+
+479 
+pmm_m™agî
+->
+	`check
+();
+
+480 
+	`˝rötf
+("check_alloc_page() succeeded!\n");
+
+481 
+	}
+}
+
+484 
+	$check_pgdú
+() {
+
+485 
+	`as£π
+(
+≈age
+ <
+KMEMSIZE
+ / 
+PGSIZE
+);
+
+486 
+	`as£π
+(
+boŸ_pgdú
+ !
+NULL
+ && (
+uöt32_t
+)
+	`PGOFF
+(boot_pgdir) == 0);
+
+487 
+	`as£π
+(
+	`gë_∑ge
+(
+boŸ_pgdú
+, 0x0, 
+NULL
+) == NULL);
+
+489 
+Page
+ *
+p1
+, *
+p2
+;
+
+490 
+p1
+ = 
+	`Æloc_∑ge
+();
+
+491 
+	`as£π
+(
+	`∑ge_ö£π
+(
+boŸ_pgdú
+, 
+p1
+, 0x0, 0) == 0);
+
+493 
+±e_t
+ *
+±ï
+;
+
+494 
+	`as£π
+((
+±ï
+ = 
+	`gë_±e
+(
+boŸ_pgdú
+, 0x0, 0)Ë!
+NULL
+);
+
+495 
+	`as£π
+(
+	`±e2∑ge
+(*
+±ï
+Ë=
+p1
+);
+
+496 
+	`as£π
+(
+	`∑ge_ªf
+(
+p1
+) == 1);
+
+498 
+±ï
+ = &((
+±e_t
+ *)
+	`KADDR
+(
+	`PDE_ADDR
+(
+boŸ_pgdú
+[0])))[1];
+
+499 
+	`as£π
+(
+	`gë_±e
+(
+boŸ_pgdú
+, 
+PGSIZE
+, 0Ë=
+±ï
+);
+
+501 
+p2
+ = 
+	`Æloc_∑ge
+();
+
+502 
+	`as£π
+(
+	`∑ge_ö£π
+(
+boŸ_pgdú
+, 
+p2
+, 
+PGSIZE
+, 
+PTE_U
+ | 
+PTE_W
+) == 0);
+
+503 
+	`as£π
+((
+±ï
+ = 
+	`gë_±e
+(
+boŸ_pgdú
+, 
+PGSIZE
+, 0)Ë!
+NULL
+);
+
+504 
+	`as£π
+(*
+±ï
+ & 
+PTE_U
+);
+
+505 
+	`as£π
+(*
+±ï
+ & 
+PTE_W
+);
+
+506 
+	`as£π
+(
+boŸ_pgdú
+[0] & 
+PTE_U
+);
+
+507 
+	`as£π
+(
+	`∑ge_ªf
+(
+p2
+) == 1);
+
+509 
+	`as£π
+(
+	`∑ge_ö£π
+(
+boŸ_pgdú
+, 
+p1
+, 
+PGSIZE
+, 0) == 0);
+
+510 
+	`as£π
+(
+	`∑ge_ªf
+(
+p1
+) == 2);
+
+511 
+	`as£π
+(
+	`∑ge_ªf
+(
+p2
+) == 0);
+
+512 
+	`as£π
+((
+±ï
+ = 
+	`gë_±e
+(
+boŸ_pgdú
+, 
+PGSIZE
+, 0)Ë!
+NULL
+);
+
+513 
+	`as£π
+(
+	`±e2∑ge
+(*
+±ï
+Ë=
+p1
+);
+
+514 
+	`as£π
+((*
+±ï
+ & 
+PTE_U
+) == 0);
+
+516 
+	`∑ge_ªmove
+(
+boŸ_pgdú
+, 0x0);
+
+517 
+	`as£π
+(
+	`∑ge_ªf
+(
+p1
+) == 1);
+
+518 
+	`as£π
+(
+	`∑ge_ªf
+(
+p2
+) == 0);
+
+520 
+	`∑ge_ªmove
+(
+boŸ_pgdú
+, 
+PGSIZE
+);
+
+521 
+	`as£π
+(
+	`∑ge_ªf
+(
+p1
+) == 0);
+
+522 
+	`as£π
+(
+	`∑ge_ªf
+(
+p2
+) == 0);
+
+524 
+	`as£π
+(
+	`∑ge_ªf
+(
+	`pde2∑ge
+(
+boŸ_pgdú
+[0])) == 1);
+
+525 
+	`‰ì_∑ge
+(
+	`pde2∑ge
+(
+boŸ_pgdú
+[0]));
+
+526 
+boŸ_pgdú
+[0] = 0;
+
+528 
+	`˝rötf
+("check_pgdir() succeeded!\n");
+
+529 
+	}
+}
+
+532 
+	$check_boŸ_pgdú
+() {
+
+533 
+±e_t
+ *
+±ï
+;
+
+534 
+i
+;
+
+535 
+i
+ = 0; i < 
+≈age
+; i +
+PGSIZE
+) {
+
+536 
+	`as£π
+((
+±ï
+ = 
+	`gë_±e
+(
+boŸ_pgdú
+, (
+uöçå_t
+)
+	`KADDR
+(
+i
+), 0)Ë!
+NULL
+);
+
+537 
+	`as£π
+(
+	`PTE_ADDR
+(*
+±ï
+Ë=
+i
+);
+
+540 
+	`as£π
+(
+	`PDE_ADDR
+(
+boŸ_pgdú
+[
+	`PDX
+(
+VPT
+)]Ë=
+	`PADDR
+(boot_pgdir));
+
+542 
+	`as£π
+(
+boŸ_pgdú
+[0] == 0);
+
+544 
+Page
+ *
+p
+;
+
+545 
+p
+ = 
+	`Æloc_∑ge
+();
+
+546 
+	`as£π
+(
+	`∑ge_ö£π
+(
+boŸ_pgdú
+, 
+p
+, 0x100, 
+PTE_W
+) == 0);
+
+547 
+	`as£π
+(
+	`∑ge_ªf
+(
+p
+) == 1);
+
+548 
+	`as£π
+(
+	`∑ge_ö£π
+(
+boŸ_pgdú
+, 
+p
+, 0x100 + 
+PGSIZE
+, 
+PTE_W
+) == 0);
+
+549 
+	`as£π
+(
+	`∑ge_ªf
+(
+p
+) == 2);
+
+551 c⁄° *
+°r
+ = "ucore: Hello world!!";
+
+552 
+	`°r˝y
+((*)0x100, 
+°r
+);
+
+553 
+	`as£π
+(
+	`°rcmp
+((*)0x100, (*)(0x100 + 
+PGSIZE
+)) == 0);
+
+555 *(*)(
+	`∑ge2kva
+(
+p
+) + 0x100) = '\0';
+
+556 
+	`as£π
+(
+	`°æí
+((const *)0x100) == 0);
+
+558 
+	`‰ì_∑ge
+(
+p
+);
+
+559 
+	`‰ì_∑ge
+(
+	`pde2∑ge
+(
+boŸ_pgdú
+[0]));
+
+560 
+boŸ_pgdú
+[0] = 0;
+
+562 
+	`˝rötf
+("check_boot_pgdir() succeeded!\n");
+
+563 
+	}
+}
+
+567 
+	$≥rm2°r
+(
+≥rm
+) {
+
+568 
+°r
+[4];
+
+569 
+°r
+[0] = (
+≥rm
+ & 
+PTE_U
+) ? 'u' : '-';
+
+570 
+°r
+[1] = 'r';
+
+571 
+°r
+[2] = (
+≥rm
+ & 
+PTE_W
+) ? 'w' : '-';
+
+572 
+°r
+[3] = '\0';
+
+573  
+°r
+;
+
+574 
+	}
+}
+
+588 
+	$gë_pgèbÀ_ôems
+(
+size_t
+ 
+À·
+, size_à
+right
+, size_à
+°¨t
+, 
+uöçå_t
+ *
+èbÀ
+, size_à*
+À·_°‹e
+, size_à*
+right_°‹e
+) {
+
+589 i‡(
+°¨t
+ >
+right
+) {
+
+592 
+°¨t
+ < 
+right
+ && !(
+èbÀ
+[°¨t] & 
+PTE_P
+)) {
+
+593 
+°¨t
+ ++;
+
+595 i‡(
+°¨t
+ < 
+right
+) {
+
+596 i‡(
+À·_°‹e
+ !
+NULL
+) {
+
+597 *
+À·_°‹e
+ = 
+°¨t
+;
+
+599 
+≥rm
+ = (
+èbÀ
+[
+°¨t
+ ++] & 
+PTE_USER
+);
+
+600 
+°¨t
+ < 
+right
+ && (
+èbÀ
+[°¨t] & 
+PTE_USER
+Ë=
+≥rm
+) {
+
+601 
+°¨t
+ ++;
+
+603 i‡(
+right_°‹e
+ !
+NULL
+) {
+
+604 *
+right_°‹e
+ = 
+°¨t
+;
+
+606  
+≥rm
+;
+
+609 
+	}
+}
+
+613 
+	$¥öt_pgdú
+() {
+
+614 
+	`˝rötf
+("-------------------- BEGIN --------------------\n");
+
+615 
+size_t
+ 
+À·
+, 
+right
+ = 0, 
+≥rm
+;
+
+616 (
+≥rm
+ = 
+	`gë_pgèbÀ_ôems
+(0, 
+NPDEENTRY
+, 
+right
+, 
+vpd
+, &
+À·
+, &right)) != 0) {
+
+617 
+	`˝rötf
+("PDE(%03xË%08x-%08x %08x %s\n", 
+right
+ - 
+À·
+,
+
+618 
+À·
+ * 
+PTSIZE
+, 
+right
+ * PTSIZE, (righà-Üe·Ë* PTSIZE, 
+	`≥rm2°r
+(
+≥rm
+));
+
+619 
+size_t
+ 
+l
+, 
+r
+ = 
+À·
+ * 
+NPTEENTRY
+;
+
+620 (
+≥rm
+ = 
+	`gë_pgèbÀ_ôems
+(
+À·
+ * 
+NPTEENTRY
+, 
+right
+ * NPTEENTRY, 
+r
+, 
+v±
+, &
+l
+, &r)) != 0) {
+
+621 
+	`˝rötf
+(" |-- PTE(%05xË%08x-%08x %08x %s\n", 
+r
+ - 
+l
+,
+
+622 
+l
+ * 
+PGSIZE
+, 
+r
+ * PGSIZE, (∏-ÜË* PGSIZE, 
+	`≥rm2°r
+(
+≥rm
+));
+
+625 
+	`˝rötf
+("--------------------- END ---------------------\n");
+
+626 
+	}
+}
+
+	@kern/mm/pmm.h
+
+1 #i‚de‡
+__KERN_MM_PMM_H__
+
+
+2 
+	#__KERN_MM_PMM_H__
+
+
+	)
+
+4 
+	~<defs.h
+>
+
+5 
+	~<mmu.h
+>
+
+6 
+	~<memœyout.h
+>
+
+7 
+	~<©omic.h
+>
+
+8 
+	~<as£π.h
+>
+
+13 
+	spmm_m™agî
+ {
+
+14 c⁄° *
+	m«me
+;
+
+15 (*
+	möô
+)();
+
+17 (*
+	möô_memm≠
+)(
+Page
+ *
+	mba£
+, 
+size_t
+ 
+	mn
+);
+
+19 
+	mPage
+ *(*
+	mÆloc_∑ges
+)(
+size_t
+ 
+	mn
+);
+
+20 (*
+	m‰ì_∑ges
+)(
+Page
+ *
+	mba£
+, 
+size_t
+ 
+	mn
+);
+
+21 
+size_t
+ (*
+ƒ_‰ì_∑ges
+)();
+
+22 (*
+	mcheck
+)();
+
+25 c⁄° 
+pmm_m™agî
+ *pmm_manager;
+
+26 
+pde_t
+ *
+boŸ_pgdú
+;
+
+27 
+uöçå_t
+ 
+boŸ_¸3
+;
+
+29 
+pmm_öô
+();
+
+31 
+Page
+ *
+Æloc_∑ges
+(
+size_t
+ 
+n
+);
+
+32 
+‰ì_∑ges
+(
+Page
+ *
+ba£
+, 
+size_t
+ 
+n
+);
+
+33 
+size_t
+ 
+ƒ_‰ì_∑ges
+();
+
+35 
+	#Æloc_∑ge
+(Ë
+	`Æloc_∑ges
+(1)
+
+	)
+
+36 
+	#‰ì_∑ge
+(
+∑ge
+Ë
+	`‰ì_∑ges
+’age, 1)
+
+	)
+
+38 
+±e_t
+ *
+gë_±e
+(
+pde_t
+ *
+pgdú
+, 
+uöçå_t
+ 
+œ
+, 
+boﬁ
+ 
+¸óã
+);
+
+39 
+Page
+ *
+gë_∑ge
+(
+pde_t
+ *
+pgdú
+, 
+uöçå_t
+ 
+œ
+, 
+±e_t
+ **
+±ï_°‹e
+);
+
+40 
+∑ge_ªmove
+(
+pde_t
+ *
+pgdú
+, 
+uöçå_t
+ 
+œ
+);
+
+41 
+∑ge_ö£π
+(
+pde_t
+ *
+pgdú
+, 
+Page
+ *
+∑ge
+, 
+uöçå_t
+ 
+œ
+, 
+uöt32_t
+ 
+≥rm
+);
+
+43 
+lﬂd_e•0
+(
+uöçå_t
+ 
+e•0
+);
+
+44 
+éb_övÆid©e
+(
+pde_t
+ *
+pgdú
+, 
+uöçå_t
+ 
+œ
+);
+
+46 
+¥öt_pgdú
+();
+
+53 
+	#PADDR
+(
+kva
+) ({ \
+
+54 
+uöçå_t
+ 
+__m_kva
+ = (uöçå_t)(
+kva
+); \
+
+55 i‡(
+__m_kva
+ < 
+KERNBASE
+) { \
+
+56 
+	`∑nic
+("PADDR cÆÀd wôh invÆid kv®%08lx", 
+__m_kva
+); \
+
+58 
+__m_kva
+ - 
+KERNBASE
+; \
+
+59 })
+
+	)
+
+65 
+	#KADDR
+(
+∑
+) ({ \
+
+66 
+uöçå_t
+ 
+__m_∑
+ = (
+∑
+); \
+
+67 
+size_t
+ 
+__m_µn
+ = 
+	`PPN
+(
+__m_∑
+); \
+
+68 i‡(
+__m_µn
+ >
+≈age
+) { \
+
+69 
+	`∑nic
+("KADDR cÆÀd wôh invÆidÖ®%08lx", 
+__m_∑
+); \
+
+71 (*Ë(
+__m_∑
+ + 
+KERNBASE
+); \
+
+72 })
+
+	)
+
+74 
+Page
+ *
+∑ges
+;
+
+75 
+size_t
+ 
+≈age
+;
+
+77 
+ölöe
+ 
+µn_t
+
+
+78 
+	$∑ge2µn
+(
+Page
+ *
+∑ge
+) {
+
+79  
+∑ge
+ - 
+∑ges
+;
+
+80 
+	}
+}
+
+82 
+ölöe
+ 
+uöçå_t
+
+
+83 
+	$∑ge2∑
+(
+Page
+ *
+∑ge
+) {
+
+84  
+	`∑ge2µn
+(
+∑ge
+Ë<< 
+PGSHIFT
+;
+
+85 
+	}
+}
+
+87 
+ölöe
+ 
+Page
+ *
+
+88 
+	$∑2∑ge
+(
+uöçå_t
+ 
+∑
+) {
+
+89 i‡(
+	`PPN
+(
+∑
+Ë>
+≈age
+) {
+
+90 
+	`∑nic
+("pa2page called with invalidÖa");
+
+92  &
+∑ges
+[
+	`PPN
+(
+∑
+)];
+
+93 
+	}
+}
+
+95 
+ölöe
+ *
+
+96 
+	$∑ge2kva
+(
+Page
+ *
+∑ge
+) {
+
+97  
+	`KADDR
+(
+	`∑ge2∑
+(
+∑ge
+));
+
+98 
+	}
+}
+
+100 
+ölöe
+ 
+Page
+ *
+
+101 
+	$kva2∑ge
+(*
+kva
+) {
+
+102  
+	`∑2∑ge
+(
+	`PADDR
+(
+kva
+));
+
+103 
+	}
+}
+
+105 
+ölöe
+ 
+Page
+ *
+
+106 
+	$±e2∑ge
+(
+±e_t
+ 
+±e
+) {
+
+107 i‡(!(
+±e
+ & 
+PTE_P
+)) {
+
+108 
+	`∑nic
+("pte2page called with invalidÖte");
+
+110  
+	`∑2∑ge
+(
+	`PTE_ADDR
+(
+±e
+));
+
+111 
+	}
+}
+
+113 
+ölöe
+ 
+Page
+ *
+
+114 
+	$pde2∑ge
+(
+pde_t
+ 
+pde
+) {
+
+115  
+	`∑2∑ge
+(
+	`PDE_ADDR
+(
+pde
+));
+
+116 
+	}
+}
+
+118 
+ölöe
+ 
+
+119 
+	$∑ge_ªf
+(
+Page
+ *
+∑ge
+) {
+
+120  
+∑ge
+->
+ªf
+;
+
+121 
+	}
+}
+
+123 
+ölöe
+ 
+
+124 
+	$£t_∑ge_ªf
+(
+Page
+ *
+∑ge
+, 
+vÆ
+) {
+
+125 
+∑ge
+->
+ªf
+ = 
+vÆ
+;
+
+126 
+	}
+}
+
+128 
+ölöe
+ 
+
+129 
+	$∑ge_ªf_öc
+(
+Page
+ *
+∑ge
+) {
+
+130 
+∑ge
+->
+ªf
+ += 1;
+
+131  
+∑ge
+->
+ªf
+;
+
+132 
+	}
+}
+
+134 
+ölöe
+ 
+
+135 
+	$∑ge_ªf_dec
+(
+Page
+ *
+∑ge
+) {
+
+136 
+∑ge
+->
+ªf
+ -= 1;
+
+137  
+∑ge
+->
+ªf
+;
+
+138 
+	}
+}
+
+140 
+boŸ°ack
+[], 
+boŸ°ackt›
+[];
+
+	@kern/sync/sync.h
+
+1 #i‚de‡
+__KERN_SYNC_SYNC_H__
+
+
+2 
+	#__KERN_SYNC_SYNC_H__
+
+
+	)
+
+4 
+	~<x86.h
+>
+
+5 
+	~<öå.h
+>
+
+6 
+	~<mmu.h
+>
+
+8 
+ölöe
+ 
+boﬁ
+
+
+9 
+	$__öå_ßve
+() {
+
+10 i‡(
+	`ªad_eÊags
+(Ë& 
+FL_IF
+) {
+
+11 
+	`öå_dißbÀ
+();
+
+15 
+	}
+}
+
+17 
+ölöe
+ 
+
+18 
+	$__öå_ª°‹e
+(
+boﬁ
+ 
+Êag
+) {
+
+19 i‡(
+Êag
+) {
+
+20 
+	`öå_íabÀ
+();
+
+22 
+	}
+}
+
+24 
+	#loˇl_öå_ßve
+(
+x
+Ëdÿ{ x = 
+	`__öå_ßve
+(); } 0)
+
+	)
+
+25 
+	#loˇl_öå_ª°‹e
+(
+x
+Ë
+	`__öå_ª°‹e
+(x);
+
+	)
+
+	@kern/trap/trap.c
+
+1 
+	~<defs.h
+>
+
+2 
+	~<mmu.h
+>
+
+3 
+	~<memœyout.h
+>
+
+4 
+	~<˛ock.h
+>
+
+5 
+	~<å≠.h
+>
+
+6 
+	~<x86.h
+>
+
+7 
+	~<°dio.h
+>
+
+8 
+	~<as£π.h
+>
+
+9 
+	~<c⁄sﬁe.h
+>
+
+10 
+	~<kdebug.h
+>
+
+12 
+	#TICK_NUM
+ 100
+
+	)
+
+14 
+	$¥öt_ticks
+() {
+
+15 
+	`˝rötf
+("%dÅicks\n",
+TICK_NUM
+);
+
+16 #ifde‡
+DEBUG_GRADE
+
+
+17 
+	`˝rötf
+("End of Test.\n");
+
+18 
+	`∑nic
+("EOT: kernel seems ok.");
+
+20 
+	}
+}
+
+28 
+g©edesc
+ 
+	gidt
+[256] = {{0}};
+
+30 
+p£udodesc
+ 
+	gidt_pd
+ = {
+
+31 (
+idt
+Ë- 1, (
+uöçå_t
+)idt
+
+36 
+	$idt_öô
+() {
+
+49 
+	}
+}
+
+52 
+	$å≠«me
+(
+å≠no
+) {
+
+53 c⁄° * c⁄° 
+ex˙ames
+[] = {
+
+76 i‡(
+å≠no
+ < (
+ex˙ames
+)/(const * const)) {
+
+77  
+ex˙ames
+[
+å≠no
+];
+
+79 i‡(
+å≠no
+ >
+IRQ_OFFSET
+ &&Årapno < IRQ_OFFSET + 16) {
+
+83 
+	}
+}
+
+86 
+boﬁ
+
+
+87 
+	$å≠_ö_kî√l
+(
+å≠‰ame
+ *
+tf
+) {
+
+88  (
+tf
+->
+tf_cs
+ =(
+uöt16_t
+)
+KERNEL_CS
+);
+
+89 
+	}
+}
+
+91 c⁄° *
+	gIA32Êags
+[] = {
+
+92 "CF", 
+NULL
+, "PF", NULL, "AF", NULL, "ZF", "SF",
+
+93 "TF", "IF", "DF", "OF", 
+NULL
+, NULL, "NT", NULL,
+
+94 "RF", "VM", "AC", "VIF", "VIP", "ID", 
+NULL
+, NULL,
+
+98 
+	$¥öt_å≠‰ame
+(
+å≠‰ame
+ *
+tf
+) {
+
+99 
+	`˝rötf
+("å≠‰amê© %p\n", 
+tf
+);
+
+100 
+	`¥öt_ªgs
+(&
+tf
+->
+tf_ªgs
+);
+
+101 
+	`˝rötf
+(" d† 0x----%04x\n", 
+tf
+->
+tf_ds
+);
+
+102 
+	`˝rötf
+("É† 0x----%04x\n", 
+tf
+->
+tf_es
+);
+
+103 
+	`˝rötf
+(" f† 0x----%04x\n", 
+tf
+->
+tf_fs
+);
+
+104 
+	`˝rötf
+(" g† 0x----%04x\n", 
+tf
+->
+tf_gs
+);
+
+105 
+	`˝rötf
+("Åø∞0x%08x %s\n", 
+tf
+->
+tf_å≠no
+, 
+	`å≠«me
+(tf->tf_trapno));
+
+106 
+	`˝rötf
+("Éº 0x%08x\n", 
+tf
+->
+tf_îr
+);
+
+107 
+	`˝rötf
+("Éù 0x%08x\n", 
+tf
+->
+tf_eù
+);
+
+108 
+	`˝rötf
+(" c† 0x----%04x\n", 
+tf
+->
+tf_cs
+);
+
+109 
+	`˝rötf
+(" fœg 0x%08x ", 
+tf
+->
+tf_eÊags
+);
+
+111 
+i
+, 
+j
+;
+
+112 
+i
+ = 0, 
+j
+ = 1; i < (
+IA32Êags
+) / (IA32flags[0]); i ++, j <<= 1) {
+
+113 i‡((
+tf
+->
+tf_eÊags
+ & 
+j
+Ë&& 
+IA32Êags
+[
+i
+] !
+NULL
+) {
+
+114 
+	`˝rötf
+("%s,", 
+IA32Êags
+[
+i
+]);
+
+117 
+	`˝rötf
+("IOPL=%d\n", (
+tf
+->
+tf_eÊags
+ & 
+FL_IOPL_MASK
+) >> 12);
+
+119 i‡(!
+	`å≠_ö_kî√l
+(
+tf
+)) {
+
+120 
+	`˝rötf
+("É• 0x%08x\n", 
+tf
+->
+tf_e•
+);
+
+121 
+	`˝rötf
+(" s† 0x----%04x\n", 
+tf
+->
+tf_ss
+);
+
+123 
+	}
+}
+
+126 
+	$¥öt_ªgs
+(
+pushªgs
+ *
+ªgs
+) {
+
+127 
+	`˝rötf
+("Édò 0x%08x\n", 
+ªgs
+->
+ªg_edi
+);
+
+128 
+	`˝rötf
+("Ésò 0x%08x\n", 
+ªgs
+->
+ªg_esi
+);
+
+129 
+	`˝rötf
+("Éb∞ 0x%08x\n", 
+ªgs
+->
+ªg_ebp
+);
+
+130 
+	`˝rötf
+(" oe• 0x%08x\n", 
+ªgs
+->
+ªg_€•
+);
+
+131 
+	`˝rötf
+("Ébx 0x%08x\n", 
+ªgs
+->
+ªg_ebx
+);
+
+132 
+	`˝rötf
+("Édx 0x%08x\n", 
+ªgs
+->
+ªg_edx
+);
+
+133 
+	`˝rötf
+("Écx 0x%08x\n", 
+ªgs
+->
+ªg_ecx
+);
+
+134 
+	`˝rötf
+("Éax 0x%08x\n", 
+ªgs
+->
+ªg_óx
+);
+
+135 
+	}
+}
+
+139 
+	$å≠_di•©ch
+(
+å≠‰ame
+ *
+tf
+) {
+
+140 
+c
+;
+
+142 
+tf
+->
+tf_å≠no
+) {
+
+143 
+IRQ_OFFSET
+ + 
+IRQ_TIMER
+:
+
+151 
+IRQ_OFFSET
+ + 
+IRQ_COM1
+:
+
+152 
+c
+ = 
+	`c⁄s_gëc
+();
+
+153 
+	`˝rötf
+("£rü»[%03d] %c\n", 
+c
+, c);
+
+155 
+IRQ_OFFSET
+ + 
+IRQ_KBD
+:
+
+156 
+c
+ = 
+	`c⁄s_gëc
+();
+
+157 
+	`˝rötf
+("kbd [%03d] %c\n", 
+c
+, c);
+
+160 
+T_SWITCH_TOU
+:
+
+161 
+T_SWITCH_TOK
+:
+
+162 
+	`∑nic
+("T_SWITCH_** ??\n");
+
+164 
+IRQ_OFFSET
+ + 
+IRQ_IDE1
+:
+
+165 
+IRQ_OFFSET
+ + 
+IRQ_IDE2
+:
+
+170 i‡((
+tf
+->
+tf_cs
+ & 3) == 0) {
+
+171 
+	`¥öt_å≠‰ame
+(
+tf
+);
+
+172 
+	`∑nic
+("unexpectedÅrap in kernel.\n");
+
+175 
+	}
+}
+
+183 
+	$å≠
+(
+å≠‰ame
+ *
+tf
+) {
+
+185 
+	`å≠_di•©ch
+(
+tf
+);
+
+186 
+	}
+}
+
+	@kern/trap/trap.h
+
+1 #i‚de‡
+__KERN_TRAP_TRAP_H__
+
+
+2 
+	#__KERN_TRAP_TRAP_H__
+
+
+	)
+
+4 
+	~<defs.h
+>
+
+9 
+	#T_DIVIDE
+ 0
+
+10 
+	#T_DEBUG
+ 1
+
+11 
+	#T_NMI
+ 2
+
+12 
+	#T_BRKPT
+ 3
+
+13 
+	#T_OFLOW
+ 4
+
+14 
+	#T_BOUND
+ 5
+
+15 
+	#T_ILLOP
+ 6
+
+16 
+	#T_DEVICE
+ 7
+
+17 
+	#T_DBLFLT
+ 8
+
+19 
+	#T_TSS
+ 10
+
+20 
+	#T_SEGNP
+ 11
+
+21 
+	#T_STACK
+ 12
+
+22 
+	#T_GPFLT
+ 13
+
+23 
+	#T_PGFLT
+ 14
+
+25 
+	#T_FPERR
+ 16
+
+26 
+	#T_ALIGN
+ 17
+
+27 
+	#T_MCHK
+ 18
+
+28 
+	#T_SIMDERR
+ 19
+
+29 
+
+	)
+
+30 
+	#T_SYSCALL
+ 0x80
+
+31 
+
+	)
+
+33 
+	#IRQ_OFFSET
+ 32
+
+34 
+
+	)
+
+35 
+	#IRQ_TIMER
+ 0
+
+	)
+
+36 
+	#IRQ_KBD
+ 1
+
+	)
+
+37 
+	#IRQ_COM1
+ 4
+
+	)
+
+38 
+	#IRQ_IDE1
+ 14
+
+	)
+
+39 
+	#IRQ_IDE2
+ 15
+
+	)
+
+40 
+	#IRQ_ERROR
+ 19
+
+	)
+
+41 
+	#IRQ_SPURIOUS
+ 31
+
+	)
+
+47 
+	#T_SWITCH_TOU
+ 120
+
+48 
+	#T_SWITCH_TOK
+ 121
+
+49 
+
+	)
+
+51 
+	spushªgs
+ {
+
+52 
+uöt32_t
+ 
+	mªg_edi
+;
+
+53 
+uöt32_t
+ 
+	mªg_esi
+;
+
+54 
+uöt32_t
+ 
+	mªg_ebp
+;
+
+55 
+uöt32_t
+ 
+	mªg_€•
+;
+
+56 
+uöt32_t
+ 
+	mªg_ebx
+;
+
+57 
+uöt32_t
+ 
+	mªg_edx
+;
+
+58 
+uöt32_t
+ 
+	mªg_ecx
+;
+
+59 
+uöt32_t
+ 
+	mªg_óx
+;
+
+62 
+	så≠‰ame
+ {
+
+63 
+pushªgs
+ 
+	mtf_ªgs
+;
+
+64 
+uöt16_t
+ 
+	mtf_gs
+;
+
+65 
+uöt16_t
+ 
+	mtf_∑ddög0
+;
+
+66 
+uöt16_t
+ 
+	mtf_fs
+;
+
+67 
+uöt16_t
+ 
+	mtf_∑ddög1
+;
+
+68 
+uöt16_t
+ 
+	mtf_es
+;
+
+69 
+uöt16_t
+ 
+	mtf_∑ddög2
+;
+
+70 
+uöt16_t
+ 
+	mtf_ds
+;
+
+71 
+uöt16_t
+ 
+	mtf_∑ddög3
+;
+
+72 
+uöt32_t
+ 
+	mtf_å≠no
+;
+
+74 
+uöt32_t
+ 
+	mtf_îr
+;
+
+75 
+uöçå_t
+ 
+	mtf_eù
+;
+
+76 
+uöt16_t
+ 
+	mtf_cs
+;
+
+77 
+uöt16_t
+ 
+	mtf_∑ddög4
+;
+
+78 
+uöt32_t
+ 
+	mtf_eÊags
+;
+
+80 
+uöçå_t
+ 
+	mtf_e•
+;
+
+81 
+uöt16_t
+ 
+	mtf_ss
+;
+
+82 
+uöt16_t
+ 
+	mtf_∑ddög5
+;
+
+83 } 
+__©åibuã__
+((
+∑cked
+));
+
+85 
+idt_öô
+();
+
+86 
+¥öt_å≠‰ame
+(
+å≠‰ame
+ *
+tf
+);
+
+87 
+¥öt_ªgs
+(
+pushªgs
+ *
+ªgs
+);
+
+88 
+boﬁ
+ 
+å≠_ö_kî√l
+(
+å≠‰ame
+ *
+tf
+);
+
+	@libs/atomic.h
+
+1 #i‚de‡
+__LIBS_ATOMIC_H__
+
+
+2 
+	#__LIBS_ATOMIC_H__
+
+
+	)
+
+6 
+ölöe
+ 
+	$£t_bô
+(
+ƒ
+, vﬁ©ûê*
+addr
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+7 
+ölöe
+ 
+	$˛ór_bô
+(
+ƒ
+, vﬁ©ûê*
+addr
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+8 
+ölöe
+ 
+	$ch™ge_bô
+(
+ƒ
+, vﬁ©ûê*
+addr
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+9 
+ölöe
+ 
+boﬁ
+ 
+	$ã°_bô
+(
+ƒ
+, vﬁ©ûê*
+addr
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+19 
+ölöe
+ 
+
+20 
+	$£t_bô
+(
+ƒ
+, vﬁ©ûê*
+addr
+) {
+
+21 
+asm
+ vﬁ©ûê("bt¶ %1, %0" :"=m" (*(vﬁ©ûê*)
+addr
+Ë: "Ir" (
+ƒ
+));
+
+22 
+	}
+}
+
+29 
+ölöe
+ 
+
+30 
+	$˛ór_bô
+(
+ƒ
+, vﬁ©ûê*
+addr
+) {
+
+31 
+asm
+ vﬁ©ûê("bå»%1, %0" :"=m" (*(vﬁ©ûê*)
+addr
+Ë: "Ir" (
+ƒ
+));
+
+32 
+	}
+}
+
+39 
+ölöe
+ 
+
+40 
+	$ch™ge_bô
+(
+ƒ
+, vﬁ©ûê*
+addr
+) {
+
+41 
+asm
+ vﬁ©ûê("bt˛ %1, %0" :"=m" (*(vﬁ©ûê*)
+addr
+Ë: "Ir" (
+ƒ
+));
+
+42 
+	}
+}
+
+49 
+ölöe
+ 
+boﬁ
+
+
+50 
+	$ã°_bô
+(
+ƒ
+, vﬁ©ûê*
+addr
+) {
+
+51 
+ﬁdbô
+;
+
+52 
+asm
+ vﬁ©ûê("bé %2, %1; sbb»%0,%0" : "Ù" (
+ﬁdbô
+Ë: "m" (*(vﬁ©ûê*)
+addr
+), "Ir" (
+ƒ
+));
+
+53  
+ﬁdbô
+ != 0;
+
+54 
+	}
+}
+
+	@libs/defs.h
+
+1 #i‚de‡
+__LIBS_DEFS_H__
+
+
+2 
+	#__LIBS_DEFS_H__
+
+
+	)
+
+4 #i‚de‡
+NULL
+
+
+5 
+	#NULL
+ ((*)0)
+
+	)
+
+8 
+	#__Æways_ölöe
+ 
+ölöe
+ 
+	`__©åibuã__
+((
+Æways_ölöe
+))
+
+	)
+
+9 
+	#__noölöe
+ 
+	`__©åibuã__
+((
+noölöe
+))
+
+	)
+
+10 
+	#__n‹ëu∫
+ 
+	`__©åibuã__
+((
+n‹ëu∫
+))
+
+	)
+
+13 
+	tboﬁ
+;
+
+16 
+	töt8_t
+;
+
+17 
+	tuöt8_t
+;
+
+18 
+	töt16_t
+;
+
+19 
+	tuöt16_t
+;
+
+20 
+	töt32_t
+;
+
+21 
+	tuöt32_t
+;
+
+22 
+	töt64_t
+;
+
+23 
+	tuöt64_t
+;
+
+30 
+öt32_t
+ 
+	töçå_t
+;
+
+31 
+uöt32_t
+ 
+	tuöçå_t
+;
+
+34 
+uöçå_t
+ 
+	tsize_t
+;
+
+37 
+size_t
+ 
+	tµn_t
+;
+
+43 
+	#ROUNDDOWN
+(
+a
+, 
+n
+) ({ \
+
+44 
+size_t
+ 
+__a
+ = (size_t)(
+a
+); \
+
+45 (
+	`ty≥of
+(
+a
+))(
+__a
+ - __®% (
+n
+)); \
+
+46 })
+
+	)
+
+49 
+	#ROUNDUP
+(
+a
+, 
+n
+) ({ \
+
+50 
+size_t
+ 
+__n
+ = (size_t)(
+n
+); \
+
+51 (
+	`ty≥of
+(
+a
+))(
+	`ROUNDDOWN
+((
+size_t
+)◊Ë+ 
+__n
+ - 1, __n)); \
+
+52 })
+
+	)
+
+55 
+	#off£tof
+(
+ty≥
+, 
+membî
+) \
+
+56 ((
+size_t
+)(&((
+ty≥
+ *)0)->
+membî
+))
+
+	)
+
+64 
+	#to_°ru˘
+(
+±r
+, 
+ty≥
+, 
+membî
+) \
+
+65 ((
+ty≥
+ *)((*)(
+±r
+Ë- 
+	`off£tof
+—y≥, 
+membî
+)))
+
+	)
+
+	@libs/elf.h
+
+1 #i‚de‡
+__LIBS_ELF_H__
+
+
+2 
+	#__LIBS_ELF_H__
+
+
+	)
+
+4 
+	~<defs.h
+>
+
+6 
+	#ELF_MAGIC
+ 0x464C457FU
+
+7 
+
+	)
+
+9 
+	sñfhdr
+ {
+
+10 
+uöt32_t
+ 
+	me_magic
+;
+
+11 
+uöt8_t
+ 
+	me_ñf
+[12];
+
+12 
+uöt16_t
+ 
+	me_ty≥
+;
+
+13 
+uöt16_t
+ 
+	me_machöe
+;
+
+14 
+uöt32_t
+ 
+	me_vîsi⁄
+;
+
+15 
+uöt32_t
+ 
+	me_íåy
+;
+
+16 
+uöt32_t
+ 
+	me_phoff
+;
+
+17 
+uöt32_t
+ 
+	me_shoff
+;
+
+18 
+uöt32_t
+ 
+	me_Êags
+;
+
+19 
+uöt16_t
+ 
+	me_ehsize
+;
+
+20 
+uöt16_t
+ 
+	me_phítsize
+;
+
+21 
+uöt16_t
+ 
+	me_phnum
+;
+
+22 
+uöt16_t
+ 
+	me_shítsize
+;
+
+23 
+uöt16_t
+ 
+	me_shnum
+;
+
+24 
+uöt16_t
+ 
+	me_sh°∫dx
+;
+
+28 
+	s¥oghdr
+ {
+
+29 
+uöt32_t
+ 
+	mp_ty≥
+;
+
+30 
+uöt32_t
+ 
+	mp_off£t
+;
+
+31 
+uöt32_t
+ 
+	mp_va
+;
+
+32 
+uöt32_t
+ 
+	mp_∑
+;
+
+33 
+uöt32_t
+ 
+	mp_fûesz
+;
+
+34 
+uöt32_t
+ 
+	mp_memsz
+;
+
+35 
+uöt32_t
+ 
+	mp_Êags
+;
+
+36 
+uöt32_t
+ 
+	mp_Æign
+;
+
+	@libs/error.h
+
+1 #i‚de‡
+__LIBS_ERROR_H__
+
+
+2 
+	#__LIBS_ERROR_H__
+
+
+	)
+
+5 
+	#E_UNSPECIFIED
+ 1
+
+6 
+	#E_BAD_PROC
+ 2
+
+7 
+	#E_INVAL
+ 3
+
+8 
+	#E_NO_MEM
+ 4
+
+9 
+	#E_NO_FREE_PROC
+ 5
+
+10 
+	#E_FAULT
+ 6
+
+11 
+
+	)
+
+13 
+	#MAXERROR
+ 6
+
+	)
+
+	@libs/list.h
+
+1 #i‚de‡
+__LIBS_LIST_H__
+
+
+2 
+	#__LIBS_LIST_H__
+
+
+	)
+
+4 #i‚de‡
+__ASSEMBLER__
+
+
+6 
+	~<defs.h
+>
+
+17 
+	sli°_íåy
+ {
+
+18 
+li°_íåy
+ *
+	m¥ev
+, *
+	m√xt
+;
+
+21 
+li°_íåy
+ 
+	tli°_íåy_t
+;
+
+23 
+ölöe
+ 
+	$li°_öô
+(
+li°_íåy_t
+ *
+ñm
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+24 
+ölöe
+ 
+	$li°_add
+(
+li°_íåy_t
+ *
+li°ñm
+,Üi°_íåy_à*
+ñm
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+25 
+ölöe
+ 
+	$li°_add_bef‹e
+(
+li°_íåy_t
+ *
+li°ñm
+,Üi°_íåy_à*
+ñm
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+26 
+ölöe
+ 
+	$li°_add_a·î
+(
+li°_íåy_t
+ *
+li°ñm
+,Üi°_íåy_à*
+ñm
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+27 
+ölöe
+ 
+	$li°_dñ
+(
+li°_íåy_t
+ *
+li°ñm
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+28 
+ölöe
+ 
+	$li°_dñ_öô
+(
+li°_íåy_t
+ *
+li°ñm
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+29 
+ölöe
+ 
+boﬁ
+ 
+	$li°_em±y
+(
+li°_íåy_t
+ *
+li°
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+30 
+ölöe
+ 
+li°_íåy_t
+ *
+	$li°_√xt
+(
+li°_íåy_t
+ *
+li°ñm
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+31 
+ölöe
+ 
+li°_íåy_t
+ *
+	$li°_¥ev
+(
+li°_íåy_t
+ *
+li°ñm
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+33 
+ölöe
+ 
+	$__li°_add
+(
+li°_íåy_t
+ *
+ñm
+,Üi°_íåy_à*
+¥ev
+,Üi°_íåy_à*
+√xt
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+34 
+ölöe
+ 
+	$__li°_dñ
+(
+li°_íåy_t
+ *
+¥ev
+,Üi°_íåy_à*
+√xt
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+40 
+ölöe
+ 
+
+41 
+	$li°_öô
+(
+li°_íåy_t
+ *
+ñm
+) {
+
+42 
+ñm
+->
+¥ev
+ =Élm->
+√xt
+ =Élm;
+
+43 
+	}
+}
+
+53 
+ölöe
+ 
+
+54 
+	$li°_add
+(
+li°_íåy_t
+ *
+li°ñm
+,Üi°_íåy_à*
+ñm
+) {
+
+55 
+	`li°_add_a·î
+(
+li°ñm
+, 
+ñm
+);
+
+56 
+	}
+}
+
+66 
+ölöe
+ 
+
+67 
+	$li°_add_bef‹e
+(
+li°_íåy_t
+ *
+li°ñm
+,Üi°_íåy_à*
+ñm
+) {
+
+68 
+	`__li°_add
+(
+ñm
+, 
+li°ñm
+->
+¥ev
+,Üistelm);
+
+69 
+	}
+}
+
+79 
+ölöe
+ 
+
+80 
+	$li°_add_a·î
+(
+li°_íåy_t
+ *
+li°ñm
+,Üi°_íåy_à*
+ñm
+) {
+
+81 
+	`__li°_add
+(
+ñm
+, 
+li°ñm
+,Üi°ñm->
+√xt
+);
+
+82 
+	}
+}
+
+91 
+ölöe
+ 
+
+92 
+	$li°_dñ
+(
+li°_íåy_t
+ *
+li°ñm
+) {
+
+93 
+	`__li°_dñ
+(
+li°ñm
+->
+¥ev
+,Üi°ñm->
+√xt
+);
+
+94 
+	}
+}
+
+102 
+ölöe
+ 
+
+103 
+	$li°_dñ_öô
+(
+li°_íåy_t
+ *
+li°ñm
+) {
+
+104 
+	`li°_dñ
+(
+li°ñm
+);
+
+105 
+	`li°_öô
+(
+li°ñm
+);
+
+106 
+	}
+}
+
+112 
+ölöe
+ 
+boﬁ
+
+
+113 
+	$li°_em±y
+(
+li°_íåy_t
+ *
+li°
+) {
+
+114  
+li°
+->
+√xt
+ ==Üist;
+
+115 
+	}
+}
+
+121 
+ölöe
+ 
+li°_íåy_t
+ *
+
+122 
+	$li°_√xt
+(
+li°_íåy_t
+ *
+li°ñm
+) {
+
+123  
+li°ñm
+->
+√xt
+;
+
+124 
+	}
+}
+
+130 
+ölöe
+ 
+li°_íåy_t
+ *
+
+131 
+	$li°_¥ev
+(
+li°_íåy_t
+ *
+li°ñm
+) {
+
+132  
+li°ñm
+->
+¥ev
+;
+
+133 
+	}
+}
+
+141 
+ölöe
+ 
+
+142 
+	$__li°_add
+(
+li°_íåy_t
+ *
+ñm
+,Üi°_íåy_à*
+¥ev
+,Üi°_íåy_à*
+√xt
+) {
+
+143 
+¥ev
+->
+√xt
+ =Çext->¥ev = 
+ñm
+;
+
+144 
+ñm
+->
+√xt
+ =Çext;
+
+145 
+ñm
+->
+¥ev
+ =Örev;
+
+146 
+	}
+}
+
+154 
+ölöe
+ 
+
+155 
+	$__li°_dñ
+(
+li°_íåy_t
+ *
+¥ev
+,Üi°_íåy_à*
+√xt
+) {
+
+156 
+¥ev
+->
+√xt
+ =Çext;
+
+157 
+√xt
+->
+¥ev
+ =Örev;
+
+158 
+	}
+}
+
+	@libs/printfmt.c
+
+1 
+	~<defs.h
+>
+
+2 
+	~<x86.h
+>
+
+3 
+	~<îr‹.h
+>
+
+4 
+	~<°dio.h
+>
+
+5 
+	~<°rög.h
+>
+
+17 c⁄° * c⁄° 
+	gîr‹_°rög
+[
+MAXERROR
+ + 1] = {
+
+18 [0] 
+NULL
+,
+
+19 [
+E_UNSPECIFIED
+] "unspecifiedÉrror",
+
+20 [
+E_BAD_PROC
+] "badÖrocess",
+
+21 [
+E_INVAL
+] "invalidÖarameter",
+
+22 [
+E_NO_MEM
+] "out of memory",
+
+23 [
+E_NO_FREE_PROC
+] "out ofÖrocesses",
+
+24 [
+E_FAULT
+] "segmentation fault",
+
+37 
+	$¥öäum
+((*
+putch
+)(, *), *
+putd©
+,
+
+38 
+num
+, 
+ba£
+, 
+width
+, 
+∑dc
+) {
+
+39 
+ªsu…
+ = 
+num
+;
+
+40 
+mod
+ = 
+	`do_div
+(
+ªsu…
+, 
+ba£
+);
+
+43 i‡(
+num
+ >
+ba£
+) {
+
+44 
+	`¥öäum
+(
+putch
+, 
+putd©
+, 
+ªsu…
+, 
+ba£
+, 
+width
+ - 1, 
+∑dc
+);
+
+47 -- 
+width
+ > 0)
+
+48 
+	`putch
+(
+∑dc
+, 
+putd©
+);
+
+51 
+	`putch
+("0123456789abcdef"[
+mod
+], 
+putd©
+);
+
+52 
+	}
+}
+
+60 
+	$gëuöt
+(
+va_li°
+ *
+≠
+, 
+lÊag
+) {
+
+61 i‡(
+lÊag
+ >= 2) {
+
+62  
+	`va_¨g
+(*
+≠
+, );
+
+64 i‡(
+lÊag
+) {
+
+65  
+	`va_¨g
+(*
+≠
+, );
+
+68  
+	`va_¨g
+(*
+≠
+, );
+
+70 
+	}
+}
+
+78 
+	$gëöt
+(
+va_li°
+ *
+≠
+, 
+lÊag
+) {
+
+79 i‡(
+lÊag
+ >= 2) {
+
+80  
+	`va_¨g
+(*
+≠
+, );
+
+82 i‡(
+lÊag
+) {
+
+83  
+	`va_¨g
+(*
+≠
+, );
+
+86  
+	`va_¨g
+(*
+≠
+, );
+
+88 
+	}
+}
+
+97 
+	$¥ötfmt
+((*
+putch
+)(, *), *
+putd©
+, c⁄° *
+fmt
+, ...) {
+
+98 
+va_li°
+ 
+≠
+;
+
+100 
+	`va_°¨t
+(
+≠
+, 
+fmt
+);
+
+101 
+	`v¥ötfmt
+(
+putch
+, 
+putd©
+, 
+fmt
+, 
+≠
+);
+
+102 
+	`va_íd
+(
+≠
+);
+
+103 
+	}
+}
+
+117 
+	$v¥ötfmt
+((*
+putch
+)(, *), *
+putd©
+, c⁄° *
+fmt
+, 
+va_li°
+ 
+≠
+) {
+
+118 c⁄° *
+p
+;
+
+119 
+ch
+, 
+îr
+;
+
+120 
+num
+;
+
+121 
+ba£
+, 
+width
+, 
+¥ecisi⁄
+, 
+lÊag
+, 
+ÆtÊag
+;
+
+124 (
+ch
+ = *(*)
+fmt
+ ++) != '%') {
+
+125 i‡(
+ch
+ == '\0') {
+
+128 
+	`putch
+(
+ch
+, 
+putd©
+);
+
+132 
+∑dc
+ = ' ';
+
+133 
+width
+ = 
+¥ecisi⁄
+ = -1;
+
+134 
+lÊag
+ = 
+ÆtÊag
+ = 0;
+
+136 
+ªswôch
+:
+
+137 
+ch
+ = *(*)
+fmt
+ ++) {
+
+141 
+∑dc
+ = '-';
+
+142 
+ªswôch
+;
+
+146 
+∑dc
+ = '0';
+
+147 
+ªswôch
+;
+
+151 
+¥ecisi⁄
+ = 0; ; ++ 
+fmt
+) {
+
+152 
+¥ecisi⁄
+ =Öªcisi⁄ * 10 + 
+ch
+ - '0';
+
+153 
+ch
+ = *
+fmt
+;
+
+154 i‡(
+ch
+ < '0' || ch > '9') {
+
+158 
+¥o˚ss_¥ecisi⁄
+;
+
+161 
+¥ecisi⁄
+ = 
+	`va_¨g
+(
+≠
+, );
+
+162 
+¥o˚ss_¥ecisi⁄
+;
+
+165 i‡(
+width
+ < 0)
+
+166 
+width
+ = 0;
+
+167 
+ªswôch
+;
+
+170 
+ÆtÊag
+ = 1;
+
+171 
+ªswôch
+;
+
+173 
+¥o˚ss_¥ecisi⁄
+:
+
+174 i‡(
+width
+ < 0)
+
+175 
+width
+ = 
+¥ecisi⁄
+,Örecision = -1;
+
+176 
+ªswôch
+;
+
+180 
+lÊag
+ ++;
+
+181 
+ªswôch
+;
+
+185 
+	`putch
+(
+	`va_¨g
+(
+≠
+, ), 
+putd©
+);
+
+190 
+îr
+ = 
+	`va_¨g
+(
+≠
+, );
+
+191 i‡(
+îr
+ < 0) {
+
+192 
+îr
+ = -err;
+
+194 i‡(
+îr
+ > 
+MAXERROR
+ || (
+p
+ = 
+îr‹_°rög
+[îr]Ë=
+NULL
+) {
+
+195 
+	`¥ötfmt
+(
+putch
+, 
+putd©
+, "îr‹ %d", 
+îr
+);
+
+198 
+	`¥ötfmt
+(
+putch
+, 
+putd©
+, "%s", 
+p
+);
+
+204 i‡((
+p
+ = 
+	`va_¨g
+(
+≠
+, *)Ë=
+NULL
+) {
+
+205 
+p
+ = "(null)";
+
+207 i‡(
+width
+ > 0 && 
+∑dc
+ != '-') {
+
+208 
+width
+ -
+	`°∫Àn
+(
+p
+, 
+¥ecisi⁄
+); width > 0; width --) {
+
+209 
+	`putch
+(
+∑dc
+, 
+putd©
+);
+
+212 ; (
+ch
+ = *
+p
+ ++Ë!'\0' && (
+¥ecisi⁄
+ < 0 || --Öªcisi⁄ >0); 
+width
+ --) {
+
+213 i‡(
+ÆtÊag
+ && (
+ch
+ < ' ' || ch > '~')) {
+
+214 
+	`putch
+('?', 
+putd©
+);
+
+217 
+	`putch
+(
+ch
+, 
+putd©
+);
+
+220 ; 
+width
+ > 0; width --) {
+
+221 
+	`putch
+(' ', 
+putd©
+);
+
+227 
+num
+ = 
+	`gëöt
+(&
+≠
+, 
+lÊag
+);
+
+228 i‡(()
+num
+ < 0) {
+
+229 
+	`putch
+('-', 
+putd©
+);
+
+230 
+num
+ = -()num;
+
+232 
+ba£
+ = 10;
+
+233 
+numbî
+;
+
+237 
+num
+ = 
+	`gëuöt
+(&
+≠
+, 
+lÊag
+);
+
+238 
+ba£
+ = 10;
+
+239 
+numbî
+;
+
+243 
+num
+ = 
+	`gëuöt
+(&
+≠
+, 
+lÊag
+);
+
+244 
+ba£
+ = 8;
+
+245 
+numbî
+;
+
+249 
+	`putch
+('0', 
+putd©
+);
+
+250 
+	`putch
+('x', 
+putd©
+);
+
+251 
+num
+ = ()(
+uöçå_t
+)
+	`va_¨g
+(
+≠
+, *);
+
+252 
+ba£
+ = 16;
+
+253 
+numbî
+;
+
+257 
+num
+ = 
+	`gëuöt
+(&
+≠
+, 
+lÊag
+);
+
+258 
+ba£
+ = 16;
+
+259 
+numbî
+:
+
+260 
+	`¥öäum
+(
+putch
+, 
+putd©
+, 
+num
+, 
+ba£
+, 
+width
+, 
+∑dc
+);
+
+265 
+	`putch
+(
+ch
+, 
+putd©
+);
+
+270 
+	`putch
+('%', 
+putd©
+);
+
+271 
+fmt
+ --; fmt[-1] != '%'; fmt --)
+
+276 
+	}
+}
+
+279 
+	s•rötbuf
+ {
+
+280 *
+	mbuf
+;
+
+281 *
+	mebuf
+;
+
+282 
+	m˙t
+;
+
+291 
+	$•röçutch
+(
+ch
+, 
+•rötbuf
+ *
+b
+) {
+
+292 
+b
+->
+˙t
+ ++;
+
+293 i‡(
+b
+->
+buf
+ < b->
+ebuf
+) {
+
+294 *
+b
+->
+buf
+ ++ = 
+ch
+;
+
+296 
+	}
+}
+
+305 
+	$¢¥ötf
+(*
+°r
+, 
+size_t
+ 
+size
+, c⁄° *
+fmt
+, ...) {
+
+306 
+va_li°
+ 
+≠
+;
+
+307 
+˙t
+;
+
+308 
+	`va_°¨t
+(
+≠
+, 
+fmt
+);
+
+309 
+˙t
+ = 
+	`v¢¥ötf
+(
+°r
+, 
+size
+, 
+fmt
+, 
+≠
+);
+
+310 
+	`va_íd
+(
+≠
+);
+
+311  
+˙t
+;
+
+312 
+	}
+}
+
+329 
+	$v¢¥ötf
+(*
+°r
+, 
+size_t
+ 
+size
+, c⁄° *
+fmt
+, 
+va_li°
+ 
+≠
+) {
+
+330 
+•rötbuf
+ 
+b
+ = {
+°r
+, så + 
+size
+ - 1, 0};
+
+331 i‡(
+°r
+ =
+NULL
+ || 
+b
+.
+buf
+ > b.
+ebuf
+) {
+
+332  -
+E_INVAL
+;
+
+335 
+	`v¥ötfmt
+((*)
+•röçutch
+, &
+b
+, 
+fmt
+, 
+≠
+);
+
+337 *
+b
+.
+buf
+ = '\0';
+
+338  
+b
+.
+˙t
+;
+
+339 
+	}
+}
+
+	@libs/stdarg.h
+
+1 #i‚de‡
+__LIBS_STDARG_H__
+
+
+2 
+	#__LIBS_STDARG_H__
+
+
+	)
+
+5 
+__buûtö_va_li°
+ 
+	tva_li°
+;
+
+7 
+	#va_°¨t
+(
+≠
+, 
+œ°
+Ë(
+	`__buûtö_va_°¨t
+◊p,Üa°))
+
+	)
+
+8 
+	#va_¨g
+(
+≠
+, 
+ty≥
+Ë(
+	`__buûtö_va_¨g
+◊p,Åy≥))
+
+	)
+
+9 
+	#va_íd
+(
+≠
+Ë
+
+	)
+
+	@libs/stdio.h
+
+1 #i‚de‡
+__LIBS_STDIO_H__
+
+
+2 
+	#__LIBS_STDIO_H__
+
+
+	)
+
+4 
+	~<defs.h
+>
+
+5 
+	~<°d¨g.h
+>
+
+8 
+˝rötf
+(c⁄° *
+fmt
+, ...);
+
+9 
+v˝rötf
+(c⁄° *
+fmt
+, 
+va_li°
+ 
+≠
+);
+
+10 
+˝utch¨
+(
+c
+);
+
+11 
+˝uts
+(c⁄° *
+°r
+);
+
+12 
+gëch¨
+();
+
+15 *
+ªadlöe
+(c⁄° *
+¥om±
+);
+
+18 
+¥ötfmt
+((*
+putch
+)(, *), *
+putd©
+, c⁄° *
+fmt
+, ...);
+
+19 
+	`v¥ötfmt
+((*
+putch
+)(, *), *
+putd©
+, c⁄° *
+fmt
+, 
+va_li°
+ 
+≠
+);
+
+20 
+	`¢¥ötf
+(*
+°r
+, 
+size_t
+ 
+size
+, c⁄° *
+fmt
+, ...);
+
+21 
+	`v¢¥ötf
+(*
+°r
+, 
+size_t
+ 
+size
+, c⁄° *
+fmt
+, 
+va_li°
+ 
+≠
+);
+
+	@libs/string.c
+
+1 
+	~<°rög.h
+>
+
+2 
+	~<x86.h
+>
+
+11 
+size_t
+
+
+12 
+	$°æí
+(c⁄° *
+s
+) {
+
+13 
+size_t
+ 
+˙t
+ = 0;
+
+14 *
+s
+ ++ != '\0') {
+
+15 
+˙t
+ ++;
+
+17  
+˙t
+;
+
+18 
+	}
+}
+
+33 
+size_t
+
+
+34 
+	$°∫Àn
+(c⁄° *
+s
+, 
+size_t
+ 
+Àn
+) {
+
+35 
+size_t
+ 
+˙t
+ = 0;
+
+36 
+˙t
+ < 
+Àn
+ && *
+s
+ ++ != '\0') {
+
+37 
+˙t
+ ++;
+
+39  
+˙t
+;
+
+40 
+	}
+}
+
+55 
+	$°r˝y
+(*
+d°
+, c⁄° *
+§c
+) {
+
+56 #ifde‡
+__HAVE_ARCH_STRCPY
+
+
+57  
+	`__°r˝y
+(
+d°
+, 
+§c
+);
+
+59 *
+p
+ = 
+d°
+;
+
+60 (*
+p
+ ++ = *
+§c
+ ++) != '\0')
+
+62  
+d°
+;
+
+64 
+	}
+}
+
+77 
+	$°∫˝y
+(*
+d°
+, c⁄° *
+§c
+, 
+size_t
+ 
+Àn
+) {
+
+78 *
+p
+ = 
+d°
+;
+
+79 
+Àn
+ > 0) {
+
+80 i‡((*
+p
+ = *
+§c
+) != '\0') {
+
+81 
+§c
+ ++;
+
+83 
+p
+ ++, 
+Àn
+ --;
+
+85  
+d°
+;
+
+86 
+	}
+}
+
+104 
+	$°rcmp
+(c⁄° *
+s1
+, c⁄° *
+s2
+) {
+
+105 #ifde‡
+__HAVE_ARCH_STRCMP
+
+
+106  
+	`__°rcmp
+(
+s1
+, 
+s2
+);
+
+108 *
+s1
+ !'\0' && *s1 =*
+s2
+) {
+
+109 
+s1
+ ++, 
+s2
+ ++;
+
+111  ()(()*
+s1
+ - ()*
+s2
+);
+
+113 
+	}
+}
+
+127 
+	$°∫cmp
+(c⁄° *
+s1
+, c⁄° *
+s2
+, 
+size_t
+ 
+n
+) {
+
+128 
+n
+ > 0 && *
+s1
+ !'\0' && *s1 =*
+s2
+) {
+
+129 
+n
+ --, 
+s1
+ ++, 
+s2
+ ++;
+
+131  (
+n
+ =0Ë? 0 : ()(()*
+s1
+ - ()*
+s2
+);
+
+132 
+	}
+}
+
+143 
+	$°rchr
+(c⁄° *
+s
+, 
+c
+) {
+
+144 *
+s
+ != '\0') {
+
+145 i‡(*
+s
+ =
+c
+) {
+
+146  (*)
+s
+;
+
+148 
+s
+ ++;
+
+150  
+NULL
+;
+
+151 
+	}
+}
+
+163 
+	$°rföd
+(c⁄° *
+s
+, 
+c
+) {
+
+164 *
+s
+ != '\0') {
+
+165 i‡(*
+s
+ =
+c
+) {
+
+168 
+s
+ ++;
+
+170  (*)
+s
+;
+
+171 
+	}
+}
+
+204 
+	$°πﬁ
+(c⁄° *
+s
+, **
+íd±r
+, 
+ba£
+) {
+
+205 
+√g
+ = 0;
+
+206 
+vÆ
+ = 0;
+
+209 *
+s
+ == ' ' || *s == '\t') {
+
+210 
+s
+ ++;
+
+214 i‡(*
+s
+ == '+') {
+
+215 
+s
+ ++;
+
+217 i‡(*
+s
+ == '-') {
+
+218 
+s
+ ++, 
+√g
+ = 1;
+
+222 i‡((
+ba£
+ =0 || ba£ =16Ë&& (
+s
+[0] == '0' && s[1] == 'x')) {
+
+223 
+s
+ +2, 
+ba£
+ = 16;
+
+225 i‡(
+ba£
+ =0 && 
+s
+[0] == '0') {
+
+226 
+s
+ ++, 
+ba£
+ = 8;
+
+228 i‡(
+ba£
+ == 0) {
+
+229 
+ba£
+ = 10;
+
+234 
+dig
+;
+
+236 i‡(*
+s
+ >= '0' && *s <= '9') {
+
+237 
+dig
+ = *
+s
+ - '0';
+
+239 i‡(*
+s
+ >= 'a' && *s <= 'z') {
+
+240 
+dig
+ = *
+s
+ - 'a' + 10;
+
+242 i‡(*
+s
+ >= 'A' && *s <= 'Z') {
+
+243 
+dig
+ = *
+s
+ - 'A' + 10;
+
+248 i‡(
+dig
+ >
+ba£
+) {
+
+251 
+s
+ ++, 
+vÆ
+ = (vÆ * 
+ba£
+Ë+ 
+dig
+;
+
+255 i‡(
+íd±r
+) {
+
+256 *
+íd±r
+ = (*Ë
+s
+;
+
+258  (
+√g
+ ? -
+vÆ
+ : val);
+
+259 
+	}
+}
+
+271 
+	$mem£t
+(*
+s
+, 
+c
+, 
+size_t
+ 
+n
+) {
+
+272 #ifde‡
+__HAVE_ARCH_MEMSET
+
+
+273  
+	`__mem£t
+(
+s
+, 
+c
+, 
+n
+);
+
+275 *
+p
+ = 
+s
+;
+
+276 
+n
+ -- > 0) {
+
+277 *
+p
+ ++ = 
+c
+;
+
+279  
+s
+;
+
+281 
+	}
+}
+
+293 
+	$memmove
+(*
+d°
+, c⁄° *
+§c
+, 
+size_t
+ 
+n
+) {
+
+294 #ifde‡
+__HAVE_ARCH_MEMMOVE
+
+
+295  
+	`__memmove
+(
+d°
+, 
+§c
+, 
+n
+);
+
+297 c⁄° *
+s
+ = 
+§c
+;
+
+298 *
+d
+ = 
+d°
+;
+
+299 i‡(
+s
+ < 
+d
+ && s + 
+n
+ > d) {
+
+300 
+s
+ +
+n
+, 
+d
+ +=Ç;
+
+301 
+n
+ -- > 0) {
+
+302 *-- 
+d
+ = *-- 
+s
+;
+
+305 
+n
+ -- > 0) {
+
+306 *
+d
+ ++ = *
+s
+ ++;
+
+309  
+d°
+;
+
+311 
+	}
+}
+
+328 
+	$mem˝y
+(*
+d°
+, c⁄° *
+§c
+, 
+size_t
+ 
+n
+) {
+
+329 #ifde‡
+__HAVE_ARCH_MEMCPY
+
+
+330  
+	`__mem˝y
+(
+d°
+, 
+§c
+, 
+n
+);
+
+332 c⁄° *
+s
+ = 
+§c
+;
+
+333 *
+d
+ = 
+d°
+;
+
+334 
+n
+ -- > 0) {
+
+335 *
+d
+ ++ = *
+s
+ ++;
+
+337  
+d°
+;
+
+339 
+	}
+}
+
+356 
+	$memcmp
+(c⁄° *
+v1
+, c⁄° *
+v2
+, 
+size_t
+ 
+n
+) {
+
+357 c⁄° *
+s1
+ = (c⁄° *)
+v1
+;
+
+358 c⁄° *
+s2
+ = (c⁄° *)
+v2
+;
+
+359 
+n
+ -- > 0) {
+
+360 i‡(*
+s1
+ !*
+s2
+) {
+
+361  ()(()*
+s1
+ - ()*
+s2
+);
+
+363 
+s1
+ ++, 
+s2
+ ++;
+
+366 
+	}
+}
+
+	@libs/string.h
+
+1 #i‚de‡
+__LIBS_STRING_H__
+
+
+2 
+	#__LIBS_STRING_H__
+
+
+	)
+
+4 
+	~<defs.h
+>
+
+6 
+size_t
+ 
+°æí
+(c⁄° *
+s
+);
+
+7 
+size_t
+ 
+°∫Àn
+(c⁄° *
+s
+, size_à
+Àn
+);
+
+9 *
+°r˝y
+(*
+d°
+, c⁄° *
+§c
+);
+
+10 *
+°∫˝y
+(*
+d°
+, c⁄° *
+§c
+, 
+size_t
+ 
+Àn
+);
+
+12 
+°rcmp
+(c⁄° *
+s1
+, c⁄° *
+s2
+);
+
+13 
+°∫cmp
+(c⁄° *
+s1
+, c⁄° *
+s2
+, 
+size_t
+ 
+n
+);
+
+15 *
+°rchr
+(c⁄° *
+s
+, 
+c
+);
+
+16 *
+°rföd
+(c⁄° *
+s
+, 
+c
+);
+
+17 
+°πﬁ
+(c⁄° *
+s
+, **
+íd±r
+, 
+ba£
+);
+
+19 *
+mem£t
+(*
+s
+, 
+c
+, 
+size_t
+ 
+n
+);
+
+20 *
+memmove
+(*
+d°
+, c⁄° *
+§c
+, 
+size_t
+ 
+n
+);
+
+21 *
+mem˝y
+(*
+d°
+, c⁄° *
+§c
+, 
+size_t
+ 
+n
+);
+
+22 
+memcmp
+(c⁄° *
+v1
+, c⁄° *
+v2
+, 
+size_t
+ 
+n
+);
+
+	@libs/x86.h
+
+1 #i‚de‡
+__LIBS_X86_H__
+
+
+2 
+	#__LIBS_X86_H__
+
+
+	)
+
+4 
+	~<defs.h
+>
+
+6 
+	#do_div
+(
+n
+, 
+ba£
+) ({ \
+
+7 
+__uµî
+, 
+__low
+, 
+__high
+, 
+__mod
+, 
+__ba£
+; \
+
+8 
+__ba£
+ = (
+ba£
+); \
+
+9 
+	`asm
+ ("" : "˜" (
+__low
+), "=d" (
+__high
+Ë: "A" (
+n
+)); \
+
+10 
+__uµî
+ = 
+__high
+; \
+
+11 i‡(
+__high
+ != 0) { \
+
+12 
+__uµî
+ = 
+__high
+ % 
+__ba£
+; \
+
+13 
+__high
+ = __high / 
+__ba£
+; \
+
+15 
+	`asm
+ ("div»%2" : "˜" (
+__low
+), "=d" (
+__mod
+) \
+
+16 : "rm" (
+__ba£
+), "0" (
+__low
+), "1" (
+__uµî
+)); \
+
+17 
+	`asm
+ ("" : "=A" (
+n
+Ë: "a" (
+__low
+), "d" (
+__high
+)); \
+
+18 
+__mod
+; \
+
+19 })
+
+	)
+
+21 
+	#b¨rõr
+(Ë
+__asm__
+ 
+	`__vﬁ©ûe__
+ ("" ::: "mem‹y")
+
+	)
+
+23 
+ölöe
+ 
+uöt8_t
+ 
+	$öb
+(
+uöt16_t
+ 
+p‹t
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+24 
+ölöe
+ 
+	$ö¶
+(
+uöt32_t
+ 
+p‹t
+, *
+addr
+, 
+˙t
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+25 
+ölöe
+ 
+	$outb
+(
+uöt16_t
+ 
+p‹t
+, 
+uöt8_t
+ 
+d©a
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+26 
+ölöe
+ 
+	$outw
+(
+uöt16_t
+ 
+p‹t
+, uöt16_à
+d©a
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+27 
+ölöe
+ 
+	$out¶
+(
+uöt32_t
+ 
+p‹t
+, c⁄° *
+addr
+, 
+˙t
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+28 
+ölöe
+ 
+uöt32_t
+ 
+	$ªad_ebp
+(Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+29 
+ölöe
+ 
+	$bªakpoöt
+(Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+30 
+ölöe
+ 
+uöt32_t
+ 
+	$ªad_dr
+(
+ªgnum
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+31 
+ölöe
+ 
+	$wrôe_dr
+(
+ªgnum
+, 
+uöt32_t
+ 
+vÆue
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+34 
+	sp£udodesc
+ {
+
+35 
+uöt16_t
+ 
+pd_lim
+;
+
+36 
+uöçå_t
+ 
+pd_ba£
+;
+
+37 } 
+	`__©åibuã__
+ ((
+∑cked
+));
+
+39 
+ölöe
+ 
+	$lidt
+(
+p£udodesc
+ *
+pd
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+40 
+ölöe
+ 
+	$°i
+(Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+41 
+ölöe
+ 
+	$˛i
+(Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+42 
+ölöe
+ 
+	$…r
+(
+uöt16_t
+ 
+£l
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+43 
+ölöe
+ 
+uöt32_t
+ 
+	$ªad_eÊags
+(Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+44 
+ölöe
+ 
+	$wrôe_eÊags
+(
+uöt32_t
+ 
+eÊags
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+45 
+ölöe
+ 
+	$l¸0
+(
+uöçå_t
+ 
+¸0
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+46 
+ölöe
+ 
+	$l¸3
+(
+uöçå_t
+ 
+¸3
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+47 
+ölöe
+ 
+uöçå_t
+ 
+	$r¸0
+(Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+48 
+ölöe
+ 
+uöçå_t
+ 
+	$r¸1
+(Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+49 
+ölöe
+ 
+uöçå_t
+ 
+	$r¸2
+(Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+50 
+ölöe
+ 
+uöçå_t
+ 
+	$r¸3
+(Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+51 
+ölöe
+ 
+	$övÕg
+(*
+addr
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+53 
+ölöe
+ 
+uöt8_t
+
+
+54 
+	$öb
+(
+uöt16_t
+ 
+p‹t
+) {
+
+55 
+uöt8_t
+ 
+d©a
+;
+
+56 
+asm
+ vﬁ©ûê("öb %1, %0" : "˜" (
+d©a
+Ë: "d" (
+p‹t
+) : "memory");
+
+57  
+d©a
+;
+
+58 
+	}
+}
+
+60 
+ölöe
+ 
+
+61 
+	$ö¶
+(
+uöt32_t
+ 
+p‹t
+, *
+addr
+, 
+˙t
+) {
+
+62 
+asm
+ volatile (
+
+65 : "=D" (
+addr
+), "=c" (
+˙t
+)
+
+66 : "d" (
+p‹t
+), "0" (
+addr
+), "1" (
+˙t
+)
+
+68 
+	}
+}
+
+70 
+ölöe
+ 
+
+71 
+	$outb
+(
+uöt16_t
+ 
+p‹t
+, 
+uöt8_t
+ 
+d©a
+) {
+
+72 
+asm
+ vﬁ©ûê("outb %0, %1" :: "a" (
+d©a
+), "d" (
+p‹t
+) : "memory");
+
+73 
+	}
+}
+
+75 
+ölöe
+ 
+
+76 
+	$outw
+(
+uöt16_t
+ 
+p‹t
+, uöt16_à
+d©a
+) {
+
+77 
+asm
+ vﬁ©ûê("outw %0, %1" :: "a" (
+d©a
+), "d" (
+p‹t
+) : "memory");
+
+78 
+	}
+}
+
+80 
+ölöe
+ 
+
+81 
+	$out¶
+(
+uöt32_t
+ 
+p‹t
+, c⁄° *
+addr
+, 
+˙t
+) {
+
+82 
+asm
+ volatile (
+
+85 : "=S" (
+addr
+), "=c" (
+˙t
+)
+
+86 : "d" (
+p‹t
+), "0" (
+addr
+), "1" (
+˙t
+)
+
+88 
+	}
+}
+
+90 
+ölöe
+ 
+uöt32_t
+
+
+91 
+	$ªad_ebp
+() {
+
+92 
+uöt32_t
+ 
+ebp
+;
+
+93 
+asm
+ vﬁ©ûê("mov»%%ebp, %0" : "Ù" (
+ebp
+));
+
+94  
+ebp
+;
+
+95 
+	}
+}
+
+97 
+ölöe
+ 
+
+98 
+	$bªakpoöt
+() {
+
+99 
+asm
+ volatile ("int $3");
+
+100 
+	}
+}
+
+102 
+ölöe
+ 
+uöt32_t
+
+
+103 
+	$ªad_dr
+(
+ªgnum
+) {
+
+104 
+uöt32_t
+ 
+vÆue
+ = 0;
+
+105 
+ªgnum
+) {
+
+106 0: 
+asm
+ vﬁ©ûê("mov»%%db0, %0" : "Ù" (
+vÆue
+)); ;
+
+107 1: 
+asm
+ vﬁ©ûê("mov»%%db1, %0" : "Ù" (
+vÆue
+)); ;
+
+108 2: 
+asm
+ vﬁ©ûê("mov»%%db2, %0" : "Ù" (
+vÆue
+)); ;
+
+109 3: 
+asm
+ vﬁ©ûê("mov»%%db3, %0" : "Ù" (
+vÆue
+)); ;
+
+110 6: 
+asm
+ vﬁ©ûê("mov»%%db6, %0" : "Ù" (
+vÆue
+)); ;
+
+111 7: 
+asm
+ vﬁ©ûê("mov»%%db7, %0" : "Ù" (
+vÆue
+)); ;
+
+113  
+vÆue
+;
+
+114 
+	}
+}
+
+117 
+	$wrôe_dr
+(
+ªgnum
+, 
+uöt32_t
+ 
+vÆue
+) {
+
+118 
+ªgnum
+) {
+
+119 0: 
+asm
+ vﬁ©ûê("mov»%0, %%db0" :: "r" (
+vÆue
+)); ;
+
+120 1: 
+asm
+ vﬁ©ûê("mov»%0, %%db1" :: "r" (
+vÆue
+)); ;
+
+121 2: 
+asm
+ vﬁ©ûê("mov»%0, %%db2" :: "r" (
+vÆue
+)); ;
+
+122 3: 
+asm
+ vﬁ©ûê("mov»%0, %%db3" :: "r" (
+vÆue
+)); ;
+
+123 6: 
+asm
+ vﬁ©ûê("mov»%0, %%db6" :: "r" (
+vÆue
+)); ;
+
+124 7: 
+asm
+ vﬁ©ûê("mov»%0, %%db7" :: "r" (
+vÆue
+)); ;
+
+126 
+	}
+}
+
+128 
+ölöe
+ 
+
+129 
+	$lidt
+(
+p£udodesc
+ *
+pd
+) {
+
+130 
+asm
+ vﬁ©ûê("lidà(%0)" :: "r" (
+pd
+) : "memory");
+
+131 
+	}
+}
+
+133 
+ölöe
+ 
+
+134 
+	$°i
+() {
+
+135 
+asm
+ volatile ("sti");
+
+136 
+	}
+}
+
+138 
+ölöe
+ 
+
+139 
+	$˛i
+() {
+
+140 
+asm
+ volatile ("cli" ::: "memory");
+
+141 
+	}
+}
+
+143 
+ölöe
+ 
+
+144 
+	$…r
+(
+uöt16_t
+ 
+£l
+) {
+
+145 
+asm
+ vﬁ©ûê("…∏%0" :: "r" (
+£l
+) : "memory");
+
+146 
+	}
+}
+
+148 
+ölöe
+ 
+uöt32_t
+
+
+149 
+	$ªad_eÊags
+() {
+
+150 
+uöt32_t
+ 
+eÊags
+;
+
+151 
+asm
+ vﬁ©ûê("pushÊ;Ö›»%0" : "Ù" (
+eÊags
+));
+
+152  
+eÊags
+;
+
+153 
+	}
+}
+
+155 
+ölöe
+ 
+
+156 
+	$wrôe_eÊags
+(
+uöt32_t
+ 
+eÊags
+) {
+
+157 
+asm
+ vﬁ©ûê("push»%0;Ö›Ê" :: "r" (
+eÊags
+));
+
+158 
+	}
+}
+
+160 
+ölöe
+ 
+
+161 
+	$l¸0
+(
+uöçå_t
+ 
+¸0
+) {
+
+162 
+asm
+ vﬁ©ûê("mov %0, %%¸0" :: "r" (
+¸0
+) : "memory");
+
+163 
+	}
+}
+
+165 
+ölöe
+ 
+
+166 
+	$l¸3
+(
+uöçå_t
+ 
+¸3
+) {
+
+167 
+asm
+ vﬁ©ûê("mov %0, %%¸3" :: "r" (
+¸3
+) : "memory");
+
+168 
+	}
+}
+
+170 
+ölöe
+ 
+uöçå_t
+
+
+171 
+	$r¸0
+() {
+
+172 
+uöçå_t
+ 
+¸0
+;
+
+173 
+asm
+ vﬁ©ûê("mov %%¸0, %0" : "Ù" (
+¸0
+) :: "memory");
+
+174  
+¸0
+;
+
+175 
+	}
+}
+
+177 
+ölöe
+ 
+uöçå_t
+
+
+178 
+	$r¸1
+() {
+
+179 
+uöçå_t
+ 
+¸1
+;
+
+180 
+asm
+ vﬁ©ûê("mov %%¸1, %0" : "Ù" (
+¸1
+) :: "memory");
+
+181  
+¸1
+;
+
+182 
+	}
+}
+
+184 
+ölöe
+ 
+uöçå_t
+
+
+185 
+	$r¸2
+() {
+
+186 
+uöçå_t
+ 
+¸2
+;
+
+187 
+asm
+ vﬁ©ûê("mov %%¸2, %0" : "Ù" (
+¸2
+) :: "memory");
+
+188  
+¸2
+;
+
+189 
+	}
+}
+
+191 
+ölöe
+ 
+uöçå_t
+
+
+192 
+	$r¸3
+() {
+
+193 
+uöçå_t
+ 
+¸3
+;
+
+194 
+asm
+ vﬁ©ûê("mov %%¸3, %0" : "Ù" (
+¸3
+) :: "memory");
+
+195  
+¸3
+;
+
+196 
+	}
+}
+
+198 
+ölöe
+ 
+
+199 
+	$övÕg
+(*
+addr
+) {
+
+200 
+asm
+ vﬁ©ûê("övÕg (%0)" :: "r" (
+addr
+) : "memory");
+
+201 
+	}
+}
+
+203 
+ölöe
+ 
+	$__°rcmp
+(c⁄° *
+s1
+, c⁄° *
+s2
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+204 
+ölöe
+ *
+	$__°r˝y
+(*
+d°
+, c⁄° *
+§c
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+205 
+ölöe
+ *
+	$__mem£t
+(*
+s
+, 
+c
+, 
+size_t
+ 
+n
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+206 
+ölöe
+ *
+	$__memmove
+(*
+d°
+, c⁄° *
+§c
+, 
+size_t
+ 
+n
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+207 
+ölöe
+ *
+	$__mem˝y
+(*
+d°
+, c⁄° *
+§c
+, 
+size_t
+ 
+n
+Ë
+	`__©åibuã__
+((
+Æways_ölöe
+));
+
+209 #i‚de‡
+__HAVE_ARCH_STRCMP
+
+
+210 
+	#__HAVE_ARCH_STRCMP
+
+
+	)
+
+211 
+ölöe
+ 
+
+212 
+	$__°rcmp
+(c⁄° *
+s1
+, c⁄° *
+s2
+) {
+
+213 
+d0
+, 
+d1
+, 
+ªt
+;
+
+214 
+asm
+ volatile (
+
+225 : "˜" (
+ªt
+), "=&S" (
+d0
+), "=&D" (
+d1
+)
+
+226 : "1" (
+s1
+), "2" (
+s2
+)
+
+228  
+ªt
+;
+
+229 
+	}
+}
+
+233 #i‚de‡
+__HAVE_ARCH_STRCPY
+
+
+234 
+	#__HAVE_ARCH_STRCPY
+
+
+	)
+
+235 
+ölöe
+ *
+
+236 
+	$__°r˝y
+(*
+d°
+, c⁄° *
+§c
+) {
+
+237 
+d0
+, 
+d1
+, 
+d2
+;
+
+238 
+asm
+ volatile (
+
+243 : "=&S" (
+d0
+), "=&D" (
+d1
+), "=&a" (
+d2
+)
+
+244 : "0" (
+§c
+), "1" (
+d°
+) : "memory");
+
+245  
+d°
+;
+
+246 
+	}
+}
+
+249 #i‚de‡
+__HAVE_ARCH_MEMSET
+
+
+250 
+	#__HAVE_ARCH_MEMSET
+
+
+	)
+
+251 
+ölöe
+ *
+
+252 
+	$__mem£t
+(*
+s
+, 
+c
+, 
+size_t
+ 
+n
+) {
+
+253 
+d0
+, 
+d1
+;
+
+254 
+asm
+ volatile (
+
+256 : "=&c" (
+d0
+), "=&D" (
+d1
+)
+
+257 : "0" (
+n
+), "a" (
+c
+), "1" (
+s
+)
+
+259  
+s
+;
+
+260 
+	}
+}
+
+263 #i‚de‡
+__HAVE_ARCH_MEMMOVE
+
+
+264 
+	#__HAVE_ARCH_MEMMOVE
+
+
+	)
+
+265 
+ölöe
+ *
+
+266 
+	$__memmove
+(*
+d°
+, c⁄° *
+§c
+, 
+size_t
+ 
+n
+) {
+
+267 i‡(
+d°
+ < 
+§c
+) {
+
+268  
+	`__mem˝y
+(
+d°
+, 
+§c
+, 
+n
+);
+
+270 
+d0
+, 
+d1
+, 
+d2
+;
+
+271 
+asm
+ volatile (
+
+275 : "=&c" (
+d0
+), "=&S" (
+d1
+), "=&D" (
+d2
+)
+
+276 : "0" (
+n
+), "1" (¿- 1 + 
+§c
+), "2" (¿- 1 + 
+d°
+)
+
+278  
+d°
+;
+
+279 
+	}
+}
+
+282 #i‚de‡
+__HAVE_ARCH_MEMCPY
+
+
+283 
+	#__HAVE_ARCH_MEMCPY
+
+
+	)
+
+284 
+ölöe
+ *
+
+285 
+	$__mem˝y
+(*
+d°
+, c⁄° *
+§c
+, 
+size_t
+ 
+n
+) {
+
+286 
+d0
+, 
+d1
+, 
+d2
+;
+
+287 
+asm
+ volatile (
+
+294 : "=&c" (
+d0
+), "=&D" (
+d1
+), "=&S" (
+d2
+)
+
+295 : "0" (
+n
+ / 4), "g" (n), "1" (
+d°
+), "2" (
+§c
+)
+
+297  
+d°
+;
+
+298 
+	}
+}
+
+	@tools/sign.c
+
+1 
+	~<°dio.h
+>
+
+2 
+	~<î∫o.h
+>
+
+3 
+	~<°rög.h
+>
+
+4 
+	~<sys/°©.h
+>
+
+7 
+	$maö
+(
+¨gc
+, *
+¨gv
+[]) {
+
+8 
+°©
+ 
+°
+;
+
+9 i‡(
+¨gc
+ != 3) {
+
+10 
+	`Ârötf
+(
+°dîr
+, "Usage: <input filename> <output filename>\n");
+
+13 i‡(
+	`°©
+(
+¨gv
+[1], &
+°
+) != 0) {
+
+14 
+	`Ârötf
+(
+°dîr
+, "Eº‹ o≥nög fûê'%s': %s\n", 
+¨gv
+[1], 
+	`°ªº‹
+(
+î∫o
+));
+
+17 
+	`¥ötf
+("'%s' size: %Œd byãs\n", 
+¨gv
+[1], ()
+°
+.
+°_size
+);
+
+18 i‡(
+°
+.
+°_size
+ > 510) {
+
+19 
+	`Ârötf
+(
+°dîr
+, "%Œd >> 510!!\n", ()
+°
+.
+°_size
+);
+
+22 
+buf
+[512];
+
+23 
+	`mem£t
+(
+buf
+, 0, (buf));
+
+24 
+FILE
+ *
+iÂ
+ = 
+	`f›í
+(
+¨gv
+[1], "rb");
+
+25 
+size
+ = 
+	`‰ód
+(
+buf
+, 1, 
+°
+.
+°_size
+, 
+iÂ
+);
+
+26 i‡(
+size
+ !
+°
+.
+°_size
+) {
+
+27 
+	`Ârötf
+(
+°dîr
+, "ªad '%s'Éº‹, sizêi†%d.\n", 
+¨gv
+[1], 
+size
+);
+
+30 
+	`f˛o£
+(
+iÂ
+);
+
+31 
+buf
+[510] = 0x55;
+
+32 
+buf
+[511] = 0xAA;
+
+33 
+FILE
+ *
+oÂ
+ = 
+	`f›í
+(
+¨gv
+[2], "wb+");
+
+34 
+size
+ = 
+	`fwrôe
+(
+buf
+, 1, 512, 
+oÂ
+);
+
+35 i‡(
+size
+ != 512) {
+
+36 
+	`Ârötf
+(
+°dîr
+, "wrôê'%s'Éº‹, sizêi†%d.\n", 
+¨gv
+[2], 
+size
+);
+
+39 
+	`f˛o£
+(
+oÂ
+);
+
+40 
+	`¥ötf
+("buûd 512 byã†boŸ se˘‹: '%s' suc˚ss!\n", 
+¨gv
+[2]);
+
+42 
+	}
+}
+
+	@tools/vector.c
+
+1 
+	~<°dio.h
+>
+
+4 
+	$maö
+() {
+
+5 
+	`¥ötf
+("# handler\n");
+
+6 
+	`¥ötf
+(".text\n");
+
+7 
+	`¥ötf
+(".globl __alltraps\n");
+
+9 
+i
+;
+
+10 
+i
+ = 0; i < 256; i ++) {
+
+11 
+	`¥ötf
+(".glob»ve˘‹%d\n", 
+i
+);
+
+12 
+	`¥ötf
+("ve˘‹%d:\n", 
+i
+);
+
+13 i‡((
+i
+ < 8 || i > 14) && i != 17) {
+
+14 
+	`¥ötf
+("Öushl $0\n");
+
+16 
+	`¥ötf
+("Öush»$%d\n", 
+i
+);
+
+17 
+	`¥ötf
+(" jmp __alltraps\n");
+
+19 
+	`¥ötf
+("\n");
+
+20 
+	`¥ötf
+("# vectorÅable\n");
+
+21 
+	`¥ötf
+(".data\n");
+
+22 
+	`¥ötf
+(".globl __vectors\n");
+
+23 
+	`¥ötf
+("__vectors:\n");
+
+24 
+i
+ = 0; i < 256; i ++) {
+
+25 
+	`¥ötf
+(" .l⁄g ve˘‹%d\n", 
+i
+);
+
+28 
+	}
+}
+
+	@/usr/include/assert.h
+
+22 #ifdef 
+_ASSERT_H
+
+
+24 #unde‡
+_ASSERT_H
+
+
+25 #unde‡
+as£π
+
+
+26 #unde‡
+__ASSERT_VOID_CAST
+
+
+28 #ifdef 
+__USE_GNU
+
+
+29 #unde‡
+as£π_≥º‹
+
+
+34 
+	#_ASSERT_H
+ 1
+
+	)
+
+35 
+	~<„©uªs.h
+>
+
+37 #i‡
+deföed
+ 
+__˝lu•lus
+ && 
+__GNUC_PREREQ
+ (2,95)
+
+38 
+	#__ASSERT_VOID_CAST
+ 
+°©ic_ˇ°
+<>
+
+	)
+
+40 
+	#__ASSERT_VOID_CAST
+ ()
+
+	)
+
+48 #ifdef 
+NDEBUG
+
+
+50 
+	#as£π
+(
+ex¥
+Ë(
+	`__ASSERT_VOID_CAST
+ (0))
+
+	)
+
+58 #ifdef 
+__USE_GNU
+
+
+59 
+	#as£π_≥º‹
+(
+î∫um
+Ë(
+	`__ASSERT_VOID_CAST
+ (0))
+
+	)
+
+64 #i‚de‡
+_ASSERT_H_DECLS
+
+
+65 
+	#_ASSERT_H_DECLS
+
+
+	)
+
+66 
+__BEGIN_DECLS
+
+
+69 
+	$__as£π_Áû
+ (c⁄° *
+__as£πi⁄
+, c⁄° *
+__fûe
+,
+
+70 
+__löe
+, c⁄° *
+__fun˘i⁄
+)
+
+71 
+__THROW
+ 
+	`__©åibuã__
+ ((
+__n‹ëu∫__
+));
+
+74 
+	$__as£π_≥º‹_Áû
+ (
+__î∫um
+, c⁄° *
+__fûe
+,
+
+75 
+__löe
+, c⁄° *
+__fun˘i⁄
+)
+
+76 
+__THROW
+ 
+	`__©åibuã__
+ ((
+__n‹ëu∫__
+));
+
+81 
+	$__as£π
+ (c⁄° *
+__as£πi⁄
+, c⁄° *
+__fûe
+, 
+__löe
+)
+
+82 
+__THROW
+ 
+	`__©åibuã__
+ ((
+__n‹ëu∫__
+));
+
+85 
+__END_DECLS
+
+
+88 
+	#as£π
+(
+ex¥
+) \
+
+89 ((
+ex¥
+) \
+
+90 ? 
+	`__ASSERT_VOID_CAST
+ (0) \
+
+91 : 
+	`__as£π_Áû
+ (#ex¥, 
+__FILE__
+, 
+__LINE__
+, 
+__ASSERT_FUNCTION
+))
+
+	)
+
+93 #ifdef 
+__USE_GNU
+
+
+94 
+	#as£π_≥º‹
+(
+î∫um
+) \
+
+95 (!(
+î∫um
+) \
+
+96 ? 
+	`__ASSERT_VOID_CAST
+ (0) \
+
+97 : 
+	`__as£π_≥º‹_Áû
+ ((
+î∫um
+), 
+__FILE__
+, 
+__LINE__
+, 
+__ASSERT_FUNCTION
+))
+
+	)
+
+105 #i‡
+deföed
+ 
+__˝lu•lus
+ ? 
+	`__GNUC_PREREQ
+ (2, 6) : __GNUC_PREREQ (2, 4)
+
+106 
+	#__ASSERT_FUNCTION
+ 
+__PRETTY_FUNCTION__
+
+
+	)
+
+108 #i‡
+deföed
+ 
+__STDC_VERSION__
+ && __STDC_VERSION__ >= 199901L
+
+109 
+	#__ASSERT_FUNCTION
+ 
+__func__
+
+
+	)
+
+111 
+	#__ASSERT_FUNCTION
+ ((c⁄° *Ë0)
+
+	)
+
+118 #i‡
+deföed
+ 
+__USE_ISOC11
+ && !deföed 
+__˝lu•lus
+
+
+119 #unde‡
+°©ic_as£π
+
+
+120 
+	#°©ic_as£π
+ 
+_Sètic_as£π
+
+
+	)
+
+	@/usr/include/elf.h
+
+19 #i‚de‡
+_ELF_H
+
+
+20 
+	#_ELF_H
+ 1
+
+	)
+
+22 
+	~<„©uªs.h
+>
+
+24 
+	g__BEGIN_DECLS
+
+
+28 
+	~<°döt.h
+>
+
+31 
+uöt16_t
+ 
+	tElf32_HÆf
+;
+
+32 
+uöt16_t
+ 
+	tElf64_HÆf
+;
+
+35 
+uöt32_t
+ 
+	tElf32_W‹d
+;
+
+36 
+öt32_t
+ 
+	tElf32_Sw‹d
+;
+
+37 
+uöt32_t
+ 
+	tElf64_W‹d
+;
+
+38 
+öt32_t
+ 
+	tElf64_Sw‹d
+;
+
+41 
+uöt64_t
+ 
+	tElf32_Xw‹d
+;
+
+42 
+öt64_t
+ 
+	tElf32_Sxw‹d
+;
+
+43 
+uöt64_t
+ 
+	tElf64_Xw‹d
+;
+
+44 
+öt64_t
+ 
+	tElf64_Sxw‹d
+;
+
+47 
+uöt32_t
+ 
+	tElf32_Addr
+;
+
+48 
+uöt64_t
+ 
+	tElf64_Addr
+;
+
+51 
+uöt32_t
+ 
+	tElf32_Off
+;
+
+52 
+uöt64_t
+ 
+	tElf64_Off
+;
+
+55 
+uöt16_t
+ 
+	tElf32_Se˘i⁄
+;
+
+56 
+uöt16_t
+ 
+	tElf64_Se˘i⁄
+;
+
+59 
+Elf32_HÆf
+ 
+	tElf32_Vîsym
+;
+
+60 
+Elf64_HÆf
+ 
+	tElf64_Vîsym
+;
+
+65 
+	#EI_NIDENT
+ (16)
+
+	)
+
+69 
+	me_idít
+[
+EI_NIDENT
+];
+
+70 
+Elf32_HÆf
+ 
+	me_ty≥
+;
+
+71 
+Elf32_HÆf
+ 
+	me_machöe
+;
+
+72 
+Elf32_W‹d
+ 
+	me_vîsi⁄
+;
+
+73 
+Elf32_Addr
+ 
+	me_íåy
+;
+
+74 
+Elf32_Off
+ 
+	me_phoff
+;
+
+75 
+Elf32_Off
+ 
+	me_shoff
+;
+
+76 
+Elf32_W‹d
+ 
+	me_Êags
+;
+
+77 
+Elf32_HÆf
+ 
+	me_ehsize
+;
+
+78 
+Elf32_HÆf
+ 
+	me_phítsize
+;
+
+79 
+Elf32_HÆf
+ 
+	me_phnum
+;
+
+80 
+Elf32_HÆf
+ 
+	me_shítsize
+;
+
+81 
+Elf32_HÆf
+ 
+	me_shnum
+;
+
+82 
+Elf32_HÆf
+ 
+	me_sh°∫dx
+;
+
+83 } 
+	tElf32_Ehdr
+;
+
+87 
+	me_idít
+[
+EI_NIDENT
+];
+
+88 
+Elf64_HÆf
+ 
+	me_ty≥
+;
+
+89 
+Elf64_HÆf
+ 
+	me_machöe
+;
+
+90 
+Elf64_W‹d
+ 
+	me_vîsi⁄
+;
+
+91 
+Elf64_Addr
+ 
+	me_íåy
+;
+
+92 
+Elf64_Off
+ 
+	me_phoff
+;
+
+93 
+Elf64_Off
+ 
+	me_shoff
+;
+
+94 
+Elf64_W‹d
+ 
+	me_Êags
+;
+
+95 
+Elf64_HÆf
+ 
+	me_ehsize
+;
+
+96 
+Elf64_HÆf
+ 
+	me_phítsize
+;
+
+97 
+Elf64_HÆf
+ 
+	me_phnum
+;
+
+98 
+Elf64_HÆf
+ 
+	me_shítsize
+;
+
+99 
+Elf64_HÆf
+ 
+	me_shnum
+;
+
+100 
+Elf64_HÆf
+ 
+	me_sh°∫dx
+;
+
+101 } 
+	tElf64_Ehdr
+;
+
+107 
+	#EI_MAG0
+ 0
+
+	)
+
+108 
+	#ELFMAG0
+ 0x7‡
+
+	)
+
+110 
+	#EI_MAG1
+ 1
+
+	)
+
+111 
+	#ELFMAG1
+ 'E'
+
+	)
+
+113 
+	#EI_MAG2
+ 2
+
+	)
+
+114 
+	#ELFMAG2
+ 'L'
+
+	)
+
+116 
+	#EI_MAG3
+ 3
+
+	)
+
+117 
+	#ELFMAG3
+ 'F'
+
+	)
+
+120 
+	#ELFMAG
+ "\177ELF"
+
+	)
+
+121 
+	#SELFMAG
+ 4
+
+	)
+
+123 
+	#EI_CLASS
+ 4
+
+	)
+
+124 
+	#ELFCLASSNONE
+ 0
+
+	)
+
+125 
+	#ELFCLASS32
+ 1
+
+	)
+
+126 
+	#ELFCLASS64
+ 2
+
+	)
+
+127 
+	#ELFCLASSNUM
+ 3
+
+	)
+
+129 
+	#EI_DATA
+ 5
+
+	)
+
+130 
+	#ELFDATANONE
+ 0
+
+	)
+
+131 
+	#ELFDATA2LSB
+ 1
+
+	)
+
+132 
+	#ELFDATA2MSB
+ 2
+
+	)
+
+133 
+	#ELFDATANUM
+ 3
+
+	)
+
+135 
+	#EI_VERSION
+ 6
+
+	)
+
+138 
+	#EI_OSABI
+ 7
+
+	)
+
+139 
+	#ELFOSABI_NONE
+ 0
+
+	)
+
+140 
+	#ELFOSABI_SYSV
+ 0
+
+	)
+
+141 
+	#ELFOSABI_HPUX
+ 1
+
+	)
+
+142 
+	#ELFOSABI_NETBSD
+ 2
+
+	)
+
+143 
+	#ELFOSABI_GNU
+ 3
+
+	)
+
+144 
+	#ELFOSABI_LINUX
+ 
+ELFOSABI_GNU
+
+
+	)
+
+145 
+	#ELFOSABI_SOLARIS
+ 6
+
+	)
+
+146 
+	#ELFOSABI_AIX
+ 7
+
+	)
+
+147 
+	#ELFOSABI_IRIX
+ 8
+
+	)
+
+148 
+	#ELFOSABI_FREEBSD
+ 9
+
+	)
+
+149 
+	#ELFOSABI_TRU64
+ 10
+
+	)
+
+150 
+	#ELFOSABI_MODESTO
+ 11
+
+	)
+
+151 
+	#ELFOSABI_OPENBSD
+ 12
+
+	)
+
+152 
+	#ELFOSABI_ARM_AEABI
+ 64
+
+	)
+
+153 
+	#ELFOSABI_ARM
+ 97
+
+	)
+
+154 
+	#ELFOSABI_STANDALONE
+ 255
+
+	)
+
+156 
+	#EI_ABIVERSION
+ 8
+
+	)
+
+158 
+	#EI_PAD
+ 9
+
+	)
+
+162 
+	#ET_NONE
+ 0
+
+	)
+
+163 
+	#ET_REL
+ 1
+
+	)
+
+164 
+	#ET_EXEC
+ 2
+
+	)
+
+165 
+	#ET_DYN
+ 3
+
+	)
+
+166 
+	#ET_CORE
+ 4
+
+	)
+
+167 
+	#ET_NUM
+ 5
+
+	)
+
+168 
+	#ET_LOOS
+ 0x„00
+
+	)
+
+169 
+	#ET_HIOS
+ 0x„f‡
+
+	)
+
+170 
+	#ET_LOPROC
+ 0xff00
+
+	)
+
+171 
+	#ET_HIPROC
+ 0xfff‡
+
+	)
+
+175 
+	#EM_NONE
+ 0
+
+	)
+
+176 
+	#EM_M32
+ 1
+
+	)
+
+177 
+	#EM_SPARC
+ 2
+
+	)
+
+178 
+	#EM_386
+ 3
+
+	)
+
+179 
+	#EM_68K
+ 4
+
+	)
+
+180 
+	#EM_88K
+ 5
+
+	)
+
+181 
+	#EM_860
+ 7
+
+	)
+
+182 
+	#EM_MIPS
+ 8
+
+	)
+
+183 
+	#EM_S370
+ 9
+
+	)
+
+184 
+	#EM_MIPS_RS3_LE
+ 10
+
+	)
+
+186 
+	#EM_PARISC
+ 15
+
+	)
+
+187 
+	#EM_VPP500
+ 17
+
+	)
+
+188 
+	#EM_SPARC32PLUS
+ 18
+
+	)
+
+189 
+	#EM_960
+ 19
+
+	)
+
+190 
+	#EM_PPC
+ 20
+
+	)
+
+191 
+	#EM_PPC64
+ 21
+
+	)
+
+192 
+	#EM_S390
+ 22
+
+	)
+
+194 
+	#EM_V800
+ 36
+
+	)
+
+195 
+	#EM_FR20
+ 37
+
+	)
+
+196 
+	#EM_RH32
+ 38
+
+	)
+
+197 
+	#EM_RCE
+ 39
+
+	)
+
+198 
+	#EM_ARM
+ 40
+
+	)
+
+199 
+	#EM_FAKE_ALPHA
+ 41
+
+	)
+
+200 
+	#EM_SH
+ 42
+
+	)
+
+201 
+	#EM_SPARCV9
+ 43
+
+	)
+
+202 
+	#EM_TRICORE
+ 44
+
+	)
+
+203 
+	#EM_ARC
+ 45
+
+	)
+
+204 
+	#EM_H8_300
+ 46
+
+	)
+
+205 
+	#EM_H8_300H
+ 47
+
+	)
+
+206 
+	#EM_H8S
+ 48
+
+	)
+
+207 
+	#EM_H8_500
+ 49
+
+	)
+
+208 
+	#EM_IA_64
+ 50
+
+	)
+
+209 
+	#EM_MIPS_X
+ 51
+
+	)
+
+210 
+	#EM_COLDFIRE
+ 52
+
+	)
+
+211 
+	#EM_68HC12
+ 53
+
+	)
+
+212 
+	#EM_MMA
+ 54
+
+	)
+
+213 
+	#EM_PCP
+ 55
+
+	)
+
+214 
+	#EM_NCPU
+ 56
+
+	)
+
+215 
+	#EM_NDR1
+ 57
+
+	)
+
+216 
+	#EM_STARCORE
+ 58
+
+	)
+
+217 
+	#EM_ME16
+ 59
+
+	)
+
+218 
+	#EM_ST100
+ 60
+
+	)
+
+219 
+	#EM_TINYJ
+ 61
+
+	)
+
+220 
+	#EM_X86_64
+ 62
+
+	)
+
+221 
+	#EM_PDSP
+ 63
+
+	)
+
+223 
+	#EM_FX66
+ 66
+
+	)
+
+224 
+	#EM_ST9PLUS
+ 67
+
+	)
+
+225 
+	#EM_ST7
+ 68
+
+	)
+
+226 
+	#EM_68HC16
+ 69
+
+	)
+
+227 
+	#EM_68HC11
+ 70
+
+	)
+
+228 
+	#EM_68HC08
+ 71
+
+	)
+
+229 
+	#EM_68HC05
+ 72
+
+	)
+
+230 
+	#EM_SVX
+ 73
+
+	)
+
+231 
+	#EM_ST19
+ 74
+
+	)
+
+232 
+	#EM_VAX
+ 75
+
+	)
+
+233 
+	#EM_CRIS
+ 76
+
+	)
+
+234 
+	#EM_JAVELIN
+ 77
+
+	)
+
+235 
+	#EM_FIREPATH
+ 78
+
+	)
+
+236 
+	#EM_ZSP
+ 79
+
+	)
+
+237 
+	#EM_MMIX
+ 80
+
+	)
+
+238 
+	#EM_HUANY
+ 81
+
+	)
+
+239 
+	#EM_PRISM
+ 82
+
+	)
+
+240 
+	#EM_AVR
+ 83
+
+	)
+
+241 
+	#EM_FR30
+ 84
+
+	)
+
+242 
+	#EM_D10V
+ 85
+
+	)
+
+243 
+	#EM_D30V
+ 86
+
+	)
+
+244 
+	#EM_V850
+ 87
+
+	)
+
+245 
+	#EM_M32R
+ 88
+
+	)
+
+246 
+	#EM_MN10300
+ 89
+
+	)
+
+247 
+	#EM_MN10200
+ 90
+
+	)
+
+248 
+	#EM_PJ
+ 91
+
+	)
+
+249 
+	#EM_OPENRISC
+ 92
+
+	)
+
+250 
+	#EM_ARC_A5
+ 93
+
+	)
+
+251 
+	#EM_XTENSA
+ 94
+
+	)
+
+252 
+	#EM_ALTERA_NIOS2
+ 113
+
+	)
+
+253 
+	#EM_AARCH64
+ 183
+
+	)
+
+254 
+	#EM_TILEPRO
+ 188
+
+	)
+
+255 
+	#EM_MICROBLAZE
+ 189
+
+	)
+
+256 
+	#EM_TILEGX
+ 191
+
+	)
+
+257 
+	#EM_NUM
+ 192
+
+	)
+
+263 
+	#EM_ALPHA
+ 0x9026
+
+	)
+
+267 
+	#EV_NONE
+ 0
+
+	)
+
+268 
+	#EV_CURRENT
+ 1
+
+	)
+
+269 
+	#EV_NUM
+ 2
+
+	)
+
+275 
+Elf32_W‹d
+ 
+	msh_«me
+;
+
+276 
+Elf32_W‹d
+ 
+	msh_ty≥
+;
+
+277 
+Elf32_W‹d
+ 
+	msh_Êags
+;
+
+278 
+Elf32_Addr
+ 
+	msh_addr
+;
+
+279 
+Elf32_Off
+ 
+	msh_off£t
+;
+
+280 
+Elf32_W‹d
+ 
+	msh_size
+;
+
+281 
+Elf32_W‹d
+ 
+	msh_lök
+;
+
+282 
+Elf32_W‹d
+ 
+	msh_öfo
+;
+
+283 
+Elf32_W‹d
+ 
+	msh_addølign
+;
+
+284 
+Elf32_W‹d
+ 
+	msh_ítsize
+;
+
+285 } 
+	tElf32_Shdr
+;
+
+289 
+Elf64_W‹d
+ 
+	msh_«me
+;
+
+290 
+Elf64_W‹d
+ 
+	msh_ty≥
+;
+
+291 
+Elf64_Xw‹d
+ 
+	msh_Êags
+;
+
+292 
+Elf64_Addr
+ 
+	msh_addr
+;
+
+293 
+Elf64_Off
+ 
+	msh_off£t
+;
+
+294 
+Elf64_Xw‹d
+ 
+	msh_size
+;
+
+295 
+Elf64_W‹d
+ 
+	msh_lök
+;
+
+296 
+Elf64_W‹d
+ 
+	msh_öfo
+;
+
+297 
+Elf64_Xw‹d
+ 
+	msh_addølign
+;
+
+298 
+Elf64_Xw‹d
+ 
+	msh_ítsize
+;
+
+299 } 
+	tElf64_Shdr
+;
+
+303 
+	#SHN_UNDEF
+ 0
+
+	)
+
+304 
+	#SHN_LORESERVE
+ 0xff00
+
+	)
+
+305 
+	#SHN_LOPROC
+ 0xff00
+
+	)
+
+306 
+	#SHN_BEFORE
+ 0xff00
+
+	)
+
+308 
+	#SHN_AFTER
+ 0xff01
+
+	)
+
+310 
+	#SHN_HIPROC
+ 0xff1‡
+
+	)
+
+311 
+	#SHN_LOOS
+ 0xff20
+
+	)
+
+312 
+	#SHN_HIOS
+ 0xff3‡
+
+	)
+
+313 
+	#SHN_ABS
+ 0xfff1
+
+	)
+
+314 
+	#SHN_COMMON
+ 0xfff2
+
+	)
+
+315 
+	#SHN_XINDEX
+ 0xfff‡
+
+	)
+
+316 
+	#SHN_HIRESERVE
+ 0xfff‡
+
+	)
+
+320 
+	#SHT_NULL
+ 0
+
+	)
+
+321 
+	#SHT_PROGBITS
+ 1
+
+	)
+
+322 
+	#SHT_SYMTAB
+ 2
+
+	)
+
+323 
+	#SHT_STRTAB
+ 3
+
+	)
+
+324 
+	#SHT_RELA
+ 4
+
+	)
+
+325 
+	#SHT_HASH
+ 5
+
+	)
+
+326 
+	#SHT_DYNAMIC
+ 6
+
+	)
+
+327 
+	#SHT_NOTE
+ 7
+
+	)
+
+328 
+	#SHT_NOBITS
+ 8
+
+	)
+
+329 
+	#SHT_REL
+ 9
+
+	)
+
+330 
+	#SHT_SHLIB
+ 10
+
+	)
+
+331 
+	#SHT_DYNSYM
+ 11
+
+	)
+
+332 
+	#SHT_INIT_ARRAY
+ 14
+
+	)
+
+333 
+	#SHT_FINI_ARRAY
+ 15
+
+	)
+
+334 
+	#SHT_PREINIT_ARRAY
+ 16
+
+	)
+
+335 
+	#SHT_GROUP
+ 17
+
+	)
+
+336 
+	#SHT_SYMTAB_SHNDX
+ 18
+
+	)
+
+337 
+	#SHT_NUM
+ 19
+
+	)
+
+338 
+	#SHT_LOOS
+ 0x60000000
+
+	)
+
+339 
+	#SHT_GNU_ATTRIBUTES
+ 0x6ffffff5
+
+	)
+
+340 
+	#SHT_GNU_HASH
+ 0x6ffffff6
+
+	)
+
+341 
+	#SHT_GNU_LIBLIST
+ 0x6ffffff7
+
+	)
+
+342 
+	#SHT_CHECKSUM
+ 0x6ffffff8
+
+	)
+
+343 
+	#SHT_LOSUNW
+ 0x6fffffÁ
+
+	)
+
+344 
+	#SHT_SUNW_move
+ 0x6fffffÁ
+
+	)
+
+345 
+	#SHT_SUNW_COMDAT
+ 0x6ffffffb
+
+	)
+
+346 
+	#SHT_SUNW_symöfo
+ 0x6ffffffc
+
+	)
+
+347 
+	#SHT_GNU_vîdef
+ 0x6ffffffd
+
+	)
+
+348 
+	#SHT_GNU_vî√ed
+ 0x6fffff„
+
+	)
+
+349 
+	#SHT_GNU_vîsym
+ 0x6ffffff‡
+
+	)
+
+350 
+	#SHT_HISUNW
+ 0x6ffffff‡
+
+	)
+
+351 
+	#SHT_HIOS
+ 0x6ffffff‡
+
+	)
+
+352 
+	#SHT_LOPROC
+ 0x70000000
+
+	)
+
+353 
+	#SHT_HIPROC
+ 0x7ffffff‡
+
+	)
+
+354 
+	#SHT_LOUSER
+ 0x80000000
+
+	)
+
+355 
+	#SHT_HIUSER
+ 0x8ffffff‡
+
+	)
+
+359 
+	#SHF_WRITE
+ (1 << 0Ë
+
+	)
+
+360 
+	#SHF_ALLOC
+ (1 << 1Ë
+
+	)
+
+361 
+	#SHF_EXECINSTR
+ (1 << 2Ë
+
+	)
+
+362 
+	#SHF_MERGE
+ (1 << 4Ë
+
+	)
+
+363 
+	#SHF_STRINGS
+ (1 << 5Ë
+
+	)
+
+364 
+	#SHF_INFO_LINK
+ (1 << 6Ë
+
+	)
+
+365 
+	#SHF_LINK_ORDER
+ (1 << 7Ë
+
+	)
+
+366 
+	#SHF_OS_NONCONFORMING
+ (1 << 8Ë
+
+	)
+
+368 
+	#SHF_GROUP
+ (1 << 9Ë
+
+	)
+
+369 
+	#SHF_TLS
+ (1 << 10Ë
+
+	)
+
+370 
+	#SHF_COMPRESSED
+ (1 << 11Ë
+
+	)
+
+371 
+	#SHF_MASKOS
+ 0x0ff00000
+
+	)
+
+372 
+	#SHF_MASKPROC
+ 0xf0000000
+
+	)
+
+373 
+	#SHF_ORDERED
+ (1 << 30Ë
+
+	)
+
+375 
+	#SHF_EXCLUDE
+ (1U << 31Ë
+
+	)
+
+382 
+Elf32_W‹d
+ 
+	mch_ty≥
+;
+
+383 
+Elf32_W‹d
+ 
+	mch_size
+;
+
+384 
+Elf32_W‹d
+ 
+	mch_addølign
+;
+
+385 } 
+	tElf32_Chdr
+;
+
+389 
+Elf64_W‹d
+ 
+	mch_ty≥
+;
+
+390 
+Elf64_W‹d
+ 
+	mch_ª£rved
+;
+
+391 
+Elf64_Xw‹d
+ 
+	mch_size
+;
+
+392 
+Elf64_Xw‹d
+ 
+	mch_addølign
+;
+
+393 } 
+	tElf64_Chdr
+;
+
+396 
+	#ELFCOMPRESS_ZLIB
+ 1
+
+	)
+
+397 
+	#ELFCOMPRESS_LOOS
+ 0x60000000
+
+	)
+
+398 
+	#ELFCOMPRESS_HIOS
+ 0x6ffffff‡
+
+	)
+
+399 
+	#ELFCOMPRESS_LOPROC
+ 0x70000000
+
+	)
+
+400 
+	#ELFCOMPRESS_HIPROC
+ 0x7ffffff‡
+
+	)
+
+403 
+	#GRP_COMDAT
+ 0x1
+
+	)
+
+409 
+Elf32_W‹d
+ 
+	m°_«me
+;
+
+410 
+Elf32_Addr
+ 
+	m°_vÆue
+;
+
+411 
+Elf32_W‹d
+ 
+	m°_size
+;
+
+412 
+	m°_öfo
+;
+
+413 
+	m°_Ÿhî
+;
+
+414 
+Elf32_Se˘i⁄
+ 
+	m°_shndx
+;
+
+415 } 
+	tElf32_Sym
+;
+
+419 
+Elf64_W‹d
+ 
+	m°_«me
+;
+
+420 
+	m°_öfo
+;
+
+421 
+	m°_Ÿhî
+;
+
+422 
+Elf64_Se˘i⁄
+ 
+	m°_shndx
+;
+
+423 
+Elf64_Addr
+ 
+	m°_vÆue
+;
+
+424 
+Elf64_Xw‹d
+ 
+	m°_size
+;
+
+425 } 
+	tElf64_Sym
+;
+
+432 
+Elf32_HÆf
+ 
+	msi_boundto
+;
+
+433 
+Elf32_HÆf
+ 
+	msi_Êags
+;
+
+434 } 
+	tElf32_Symöfo
+;
+
+438 
+Elf64_HÆf
+ 
+	msi_boundto
+;
+
+439 
+Elf64_HÆf
+ 
+	msi_Êags
+;
+
+440 } 
+	tElf64_Symöfo
+;
+
+443 
+	#SYMINFO_BT_SELF
+ 0xfff‡
+
+	)
+
+444 
+	#SYMINFO_BT_PARENT
+ 0xff„
+
+	)
+
+445 
+	#SYMINFO_BT_LOWRESERVE
+ 0xff00
+
+	)
+
+448 
+	#SYMINFO_FLG_DIRECT
+ 0x0001
+
+	)
+
+449 
+	#SYMINFO_FLG_PASSTHRU
+ 0x0002
+
+	)
+
+450 
+	#SYMINFO_FLG_COPY
+ 0x0004
+
+	)
+
+451 
+	#SYMINFO_FLG_LAZYLOAD
+ 0x0008
+
+	)
+
+454 
+	#SYMINFO_NONE
+ 0
+
+	)
+
+455 
+	#SYMINFO_CURRENT
+ 1
+
+	)
+
+456 
+	#SYMINFO_NUM
+ 2
+
+	)
+
+461 
+	#ELF32_ST_BIND
+(
+vÆ
+Ë(((Ë(vÆ)Ë>> 4)
+
+	)
+
+462 
+	#ELF32_ST_TYPE
+(
+vÆ
+Ë((vÆË& 0xf)
+
+	)
+
+463 
+	#ELF32_ST_INFO
+(
+böd
+, 
+ty≥
+Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))
+
+	)
+
+466 
+	#ELF64_ST_BIND
+(
+vÆ
+Ë
+	`ELF32_ST_BIND
+ (vÆ)
+
+	)
+
+467 
+	#ELF64_ST_TYPE
+(
+vÆ
+Ë
+	`ELF32_ST_TYPE
+ (vÆ)
+
+	)
+
+468 
+	#ELF64_ST_INFO
+(
+böd
+, 
+ty≥
+Ë
+	`ELF32_ST_INFO
+ ((böd), (ty≥))
+
+	)
+
+472 
+	#STB_LOCAL
+ 0
+
+	)
+
+473 
+	#STB_GLOBAL
+ 1
+
+	)
+
+474 
+	#STB_WEAK
+ 2
+
+	)
+
+475 
+	#STB_NUM
+ 3
+
+	)
+
+476 
+	#STB_LOOS
+ 10
+
+	)
+
+477 
+	#STB_GNU_UNIQUE
+ 10
+
+	)
+
+478 
+	#STB_HIOS
+ 12
+
+	)
+
+479 
+	#STB_LOPROC
+ 13
+
+	)
+
+480 
+	#STB_HIPROC
+ 15
+
+	)
+
+484 
+	#STT_NOTYPE
+ 0
+
+	)
+
+485 
+	#STT_OBJECT
+ 1
+
+	)
+
+486 
+	#STT_FUNC
+ 2
+
+	)
+
+487 
+	#STT_SECTION
+ 3
+
+	)
+
+488 
+	#STT_FILE
+ 4
+
+	)
+
+489 
+	#STT_COMMON
+ 5
+
+	)
+
+490 
+	#STT_TLS
+ 6
+
+	)
+
+491 
+	#STT_NUM
+ 7
+
+	)
+
+492 
+	#STT_LOOS
+ 10
+
+	)
+
+493 
+	#STT_GNU_IFUNC
+ 10
+
+	)
+
+494 
+	#STT_HIOS
+ 12
+
+	)
+
+495 
+	#STT_LOPROC
+ 13
+
+	)
+
+496 
+	#STT_HIPROC
+ 15
+
+	)
+
+503 
+	#STN_UNDEF
+ 0
+
+	)
+
+508 
+	#ELF32_ST_VISIBILITY
+(
+o
+Ë((oË& 0x03)
+
+	)
+
+511 
+	#ELF64_ST_VISIBILITY
+(
+o
+Ë
+	`ELF32_ST_VISIBILITY
+ (o)
+
+	)
+
+514 
+	#STV_DEFAULT
+ 0
+
+	)
+
+515 
+	#STV_INTERNAL
+ 1
+
+	)
+
+516 
+	#STV_HIDDEN
+ 2
+
+	)
+
+517 
+	#STV_PROTECTED
+ 3
+
+	)
+
+524 
+Elf32_Addr
+ 
+	mr_off£t
+;
+
+525 
+Elf32_W‹d
+ 
+	mr_öfo
+;
+
+526 } 
+	tElf32_Rñ
+;
+
+535 
+Elf64_Addr
+ 
+	mr_off£t
+;
+
+536 
+Elf64_Xw‹d
+ 
+	mr_öfo
+;
+
+537 } 
+	tElf64_Rñ
+;
+
+543 
+Elf32_Addr
+ 
+	mr_off£t
+;
+
+544 
+Elf32_W‹d
+ 
+	mr_öfo
+;
+
+545 
+Elf32_Sw‹d
+ 
+	mr_addíd
+;
+
+546 } 
+	tElf32_Rña
+;
+
+550 
+Elf64_Addr
+ 
+	mr_off£t
+;
+
+551 
+Elf64_Xw‹d
+ 
+	mr_öfo
+;
+
+552 
+Elf64_Sxw‹d
+ 
+	mr_addíd
+;
+
+553 } 
+	tElf64_Rña
+;
+
+557 
+	#ELF32_R_SYM
+(
+vÆ
+Ë((vÆË>> 8)
+
+	)
+
+558 
+	#ELF32_R_TYPE
+(
+vÆ
+Ë((vÆË& 0xff)
+
+	)
+
+559 
+	#ELF32_R_INFO
+(
+sym
+, 
+ty≥
+Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))
+
+	)
+
+561 
+	#ELF64_R_SYM
+(
+i
+Ë((iË>> 32)
+
+	)
+
+562 
+	#ELF64_R_TYPE
+(
+i
+Ë((iË& 0xffffffff)
+
+	)
+
+563 
+	#ELF64_R_INFO
+(
+sym
+,
+ty≥
+Ë((((
+Elf64_Xw‹d
+Ë(sym)Ë<< 32Ë+ (ty≥))
+
+	)
+
+569 
+Elf32_W‹d
+ 
+	mp_ty≥
+;
+
+570 
+Elf32_Off
+ 
+	mp_off£t
+;
+
+571 
+Elf32_Addr
+ 
+	mp_vaddr
+;
+
+572 
+Elf32_Addr
+ 
+	mp_∑ddr
+;
+
+573 
+Elf32_W‹d
+ 
+	mp_fûesz
+;
+
+574 
+Elf32_W‹d
+ 
+	mp_memsz
+;
+
+575 
+Elf32_W‹d
+ 
+	mp_Êags
+;
+
+576 
+Elf32_W‹d
+ 
+	mp_Æign
+;
+
+577 } 
+	tElf32_Phdr
+;
+
+581 
+Elf64_W‹d
+ 
+	mp_ty≥
+;
+
+582 
+Elf64_W‹d
+ 
+	mp_Êags
+;
+
+583 
+Elf64_Off
+ 
+	mp_off£t
+;
+
+584 
+Elf64_Addr
+ 
+	mp_vaddr
+;
+
+585 
+Elf64_Addr
+ 
+	mp_∑ddr
+;
+
+586 
+Elf64_Xw‹d
+ 
+	mp_fûesz
+;
+
+587 
+Elf64_Xw‹d
+ 
+	mp_memsz
+;
+
+588 
+Elf64_Xw‹d
+ 
+	mp_Æign
+;
+
+589 } 
+	tElf64_Phdr
+;
+
+595 
+	#PN_XNUM
+ 0xffff
+
+	)
+
+599 
+	#PT_NULL
+ 0
+
+	)
+
+600 
+	#PT_LOAD
+ 1
+
+	)
+
+601 
+	#PT_DYNAMIC
+ 2
+
+	)
+
+602 
+	#PT_INTERP
+ 3
+
+	)
+
+603 
+	#PT_NOTE
+ 4
+
+	)
+
+604 
+	#PT_SHLIB
+ 5
+
+	)
+
+605 
+	#PT_PHDR
+ 6
+
+	)
+
+606 
+	#PT_TLS
+ 7
+
+	)
+
+607 
+	#PT_NUM
+ 8
+
+	)
+
+608 
+	#PT_LOOS
+ 0x60000000
+
+	)
+
+609 
+	#PT_GNU_EH_FRAME
+ 0x6474e550
+
+	)
+
+610 
+	#PT_GNU_STACK
+ 0x6474e551
+
+	)
+
+611 
+	#PT_GNU_RELRO
+ 0x6474e552
+
+	)
+
+612 
+	#PT_LOSUNW
+ 0x6fffffÁ
+
+	)
+
+613 
+	#PT_SUNWBSS
+ 0x6fffffÁ
+
+	)
+
+614 
+	#PT_SUNWSTACK
+ 0x6ffffffb
+
+	)
+
+615 
+	#PT_HISUNW
+ 0x6fffffff
+
+	)
+
+616 
+	#PT_HIOS
+ 0x6ffffff‡
+
+	)
+
+617 
+	#PT_LOPROC
+ 0x70000000
+
+	)
+
+618 
+	#PT_HIPROC
+ 0x7ffffff‡
+
+	)
+
+622 
+	#PF_X
+ (1 << 0Ë
+
+	)
+
+623 
+	#PF_W
+ (1 << 1Ë
+
+	)
+
+624 
+	#PF_R
+ (1 << 2Ë
+
+	)
+
+625 
+	#PF_MASKOS
+ 0x0ff00000
+
+	)
+
+626 
+	#PF_MASKPROC
+ 0xf0000000
+
+	)
+
+630 
+	#NT_PRSTATUS
+ 1
+
+	)
+
+631 
+	#NT_FPREGSET
+ 2
+
+	)
+
+632 
+	#NT_PRPSINFO
+ 3
+
+	)
+
+633 
+	#NT_PRXREG
+ 4
+
+	)
+
+634 
+	#NT_TASKSTRUCT
+ 4
+
+	)
+
+635 
+	#NT_PLATFORM
+ 5
+
+	)
+
+636 
+	#NT_AUXV
+ 6
+
+	)
+
+637 
+	#NT_GWINDOWS
+ 7
+
+	)
+
+638 
+	#NT_ASRS
+ 8
+
+	)
+
+639 
+	#NT_PSTATUS
+ 10
+
+	)
+
+640 
+	#NT_PSINFO
+ 13
+
+	)
+
+641 
+	#NT_PRCRED
+ 14
+
+	)
+
+642 
+	#NT_UTSNAME
+ 15
+
+	)
+
+643 
+	#NT_LWPSTATUS
+ 16
+
+	)
+
+644 
+	#NT_LWPSINFO
+ 17
+
+	)
+
+645 
+	#NT_PRFPXREG
+ 20
+
+	)
+
+646 
+	#NT_SIGINFO
+ 0x53494749
+
+	)
+
+648 
+	#NT_FILE
+ 0x46494c45
+
+	)
+
+650 
+	#NT_PRXFPREG
+ 0x46e62b7‡
+
+	)
+
+651 
+	#NT_PPC_VMX
+ 0x100
+
+	)
+
+652 
+	#NT_PPC_SPE
+ 0x101
+
+	)
+
+653 
+	#NT_PPC_VSX
+ 0x102
+
+	)
+
+654 
+	#NT_386_TLS
+ 0x200
+
+	)
+
+655 
+	#NT_386_IOPERM
+ 0x201
+
+	)
+
+656 
+	#NT_X86_XSTATE
+ 0x202
+
+	)
+
+657 
+	#NT_S390_HIGH_GPRS
+ 0x300
+
+	)
+
+658 
+	#NT_S390_TIMER
+ 0x301
+
+	)
+
+659 
+	#NT_S390_TODCMP
+ 0x302
+
+	)
+
+660 
+	#NT_S390_TODPREG
+ 0x303
+
+	)
+
+661 
+	#NT_S390_CTRS
+ 0x304
+
+	)
+
+662 
+	#NT_S390_PREFIX
+ 0x305
+
+	)
+
+663 
+	#NT_S390_LAST_BREAK
+ 0x306
+
+	)
+
+664 
+	#NT_S390_SYSTEM_CALL
+ 0x307
+
+	)
+
+665 
+	#NT_S390_TDB
+ 0x308
+
+	)
+
+666 
+	#NT_ARM_VFP
+ 0x400
+
+	)
+
+667 
+	#NT_ARM_TLS
+ 0x401
+
+	)
+
+668 
+	#NT_ARM_HW_BREAK
+ 0x402
+
+	)
+
+669 
+	#NT_ARM_HW_WATCH
+ 0x403
+
+	)
+
+673 
+	#NT_VERSION
+ 1
+
+	)
+
+680 
+Elf32_Sw‹d
+ 
+	md_èg
+;
+
+683 
+Elf32_W‹d
+ 
+	md_vÆ
+;
+
+684 
+Elf32_Addr
+ 
+	md_±r
+;
+
+685 } 
+	md_un
+;
+
+686 } 
+	tElf32_Dyn
+;
+
+690 
+Elf64_Sxw‹d
+ 
+	md_èg
+;
+
+693 
+Elf64_Xw‹d
+ 
+	md_vÆ
+;
+
+694 
+Elf64_Addr
+ 
+	md_±r
+;
+
+695 } 
+	md_un
+;
+
+696 } 
+	tElf64_Dyn
+;
+
+700 
+	#DT_NULL
+ 0
+
+	)
+
+701 
+	#DT_NEEDED
+ 1
+
+	)
+
+702 
+	#DT_PLTRELSZ
+ 2
+
+	)
+
+703 
+	#DT_PLTGOT
+ 3
+
+	)
+
+704 
+	#DT_HASH
+ 4
+
+	)
+
+705 
+	#DT_STRTAB
+ 5
+
+	)
+
+706 
+	#DT_SYMTAB
+ 6
+
+	)
+
+707 
+	#DT_RELA
+ 7
+
+	)
+
+708 
+	#DT_RELASZ
+ 8
+
+	)
+
+709 
+	#DT_RELAENT
+ 9
+
+	)
+
+710 
+	#DT_STRSZ
+ 10
+
+	)
+
+711 
+	#DT_SYMENT
+ 11
+
+	)
+
+712 
+	#DT_INIT
+ 12
+
+	)
+
+713 
+	#DT_FINI
+ 13
+
+	)
+
+714 
+	#DT_SONAME
+ 14
+
+	)
+
+715 
+	#DT_RPATH
+ 15
+
+	)
+
+716 
+	#DT_SYMBOLIC
+ 16
+
+	)
+
+717 
+	#DT_REL
+ 17
+
+	)
+
+718 
+	#DT_RELSZ
+ 18
+
+	)
+
+719 
+	#DT_RELENT
+ 19
+
+	)
+
+720 
+	#DT_PLTREL
+ 20
+
+	)
+
+721 
+	#DT_DEBUG
+ 21
+
+	)
+
+722 
+	#DT_TEXTREL
+ 22
+
+	)
+
+723 
+	#DT_JMPREL
+ 23
+
+	)
+
+724 
+	#DT_BIND_NOW
+ 24
+
+	)
+
+725 
+	#DT_INIT_ARRAY
+ 25
+
+	)
+
+726 
+	#DT_FINI_ARRAY
+ 26
+
+	)
+
+727 
+	#DT_INIT_ARRAYSZ
+ 27
+
+	)
+
+728 
+	#DT_FINI_ARRAYSZ
+ 28
+
+	)
+
+729 
+	#DT_RUNPATH
+ 29
+
+	)
+
+730 
+	#DT_FLAGS
+ 30
+
+	)
+
+731 
+	#DT_ENCODING
+ 32
+
+	)
+
+732 
+	#DT_PREINIT_ARRAY
+ 32
+
+	)
+
+733 
+	#DT_PREINIT_ARRAYSZ
+ 33
+
+	)
+
+734 
+	#DT_NUM
+ 34
+
+	)
+
+735 
+	#DT_LOOS
+ 0x6000000d
+
+	)
+
+736 
+	#DT_HIOS
+ 0x6ffff000
+
+	)
+
+737 
+	#DT_LOPROC
+ 0x70000000
+
+	)
+
+738 
+	#DT_HIPROC
+ 0x7ffffff‡
+
+	)
+
+739 
+	#DT_PROCNUM
+ 
+DT_MIPS_NUM
+
+
+	)
+
+744 
+	#DT_VALRNGLO
+ 0x6ffffd00
+
+	)
+
+745 
+	#DT_GNU_PRELINKED
+ 0x6ffffdf5
+
+	)
+
+746 
+	#DT_GNU_CONFLICTSZ
+ 0x6ffffdf6
+
+	)
+
+747 
+	#DT_GNU_LIBLISTSZ
+ 0x6ffffdf7
+
+	)
+
+748 
+	#DT_CHECKSUM
+ 0x6ffffdf8
+
+	)
+
+749 
+	#DT_PLTPADSZ
+ 0x6ffffdf9
+
+	)
+
+750 
+	#DT_MOVEENT
+ 0x6ffffdÁ
+
+	)
+
+751 
+	#DT_MOVESZ
+ 0x6ffffdfb
+
+	)
+
+752 
+	#DT_FEATURE_1
+ 0x6ffffdf¯
+
+	)
+
+753 
+	#DT_POSFLAG_1
+ 0x6ffffdfd
+
+	)
+
+755 
+	#DT_SYMINSZ
+ 0x6ffffd„
+
+	)
+
+756 
+	#DT_SYMINENT
+ 0x6ffffdf‡
+
+	)
+
+757 
+	#DT_VALRNGHI
+ 0x6ffffdff
+
+	)
+
+758 
+	#DT_VALTAGIDX
+(
+èg
+Ë(
+DT_VALRNGHI
+ - (èg)Ë
+
+	)
+
+759 
+	#DT_VALNUM
+ 12
+
+	)
+
+766 
+	#DT_ADDRRNGLO
+ 0x6fff„00
+
+	)
+
+767 
+	#DT_GNU_HASH
+ 0x6fff„f5
+
+	)
+
+768 
+	#DT_TLSDESC_PLT
+ 0x6fff„f6
+
+	)
+
+769 
+	#DT_TLSDESC_GOT
+ 0x6fff„f7
+
+	)
+
+770 
+	#DT_GNU_CONFLICT
+ 0x6fff„f8
+
+	)
+
+771 
+	#DT_GNU_LIBLIST
+ 0x6fff„f9
+
+	)
+
+772 
+	#DT_CONFIG
+ 0x6fff„Á
+
+	)
+
+773 
+	#DT_DEPAUDIT
+ 0x6fff„fb
+
+	)
+
+774 
+	#DT_AUDIT
+ 0x6fff„f¯
+
+	)
+
+775 
+	#DT_PLTPAD
+ 0x6fff„fd
+
+	)
+
+776 
+	#DT_MOVETAB
+ 0x6fff„„
+
+	)
+
+777 
+	#DT_SYMINFO
+ 0x6fff„f‡
+
+	)
+
+778 
+	#DT_ADDRRNGHI
+ 0x6fff„ff
+
+	)
+
+779 
+	#DT_ADDRTAGIDX
+(
+èg
+Ë(
+DT_ADDRRNGHI
+ - (èg)Ë
+
+	)
+
+780 
+	#DT_ADDRNUM
+ 11
+
+	)
+
+784 
+	#DT_VERSYM
+ 0x6ffffff0
+
+	)
+
+786 
+	#DT_RELACOUNT
+ 0x6ffffff9
+
+	)
+
+787 
+	#DT_RELCOUNT
+ 0x6fffffÁ
+
+	)
+
+790 
+	#DT_FLAGS_1
+ 0x6ffffffb
+
+	)
+
+791 
+	#DT_VERDEF
+ 0x6ffffff¯
+
+	)
+
+793 
+	#DT_VERDEFNUM
+ 0x6ffffffd
+
+	)
+
+794 
+	#DT_VERNEED
+ 0x6fffff„
+
+	)
+
+796 
+	#DT_VERNEEDNUM
+ 0x6ffffff‡
+
+	)
+
+797 
+	#DT_VERSIONTAGIDX
+(
+èg
+Ë(
+DT_VERNEEDNUM
+ - (èg)Ë
+
+	)
+
+798 
+	#DT_VERSIONTAGNUM
+ 16
+
+	)
+
+802 
+	#DT_AUXILIARY
+ 0x7ffffffd
+
+	)
+
+803 
+	#DT_FILTER
+ 0x7ffffff‡
+
+	)
+
+804 
+	#DT_EXTRATAGIDX
+(
+èg
+Ë((
+Elf32_W‹d
+)-((
+Elf32_Sw‹d
+Ë—agË<<1>>1)-1)
+
+	)
+
+805 
+	#DT_EXTRANUM
+ 3
+
+	)
+
+808 
+	#DF_ORIGIN
+ 0x00000001
+
+	)
+
+809 
+	#DF_SYMBOLIC
+ 0x00000002
+
+	)
+
+810 
+	#DF_TEXTREL
+ 0x00000004
+
+	)
+
+811 
+	#DF_BIND_NOW
+ 0x00000008
+
+	)
+
+812 
+	#DF_STATIC_TLS
+ 0x00000010
+
+	)
+
+816 
+	#DF_1_NOW
+ 0x00000001
+
+	)
+
+817 
+	#DF_1_GLOBAL
+ 0x00000002
+
+	)
+
+818 
+	#DF_1_GROUP
+ 0x00000004
+
+	)
+
+819 
+	#DF_1_NODELETE
+ 0x00000008
+
+	)
+
+820 
+	#DF_1_LOADFLTR
+ 0x00000010
+
+	)
+
+821 
+	#DF_1_INITFIRST
+ 0x00000020
+
+	)
+
+822 
+	#DF_1_NOOPEN
+ 0x00000040
+
+	)
+
+823 
+	#DF_1_ORIGIN
+ 0x00000080
+
+	)
+
+824 
+	#DF_1_DIRECT
+ 0x00000100
+
+	)
+
+825 
+	#DF_1_TRANS
+ 0x00000200
+
+	)
+
+826 
+	#DF_1_INTERPOSE
+ 0x00000400
+
+	)
+
+827 
+	#DF_1_NODEFLIB
+ 0x00000800
+
+	)
+
+828 
+	#DF_1_NODUMP
+ 0x00001000
+
+	)
+
+829 
+	#DF_1_CONFALT
+ 0x00002000
+
+	)
+
+830 
+	#DF_1_ENDFILTEE
+ 0x00004000
+
+	)
+
+831 
+	#DF_1_DISPRELDNE
+ 0x00008000
+
+	)
+
+832 
+	#DF_1_DISPRELPND
+ 0x00010000
+
+	)
+
+833 
+	#DF_1_NODIRECT
+ 0x00020000
+
+	)
+
+834 
+	#DF_1_IGNMULDEF
+ 0x00040000
+
+	)
+
+835 
+	#DF_1_NOKSYMS
+ 0x00080000
+
+	)
+
+836 
+	#DF_1_NOHDR
+ 0x00100000
+
+	)
+
+837 
+	#DF_1_EDITED
+ 0x00200000
+
+	)
+
+838 
+	#DF_1_NORELOC
+ 0x00400000
+
+	)
+
+839 
+	#DF_1_SYMINTPOSE
+ 0x00800000
+
+	)
+
+840 
+	#DF_1_GLOBAUDIT
+ 0x01000000
+
+	)
+
+841 
+	#DF_1_SINGLETON
+ 0x02000000
+
+	)
+
+844 
+	#DTF_1_PARINIT
+ 0x00000001
+
+	)
+
+845 
+	#DTF_1_CONFEXP
+ 0x00000002
+
+	)
+
+848 
+	#DF_P1_LAZYLOAD
+ 0x00000001
+
+	)
+
+849 
+	#DF_P1_GROUPPERM
+ 0x00000002
+
+	)
+
+856 
+Elf32_HÆf
+ 
+	mvd_vîsi⁄
+;
+
+857 
+Elf32_HÆf
+ 
+	mvd_Êags
+;
+
+858 
+Elf32_HÆf
+ 
+	mvd_ndx
+;
+
+859 
+Elf32_HÆf
+ 
+	mvd_˙t
+;
+
+860 
+Elf32_W‹d
+ 
+	mvd_hash
+;
+
+861 
+Elf32_W‹d
+ 
+	mvd_aux
+;
+
+862 
+Elf32_W‹d
+ 
+	mvd_√xt
+;
+
+864 } 
+	tElf32_Vîdef
+;
+
+868 
+Elf64_HÆf
+ 
+	mvd_vîsi⁄
+;
+
+869 
+Elf64_HÆf
+ 
+	mvd_Êags
+;
+
+870 
+Elf64_HÆf
+ 
+	mvd_ndx
+;
+
+871 
+Elf64_HÆf
+ 
+	mvd_˙t
+;
+
+872 
+Elf64_W‹d
+ 
+	mvd_hash
+;
+
+873 
+Elf64_W‹d
+ 
+	mvd_aux
+;
+
+874 
+Elf64_W‹d
+ 
+	mvd_√xt
+;
+
+876 } 
+	tElf64_Vîdef
+;
+
+880 
+	#VER_DEF_NONE
+ 0
+
+	)
+
+881 
+	#VER_DEF_CURRENT
+ 1
+
+	)
+
+882 
+	#VER_DEF_NUM
+ 2
+
+	)
+
+885 
+	#VER_FLG_BASE
+ 0x1
+
+	)
+
+886 
+	#VER_FLG_WEAK
+ 0x2
+
+	)
+
+889 
+	#VER_NDX_LOCAL
+ 0
+
+	)
+
+890 
+	#VER_NDX_GLOBAL
+ 1
+
+	)
+
+891 
+	#VER_NDX_LORESERVE
+ 0xff00
+
+	)
+
+892 
+	#VER_NDX_ELIMINATE
+ 0xff01
+
+	)
+
+898 
+Elf32_W‹d
+ 
+	mvda_«me
+;
+
+899 
+Elf32_W‹d
+ 
+	mvda_√xt
+;
+
+901 } 
+	tElf32_Vîdaux
+;
+
+905 
+Elf64_W‹d
+ 
+	mvda_«me
+;
+
+906 
+Elf64_W‹d
+ 
+	mvda_√xt
+;
+
+908 } 
+	tElf64_Vîdaux
+;
+
+915 
+Elf32_HÆf
+ 
+	mvn_vîsi⁄
+;
+
+916 
+Elf32_HÆf
+ 
+	mvn_˙t
+;
+
+917 
+Elf32_W‹d
+ 
+	mvn_fûe
+;
+
+919 
+Elf32_W‹d
+ 
+	mvn_aux
+;
+
+920 
+Elf32_W‹d
+ 
+	mvn_√xt
+;
+
+922 } 
+	tElf32_Vî√ed
+;
+
+926 
+Elf64_HÆf
+ 
+	mvn_vîsi⁄
+;
+
+927 
+Elf64_HÆf
+ 
+	mvn_˙t
+;
+
+928 
+Elf64_W‹d
+ 
+	mvn_fûe
+;
+
+930 
+Elf64_W‹d
+ 
+	mvn_aux
+;
+
+931 
+Elf64_W‹d
+ 
+	mvn_√xt
+;
+
+933 } 
+	tElf64_Vî√ed
+;
+
+937 
+	#VER_NEED_NONE
+ 0
+
+	)
+
+938 
+	#VER_NEED_CURRENT
+ 1
+
+	)
+
+939 
+	#VER_NEED_NUM
+ 2
+
+	)
+
+945 
+Elf32_W‹d
+ 
+	mv«_hash
+;
+
+946 
+Elf32_HÆf
+ 
+	mv«_Êags
+;
+
+947 
+Elf32_HÆf
+ 
+	mv«_Ÿhî
+;
+
+948 
+Elf32_W‹d
+ 
+	mv«_«me
+;
+
+949 
+Elf32_W‹d
+ 
+	mv«_√xt
+;
+
+951 } 
+	tElf32_Vî«ux
+;
+
+955 
+Elf64_W‹d
+ 
+	mv«_hash
+;
+
+956 
+Elf64_HÆf
+ 
+	mv«_Êags
+;
+
+957 
+Elf64_HÆf
+ 
+	mv«_Ÿhî
+;
+
+958 
+Elf64_W‹d
+ 
+	mv«_«me
+;
+
+959 
+Elf64_W‹d
+ 
+	mv«_√xt
+;
+
+961 } 
+	tElf64_Vî«ux
+;
+
+965 
+	#VER_FLG_WEAK
+ 0x2
+
+	)
+
+979 
+uöt32_t
+ 
+	ma_ty≥
+;
+
+982 
+uöt32_t
+ 
+	ma_vÆ
+;
+
+986 } 
+	ma_un
+;
+
+987 } 
+	tElf32_auxv_t
+;
+
+991 
+uöt64_t
+ 
+	ma_ty≥
+;
+
+994 
+uöt64_t
+ 
+	ma_vÆ
+;
+
+998 } 
+	ma_un
+;
+
+999 } 
+	tElf64_auxv_t
+;
+
+1001 
+	~<bôs/auxv.h
+>
+
+1007 
+Elf32_W‹d
+ 
+	mn_«mesz
+;
+
+1008 
+Elf32_W‹d
+ 
+	mn_descsz
+;
+
+1009 
+Elf32_W‹d
+ 
+	mn_ty≥
+;
+
+1010 } 
+	tElf32_Nhdr
+;
+
+1014 
+Elf64_W‹d
+ 
+	mn_«mesz
+;
+
+1015 
+Elf64_W‹d
+ 
+	mn_descsz
+;
+
+1016 
+Elf64_W‹d
+ 
+	mn_ty≥
+;
+
+1017 } 
+	tElf64_Nhdr
+;
+
+1022 
+	#ELF_NOTE_SOLARIS
+ "SUNW Sﬁ¨is"
+
+	)
+
+1025 
+	#ELF_NOTE_GNU
+ "GNU"
+
+	)
+
+1031 
+	#ELF_NOTE_PAGESIZE_HINT
+ 1
+
+	)
+
+1042 
+	#NT_GNU_ABI_TAG
+ 1
+
+	)
+
+1043 
+	#ELF_NOTE_ABI
+ 
+NT_GNU_ABI_TAG
+
+
+	)
+
+1047 
+	#ELF_NOTE_OS_LINUX
+ 0
+
+	)
+
+1048 
+	#ELF_NOTE_OS_GNU
+ 1
+
+	)
+
+1049 
+	#ELF_NOTE_OS_SOLARIS2
+ 2
+
+	)
+
+1050 
+	#ELF_NOTE_OS_FREEBSD
+ 3
+
+	)
+
+1058 
+	#NT_GNU_HWCAP
+ 2
+
+	)
+
+1062 
+	#NT_GNU_BUILD_ID
+ 3
+
+	)
+
+1065 
+	#NT_GNU_GOLD_VERSION
+ 4
+
+	)
+
+1071 
+Elf32_Xw‹d
+ 
+	mm_vÆue
+;
+
+1072 
+Elf32_W‹d
+ 
+	mm_öfo
+;
+
+1073 
+Elf32_W‹d
+ 
+	mm_poff£t
+;
+
+1074 
+Elf32_HÆf
+ 
+	mm_ª≥©
+;
+
+1075 
+Elf32_HÆf
+ 
+	mm_°ride
+;
+
+1076 } 
+	tElf32_Move
+;
+
+1080 
+Elf64_Xw‹d
+ 
+	mm_vÆue
+;
+
+1081 
+Elf64_Xw‹d
+ 
+	mm_öfo
+;
+
+1082 
+Elf64_Xw‹d
+ 
+	mm_poff£t
+;
+
+1083 
+Elf64_HÆf
+ 
+	mm_ª≥©
+;
+
+1084 
+Elf64_HÆf
+ 
+	mm_°ride
+;
+
+1085 } 
+	tElf64_Move
+;
+
+1088 
+	#ELF32_M_SYM
+(
+öfo
+Ë((öfoË>> 8)
+
+	)
+
+1089 
+	#ELF32_M_SIZE
+(
+öfo
+Ë((Ë(öfo))
+
+	)
+
+1090 
+	#ELF32_M_INFO
+(
+sym
+, 
+size
+Ë(((symË<< 8Ë+ (Ë(size))
+
+	)
+
+1092 
+	#ELF64_M_SYM
+(
+öfo
+Ë
+	`ELF32_M_SYM
+ (öfo)
+
+	)
+
+1093 
+	#ELF64_M_SIZE
+(
+öfo
+Ë
+	`ELF32_M_SIZE
+ (öfo)
+
+	)
+
+1094 
+	#ELF64_M_INFO
+(
+sym
+, 
+size
+Ë
+	`ELF32_M_INFO
+ (sym, size)
+
+	)
+
+1100 
+	#EF_CPU32
+ 0x00810000
+
+	)
+
+1104 
+	#R_68K_NONE
+ 0
+
+	)
+
+1105 
+	#R_68K_32
+ 1
+
+	)
+
+1106 
+	#R_68K_16
+ 2
+
+	)
+
+1107 
+	#R_68K_8
+ 3
+
+	)
+
+1108 
+	#R_68K_PC32
+ 4
+
+	)
+
+1109 
+	#R_68K_PC16
+ 5
+
+	)
+
+1110 
+	#R_68K_PC8
+ 6
+
+	)
+
+1111 
+	#R_68K_GOT32
+ 7
+
+	)
+
+1112 
+	#R_68K_GOT16
+ 8
+
+	)
+
+1113 
+	#R_68K_GOT8
+ 9
+
+	)
+
+1114 
+	#R_68K_GOT32O
+ 10
+
+	)
+
+1115 
+	#R_68K_GOT16O
+ 11
+
+	)
+
+1116 
+	#R_68K_GOT8O
+ 12
+
+	)
+
+1117 
+	#R_68K_PLT32
+ 13
+
+	)
+
+1118 
+	#R_68K_PLT16
+ 14
+
+	)
+
+1119 
+	#R_68K_PLT8
+ 15
+
+	)
+
+1120 
+	#R_68K_PLT32O
+ 16
+
+	)
+
+1121 
+	#R_68K_PLT16O
+ 17
+
+	)
+
+1122 
+	#R_68K_PLT8O
+ 18
+
+	)
+
+1123 
+	#R_68K_COPY
+ 19
+
+	)
+
+1124 
+	#R_68K_GLOB_DAT
+ 20
+
+	)
+
+1125 
+	#R_68K_JMP_SLOT
+ 21
+
+	)
+
+1126 
+	#R_68K_RELATIVE
+ 22
+
+	)
+
+1127 
+	#R_68K_TLS_GD32
+ 25
+
+	)
+
+1128 
+	#R_68K_TLS_GD16
+ 26
+
+	)
+
+1129 
+	#R_68K_TLS_GD8
+ 27
+
+	)
+
+1130 
+	#R_68K_TLS_LDM32
+ 28
+
+	)
+
+1131 
+	#R_68K_TLS_LDM16
+ 29
+
+	)
+
+1132 
+	#R_68K_TLS_LDM8
+ 30
+
+	)
+
+1133 
+	#R_68K_TLS_LDO32
+ 31
+
+	)
+
+1134 
+	#R_68K_TLS_LDO16
+ 32
+
+	)
+
+1135 
+	#R_68K_TLS_LDO8
+ 33
+
+	)
+
+1136 
+	#R_68K_TLS_IE32
+ 34
+
+	)
+
+1137 
+	#R_68K_TLS_IE16
+ 35
+
+	)
+
+1138 
+	#R_68K_TLS_IE8
+ 36
+
+	)
+
+1139 
+	#R_68K_TLS_LE32
+ 37
+
+	)
+
+1141 
+	#R_68K_TLS_LE16
+ 38
+
+	)
+
+1143 
+	#R_68K_TLS_LE8
+ 39
+
+	)
+
+1145 
+	#R_68K_TLS_DTPMOD32
+ 40
+
+	)
+
+1146 
+	#R_68K_TLS_DTPREL32
+ 41
+
+	)
+
+1147 
+	#R_68K_TLS_TPREL32
+ 42
+
+	)
+
+1149 
+	#R_68K_NUM
+ 43
+
+	)
+
+1155 
+	#R_386_NONE
+ 0
+
+	)
+
+1156 
+	#R_386_32
+ 1
+
+	)
+
+1157 
+	#R_386_PC32
+ 2
+
+	)
+
+1158 
+	#R_386_GOT32
+ 3
+
+	)
+
+1159 
+	#R_386_PLT32
+ 4
+
+	)
+
+1160 
+	#R_386_COPY
+ 5
+
+	)
+
+1161 
+	#R_386_GLOB_DAT
+ 6
+
+	)
+
+1162 
+	#R_386_JMP_SLOT
+ 7
+
+	)
+
+1163 
+	#R_386_RELATIVE
+ 8
+
+	)
+
+1164 
+	#R_386_GOTOFF
+ 9
+
+	)
+
+1165 
+	#R_386_GOTPC
+ 10
+
+	)
+
+1166 
+	#R_386_32PLT
+ 11
+
+	)
+
+1167 
+	#R_386_TLS_TPOFF
+ 14
+
+	)
+
+1168 
+	#R_386_TLS_IE
+ 15
+
+	)
+
+1170 
+	#R_386_TLS_GOTIE
+ 16
+
+	)
+
+1172 
+	#R_386_TLS_LE
+ 17
+
+	)
+
+1174 
+	#R_386_TLS_GD
+ 18
+
+	)
+
+1176 
+	#R_386_TLS_LDM
+ 19
+
+	)
+
+1179 
+	#R_386_16
+ 20
+
+	)
+
+1180 
+	#R_386_PC16
+ 21
+
+	)
+
+1181 
+	#R_386_8
+ 22
+
+	)
+
+1182 
+	#R_386_PC8
+ 23
+
+	)
+
+1183 
+	#R_386_TLS_GD_32
+ 24
+
+	)
+
+1185 
+	#R_386_TLS_GD_PUSH
+ 25
+
+	)
+
+1186 
+	#R_386_TLS_GD_CALL
+ 26
+
+	)
+
+1188 
+	#R_386_TLS_GD_POP
+ 27
+
+	)
+
+1189 
+	#R_386_TLS_LDM_32
+ 28
+
+	)
+
+1191 
+	#R_386_TLS_LDM_PUSH
+ 29
+
+	)
+
+1192 
+	#R_386_TLS_LDM_CALL
+ 30
+
+	)
+
+1194 
+	#R_386_TLS_LDM_POP
+ 31
+
+	)
+
+1195 
+	#R_386_TLS_LDO_32
+ 32
+
+	)
+
+1196 
+	#R_386_TLS_IE_32
+ 33
+
+	)
+
+1198 
+	#R_386_TLS_LE_32
+ 34
+
+	)
+
+1200 
+	#R_386_TLS_DTPMOD32
+ 35
+
+	)
+
+1201 
+	#R_386_TLS_DTPOFF32
+ 36
+
+	)
+
+1202 
+	#R_386_TLS_TPOFF32
+ 37
+
+	)
+
+1203 
+	#R_386_SIZE32
+ 38
+
+	)
+
+1204 
+	#R_386_TLS_GOTDESC
+ 39
+
+	)
+
+1205 
+	#R_386_TLS_DESC_CALL
+ 40
+
+	)
+
+1208 
+	#R_386_TLS_DESC
+ 41
+
+	)
+
+1212 
+	#R_386_IRELATIVE
+ 42
+
+	)
+
+1214 
+	#R_386_NUM
+ 43
+
+	)
+
+1220 
+	#STT_SPARC_REGISTER
+ 13
+
+	)
+
+1224 
+	#EF_SPARCV9_MM
+ 3
+
+	)
+
+1225 
+	#EF_SPARCV9_TSO
+ 0
+
+	)
+
+1226 
+	#EF_SPARCV9_PSO
+ 1
+
+	)
+
+1227 
+	#EF_SPARCV9_RMO
+ 2
+
+	)
+
+1228 
+	#EF_SPARC_LEDATA
+ 0x800000
+
+	)
+
+1229 
+	#EF_SPARC_EXT_MASK
+ 0xFFFF00
+
+	)
+
+1230 
+	#EF_SPARC_32PLUS
+ 0x000100
+
+	)
+
+1231 
+	#EF_SPARC_SUN_US1
+ 0x000200
+
+	)
+
+1232 
+	#EF_SPARC_HAL_R1
+ 0x000400
+
+	)
+
+1233 
+	#EF_SPARC_SUN_US3
+ 0x000800
+
+	)
+
+1237 
+	#R_SPARC_NONE
+ 0
+
+	)
+
+1238 
+	#R_SPARC_8
+ 1
+
+	)
+
+1239 
+	#R_SPARC_16
+ 2
+
+	)
+
+1240 
+	#R_SPARC_32
+ 3
+
+	)
+
+1241 
+	#R_SPARC_DISP8
+ 4
+
+	)
+
+1242 
+	#R_SPARC_DISP16
+ 5
+
+	)
+
+1243 
+	#R_SPARC_DISP32
+ 6
+
+	)
+
+1244 
+	#R_SPARC_WDISP30
+ 7
+
+	)
+
+1245 
+	#R_SPARC_WDISP22
+ 8
+
+	)
+
+1246 
+	#R_SPARC_HI22
+ 9
+
+	)
+
+1247 
+	#R_SPARC_22
+ 10
+
+	)
+
+1248 
+	#R_SPARC_13
+ 11
+
+	)
+
+1249 
+	#R_SPARC_LO10
+ 12
+
+	)
+
+1250 
+	#R_SPARC_GOT10
+ 13
+
+	)
+
+1251 
+	#R_SPARC_GOT13
+ 14
+
+	)
+
+1252 
+	#R_SPARC_GOT22
+ 15
+
+	)
+
+1253 
+	#R_SPARC_PC10
+ 16
+
+	)
+
+1254 
+	#R_SPARC_PC22
+ 17
+
+	)
+
+1255 
+	#R_SPARC_WPLT30
+ 18
+
+	)
+
+1256 
+	#R_SPARC_COPY
+ 19
+
+	)
+
+1257 
+	#R_SPARC_GLOB_DAT
+ 20
+
+	)
+
+1258 
+	#R_SPARC_JMP_SLOT
+ 21
+
+	)
+
+1259 
+	#R_SPARC_RELATIVE
+ 22
+
+	)
+
+1260 
+	#R_SPARC_UA32
+ 23
+
+	)
+
+1264 
+	#R_SPARC_PLT32
+ 24
+
+	)
+
+1265 
+	#R_SPARC_HIPLT22
+ 25
+
+	)
+
+1266 
+	#R_SPARC_LOPLT10
+ 26
+
+	)
+
+1267 
+	#R_SPARC_PCPLT32
+ 27
+
+	)
+
+1268 
+	#R_SPARC_PCPLT22
+ 28
+
+	)
+
+1269 
+	#R_SPARC_PCPLT10
+ 29
+
+	)
+
+1270 
+	#R_SPARC_10
+ 30
+
+	)
+
+1271 
+	#R_SPARC_11
+ 31
+
+	)
+
+1272 
+	#R_SPARC_64
+ 32
+
+	)
+
+1273 
+	#R_SPARC_OLO10
+ 33
+
+	)
+
+1274 
+	#R_SPARC_HH22
+ 34
+
+	)
+
+1275 
+	#R_SPARC_HM10
+ 35
+
+	)
+
+1276 
+	#R_SPARC_LM22
+ 36
+
+	)
+
+1277 
+	#R_SPARC_PC_HH22
+ 37
+
+	)
+
+1278 
+	#R_SPARC_PC_HM10
+ 38
+
+	)
+
+1279 
+	#R_SPARC_PC_LM22
+ 39
+
+	)
+
+1280 
+	#R_SPARC_WDISP16
+ 40
+
+	)
+
+1281 
+	#R_SPARC_WDISP19
+ 41
+
+	)
+
+1282 
+	#R_SPARC_GLOB_JMP
+ 42
+
+	)
+
+1283 
+	#R_SPARC_7
+ 43
+
+	)
+
+1284 
+	#R_SPARC_5
+ 44
+
+	)
+
+1285 
+	#R_SPARC_6
+ 45
+
+	)
+
+1286 
+	#R_SPARC_DISP64
+ 46
+
+	)
+
+1287 
+	#R_SPARC_PLT64
+ 47
+
+	)
+
+1288 
+	#R_SPARC_HIX22
+ 48
+
+	)
+
+1289 
+	#R_SPARC_LOX10
+ 49
+
+	)
+
+1290 
+	#R_SPARC_H44
+ 50
+
+	)
+
+1291 
+	#R_SPARC_M44
+ 51
+
+	)
+
+1292 
+	#R_SPARC_L44
+ 52
+
+	)
+
+1293 
+	#R_SPARC_REGISTER
+ 53
+
+	)
+
+1294 
+	#R_SPARC_UA64
+ 54
+
+	)
+
+1295 
+	#R_SPARC_UA16
+ 55
+
+	)
+
+1296 
+	#R_SPARC_TLS_GD_HI22
+ 56
+
+	)
+
+1297 
+	#R_SPARC_TLS_GD_LO10
+ 57
+
+	)
+
+1298 
+	#R_SPARC_TLS_GD_ADD
+ 58
+
+	)
+
+1299 
+	#R_SPARC_TLS_GD_CALL
+ 59
+
+	)
+
+1300 
+	#R_SPARC_TLS_LDM_HI22
+ 60
+
+	)
+
+1301 
+	#R_SPARC_TLS_LDM_LO10
+ 61
+
+	)
+
+1302 
+	#R_SPARC_TLS_LDM_ADD
+ 62
+
+	)
+
+1303 
+	#R_SPARC_TLS_LDM_CALL
+ 63
+
+	)
+
+1304 
+	#R_SPARC_TLS_LDO_HIX22
+ 64
+
+	)
+
+1305 
+	#R_SPARC_TLS_LDO_LOX10
+ 65
+
+	)
+
+1306 
+	#R_SPARC_TLS_LDO_ADD
+ 66
+
+	)
+
+1307 
+	#R_SPARC_TLS_IE_HI22
+ 67
+
+	)
+
+1308 
+	#R_SPARC_TLS_IE_LO10
+ 68
+
+	)
+
+1309 
+	#R_SPARC_TLS_IE_LD
+ 69
+
+	)
+
+1310 
+	#R_SPARC_TLS_IE_LDX
+ 70
+
+	)
+
+1311 
+	#R_SPARC_TLS_IE_ADD
+ 71
+
+	)
+
+1312 
+	#R_SPARC_TLS_LE_HIX22
+ 72
+
+	)
+
+1313 
+	#R_SPARC_TLS_LE_LOX10
+ 73
+
+	)
+
+1314 
+	#R_SPARC_TLS_DTPMOD32
+ 74
+
+	)
+
+1315 
+	#R_SPARC_TLS_DTPMOD64
+ 75
+
+	)
+
+1316 
+	#R_SPARC_TLS_DTPOFF32
+ 76
+
+	)
+
+1317 
+	#R_SPARC_TLS_DTPOFF64
+ 77
+
+	)
+
+1318 
+	#R_SPARC_TLS_TPOFF32
+ 78
+
+	)
+
+1319 
+	#R_SPARC_TLS_TPOFF64
+ 79
+
+	)
+
+1320 
+	#R_SPARC_GOTDATA_HIX22
+ 80
+
+	)
+
+1321 
+	#R_SPARC_GOTDATA_LOX10
+ 81
+
+	)
+
+1322 
+	#R_SPARC_GOTDATA_OP_HIX22
+ 82
+
+	)
+
+1323 
+	#R_SPARC_GOTDATA_OP_LOX10
+ 83
+
+	)
+
+1324 
+	#R_SPARC_GOTDATA_OP
+ 84
+
+	)
+
+1325 
+	#R_SPARC_H34
+ 85
+
+	)
+
+1326 
+	#R_SPARC_SIZE32
+ 86
+
+	)
+
+1327 
+	#R_SPARC_SIZE64
+ 87
+
+	)
+
+1328 
+	#R_SPARC_WDISP10
+ 88
+
+	)
+
+1329 
+	#R_SPARC_JMP_IREL
+ 248
+
+	)
+
+1330 
+	#R_SPARC_IRELATIVE
+ 249
+
+	)
+
+1331 
+	#R_SPARC_GNU_VTINHERIT
+ 250
+
+	)
+
+1332 
+	#R_SPARC_GNU_VTENTRY
+ 251
+
+	)
+
+1333 
+	#R_SPARC_REV32
+ 252
+
+	)
+
+1335 
+	#R_SPARC_NUM
+ 253
+
+	)
+
+1339 
+	#DT_SPARC_REGISTER
+ 0x70000001
+
+	)
+
+1340 
+	#DT_SPARC_NUM
+ 2
+
+	)
+
+1346 
+	#EF_MIPS_NOREORDER
+ 1
+
+	)
+
+1347 
+	#EF_MIPS_PIC
+ 2
+
+	)
+
+1348 
+	#EF_MIPS_CPIC
+ 4
+
+	)
+
+1349 
+	#EF_MIPS_XGOT
+ 8
+
+	)
+
+1350 
+	#EF_MIPS_64BIT_WHIRL
+ 16
+
+	)
+
+1351 
+	#EF_MIPS_ABI2
+ 32
+
+	)
+
+1352 
+	#EF_MIPS_ABI_ON32
+ 64
+
+	)
+
+1353 
+	#EF_MIPS_FP64
+ 512
+
+	)
+
+1354 
+	#EF_MIPS_NAN2008
+ 1024
+
+	)
+
+1355 
+	#EF_MIPS_ARCH
+ 0xf0000000
+
+	)
+
+1359 
+	#EF_MIPS_ARCH_1
+ 0x00000000
+
+	)
+
+1360 
+	#EF_MIPS_ARCH_2
+ 0x10000000
+
+	)
+
+1361 
+	#EF_MIPS_ARCH_3
+ 0x20000000
+
+	)
+
+1362 
+	#EF_MIPS_ARCH_4
+ 0x30000000
+
+	)
+
+1363 
+	#EF_MIPS_ARCH_5
+ 0x40000000
+
+	)
+
+1364 
+	#EF_MIPS_ARCH_32
+ 0x50000000
+
+	)
+
+1365 
+	#EF_MIPS_ARCH_64
+ 0x60000000
+
+	)
+
+1366 
+	#EF_MIPS_ARCH_32R2
+ 0x70000000
+
+	)
+
+1367 
+	#EF_MIPS_ARCH_64R2
+ 0x80000000
+
+	)
+
+1371 
+	#E_MIPS_ARCH_1
+ 
+EF_MIPS_ARCH_1
+
+
+	)
+
+1372 
+	#E_MIPS_ARCH_2
+ 
+EF_MIPS_ARCH_2
+
+
+	)
+
+1373 
+	#E_MIPS_ARCH_3
+ 
+EF_MIPS_ARCH_3
+
+
+	)
+
+1374 
+	#E_MIPS_ARCH_4
+ 
+EF_MIPS_ARCH_4
+
+
+	)
+
+1375 
+	#E_MIPS_ARCH_5
+ 
+EF_MIPS_ARCH_5
+
+
+	)
+
+1376 
+	#E_MIPS_ARCH_32
+ 
+EF_MIPS_ARCH_32
+
+
+	)
+
+1377 
+	#E_MIPS_ARCH_64
+ 
+EF_MIPS_ARCH_64
+
+
+	)
+
+1381 
+	#SHN_MIPS_ACOMMON
+ 0xff00
+
+	)
+
+1382 
+	#SHN_MIPS_TEXT
+ 0xff01
+
+	)
+
+1383 
+	#SHN_MIPS_DATA
+ 0xff02
+
+	)
+
+1384 
+	#SHN_MIPS_SCOMMON
+ 0xff03
+
+	)
+
+1385 
+	#SHN_MIPS_SUNDEFINED
+ 0xff04
+
+	)
+
+1389 
+	#SHT_MIPS_LIBLIST
+ 0x70000000
+
+	)
+
+1390 
+	#SHT_MIPS_MSYM
+ 0x70000001
+
+	)
+
+1391 
+	#SHT_MIPS_CONFLICT
+ 0x70000002
+
+	)
+
+1392 
+	#SHT_MIPS_GPTAB
+ 0x70000003
+
+	)
+
+1393 
+	#SHT_MIPS_UCODE
+ 0x70000004
+
+	)
+
+1394 
+	#SHT_MIPS_DEBUG
+ 0x70000005
+
+	)
+
+1395 
+	#SHT_MIPS_REGINFO
+ 0x70000006
+
+	)
+
+1396 
+	#SHT_MIPS_PACKAGE
+ 0x70000007
+
+	)
+
+1397 
+	#SHT_MIPS_PACKSYM
+ 0x70000008
+
+	)
+
+1398 
+	#SHT_MIPS_RELD
+ 0x70000009
+
+	)
+
+1399 
+	#SHT_MIPS_IFACE
+ 0x7000000b
+
+	)
+
+1400 
+	#SHT_MIPS_CONTENT
+ 0x7000000c
+
+	)
+
+1401 
+	#SHT_MIPS_OPTIONS
+ 0x7000000d
+
+	)
+
+1402 
+	#SHT_MIPS_SHDR
+ 0x70000010
+
+	)
+
+1403 
+	#SHT_MIPS_FDESC
+ 0x70000011
+
+	)
+
+1404 
+	#SHT_MIPS_EXTSYM
+ 0x70000012
+
+	)
+
+1405 
+	#SHT_MIPS_DENSE
+ 0x70000013
+
+	)
+
+1406 
+	#SHT_MIPS_PDESC
+ 0x70000014
+
+	)
+
+1407 
+	#SHT_MIPS_LOCSYM
+ 0x70000015
+
+	)
+
+1408 
+	#SHT_MIPS_AUXSYM
+ 0x70000016
+
+	)
+
+1409 
+	#SHT_MIPS_OPTSYM
+ 0x70000017
+
+	)
+
+1410 
+	#SHT_MIPS_LOCSTR
+ 0x70000018
+
+	)
+
+1411 
+	#SHT_MIPS_LINE
+ 0x70000019
+
+	)
+
+1412 
+	#SHT_MIPS_RFDESC
+ 0x7000001a
+
+	)
+
+1413 
+	#SHT_MIPS_DELTASYM
+ 0x7000001b
+
+	)
+
+1414 
+	#SHT_MIPS_DELTAINST
+ 0x7000001c
+
+	)
+
+1415 
+	#SHT_MIPS_DELTACLASS
+ 0x7000001d
+
+	)
+
+1416 
+	#SHT_MIPS_DWARF
+ 0x7000001ê
+
+	)
+
+1417 
+	#SHT_MIPS_DELTADECL
+ 0x7000001f
+
+	)
+
+1418 
+	#SHT_MIPS_SYMBOL_LIB
+ 0x70000020
+
+	)
+
+1419 
+	#SHT_MIPS_EVENTS
+ 0x70000021
+
+	)
+
+1420 
+	#SHT_MIPS_TRANSLATE
+ 0x70000022
+
+	)
+
+1421 
+	#SHT_MIPS_PIXIE
+ 0x70000023
+
+	)
+
+1422 
+	#SHT_MIPS_XLATE
+ 0x70000024
+
+	)
+
+1423 
+	#SHT_MIPS_XLATE_DEBUG
+ 0x70000025
+
+	)
+
+1424 
+	#SHT_MIPS_WHIRL
+ 0x70000026
+
+	)
+
+1425 
+	#SHT_MIPS_EH_REGION
+ 0x70000027
+
+	)
+
+1426 
+	#SHT_MIPS_XLATE_OLD
+ 0x70000028
+
+	)
+
+1427 
+	#SHT_MIPS_PDR_EXCEPTION
+ 0x70000029
+
+	)
+
+1431 
+	#SHF_MIPS_GPREL
+ 0x10000000
+
+	)
+
+1432 
+	#SHF_MIPS_MERGE
+ 0x20000000
+
+	)
+
+1433 
+	#SHF_MIPS_ADDR
+ 0x40000000
+
+	)
+
+1434 
+	#SHF_MIPS_STRINGS
+ 0x80000000
+
+	)
+
+1435 
+	#SHF_MIPS_NOSTRIP
+ 0x08000000
+
+	)
+
+1436 
+	#SHF_MIPS_LOCAL
+ 0x04000000
+
+	)
+
+1437 
+	#SHF_MIPS_NAMES
+ 0x02000000
+
+	)
+
+1438 
+	#SHF_MIPS_NODUPE
+ 0x01000000
+
+	)
+
+1444 
+	#STO_MIPS_DEFAULT
+ 0x0
+
+	)
+
+1445 
+	#STO_MIPS_INTERNAL
+ 0x1
+
+	)
+
+1446 
+	#STO_MIPS_HIDDEN
+ 0x2
+
+	)
+
+1447 
+	#STO_MIPS_PROTECTED
+ 0x3
+
+	)
+
+1448 
+	#STO_MIPS_PLT
+ 0x8
+
+	)
+
+1449 
+	#STO_MIPS_SC_ALIGN_UNUSED
+ 0xff
+
+	)
+
+1452 
+	#STB_MIPS_SPLIT_COMMON
+ 13
+
+	)
+
+1460 
+Elf32_W‹d
+ 
+	mgt_cuºít_g_vÆue
+;
+
+1461 
+Elf32_W‹d
+ 
+	mgt_unu£d
+;
+
+1462 } 
+	mgt_hódî
+;
+
+1465 
+Elf32_W‹d
+ 
+	mgt_g_vÆue
+;
+
+1466 
+Elf32_W‹d
+ 
+	mgt_byãs
+;
+
+1467 } 
+	mgt_íåy
+;
+
+1468 } 
+	tElf32_g±ab
+;
+
+1474 
+Elf32_W‹d
+ 
+	mri_g¥mask
+;
+
+1475 
+Elf32_W‹d
+ 
+	mri_˝rmask
+[4];
+
+1476 
+Elf32_Sw‹d
+ 
+	mri_gp_vÆue
+;
+
+1477 } 
+	tElf32_RegInfo
+;
+
+1483 
+	mköd
+;
+
+1485 
+	msize
+;
+
+1486 
+Elf32_Se˘i⁄
+ 
+	m£˘i⁄
+;
+
+1488 
+Elf32_W‹d
+ 
+	möfo
+;
+
+1489 } 
+	tElf_O±i⁄s
+;
+
+1493 
+	#ODK_NULL
+ 0
+
+	)
+
+1494 
+	#ODK_REGINFO
+ 1
+
+	)
+
+1495 
+	#ODK_EXCEPTIONS
+ 2
+
+	)
+
+1496 
+	#ODK_PAD
+ 3
+
+	)
+
+1497 
+	#ODK_HWPATCH
+ 4
+
+	)
+
+1498 
+	#ODK_FILL
+ 5
+
+	)
+
+1499 
+	#ODK_TAGS
+ 6
+
+	)
+
+1500 
+	#ODK_HWAND
+ 7
+
+	)
+
+1501 
+	#ODK_HWOR
+ 8
+
+	)
+
+1505 
+	#OEX_FPU_MIN
+ 0x1‡
+
+	)
+
+1506 
+	#OEX_FPU_MAX
+ 0x1f00
+
+	)
+
+1507 
+	#OEX_PAGE0
+ 0x10000
+
+	)
+
+1508 
+	#OEX_SMM
+ 0x20000
+
+	)
+
+1509 
+	#OEX_FPDBUG
+ 0x40000
+
+	)
+
+1510 
+	#OEX_PRECISEFP
+ 
+OEX_FPDBUG
+
+
+	)
+
+1511 
+	#OEX_DISMISS
+ 0x80000
+
+	)
+
+1513 
+	#OEX_FPU_INVAL
+ 0x10
+
+	)
+
+1514 
+	#OEX_FPU_DIV0
+ 0x08
+
+	)
+
+1515 
+	#OEX_FPU_OFLO
+ 0x04
+
+	)
+
+1516 
+	#OEX_FPU_UFLO
+ 0x02
+
+	)
+
+1517 
+	#OEX_FPU_INEX
+ 0x01
+
+	)
+
+1521 
+	#OHW_R4KEOP
+ 0x1
+
+	)
+
+1522 
+	#OHW_R8KPFETCH
+ 0x2
+
+	)
+
+1523 
+	#OHW_R5KEOP
+ 0x4
+
+	)
+
+1524 
+	#OHW_R5KCVTL
+ 0x8
+
+	)
+
+1526 
+	#OPAD_PREFIX
+ 0x1
+
+	)
+
+1527 
+	#OPAD_POSTFIX
+ 0x2
+
+	)
+
+1528 
+	#OPAD_SYMBOL
+ 0x4
+
+	)
+
+1534 
+Elf32_W‹d
+ 
+	mhwp_Êags1
+;
+
+1535 
+Elf32_W‹d
+ 
+	mhwp_Êags2
+;
+
+1536 } 
+	tElf_O±i⁄s_Hw
+;
+
+1540 
+	#OHWA0_R4KEOP_CHECKED
+ 0x00000001
+
+	)
+
+1541 
+	#OHWA1_R4KEOP_CLEAN
+ 0x00000002
+
+	)
+
+1545 
+	#R_MIPS_NONE
+ 0
+
+	)
+
+1546 
+	#R_MIPS_16
+ 1
+
+	)
+
+1547 
+	#R_MIPS_32
+ 2
+
+	)
+
+1548 
+	#R_MIPS_REL32
+ 3
+
+	)
+
+1549 
+	#R_MIPS_26
+ 4
+
+	)
+
+1550 
+	#R_MIPS_HI16
+ 5
+
+	)
+
+1551 
+	#R_MIPS_LO16
+ 6
+
+	)
+
+1552 
+	#R_MIPS_GPREL16
+ 7
+
+	)
+
+1553 
+	#R_MIPS_LITERAL
+ 8
+
+	)
+
+1554 
+	#R_MIPS_GOT16
+ 9
+
+	)
+
+1555 
+	#R_MIPS_PC16
+ 10
+
+	)
+
+1556 
+	#R_MIPS_CALL16
+ 11
+
+	)
+
+1557 
+	#R_MIPS_GPREL32
+ 12
+
+	)
+
+1559 
+	#R_MIPS_SHIFT5
+ 16
+
+	)
+
+1560 
+	#R_MIPS_SHIFT6
+ 17
+
+	)
+
+1561 
+	#R_MIPS_64
+ 18
+
+	)
+
+1562 
+	#R_MIPS_GOT_DISP
+ 19
+
+	)
+
+1563 
+	#R_MIPS_GOT_PAGE
+ 20
+
+	)
+
+1564 
+	#R_MIPS_GOT_OFST
+ 21
+
+	)
+
+1565 
+	#R_MIPS_GOT_HI16
+ 22
+
+	)
+
+1566 
+	#R_MIPS_GOT_LO16
+ 23
+
+	)
+
+1567 
+	#R_MIPS_SUB
+ 24
+
+	)
+
+1568 
+	#R_MIPS_INSERT_A
+ 25
+
+	)
+
+1569 
+	#R_MIPS_INSERT_B
+ 26
+
+	)
+
+1570 
+	#R_MIPS_DELETE
+ 27
+
+	)
+
+1571 
+	#R_MIPS_HIGHER
+ 28
+
+	)
+
+1572 
+	#R_MIPS_HIGHEST
+ 29
+
+	)
+
+1573 
+	#R_MIPS_CALL_HI16
+ 30
+
+	)
+
+1574 
+	#R_MIPS_CALL_LO16
+ 31
+
+	)
+
+1575 
+	#R_MIPS_SCN_DISP
+ 32
+
+	)
+
+1576 
+	#R_MIPS_REL16
+ 33
+
+	)
+
+1577 
+	#R_MIPS_ADD_IMMEDIATE
+ 34
+
+	)
+
+1578 
+	#R_MIPS_PJUMP
+ 35
+
+	)
+
+1579 
+	#R_MIPS_RELGOT
+ 36
+
+	)
+
+1580 
+	#R_MIPS_JALR
+ 37
+
+	)
+
+1581 
+	#R_MIPS_TLS_DTPMOD32
+ 38
+
+	)
+
+1582 
+	#R_MIPS_TLS_DTPREL32
+ 39
+
+	)
+
+1583 
+	#R_MIPS_TLS_DTPMOD64
+ 40
+
+	)
+
+1584 
+	#R_MIPS_TLS_DTPREL64
+ 41
+
+	)
+
+1585 
+	#R_MIPS_TLS_GD
+ 42
+
+	)
+
+1586 
+	#R_MIPS_TLS_LDM
+ 43
+
+	)
+
+1587 
+	#R_MIPS_TLS_DTPREL_HI16
+ 44
+
+	)
+
+1588 
+	#R_MIPS_TLS_DTPREL_LO16
+ 45
+
+	)
+
+1589 
+	#R_MIPS_TLS_GOTTPREL
+ 46
+
+	)
+
+1590 
+	#R_MIPS_TLS_TPREL32
+ 47
+
+	)
+
+1591 
+	#R_MIPS_TLS_TPREL64
+ 48
+
+	)
+
+1592 
+	#R_MIPS_TLS_TPREL_HI16
+ 49
+
+	)
+
+1593 
+	#R_MIPS_TLS_TPREL_LO16
+ 50
+
+	)
+
+1594 
+	#R_MIPS_GLOB_DAT
+ 51
+
+	)
+
+1595 
+	#R_MIPS_COPY
+ 126
+
+	)
+
+1596 
+	#R_MIPS_JUMP_SLOT
+ 127
+
+	)
+
+1598 
+	#R_MIPS_NUM
+ 128
+
+	)
+
+1602 
+	#PT_MIPS_REGINFO
+ 0x70000000
+
+	)
+
+1603 
+	#PT_MIPS_RTPROC
+ 0x70000001
+
+	)
+
+1604 
+	#PT_MIPS_OPTIONS
+ 0x70000002
+
+	)
+
+1605 
+	#PT_MIPS_ABIFLAGS
+ 0x70000003
+
+	)
+
+1609 
+	#PF_MIPS_LOCAL
+ 0x10000000
+
+	)
+
+1613 
+	#DT_MIPS_RLD_VERSION
+ 0x70000001
+
+	)
+
+1614 
+	#DT_MIPS_TIME_STAMP
+ 0x70000002
+
+	)
+
+1615 
+	#DT_MIPS_ICHECKSUM
+ 0x70000003
+
+	)
+
+1616 
+	#DT_MIPS_IVERSION
+ 0x70000004
+
+	)
+
+1617 
+	#DT_MIPS_FLAGS
+ 0x70000005
+
+	)
+
+1618 
+	#DT_MIPS_BASE_ADDRESS
+ 0x70000006
+
+	)
+
+1619 
+	#DT_MIPS_MSYM
+ 0x70000007
+
+	)
+
+1620 
+	#DT_MIPS_CONFLICT
+ 0x70000008
+
+	)
+
+1621 
+	#DT_MIPS_LIBLIST
+ 0x70000009
+
+	)
+
+1622 
+	#DT_MIPS_LOCAL_GOTNO
+ 0x7000000®
+
+	)
+
+1623 
+	#DT_MIPS_CONFLICTNO
+ 0x7000000b
+
+	)
+
+1624 
+	#DT_MIPS_LIBLISTNO
+ 0x70000010
+
+	)
+
+1625 
+	#DT_MIPS_SYMTABNO
+ 0x70000011
+
+	)
+
+1626 
+	#DT_MIPS_UNREFEXTNO
+ 0x70000012
+
+	)
+
+1627 
+	#DT_MIPS_GOTSYM
+ 0x70000013
+
+	)
+
+1628 
+	#DT_MIPS_HIPAGENO
+ 0x70000014
+
+	)
+
+1629 
+	#DT_MIPS_RLD_MAP
+ 0x70000016
+
+	)
+
+1630 
+	#DT_MIPS_DELTA_CLASS
+ 0x70000017
+
+	)
+
+1631 
+	#DT_MIPS_DELTA_CLASS_NO
+ 0x70000018
+
+	)
+
+1633 
+	#DT_MIPS_DELTA_INSTANCE
+ 0x70000019
+
+	)
+
+1634 
+	#DT_MIPS_DELTA_INSTANCE_NO
+ 0x7000001®
+
+	)
+
+1636 
+	#DT_MIPS_DELTA_RELOC
+ 0x7000001b
+
+	)
+
+1637 
+	#DT_MIPS_DELTA_RELOC_NO
+ 0x7000001¯
+
+	)
+
+1639 
+	#DT_MIPS_DELTA_SYM
+ 0x7000001d
+
+	)
+
+1641 
+	#DT_MIPS_DELTA_SYM_NO
+ 0x7000001ê
+
+	)
+
+1643 
+	#DT_MIPS_DELTA_CLASSSYM
+ 0x70000020
+
+	)
+
+1645 
+	#DT_MIPS_DELTA_CLASSSYM_NO
+ 0x70000021
+
+	)
+
+1647 
+	#DT_MIPS_CXX_FLAGS
+ 0x70000022
+
+	)
+
+1648 
+	#DT_MIPS_PIXIE_INIT
+ 0x70000023
+
+	)
+
+1649 
+	#DT_MIPS_SYMBOL_LIB
+ 0x70000024
+
+	)
+
+1650 
+	#DT_MIPS_LOCALPAGE_GOTIDX
+ 0x70000025
+
+	)
+
+1651 
+	#DT_MIPS_LOCAL_GOTIDX
+ 0x70000026
+
+	)
+
+1652 
+	#DT_MIPS_HIDDEN_GOTIDX
+ 0x70000027
+
+	)
+
+1653 
+	#DT_MIPS_PROTECTED_GOTIDX
+ 0x70000028
+
+	)
+
+1654 
+	#DT_MIPS_OPTIONS
+ 0x70000029
+
+	)
+
+1655 
+	#DT_MIPS_INTERFACE
+ 0x7000002®
+
+	)
+
+1656 
+	#DT_MIPS_DYNSTR_ALIGN
+ 0x7000002b
+
+	)
+
+1657 
+	#DT_MIPS_INTERFACE_SIZE
+ 0x7000002¯
+
+	)
+
+1658 
+	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
+ 0x7000002d
+
+	)
+
+1660 
+	#DT_MIPS_PERF_SUFFIX
+ 0x7000002ê
+
+	)
+
+1662 
+	#DT_MIPS_COMPACT_SIZE
+ 0x7000002‡
+
+	)
+
+1663 
+	#DT_MIPS_GP_VALUE
+ 0x70000030
+
+	)
+
+1664 
+	#DT_MIPS_AUX_DYNAMIC
+ 0x70000031
+
+	)
+
+1666 
+	#DT_MIPS_PLTGOT
+ 0x70000032
+
+	)
+
+1670 
+	#DT_MIPS_RWPLT
+ 0x70000034
+
+	)
+
+1674 
+	#DT_MIPS_RLD_MAP_REL
+ 0x70000035
+
+	)
+
+1675 
+	#DT_MIPS_NUM
+ 0x36
+
+	)
+
+1679 
+	#RHF_NONE
+ 0
+
+	)
+
+1680 
+	#RHF_QUICKSTART
+ (1 << 0Ë
+
+	)
+
+1681 
+	#RHF_NOTPOT
+ (1 << 1Ë
+
+	)
+
+1682 
+	#RHF_NO_LIBRARY_REPLACEMENT
+ (1 << 2Ë
+
+	)
+
+1683 
+	#RHF_NO_MOVE
+ (1 << 3)
+
+	)
+
+1684 
+	#RHF_SGI_ONLY
+ (1 << 4)
+
+	)
+
+1685 
+	#RHF_GUARANTEE_INIT
+ (1 << 5)
+
+	)
+
+1686 
+	#RHF_DELTA_C_PLUS_PLUS
+ (1 << 6)
+
+	)
+
+1687 
+	#RHF_GUARANTEE_START_INIT
+ (1 << 7)
+
+	)
+
+1688 
+	#RHF_PIXIE
+ (1 << 8)
+
+	)
+
+1689 
+	#RHF_DEFAULT_DELAY_LOAD
+ (1 << 9)
+
+	)
+
+1690 
+	#RHF_REQUICKSTART
+ (1 << 10)
+
+	)
+
+1691 
+	#RHF_REQUICKSTARTED
+ (1 << 11)
+
+	)
+
+1692 
+	#RHF_CORD
+ (1 << 12)
+
+	)
+
+1693 
+	#RHF_NO_UNRES_UNDEF
+ (1 << 13)
+
+	)
+
+1694 
+	#RHF_RLD_ORDER_SAFE
+ (1 << 14)
+
+	)
+
+1700 
+Elf32_W‹d
+ 
+	ml_«me
+;
+
+1701 
+Elf32_W‹d
+ 
+	ml_time_°amp
+;
+
+1702 
+Elf32_W‹d
+ 
+	ml_checksum
+;
+
+1703 
+Elf32_W‹d
+ 
+	ml_vîsi⁄
+;
+
+1704 
+Elf32_W‹d
+ 
+	ml_Êags
+;
+
+1705 } 
+	tElf32_Lib
+;
+
+1709 
+Elf64_W‹d
+ 
+	ml_«me
+;
+
+1710 
+Elf64_W‹d
+ 
+	ml_time_°amp
+;
+
+1711 
+Elf64_W‹d
+ 
+	ml_checksum
+;
+
+1712 
+Elf64_W‹d
+ 
+	ml_vîsi⁄
+;
+
+1713 
+Elf64_W‹d
+ 
+	ml_Êags
+;
+
+1714 } 
+	tElf64_Lib
+;
+
+1719 
+	#LL_NONE
+ 0
+
+	)
+
+1720 
+	#LL_EXACT_MATCH
+ (1 << 0Ë
+
+	)
+
+1721 
+	#LL_IGNORE_INT_VER
+ (1 << 1Ë
+
+	)
+
+1722 
+	#LL_REQUIRE_MINOR
+ (1 << 2)
+
+	)
+
+1723 
+	#LL_EXPORTS
+ (1 << 3)
+
+	)
+
+1724 
+	#LL_DELAY_LOAD
+ (1 << 4)
+
+	)
+
+1725 
+	#LL_DELTA
+ (1 << 5)
+
+	)
+
+1729 
+Elf32_Addr
+ 
+	tElf32_C⁄Êi˘
+;
+
+1734 
+Elf32_HÆf
+ 
+	mvîsi⁄
+;
+
+1736 
+	miß_Àvñ
+;
+
+1738 
+	miß_ªv
+;
+
+1740 
+	mg¥_size
+;
+
+1742 
+	m˝r1_size
+;
+
+1744 
+	m˝r2_size
+;
+
+1746 
+	mÂ_abi
+;
+
+1748 
+Elf32_W‹d
+ 
+	miß_ext
+;
+
+1750 
+Elf32_W‹d
+ 
+	ma£s
+;
+
+1752 
+Elf32_W‹d
+ 
+	mÊags1
+;
+
+1753 
+Elf32_W‹d
+ 
+	mÊags2
+;
+
+1754 } 
+	tElf_MIPS_ABIFœgs_v0
+;
+
+1758 
+	#MIPS_AFL_REG_NONE
+ 0x00
+
+	)
+
+1759 
+	#MIPS_AFL_REG_32
+ 0x01
+
+	)
+
+1760 
+	#MIPS_AFL_REG_64
+ 0x02
+
+	)
+
+1761 
+	#MIPS_AFL_REG_128
+ 0x03
+
+	)
+
+1765 
+	#MIPS_AFL_ASE_DSP
+ 0x00000001
+
+	)
+
+1766 
+	#MIPS_AFL_ASE_DSPR2
+ 0x00000002
+
+	)
+
+1767 
+	#MIPS_AFL_ASE_EVA
+ 0x00000004
+
+	)
+
+1768 
+	#MIPS_AFL_ASE_MCU
+ 0x00000008
+
+	)
+
+1769 
+	#MIPS_AFL_ASE_MDMX
+ 0x00000010
+
+	)
+
+1770 
+	#MIPS_AFL_ASE_MIPS3D
+ 0x00000020
+
+	)
+
+1771 
+	#MIPS_AFL_ASE_MT
+ 0x00000040
+
+	)
+
+1772 
+	#MIPS_AFL_ASE_SMARTMIPS
+ 0x00000080
+
+	)
+
+1773 
+	#MIPS_AFL_ASE_VIRT
+ 0x00000100
+
+	)
+
+1774 
+	#MIPS_AFL_ASE_MSA
+ 0x00000200
+
+	)
+
+1775 
+	#MIPS_AFL_ASE_MIPS16
+ 0x00000400
+
+	)
+
+1776 
+	#MIPS_AFL_ASE_MICROMIPS
+ 0x00000800
+
+	)
+
+1777 
+	#MIPS_AFL_ASE_XPA
+ 0x00001000
+
+	)
+
+1778 
+	#MIPS_AFL_ASE_MASK
+ 0x00001ff‡
+
+	)
+
+1782 
+	#MIPS_AFL_EXT_XLR
+ 1
+
+	)
+
+1783 
+	#MIPS_AFL_EXT_OCTEON2
+ 2
+
+	)
+
+1784 
+	#MIPS_AFL_EXT_OCTEONP
+ 3
+
+	)
+
+1785 
+	#MIPS_AFL_EXT_LOONGSON_3A
+ 4
+
+	)
+
+1786 
+	#MIPS_AFL_EXT_OCTEON
+ 5
+
+	)
+
+1787 
+	#MIPS_AFL_EXT_5900
+ 6
+
+	)
+
+1788 
+	#MIPS_AFL_EXT_4650
+ 7
+
+	)
+
+1789 
+	#MIPS_AFL_EXT_4010
+ 8
+
+	)
+
+1790 
+	#MIPS_AFL_EXT_4100
+ 9
+
+	)
+
+1791 
+	#MIPS_AFL_EXT_3900
+ 10
+
+	)
+
+1792 
+	#MIPS_AFL_EXT_10000
+ 11
+
+	)
+
+1793 
+	#MIPS_AFL_EXT_SB1
+ 12
+
+	)
+
+1794 
+	#MIPS_AFL_EXT_4111
+ 13
+
+	)
+
+1795 
+	#MIPS_AFL_EXT_4120
+ 14
+
+	)
+
+1796 
+	#MIPS_AFL_EXT_5400
+ 15
+
+	)
+
+1797 
+	#MIPS_AFL_EXT_5500
+ 16
+
+	)
+
+1798 
+	#MIPS_AFL_EXT_LOONGSON_2E
+ 17
+
+	)
+
+1799 
+	#MIPS_AFL_EXT_LOONGSON_2F
+ 18
+
+	)
+
+1802 
+	#MIPS_AFL_FLAGS1_ODDSPREG
+ 1
+
+	)
+
+1808 
+	mVÆ_GNU_MIPS_ABI_FP_ANY
+ = 0,
+
+1810 
+	mVÆ_GNU_MIPS_ABI_FP_DOUBLE
+ = 1,
+
+1812 
+	mVÆ_GNU_MIPS_ABI_FP_SINGLE
+ = 2,
+
+1814 
+	mVÆ_GNU_MIPS_ABI_FP_SOFT
+ = 3,
+
+1816 
+	mVÆ_GNU_MIPS_ABI_FP_OLD_64
+ = 4,
+
+1818 
+	mVÆ_GNU_MIPS_ABI_FP_XX
+ = 5,
+
+1820 
+	mVÆ_GNU_MIPS_ABI_FP_64
+ = 6,
+
+1822 
+	mVÆ_GNU_MIPS_ABI_FP_64A
+ = 7,
+
+1824 
+	mVÆ_GNU_MIPS_ABI_FP_MAX
+ = 7
+
+1831 
+	#EF_PARISC_TRAPNIL
+ 0x00010000
+
+	)
+
+1832 
+	#EF_PARISC_EXT
+ 0x00020000
+
+	)
+
+1833 
+	#EF_PARISC_LSB
+ 0x00040000
+
+	)
+
+1834 
+	#EF_PARISC_WIDE
+ 0x00080000
+
+	)
+
+1835 
+	#EF_PARISC_NO_KABP
+ 0x00100000
+
+	)
+
+1837 
+	#EF_PARISC_LAZYSWAP
+ 0x00400000
+
+	)
+
+1838 
+	#EF_PARISC_ARCH
+ 0x0000fff‡
+
+	)
+
+1842 
+	#EFA_PARISC_1_0
+ 0x020b
+
+	)
+
+1843 
+	#EFA_PARISC_1_1
+ 0x0210
+
+	)
+
+1844 
+	#EFA_PARISC_2_0
+ 0x0214
+
+	)
+
+1848 
+	#SHN_PARISC_ANSI_COMMON
+ 0xff00
+
+	)
+
+1850 
+	#SHN_PARISC_HUGE_COMMON
+ 0xff01
+
+	)
+
+1854 
+	#SHT_PARISC_EXT
+ 0x70000000
+
+	)
+
+1855 
+	#SHT_PARISC_UNWIND
+ 0x70000001
+
+	)
+
+1856 
+	#SHT_PARISC_DOC
+ 0x70000002
+
+	)
+
+1860 
+	#SHF_PARISC_SHORT
+ 0x20000000
+
+	)
+
+1861 
+	#SHF_PARISC_HUGE
+ 0x40000000
+
+	)
+
+1862 
+	#SHF_PARISC_SBP
+ 0x80000000
+
+	)
+
+1866 
+	#STT_PARISC_MILLICODE
+ 13
+
+	)
+
+1868 
+	#STT_HP_OPAQUE
+ (
+STT_LOOS
+ + 0x1)
+
+	)
+
+1869 
+	#STT_HP_STUB
+ (
+STT_LOOS
+ + 0x2)
+
+	)
+
+1873 
+	#R_PARISC_NONE
+ 0
+
+	)
+
+1874 
+	#R_PARISC_DIR32
+ 1
+
+	)
+
+1875 
+	#R_PARISC_DIR21L
+ 2
+
+	)
+
+1876 
+	#R_PARISC_DIR17R
+ 3
+
+	)
+
+1877 
+	#R_PARISC_DIR17F
+ 4
+
+	)
+
+1878 
+	#R_PARISC_DIR14R
+ 6
+
+	)
+
+1879 
+	#R_PARISC_PCREL32
+ 9
+
+	)
+
+1880 
+	#R_PARISC_PCREL21L
+ 10
+
+	)
+
+1881 
+	#R_PARISC_PCREL17R
+ 11
+
+	)
+
+1882 
+	#R_PARISC_PCREL17F
+ 12
+
+	)
+
+1883 
+	#R_PARISC_PCREL14R
+ 14
+
+	)
+
+1884 
+	#R_PARISC_DPREL21L
+ 18
+
+	)
+
+1885 
+	#R_PARISC_DPREL14R
+ 22
+
+	)
+
+1886 
+	#R_PARISC_GPREL21L
+ 26
+
+	)
+
+1887 
+	#R_PARISC_GPREL14R
+ 30
+
+	)
+
+1888 
+	#R_PARISC_LTOFF21L
+ 34
+
+	)
+
+1889 
+	#R_PARISC_LTOFF14R
+ 38
+
+	)
+
+1890 
+	#R_PARISC_SECREL32
+ 41
+
+	)
+
+1891 
+	#R_PARISC_SEGBASE
+ 48
+
+	)
+
+1892 
+	#R_PARISC_SEGREL32
+ 49
+
+	)
+
+1893 
+	#R_PARISC_PLTOFF21L
+ 50
+
+	)
+
+1894 
+	#R_PARISC_PLTOFF14R
+ 54
+
+	)
+
+1895 
+	#R_PARISC_LTOFF_FPTR32
+ 57
+
+	)
+
+1896 
+	#R_PARISC_LTOFF_FPTR21L
+ 58
+
+	)
+
+1897 
+	#R_PARISC_LTOFF_FPTR14R
+ 62
+
+	)
+
+1898 
+	#R_PARISC_FPTR64
+ 64
+
+	)
+
+1899 
+	#R_PARISC_PLABEL32
+ 65
+
+	)
+
+1900 
+	#R_PARISC_PLABEL21L
+ 66
+
+	)
+
+1901 
+	#R_PARISC_PLABEL14R
+ 70
+
+	)
+
+1902 
+	#R_PARISC_PCREL64
+ 72
+
+	)
+
+1903 
+	#R_PARISC_PCREL22F
+ 74
+
+	)
+
+1904 
+	#R_PARISC_PCREL14WR
+ 75
+
+	)
+
+1905 
+	#R_PARISC_PCREL14DR
+ 76
+
+	)
+
+1906 
+	#R_PARISC_PCREL16F
+ 77
+
+	)
+
+1907 
+	#R_PARISC_PCREL16WF
+ 78
+
+	)
+
+1908 
+	#R_PARISC_PCREL16DF
+ 79
+
+	)
+
+1909 
+	#R_PARISC_DIR64
+ 80
+
+	)
+
+1910 
+	#R_PARISC_DIR14WR
+ 83
+
+	)
+
+1911 
+	#R_PARISC_DIR14DR
+ 84
+
+	)
+
+1912 
+	#R_PARISC_DIR16F
+ 85
+
+	)
+
+1913 
+	#R_PARISC_DIR16WF
+ 86
+
+	)
+
+1914 
+	#R_PARISC_DIR16DF
+ 87
+
+	)
+
+1915 
+	#R_PARISC_GPREL64
+ 88
+
+	)
+
+1916 
+	#R_PARISC_GPREL14WR
+ 91
+
+	)
+
+1917 
+	#R_PARISC_GPREL14DR
+ 92
+
+	)
+
+1918 
+	#R_PARISC_GPREL16F
+ 93
+
+	)
+
+1919 
+	#R_PARISC_GPREL16WF
+ 94
+
+	)
+
+1920 
+	#R_PARISC_GPREL16DF
+ 95
+
+	)
+
+1921 
+	#R_PARISC_LTOFF64
+ 96
+
+	)
+
+1922 
+	#R_PARISC_LTOFF14WR
+ 99
+
+	)
+
+1923 
+	#R_PARISC_LTOFF14DR
+ 100
+
+	)
+
+1924 
+	#R_PARISC_LTOFF16F
+ 101
+
+	)
+
+1925 
+	#R_PARISC_LTOFF16WF
+ 102
+
+	)
+
+1926 
+	#R_PARISC_LTOFF16DF
+ 103
+
+	)
+
+1927 
+	#R_PARISC_SECREL64
+ 104
+
+	)
+
+1928 
+	#R_PARISC_SEGREL64
+ 112
+
+	)
+
+1929 
+	#R_PARISC_PLTOFF14WR
+ 115
+
+	)
+
+1930 
+	#R_PARISC_PLTOFF14DR
+ 116
+
+	)
+
+1931 
+	#R_PARISC_PLTOFF16F
+ 117
+
+	)
+
+1932 
+	#R_PARISC_PLTOFF16WF
+ 118
+
+	)
+
+1933 
+	#R_PARISC_PLTOFF16DF
+ 119
+
+	)
+
+1934 
+	#R_PARISC_LTOFF_FPTR64
+ 120
+
+	)
+
+1935 
+	#R_PARISC_LTOFF_FPTR14WR
+ 123
+
+	)
+
+1936 
+	#R_PARISC_LTOFF_FPTR14DR
+ 124
+
+	)
+
+1937 
+	#R_PARISC_LTOFF_FPTR16F
+ 125
+
+	)
+
+1938 
+	#R_PARISC_LTOFF_FPTR16WF
+ 126
+
+	)
+
+1939 
+	#R_PARISC_LTOFF_FPTR16DF
+ 127
+
+	)
+
+1940 
+	#R_PARISC_LORESERVE
+ 128
+
+	)
+
+1941 
+	#R_PARISC_COPY
+ 128
+
+	)
+
+1942 
+	#R_PARISC_IPLT
+ 129
+
+	)
+
+1943 
+	#R_PARISC_EPLT
+ 130
+
+	)
+
+1944 
+	#R_PARISC_TPREL32
+ 153
+
+	)
+
+1945 
+	#R_PARISC_TPREL21L
+ 154
+
+	)
+
+1946 
+	#R_PARISC_TPREL14R
+ 158
+
+	)
+
+1947 
+	#R_PARISC_LTOFF_TP21L
+ 162
+
+	)
+
+1948 
+	#R_PARISC_LTOFF_TP14R
+ 166
+
+	)
+
+1949 
+	#R_PARISC_LTOFF_TP14F
+ 167
+
+	)
+
+1950 
+	#R_PARISC_TPREL64
+ 216
+
+	)
+
+1951 
+	#R_PARISC_TPREL14WR
+ 219
+
+	)
+
+1952 
+	#R_PARISC_TPREL14DR
+ 220
+
+	)
+
+1953 
+	#R_PARISC_TPREL16F
+ 221
+
+	)
+
+1954 
+	#R_PARISC_TPREL16WF
+ 222
+
+	)
+
+1955 
+	#R_PARISC_TPREL16DF
+ 223
+
+	)
+
+1956 
+	#R_PARISC_LTOFF_TP64
+ 224
+
+	)
+
+1957 
+	#R_PARISC_LTOFF_TP14WR
+ 227
+
+	)
+
+1958 
+	#R_PARISC_LTOFF_TP14DR
+ 228
+
+	)
+
+1959 
+	#R_PARISC_LTOFF_TP16F
+ 229
+
+	)
+
+1960 
+	#R_PARISC_LTOFF_TP16WF
+ 230
+
+	)
+
+1961 
+	#R_PARISC_LTOFF_TP16DF
+ 231
+
+	)
+
+1962 
+	#R_PARISC_GNU_VTENTRY
+ 232
+
+	)
+
+1963 
+	#R_PARISC_GNU_VTINHERIT
+ 233
+
+	)
+
+1964 
+	#R_PARISC_TLS_GD21L
+ 234
+
+	)
+
+1965 
+	#R_PARISC_TLS_GD14R
+ 235
+
+	)
+
+1966 
+	#R_PARISC_TLS_GDCALL
+ 236
+
+	)
+
+1967 
+	#R_PARISC_TLS_LDM21L
+ 237
+
+	)
+
+1968 
+	#R_PARISC_TLS_LDM14R
+ 238
+
+	)
+
+1969 
+	#R_PARISC_TLS_LDMCALL
+ 239
+
+	)
+
+1970 
+	#R_PARISC_TLS_LDO21L
+ 240
+
+	)
+
+1971 
+	#R_PARISC_TLS_LDO14R
+ 241
+
+	)
+
+1972 
+	#R_PARISC_TLS_DTPMOD32
+ 242
+
+	)
+
+1973 
+	#R_PARISC_TLS_DTPMOD64
+ 243
+
+	)
+
+1974 
+	#R_PARISC_TLS_DTPOFF32
+ 244
+
+	)
+
+1975 
+	#R_PARISC_TLS_DTPOFF64
+ 245
+
+	)
+
+1976 
+	#R_PARISC_TLS_LE21L
+ 
+R_PARISC_TPREL21L
+
+
+	)
+
+1977 
+	#R_PARISC_TLS_LE14R
+ 
+R_PARISC_TPREL14R
+
+
+	)
+
+1978 
+	#R_PARISC_TLS_IE21L
+ 
+R_PARISC_LTOFF_TP21L
+
+
+	)
+
+1979 
+	#R_PARISC_TLS_IE14R
+ 
+R_PARISC_LTOFF_TP14R
+
+
+	)
+
+1980 
+	#R_PARISC_TLS_TPREL32
+ 
+R_PARISC_TPREL32
+
+
+	)
+
+1981 
+	#R_PARISC_TLS_TPREL64
+ 
+R_PARISC_TPREL64
+
+
+	)
+
+1982 
+	#R_PARISC_HIRESERVE
+ 255
+
+	)
+
+1986 
+	#PT_HP_TLS
+ (
+PT_LOOS
+ + 0x0)
+
+	)
+
+1987 
+	#PT_HP_CORE_NONE
+ (
+PT_LOOS
+ + 0x1)
+
+	)
+
+1988 
+	#PT_HP_CORE_VERSION
+ (
+PT_LOOS
+ + 0x2)
+
+	)
+
+1989 
+	#PT_HP_CORE_KERNEL
+ (
+PT_LOOS
+ + 0x3)
+
+	)
+
+1990 
+	#PT_HP_CORE_COMM
+ (
+PT_LOOS
+ + 0x4)
+
+	)
+
+1991 
+	#PT_HP_CORE_PROC
+ (
+PT_LOOS
+ + 0x5)
+
+	)
+
+1992 
+	#PT_HP_CORE_LOADABLE
+ (
+PT_LOOS
+ + 0x6)
+
+	)
+
+1993 
+	#PT_HP_CORE_STACK
+ (
+PT_LOOS
+ + 0x7)
+
+	)
+
+1994 
+	#PT_HP_CORE_SHM
+ (
+PT_LOOS
+ + 0x8)
+
+	)
+
+1995 
+	#PT_HP_CORE_MMF
+ (
+PT_LOOS
+ + 0x9)
+
+	)
+
+1996 
+	#PT_HP_PARALLEL
+ (
+PT_LOOS
+ + 0x10)
+
+	)
+
+1997 
+	#PT_HP_FASTBIND
+ (
+PT_LOOS
+ + 0x11)
+
+	)
+
+1998 
+	#PT_HP_OPT_ANNOT
+ (
+PT_LOOS
+ + 0x12)
+
+	)
+
+1999 
+	#PT_HP_HSL_ANNOT
+ (
+PT_LOOS
+ + 0x13)
+
+	)
+
+2000 
+	#PT_HP_STACK
+ (
+PT_LOOS
+ + 0x14)
+
+	)
+
+2002 
+	#PT_PARISC_ARCHEXT
+ 0x70000000
+
+	)
+
+2003 
+	#PT_PARISC_UNWIND
+ 0x70000001
+
+	)
+
+2007 
+	#PF_PARISC_SBP
+ 0x08000000
+
+	)
+
+2009 
+	#PF_HP_PAGE_SIZE
+ 0x00100000
+
+	)
+
+2010 
+	#PF_HP_FAR_SHARED
+ 0x00200000
+
+	)
+
+2011 
+	#PF_HP_NEAR_SHARED
+ 0x00400000
+
+	)
+
+2012 
+	#PF_HP_CODE
+ 0x01000000
+
+	)
+
+2013 
+	#PF_HP_MODIFY
+ 0x02000000
+
+	)
+
+2014 
+	#PF_HP_LAZYSWAP
+ 0x04000000
+
+	)
+
+2015 
+	#PF_HP_SBP
+ 0x08000000
+
+	)
+
+2022 
+	#EF_ALPHA_32BIT
+ 1
+
+	)
+
+2023 
+	#EF_ALPHA_CANRELAX
+ 2
+
+	)
+
+2028 
+	#SHT_ALPHA_DEBUG
+ 0x70000001
+
+	)
+
+2029 
+	#SHT_ALPHA_REGINFO
+ 0x70000002
+
+	)
+
+2033 
+	#SHF_ALPHA_GPREL
+ 0x10000000
+
+	)
+
+2036 
+	#STO_ALPHA_NOPV
+ 0x80
+
+	)
+
+2037 
+	#STO_ALPHA_STD_GPLOAD
+ 0x88
+
+	)
+
+2041 
+	#R_ALPHA_NONE
+ 0
+
+	)
+
+2042 
+	#R_ALPHA_REFLONG
+ 1
+
+	)
+
+2043 
+	#R_ALPHA_REFQUAD
+ 2
+
+	)
+
+2044 
+	#R_ALPHA_GPREL32
+ 3
+
+	)
+
+2045 
+	#R_ALPHA_LITERAL
+ 4
+
+	)
+
+2046 
+	#R_ALPHA_LITUSE
+ 5
+
+	)
+
+2047 
+	#R_ALPHA_GPDISP
+ 6
+
+	)
+
+2048 
+	#R_ALPHA_BRADDR
+ 7
+
+	)
+
+2049 
+	#R_ALPHA_HINT
+ 8
+
+	)
+
+2050 
+	#R_ALPHA_SREL16
+ 9
+
+	)
+
+2051 
+	#R_ALPHA_SREL32
+ 10
+
+	)
+
+2052 
+	#R_ALPHA_SREL64
+ 11
+
+	)
+
+2053 
+	#R_ALPHA_GPRELHIGH
+ 17
+
+	)
+
+2054 
+	#R_ALPHA_GPRELLOW
+ 18
+
+	)
+
+2055 
+	#R_ALPHA_GPREL16
+ 19
+
+	)
+
+2056 
+	#R_ALPHA_COPY
+ 24
+
+	)
+
+2057 
+	#R_ALPHA_GLOB_DAT
+ 25
+
+	)
+
+2058 
+	#R_ALPHA_JMP_SLOT
+ 26
+
+	)
+
+2059 
+	#R_ALPHA_RELATIVE
+ 27
+
+	)
+
+2060 
+	#R_ALPHA_TLS_GD_HI
+ 28
+
+	)
+
+2061 
+	#R_ALPHA_TLSGD
+ 29
+
+	)
+
+2062 
+	#R_ALPHA_TLS_LDM
+ 30
+
+	)
+
+2063 
+	#R_ALPHA_DTPMOD64
+ 31
+
+	)
+
+2064 
+	#R_ALPHA_GOTDTPREL
+ 32
+
+	)
+
+2065 
+	#R_ALPHA_DTPREL64
+ 33
+
+	)
+
+2066 
+	#R_ALPHA_DTPRELHI
+ 34
+
+	)
+
+2067 
+	#R_ALPHA_DTPRELLO
+ 35
+
+	)
+
+2068 
+	#R_ALPHA_DTPREL16
+ 36
+
+	)
+
+2069 
+	#R_ALPHA_GOTTPREL
+ 37
+
+	)
+
+2070 
+	#R_ALPHA_TPREL64
+ 38
+
+	)
+
+2071 
+	#R_ALPHA_TPRELHI
+ 39
+
+	)
+
+2072 
+	#R_ALPHA_TPRELLO
+ 40
+
+	)
+
+2073 
+	#R_ALPHA_TPREL16
+ 41
+
+	)
+
+2075 
+	#R_ALPHA_NUM
+ 46
+
+	)
+
+2078 
+	#LITUSE_ALPHA_ADDR
+ 0
+
+	)
+
+2079 
+	#LITUSE_ALPHA_BASE
+ 1
+
+	)
+
+2080 
+	#LITUSE_ALPHA_BYTOFF
+ 2
+
+	)
+
+2081 
+	#LITUSE_ALPHA_JSR
+ 3
+
+	)
+
+2082 
+	#LITUSE_ALPHA_TLS_GD
+ 4
+
+	)
+
+2083 
+	#LITUSE_ALPHA_TLS_LDM
+ 5
+
+	)
+
+2086 
+	#DT_ALPHA_PLTRO
+ (
+DT_LOPROC
+ + 0)
+
+	)
+
+2087 
+	#DT_ALPHA_NUM
+ 1
+
+	)
+
+2092 
+	#EF_PPC_EMB
+ 0x80000000
+
+	)
+
+2095 
+	#EF_PPC_RELOCATABLE
+ 0x00010000
+
+	)
+
+2096 
+	#EF_PPC_RELOCATABLE_LIB
+ 0x00008000
+
+	)
+
+2100 
+	#R_PPC_NONE
+ 0
+
+	)
+
+2101 
+	#R_PPC_ADDR32
+ 1
+
+	)
+
+2102 
+	#R_PPC_ADDR24
+ 2
+
+	)
+
+2103 
+	#R_PPC_ADDR16
+ 3
+
+	)
+
+2104 
+	#R_PPC_ADDR16_LO
+ 4
+
+	)
+
+2105 
+	#R_PPC_ADDR16_HI
+ 5
+
+	)
+
+2106 
+	#R_PPC_ADDR16_HA
+ 6
+
+	)
+
+2107 
+	#R_PPC_ADDR14
+ 7
+
+	)
+
+2108 
+	#R_PPC_ADDR14_BRTAKEN
+ 8
+
+	)
+
+2109 
+	#R_PPC_ADDR14_BRNTAKEN
+ 9
+
+	)
+
+2110 
+	#R_PPC_REL24
+ 10
+
+	)
+
+2111 
+	#R_PPC_REL14
+ 11
+
+	)
+
+2112 
+	#R_PPC_REL14_BRTAKEN
+ 12
+
+	)
+
+2113 
+	#R_PPC_REL14_BRNTAKEN
+ 13
+
+	)
+
+2114 
+	#R_PPC_GOT16
+ 14
+
+	)
+
+2115 
+	#R_PPC_GOT16_LO
+ 15
+
+	)
+
+2116 
+	#R_PPC_GOT16_HI
+ 16
+
+	)
+
+2117 
+	#R_PPC_GOT16_HA
+ 17
+
+	)
+
+2118 
+	#R_PPC_PLTREL24
+ 18
+
+	)
+
+2119 
+	#R_PPC_COPY
+ 19
+
+	)
+
+2120 
+	#R_PPC_GLOB_DAT
+ 20
+
+	)
+
+2121 
+	#R_PPC_JMP_SLOT
+ 21
+
+	)
+
+2122 
+	#R_PPC_RELATIVE
+ 22
+
+	)
+
+2123 
+	#R_PPC_LOCAL24PC
+ 23
+
+	)
+
+2124 
+	#R_PPC_UADDR32
+ 24
+
+	)
+
+2125 
+	#R_PPC_UADDR16
+ 25
+
+	)
+
+2126 
+	#R_PPC_REL32
+ 26
+
+	)
+
+2127 
+	#R_PPC_PLT32
+ 27
+
+	)
+
+2128 
+	#R_PPC_PLTREL32
+ 28
+
+	)
+
+2129 
+	#R_PPC_PLT16_LO
+ 29
+
+	)
+
+2130 
+	#R_PPC_PLT16_HI
+ 30
+
+	)
+
+2131 
+	#R_PPC_PLT16_HA
+ 31
+
+	)
+
+2132 
+	#R_PPC_SDAREL16
+ 32
+
+	)
+
+2133 
+	#R_PPC_SECTOFF
+ 33
+
+	)
+
+2134 
+	#R_PPC_SECTOFF_LO
+ 34
+
+	)
+
+2135 
+	#R_PPC_SECTOFF_HI
+ 35
+
+	)
+
+2136 
+	#R_PPC_SECTOFF_HA
+ 36
+
+	)
+
+2139 
+	#R_PPC_TLS
+ 67
+
+	)
+
+2140 
+	#R_PPC_DTPMOD32
+ 68
+
+	)
+
+2141 
+	#R_PPC_TPREL16
+ 69
+
+	)
+
+2142 
+	#R_PPC_TPREL16_LO
+ 70
+
+	)
+
+2143 
+	#R_PPC_TPREL16_HI
+ 71
+
+	)
+
+2144 
+	#R_PPC_TPREL16_HA
+ 72
+
+	)
+
+2145 
+	#R_PPC_TPREL32
+ 73
+
+	)
+
+2146 
+	#R_PPC_DTPREL16
+ 74
+
+	)
+
+2147 
+	#R_PPC_DTPREL16_LO
+ 75
+
+	)
+
+2148 
+	#R_PPC_DTPREL16_HI
+ 76
+
+	)
+
+2149 
+	#R_PPC_DTPREL16_HA
+ 77
+
+	)
+
+2150 
+	#R_PPC_DTPREL32
+ 78
+
+	)
+
+2151 
+	#R_PPC_GOT_TLSGD16
+ 79
+
+	)
+
+2152 
+	#R_PPC_GOT_TLSGD16_LO
+ 80
+
+	)
+
+2153 
+	#R_PPC_GOT_TLSGD16_HI
+ 81
+
+	)
+
+2154 
+	#R_PPC_GOT_TLSGD16_HA
+ 82
+
+	)
+
+2155 
+	#R_PPC_GOT_TLSLD16
+ 83
+
+	)
+
+2156 
+	#R_PPC_GOT_TLSLD16_LO
+ 84
+
+	)
+
+2157 
+	#R_PPC_GOT_TLSLD16_HI
+ 85
+
+	)
+
+2158 
+	#R_PPC_GOT_TLSLD16_HA
+ 86
+
+	)
+
+2159 
+	#R_PPC_GOT_TPREL16
+ 87
+
+	)
+
+2160 
+	#R_PPC_GOT_TPREL16_LO
+ 88
+
+	)
+
+2161 
+	#R_PPC_GOT_TPREL16_HI
+ 89
+
+	)
+
+2162 
+	#R_PPC_GOT_TPREL16_HA
+ 90
+
+	)
+
+2163 
+	#R_PPC_GOT_DTPREL16
+ 91
+
+	)
+
+2164 
+	#R_PPC_GOT_DTPREL16_LO
+ 92
+
+	)
+
+2165 
+	#R_PPC_GOT_DTPREL16_HI
+ 93
+
+	)
+
+2166 
+	#R_PPC_GOT_DTPREL16_HA
+ 94
+
+	)
+
+2167 
+	#R_PPC_TLSGD
+ 95
+
+	)
+
+2168 
+	#R_PPC_TLSLD
+ 96
+
+	)
+
+2172 
+	#R_PPC_EMB_NADDR32
+ 101
+
+	)
+
+2173 
+	#R_PPC_EMB_NADDR16
+ 102
+
+	)
+
+2174 
+	#R_PPC_EMB_NADDR16_LO
+ 103
+
+	)
+
+2175 
+	#R_PPC_EMB_NADDR16_HI
+ 104
+
+	)
+
+2176 
+	#R_PPC_EMB_NADDR16_HA
+ 105
+
+	)
+
+2177 
+	#R_PPC_EMB_SDAI16
+ 106
+
+	)
+
+2178 
+	#R_PPC_EMB_SDA2I16
+ 107
+
+	)
+
+2179 
+	#R_PPC_EMB_SDA2REL
+ 108
+
+	)
+
+2180 
+	#R_PPC_EMB_SDA21
+ 109
+
+	)
+
+2181 
+	#R_PPC_EMB_MRKREF
+ 110
+
+	)
+
+2182 
+	#R_PPC_EMB_RELSEC16
+ 111
+
+	)
+
+2183 
+	#R_PPC_EMB_RELST_LO
+ 112
+
+	)
+
+2184 
+	#R_PPC_EMB_RELST_HI
+ 113
+
+	)
+
+2185 
+	#R_PPC_EMB_RELST_HA
+ 114
+
+	)
+
+2186 
+	#R_PPC_EMB_BIT_FLD
+ 115
+
+	)
+
+2187 
+	#R_PPC_EMB_RELSDA
+ 116
+
+	)
+
+2190 
+	#R_PPC_DIAB_SDA21_LO
+ 180
+
+	)
+
+2191 
+	#R_PPC_DIAB_SDA21_HI
+ 181
+
+	)
+
+2192 
+	#R_PPC_DIAB_SDA21_HA
+ 182
+
+	)
+
+2193 
+	#R_PPC_DIAB_RELSDA_LO
+ 183
+
+	)
+
+2194 
+	#R_PPC_DIAB_RELSDA_HI
+ 184
+
+	)
+
+2195 
+	#R_PPC_DIAB_RELSDA_HA
+ 185
+
+	)
+
+2198 
+	#R_PPC_IRELATIVE
+ 248
+
+	)
+
+2201 
+	#R_PPC_REL16
+ 249
+
+	)
+
+2202 
+	#R_PPC_REL16_LO
+ 250
+
+	)
+
+2203 
+	#R_PPC_REL16_HI
+ 251
+
+	)
+
+2204 
+	#R_PPC_REL16_HA
+ 252
+
+	)
+
+2208 
+	#R_PPC_TOC16
+ 255
+
+	)
+
+2211 
+	#DT_PPC_GOT
+ (
+DT_LOPROC
+ + 0)
+
+	)
+
+2212 
+	#DT_PPC_OPT
+ (
+DT_LOPROC
+ + 1)
+
+	)
+
+2213 
+	#DT_PPC_NUM
+ 2
+
+	)
+
+2216 
+	#PPC_OPT_TLS
+ 1
+
+	)
+
+2219 
+	#R_PPC64_NONE
+ 
+R_PPC_NONE
+
+
+	)
+
+2220 
+	#R_PPC64_ADDR32
+ 
+R_PPC_ADDR32
+
+
+	)
+
+2221 
+	#R_PPC64_ADDR24
+ 
+R_PPC_ADDR24
+
+
+	)
+
+2222 
+	#R_PPC64_ADDR16
+ 
+R_PPC_ADDR16
+
+
+	)
+
+2223 
+	#R_PPC64_ADDR16_LO
+ 
+R_PPC_ADDR16_LO
+
+
+	)
+
+2224 
+	#R_PPC64_ADDR16_HI
+ 
+R_PPC_ADDR16_HI
+
+
+	)
+
+2225 
+	#R_PPC64_ADDR16_HA
+ 
+R_PPC_ADDR16_HA
+
+
+	)
+
+2226 
+	#R_PPC64_ADDR14
+ 
+R_PPC_ADDR14
+
+
+	)
+
+2227 
+	#R_PPC64_ADDR14_BRTAKEN
+ 
+R_PPC_ADDR14_BRTAKEN
+
+
+	)
+
+2228 
+	#R_PPC64_ADDR14_BRNTAKEN
+ 
+R_PPC_ADDR14_BRNTAKEN
+
+
+	)
+
+2229 
+	#R_PPC64_REL24
+ 
+R_PPC_REL24
+
+
+	)
+
+2230 
+	#R_PPC64_REL14
+ 
+R_PPC_REL14
+
+
+	)
+
+2231 
+	#R_PPC64_REL14_BRTAKEN
+ 
+R_PPC_REL14_BRTAKEN
+
+
+	)
+
+2232 
+	#R_PPC64_REL14_BRNTAKEN
+ 
+R_PPC_REL14_BRNTAKEN
+
+
+	)
+
+2233 
+	#R_PPC64_GOT16
+ 
+R_PPC_GOT16
+
+
+	)
+
+2234 
+	#R_PPC64_GOT16_LO
+ 
+R_PPC_GOT16_LO
+
+
+	)
+
+2235 
+	#R_PPC64_GOT16_HI
+ 
+R_PPC_GOT16_HI
+
+
+	)
+
+2236 
+	#R_PPC64_GOT16_HA
+ 
+R_PPC_GOT16_HA
+
+
+	)
+
+2238 
+	#R_PPC64_COPY
+ 
+R_PPC_COPY
+
+
+	)
+
+2239 
+	#R_PPC64_GLOB_DAT
+ 
+R_PPC_GLOB_DAT
+
+
+	)
+
+2240 
+	#R_PPC64_JMP_SLOT
+ 
+R_PPC_JMP_SLOT
+
+
+	)
+
+2241 
+	#R_PPC64_RELATIVE
+ 
+R_PPC_RELATIVE
+
+
+	)
+
+2243 
+	#R_PPC64_UADDR32
+ 
+R_PPC_UADDR32
+
+
+	)
+
+2244 
+	#R_PPC64_UADDR16
+ 
+R_PPC_UADDR16
+
+
+	)
+
+2245 
+	#R_PPC64_REL32
+ 
+R_PPC_REL32
+
+
+	)
+
+2246 
+	#R_PPC64_PLT32
+ 
+R_PPC_PLT32
+
+
+	)
+
+2247 
+	#R_PPC64_PLTREL32
+ 
+R_PPC_PLTREL32
+
+
+	)
+
+2248 
+	#R_PPC64_PLT16_LO
+ 
+R_PPC_PLT16_LO
+
+
+	)
+
+2249 
+	#R_PPC64_PLT16_HI
+ 
+R_PPC_PLT16_HI
+
+
+	)
+
+2250 
+	#R_PPC64_PLT16_HA
+ 
+R_PPC_PLT16_HA
+
+
+	)
+
+2252 
+	#R_PPC64_SECTOFF
+ 
+R_PPC_SECTOFF
+
+
+	)
+
+2253 
+	#R_PPC64_SECTOFF_LO
+ 
+R_PPC_SECTOFF_LO
+
+
+	)
+
+2254 
+	#R_PPC64_SECTOFF_HI
+ 
+R_PPC_SECTOFF_HI
+
+
+	)
+
+2255 
+	#R_PPC64_SECTOFF_HA
+ 
+R_PPC_SECTOFF_HA
+
+
+	)
+
+2256 
+	#R_PPC64_ADDR30
+ 37
+
+	)
+
+2257 
+	#R_PPC64_ADDR64
+ 38
+
+	)
+
+2258 
+	#R_PPC64_ADDR16_HIGHER
+ 39
+
+	)
+
+2259 
+	#R_PPC64_ADDR16_HIGHERA
+ 40
+
+	)
+
+2260 
+	#R_PPC64_ADDR16_HIGHEST
+ 41
+
+	)
+
+2261 
+	#R_PPC64_ADDR16_HIGHESTA
+ 42
+
+	)
+
+2262 
+	#R_PPC64_UADDR64
+ 43
+
+	)
+
+2263 
+	#R_PPC64_REL64
+ 44
+
+	)
+
+2264 
+	#R_PPC64_PLT64
+ 45
+
+	)
+
+2265 
+	#R_PPC64_PLTREL64
+ 46
+
+	)
+
+2266 
+	#R_PPC64_TOC16
+ 47
+
+	)
+
+2267 
+	#R_PPC64_TOC16_LO
+ 48
+
+	)
+
+2268 
+	#R_PPC64_TOC16_HI
+ 49
+
+	)
+
+2269 
+	#R_PPC64_TOC16_HA
+ 50
+
+	)
+
+2270 
+	#R_PPC64_TOC
+ 51
+
+	)
+
+2271 
+	#R_PPC64_PLTGOT16
+ 52
+
+	)
+
+2272 
+	#R_PPC64_PLTGOT16_LO
+ 53
+
+	)
+
+2273 
+	#R_PPC64_PLTGOT16_HI
+ 54
+
+	)
+
+2274 
+	#R_PPC64_PLTGOT16_HA
+ 55
+
+	)
+
+2276 
+	#R_PPC64_ADDR16_DS
+ 56
+
+	)
+
+2277 
+	#R_PPC64_ADDR16_LO_DS
+ 57
+
+	)
+
+2278 
+	#R_PPC64_GOT16_DS
+ 58
+
+	)
+
+2279 
+	#R_PPC64_GOT16_LO_DS
+ 59
+
+	)
+
+2280 
+	#R_PPC64_PLT16_LO_DS
+ 60
+
+	)
+
+2281 
+	#R_PPC64_SECTOFF_DS
+ 61
+
+	)
+
+2282 
+	#R_PPC64_SECTOFF_LO_DS
+ 62
+
+	)
+
+2283 
+	#R_PPC64_TOC16_DS
+ 63
+
+	)
+
+2284 
+	#R_PPC64_TOC16_LO_DS
+ 64
+
+	)
+
+2285 
+	#R_PPC64_PLTGOT16_DS
+ 65
+
+	)
+
+2286 
+	#R_PPC64_PLTGOT16_LO_DS
+ 66
+
+	)
+
+2289 
+	#R_PPC64_TLS
+ 67
+
+	)
+
+2290 
+	#R_PPC64_DTPMOD64
+ 68
+
+	)
+
+2291 
+	#R_PPC64_TPREL16
+ 69
+
+	)
+
+2292 
+	#R_PPC64_TPREL16_LO
+ 70
+
+	)
+
+2293 
+	#R_PPC64_TPREL16_HI
+ 71
+
+	)
+
+2294 
+	#R_PPC64_TPREL16_HA
+ 72
+
+	)
+
+2295 
+	#R_PPC64_TPREL64
+ 73
+
+	)
+
+2296 
+	#R_PPC64_DTPREL16
+ 74
+
+	)
+
+2297 
+	#R_PPC64_DTPREL16_LO
+ 75
+
+	)
+
+2298 
+	#R_PPC64_DTPREL16_HI
+ 76
+
+	)
+
+2299 
+	#R_PPC64_DTPREL16_HA
+ 77
+
+	)
+
+2300 
+	#R_PPC64_DTPREL64
+ 78
+
+	)
+
+2301 
+	#R_PPC64_GOT_TLSGD16
+ 79
+
+	)
+
+2302 
+	#R_PPC64_GOT_TLSGD16_LO
+ 80
+
+	)
+
+2303 
+	#R_PPC64_GOT_TLSGD16_HI
+ 81
+
+	)
+
+2304 
+	#R_PPC64_GOT_TLSGD16_HA
+ 82
+
+	)
+
+2305 
+	#R_PPC64_GOT_TLSLD16
+ 83
+
+	)
+
+2306 
+	#R_PPC64_GOT_TLSLD16_LO
+ 84
+
+	)
+
+2307 
+	#R_PPC64_GOT_TLSLD16_HI
+ 85
+
+	)
+
+2308 
+	#R_PPC64_GOT_TLSLD16_HA
+ 86
+
+	)
+
+2309 
+	#R_PPC64_GOT_TPREL16_DS
+ 87
+
+	)
+
+2310 
+	#R_PPC64_GOT_TPREL16_LO_DS
+ 88
+
+	)
+
+2311 
+	#R_PPC64_GOT_TPREL16_HI
+ 89
+
+	)
+
+2312 
+	#R_PPC64_GOT_TPREL16_HA
+ 90
+
+	)
+
+2313 
+	#R_PPC64_GOT_DTPREL16_DS
+ 91
+
+	)
+
+2314 
+	#R_PPC64_GOT_DTPREL16_LO_DS
+ 92
+
+	)
+
+2315 
+	#R_PPC64_GOT_DTPREL16_HI
+ 93
+
+	)
+
+2316 
+	#R_PPC64_GOT_DTPREL16_HA
+ 94
+
+	)
+
+2317 
+	#R_PPC64_TPREL16_DS
+ 95
+
+	)
+
+2318 
+	#R_PPC64_TPREL16_LO_DS
+ 96
+
+	)
+
+2319 
+	#R_PPC64_TPREL16_HIGHER
+ 97
+
+	)
+
+2320 
+	#R_PPC64_TPREL16_HIGHERA
+ 98
+
+	)
+
+2321 
+	#R_PPC64_TPREL16_HIGHEST
+ 99
+
+	)
+
+2322 
+	#R_PPC64_TPREL16_HIGHESTA
+ 100
+
+	)
+
+2323 
+	#R_PPC64_DTPREL16_DS
+ 101
+
+	)
+
+2324 
+	#R_PPC64_DTPREL16_LO_DS
+ 102
+
+	)
+
+2325 
+	#R_PPC64_DTPREL16_HIGHER
+ 103
+
+	)
+
+2326 
+	#R_PPC64_DTPREL16_HIGHERA
+ 104
+
+	)
+
+2327 
+	#R_PPC64_DTPREL16_HIGHEST
+ 105
+
+	)
+
+2328 
+	#R_PPC64_DTPREL16_HIGHESTA
+ 106
+
+	)
+
+2329 
+	#R_PPC64_TLSGD
+ 107
+
+	)
+
+2330 
+	#R_PPC64_TLSLD
+ 108
+
+	)
+
+2331 
+	#R_PPC64_TOCSAVE
+ 109
+
+	)
+
+2334 
+	#R_PPC64_ADDR16_HIGH
+ 110
+
+	)
+
+2335 
+	#R_PPC64_ADDR16_HIGHA
+ 111
+
+	)
+
+2336 
+	#R_PPC64_TPREL16_HIGH
+ 112
+
+	)
+
+2337 
+	#R_PPC64_TPREL16_HIGHA
+ 113
+
+	)
+
+2338 
+	#R_PPC64_DTPREL16_HIGH
+ 114
+
+	)
+
+2339 
+	#R_PPC64_DTPREL16_HIGHA
+ 115
+
+	)
+
+2342 
+	#R_PPC64_JMP_IREL
+ 247
+
+	)
+
+2343 
+	#R_PPC64_IRELATIVE
+ 248
+
+	)
+
+2344 
+	#R_PPC64_REL16
+ 249
+
+	)
+
+2345 
+	#R_PPC64_REL16_LO
+ 250
+
+	)
+
+2346 
+	#R_PPC64_REL16_HI
+ 251
+
+	)
+
+2347 
+	#R_PPC64_REL16_HA
+ 252
+
+	)
+
+2353 
+	#EF_PPC64_ABI
+ 3
+
+	)
+
+2356 
+	#DT_PPC64_GLINK
+ (
+DT_LOPROC
+ + 0)
+
+	)
+
+2357 
+	#DT_PPC64_OPD
+ (
+DT_LOPROC
+ + 1)
+
+	)
+
+2358 
+	#DT_PPC64_OPDSZ
+ (
+DT_LOPROC
+ + 2)
+
+	)
+
+2359 
+	#DT_PPC64_OPT
+ (
+DT_LOPROC
+ + 3)
+
+	)
+
+2360 
+	#DT_PPC64_NUM
+ 4
+
+	)
+
+2363 
+	#PPC64_OPT_TLS
+ 1
+
+	)
+
+2364 
+	#PPC64_OPT_MULTI_TOC
+ 2
+
+	)
+
+2367 
+	#STO_PPC64_LOCAL_BIT
+ 5
+
+	)
+
+2368 
+	#STO_PPC64_LOCAL_MASK
+ (7 << 
+STO_PPC64_LOCAL_BIT
+)
+
+	)
+
+2369 
+	#PPC64_LOCAL_ENTRY_OFFSET
+(
+Ÿhî
+) \
+
+2370 (((1 << (((
+Ÿhî
+Ë& 
+STO_PPC64_LOCAL_MASK
+Ë>> 
+STO_PPC64_LOCAL_BIT
+)Ë>> 2Ë<< 2)
+
+	)
+
+2376 
+	#EF_ARM_RELEXEC
+ 0x01
+
+	)
+
+2377 
+	#EF_ARM_HASENTRY
+ 0x02
+
+	)
+
+2378 
+	#EF_ARM_INTERWORK
+ 0x04
+
+	)
+
+2379 
+	#EF_ARM_APCS_26
+ 0x08
+
+	)
+
+2380 
+	#EF_ARM_APCS_FLOAT
+ 0x10
+
+	)
+
+2381 
+	#EF_ARM_PIC
+ 0x20
+
+	)
+
+2382 
+	#EF_ARM_ALIGN8
+ 0x40
+
+	)
+
+2383 
+	#EF_ARM_NEW_ABI
+ 0x80
+
+	)
+
+2384 
+	#EF_ARM_OLD_ABI
+ 0x100
+
+	)
+
+2385 
+	#EF_ARM_SOFT_FLOAT
+ 0x200
+
+	)
+
+2386 
+	#EF_ARM_VFP_FLOAT
+ 0x400
+
+	)
+
+2387 
+	#EF_ARM_MAVERICK_FLOAT
+ 0x800
+
+	)
+
+2389 
+	#EF_ARM_ABI_FLOAT_SOFT
+ 0x200
+
+	)
+
+2390 
+	#EF_ARM_ABI_FLOAT_HARD
+ 0x400
+
+	)
+
+2395 
+	#EF_ARM_SYMSARESORTED
+ 0x04
+
+	)
+
+2396 
+	#EF_ARM_DYNSYMSUSESEGIDX
+ 0x08
+
+	)
+
+2397 
+	#EF_ARM_MAPSYMSFIRST
+ 0x10
+
+	)
+
+2398 
+	#EF_ARM_EABIMASK
+ 0XFF000000
+
+	)
+
+2401 
+	#EF_ARM_BE8
+ 0x00800000
+
+	)
+
+2402 
+	#EF_ARM_LE8
+ 0x00400000
+
+	)
+
+2404 
+	#EF_ARM_EABI_VERSION
+(
+Êags
+Ë((ÊagsË& 
+EF_ARM_EABIMASK
+)
+
+	)
+
+2405 
+	#EF_ARM_EABI_UNKNOWN
+ 0x00000000
+
+	)
+
+2406 
+	#EF_ARM_EABI_VER1
+ 0x01000000
+
+	)
+
+2407 
+	#EF_ARM_EABI_VER2
+ 0x02000000
+
+	)
+
+2408 
+	#EF_ARM_EABI_VER3
+ 0x03000000
+
+	)
+
+2409 
+	#EF_ARM_EABI_VER4
+ 0x04000000
+
+	)
+
+2410 
+	#EF_ARM_EABI_VER5
+ 0x05000000
+
+	)
+
+2413 
+	#STT_ARM_TFUNC
+ 
+STT_LOPROC
+
+
+	)
+
+2414 
+	#STT_ARM_16BIT
+ 
+STT_HIPROC
+
+
+	)
+
+2417 
+	#SHF_ARM_ENTRYSECT
+ 0x10000000
+
+	)
+
+2418 
+	#SHF_ARM_COMDEF
+ 0x80000000
+
+	)
+
+2422 
+	#PF_ARM_SB
+ 0x10000000
+
+	)
+
+2424 
+	#PF_ARM_PI
+ 0x20000000
+
+	)
+
+2425 
+	#PF_ARM_ABS
+ 0x40000000
+
+	)
+
+2428 
+	#PT_ARM_EXIDX
+ (
+PT_LOPROC
+ + 1Ë
+
+	)
+
+2431 
+	#SHT_ARM_EXIDX
+ (
+SHT_LOPROC
+ + 1Ë
+
+	)
+
+2432 
+	#SHT_ARM_PREEMPTMAP
+ (
+SHT_LOPROC
+ + 2Ë
+
+	)
+
+2433 
+	#SHT_ARM_ATTRIBUTES
+ (
+SHT_LOPROC
+ + 3Ë
+
+	)
+
+2438 
+	#R_AARCH64_NONE
+ 0
+
+	)
+
+2441 
+	#R_AARCH64_P32_ABS32
+ 1
+
+	)
+
+2442 
+	#R_AARCH64_P32_COPY
+ 180
+
+	)
+
+2443 
+	#R_AARCH64_P32_GLOB_DAT
+ 181
+
+	)
+
+2444 
+	#R_AARCH64_P32_JUMP_SLOT
+ 182
+
+	)
+
+2445 
+	#R_AARCH64_P32_RELATIVE
+ 183
+
+	)
+
+2446 
+	#R_AARCH64_P32_TLS_DTPMOD
+ 184
+
+	)
+
+2447 
+	#R_AARCH64_P32_TLS_DTPREL
+ 185
+
+	)
+
+2448 
+	#R_AARCH64_P32_TLS_TPREL
+ 186
+
+	)
+
+2449 
+	#R_AARCH64_P32_TLSDESC
+ 187
+
+	)
+
+2450 
+	#R_AARCH64_P32_IRELATIVE
+ 188
+
+	)
+
+2453 
+	#R_AARCH64_ABS64
+ 257
+
+	)
+
+2454 
+	#R_AARCH64_ABS32
+ 258
+
+	)
+
+2455 
+	#R_AARCH64_ABS16
+ 259
+
+	)
+
+2456 
+	#R_AARCH64_PREL64
+ 260
+
+	)
+
+2457 
+	#R_AARCH64_PREL32
+ 261
+
+	)
+
+2458 
+	#R_AARCH64_PREL16
+ 262
+
+	)
+
+2459 
+	#R_AARCH64_MOVW_UABS_G0
+ 263
+
+	)
+
+2460 
+	#R_AARCH64_MOVW_UABS_G0_NC
+ 264
+
+	)
+
+2461 
+	#R_AARCH64_MOVW_UABS_G1
+ 265
+
+	)
+
+2462 
+	#R_AARCH64_MOVW_UABS_G1_NC
+ 266
+
+	)
+
+2463 
+	#R_AARCH64_MOVW_UABS_G2
+ 267
+
+	)
+
+2464 
+	#R_AARCH64_MOVW_UABS_G2_NC
+ 268
+
+	)
+
+2465 
+	#R_AARCH64_MOVW_UABS_G3
+ 269
+
+	)
+
+2466 
+	#R_AARCH64_MOVW_SABS_G0
+ 270
+
+	)
+
+2467 
+	#R_AARCH64_MOVW_SABS_G1
+ 271
+
+	)
+
+2468 
+	#R_AARCH64_MOVW_SABS_G2
+ 272
+
+	)
+
+2469 
+	#R_AARCH64_LD_PREL_LO19
+ 273
+
+	)
+
+2470 
+	#R_AARCH64_ADR_PREL_LO21
+ 274
+
+	)
+
+2471 
+	#R_AARCH64_ADR_PREL_PG_HI21
+ 275
+
+	)
+
+2472 
+	#R_AARCH64_ADR_PREL_PG_HI21_NC
+ 276
+
+	)
+
+2473 
+	#R_AARCH64_ADD_ABS_LO12_NC
+ 277
+
+	)
+
+2474 
+	#R_AARCH64_LDST8_ABS_LO12_NC
+ 278
+
+	)
+
+2475 
+	#R_AARCH64_TSTBR14
+ 279
+
+	)
+
+2476 
+	#R_AARCH64_CONDBR19
+ 280
+
+	)
+
+2477 
+	#R_AARCH64_JUMP26
+ 282
+
+	)
+
+2478 
+	#R_AARCH64_CALL26
+ 283
+
+	)
+
+2479 
+	#R_AARCH64_LDST16_ABS_LO12_NC
+ 284
+
+	)
+
+2480 
+	#R_AARCH64_LDST32_ABS_LO12_NC
+ 285
+
+	)
+
+2481 
+	#R_AARCH64_LDST64_ABS_LO12_NC
+ 286
+
+	)
+
+2482 
+	#R_AARCH64_MOVW_PREL_G0
+ 287
+
+	)
+
+2483 
+	#R_AARCH64_MOVW_PREL_G0_NC
+ 288
+
+	)
+
+2484 
+	#R_AARCH64_MOVW_PREL_G1
+ 289
+
+	)
+
+2485 
+	#R_AARCH64_MOVW_PREL_G1_NC
+ 290
+
+	)
+
+2486 
+	#R_AARCH64_MOVW_PREL_G2
+ 291
+
+	)
+
+2487 
+	#R_AARCH64_MOVW_PREL_G2_NC
+ 292
+
+	)
+
+2488 
+	#R_AARCH64_MOVW_PREL_G3
+ 293
+
+	)
+
+2489 
+	#R_AARCH64_LDST128_ABS_LO12_NC
+ 299
+
+	)
+
+2490 
+	#R_AARCH64_MOVW_GOTOFF_G0
+ 300
+
+	)
+
+2491 
+	#R_AARCH64_MOVW_GOTOFF_G0_NC
+ 301
+
+	)
+
+2492 
+	#R_AARCH64_MOVW_GOTOFF_G1
+ 302
+
+	)
+
+2493 
+	#R_AARCH64_MOVW_GOTOFF_G1_NC
+ 303
+
+	)
+
+2494 
+	#R_AARCH64_MOVW_GOTOFF_G2
+ 304
+
+	)
+
+2495 
+	#R_AARCH64_MOVW_GOTOFF_G2_NC
+ 305
+
+	)
+
+2496 
+	#R_AARCH64_MOVW_GOTOFF_G3
+ 306
+
+	)
+
+2497 
+	#R_AARCH64_GOTREL64
+ 307
+
+	)
+
+2498 
+	#R_AARCH64_GOTREL32
+ 308
+
+	)
+
+2499 
+	#R_AARCH64_GOT_LD_PREL19
+ 309
+
+	)
+
+2500 
+	#R_AARCH64_LD64_GOTOFF_LO15
+ 310
+
+	)
+
+2501 
+	#R_AARCH64_ADR_GOT_PAGE
+ 311
+
+	)
+
+2502 
+	#R_AARCH64_LD64_GOT_LO12_NC
+ 312
+
+	)
+
+2503 
+	#R_AARCH64_LD64_GOTPAGE_LO15
+ 313
+
+	)
+
+2504 
+	#R_AARCH64_TLSGD_ADR_PREL21
+ 512
+
+	)
+
+2505 
+	#R_AARCH64_TLSGD_ADR_PAGE21
+ 513
+
+	)
+
+2506 
+	#R_AARCH64_TLSGD_ADD_LO12_NC
+ 514
+
+	)
+
+2507 
+	#R_AARCH64_TLSGD_MOVW_G1
+ 515
+
+	)
+
+2508 
+	#R_AARCH64_TLSGD_MOVW_G0_NC
+ 516
+
+	)
+
+2509 
+	#R_AARCH64_TLSLD_ADR_PREL21
+ 517
+
+	)
+
+2510 
+	#R_AARCH64_TLSLD_ADR_PAGE21
+ 518
+
+	)
+
+2511 
+	#R_AARCH64_TLSLD_ADD_LO12_NC
+ 519
+
+	)
+
+2512 
+	#R_AARCH64_TLSLD_MOVW_G1
+ 520
+
+	)
+
+2513 
+	#R_AARCH64_TLSLD_MOVW_G0_NC
+ 521
+
+	)
+
+2514 
+	#R_AARCH64_TLSLD_LD_PREL19
+ 522
+
+	)
+
+2515 
+	#R_AARCH64_TLSLD_MOVW_DTPREL_G2
+ 523
+
+	)
+
+2516 
+	#R_AARCH64_TLSLD_MOVW_DTPREL_G1
+ 524
+
+	)
+
+2517 
+	#R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC
+ 525
+
+	)
+
+2518 
+	#R_AARCH64_TLSLD_MOVW_DTPREL_G0
+ 526
+
+	)
+
+2519 
+	#R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC
+ 527
+
+	)
+
+2520 
+	#R_AARCH64_TLSLD_ADD_DTPREL_HI12
+ 528
+
+	)
+
+2521 
+	#R_AARCH64_TLSLD_ADD_DTPREL_LO12
+ 529
+
+	)
+
+2522 
+	#R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC
+ 530
+
+	)
+
+2523 
+	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12
+ 531
+
+	)
+
+2524 
+	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC
+ 532
+
+	)
+
+2525 
+	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12
+ 533
+
+	)
+
+2526 
+	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC
+ 534
+
+	)
+
+2527 
+	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12
+ 535
+
+	)
+
+2528 
+	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC
+ 536
+
+	)
+
+2529 
+	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12
+ 537
+
+	)
+
+2530 
+	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC
+ 538
+
+	)
+
+2531 
+	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G1
+ 539
+
+	)
+
+2532 
+	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC
+ 540
+
+	)
+
+2533 
+	#R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
+ 541
+
+	)
+
+2534 
+	#R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC
+ 542
+
+	)
+
+2535 
+	#R_AARCH64_TLSIE_LD_GOTTPREL_PREL19
+ 543
+
+	)
+
+2536 
+	#R_AARCH64_TLSLE_MOVW_TPREL_G2
+ 544
+
+	)
+
+2537 
+	#R_AARCH64_TLSLE_MOVW_TPREL_G1
+ 545
+
+	)
+
+2538 
+	#R_AARCH64_TLSLE_MOVW_TPREL_G1_NC
+ 546
+
+	)
+
+2539 
+	#R_AARCH64_TLSLE_MOVW_TPREL_G0
+ 547
+
+	)
+
+2540 
+	#R_AARCH64_TLSLE_MOVW_TPREL_G0_NC
+ 548
+
+	)
+
+2541 
+	#R_AARCH64_TLSLE_ADD_TPREL_HI12
+ 549
+
+	)
+
+2542 
+	#R_AARCH64_TLSLE_ADD_TPREL_LO12
+ 550
+
+	)
+
+2543 
+	#R_AARCH64_TLSLE_ADD_TPREL_LO12_NC
+ 551
+
+	)
+
+2544 
+	#R_AARCH64_TLSLE_LDST8_TPREL_LO12
+ 552
+
+	)
+
+2545 
+	#R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC
+ 553
+
+	)
+
+2546 
+	#R_AARCH64_TLSLE_LDST16_TPREL_LO12
+ 554
+
+	)
+
+2547 
+	#R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC
+ 555
+
+	)
+
+2548 
+	#R_AARCH64_TLSLE_LDST32_TPREL_LO12
+ 556
+
+	)
+
+2549 
+	#R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC
+ 557
+
+	)
+
+2550 
+	#R_AARCH64_TLSLE_LDST64_TPREL_LO12
+ 558
+
+	)
+
+2551 
+	#R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC
+ 559
+
+	)
+
+2552 
+	#R_AARCH64_TLSDESC_LD_PREL19
+ 560
+
+	)
+
+2553 
+	#R_AARCH64_TLSDESC_ADR_PREL21
+ 561
+
+	)
+
+2554 
+	#R_AARCH64_TLSDESC_ADR_PAGE21
+ 562
+
+	)
+
+2555 
+	#R_AARCH64_TLSDESC_LD64_LO12
+ 563
+
+	)
+
+2556 
+	#R_AARCH64_TLSDESC_ADD_LO12
+ 564
+
+	)
+
+2557 
+	#R_AARCH64_TLSDESC_OFF_G1
+ 565
+
+	)
+
+2558 
+	#R_AARCH64_TLSDESC_OFF_G0_NC
+ 566
+
+	)
+
+2559 
+	#R_AARCH64_TLSDESC_LDR
+ 567
+
+	)
+
+2560 
+	#R_AARCH64_TLSDESC_ADD
+ 568
+
+	)
+
+2561 
+	#R_AARCH64_TLSDESC_CALL
+ 569
+
+	)
+
+2562 
+	#R_AARCH64_TLSLE_LDST128_TPREL_LO12
+ 570
+
+	)
+
+2563 
+	#R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC
+ 571
+
+	)
+
+2564 
+	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12
+ 572
+
+	)
+
+2565 
+	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC
+ 573
+
+	)
+
+2566 
+	#R_AARCH64_COPY
+ 1024
+
+	)
+
+2567 
+	#R_AARCH64_GLOB_DAT
+ 1025
+
+	)
+
+2568 
+	#R_AARCH64_JUMP_SLOT
+ 1026
+
+	)
+
+2569 
+	#R_AARCH64_RELATIVE
+ 1027
+
+	)
+
+2570 
+	#R_AARCH64_TLS_DTPMOD
+ 1028
+
+	)
+
+2571 
+	#R_AARCH64_TLS_DTPREL
+ 1029
+
+	)
+
+2572 
+	#R_AARCH64_TLS_TPREL
+ 1030
+
+	)
+
+2573 
+	#R_AARCH64_TLSDESC
+ 1031
+
+	)
+
+2574 
+	#R_AARCH64_IRELATIVE
+ 1032
+
+	)
+
+2578 
+	#R_ARM_NONE
+ 0
+
+	)
+
+2579 
+	#R_ARM_PC24
+ 1
+
+	)
+
+2581 
+	#R_ARM_ABS32
+ 2
+
+	)
+
+2582 
+	#R_ARM_REL32
+ 3
+
+	)
+
+2583 
+	#R_ARM_PC13
+ 4
+
+	)
+
+2584 
+	#R_ARM_ABS16
+ 5
+
+	)
+
+2585 
+	#R_ARM_ABS12
+ 6
+
+	)
+
+2586 
+	#R_ARM_THM_ABS5
+ 7
+
+	)
+
+2587 
+	#R_ARM_ABS8
+ 8
+
+	)
+
+2588 
+	#R_ARM_SBREL32
+ 9
+
+	)
+
+2589 
+	#R_ARM_THM_PC22
+ 10
+
+	)
+
+2590 
+	#R_ARM_THM_PC8
+ 11
+
+	)
+
+2592 
+	#R_ARM_AMP_VCALL9
+ 12
+
+	)
+
+2593 
+	#R_ARM_SWI24
+ 13
+
+	)
+
+2594 
+	#R_ARM_TLS_DESC
+ 13
+
+	)
+
+2595 
+	#R_ARM_THM_SWI8
+ 14
+
+	)
+
+2596 
+	#R_ARM_XPC25
+ 15
+
+	)
+
+2597 
+	#R_ARM_THM_XPC22
+ 16
+
+	)
+
+2598 
+	#R_ARM_TLS_DTPMOD32
+ 17
+
+	)
+
+2599 
+	#R_ARM_TLS_DTPOFF32
+ 18
+
+	)
+
+2600 
+	#R_ARM_TLS_TPOFF32
+ 19
+
+	)
+
+2601 
+	#R_ARM_COPY
+ 20
+
+	)
+
+2602 
+	#R_ARM_GLOB_DAT
+ 21
+
+	)
+
+2603 
+	#R_ARM_JUMP_SLOT
+ 22
+
+	)
+
+2604 
+	#R_ARM_RELATIVE
+ 23
+
+	)
+
+2605 
+	#R_ARM_GOTOFF
+ 24
+
+	)
+
+2606 
+	#R_ARM_GOTPC
+ 25
+
+	)
+
+2607 
+	#R_ARM_GOT32
+ 26
+
+	)
+
+2608 
+	#R_ARM_PLT32
+ 27
+
+	)
+
+2609 
+	#R_ARM_CALL
+ 28
+
+	)
+
+2610 
+	#R_ARM_JUMP24
+ 29
+
+	)
+
+2612 
+	#R_ARM_THM_JUMP24
+ 30
+
+	)
+
+2613 
+	#R_ARM_BASE_ABS
+ 31
+
+	)
+
+2614 
+	#R_ARM_ALU_PCREL_7_0
+ 32
+
+	)
+
+2615 
+	#R_ARM_ALU_PCREL_15_8
+ 33
+
+	)
+
+2616 
+	#R_ARM_ALU_PCREL_23_15
+ 34
+
+	)
+
+2617 
+	#R_ARM_LDR_SBREL_11_0
+ 35
+
+	)
+
+2618 
+	#R_ARM_ALU_SBREL_19_12
+ 36
+
+	)
+
+2619 
+	#R_ARM_ALU_SBREL_27_20
+ 37
+
+	)
+
+2620 
+	#R_ARM_TARGET1
+ 38
+
+	)
+
+2621 
+	#R_ARM_SBREL31
+ 39
+
+	)
+
+2622 
+	#R_ARM_V4BX
+ 40
+
+	)
+
+2623 
+	#R_ARM_TARGET2
+ 41
+
+	)
+
+2624 
+	#R_ARM_PREL31
+ 42
+
+	)
+
+2625 
+	#R_ARM_MOVW_ABS_NC
+ 43
+
+	)
+
+2626 
+	#R_ARM_MOVT_ABS
+ 44
+
+	)
+
+2627 
+	#R_ARM_MOVW_PREL_NC
+ 45
+
+	)
+
+2628 
+	#R_ARM_MOVT_PREL
+ 46
+
+	)
+
+2629 
+	#R_ARM_THM_MOVW_ABS_NC
+ 47
+
+	)
+
+2630 
+	#R_ARM_THM_MOVT_ABS
+ 48
+
+	)
+
+2632 
+	#R_ARM_THM_MOVW_PREL_NC
+ 49
+
+	)
+
+2634 
+	#R_ARM_THM_MOVT_PREL
+ 50
+
+	)
+
+2636 
+	#R_ARM_THM_JUMP19
+ 51
+
+	)
+
+2638 
+	#R_ARM_THM_JUMP6
+ 52
+
+	)
+
+2640 
+	#R_ARM_THM_ALU_PREL_11_0
+ 53
+
+	)
+
+2642 
+	#R_ARM_THM_PC12
+ 54
+
+	)
+
+2644 
+	#R_ARM_ABS32_NOI
+ 55
+
+	)
+
+2645 
+	#R_ARM_REL32_NOI
+ 56
+
+	)
+
+2646 
+	#R_ARM_ALU_PC_G0_NC
+ 57
+
+	)
+
+2647 
+	#R_ARM_ALU_PC_G0
+ 58
+
+	)
+
+2648 
+	#R_ARM_ALU_PC_G1_NC
+ 59
+
+	)
+
+2649 
+	#R_ARM_ALU_PC_G1
+ 60
+
+	)
+
+2650 
+	#R_ARM_ALU_PC_G2
+ 61
+
+	)
+
+2651 
+	#R_ARM_LDR_PC_G1
+ 62
+
+	)
+
+2652 
+	#R_ARM_LDR_PC_G2
+ 63
+
+	)
+
+2653 
+	#R_ARM_LDRS_PC_G0
+ 64
+
+	)
+
+2655 
+	#R_ARM_LDRS_PC_G1
+ 65
+
+	)
+
+2657 
+	#R_ARM_LDRS_PC_G2
+ 66
+
+	)
+
+2659 
+	#R_ARM_LDC_PC_G0
+ 67
+
+	)
+
+2660 
+	#R_ARM_LDC_PC_G1
+ 68
+
+	)
+
+2661 
+	#R_ARM_LDC_PC_G2
+ 69
+
+	)
+
+2662 
+	#R_ARM_ALU_SB_G0_NC
+ 70
+
+	)
+
+2663 
+	#R_ARM_ALU_SB_G0
+ 71
+
+	)
+
+2664 
+	#R_ARM_ALU_SB_G1_NC
+ 72
+
+	)
+
+2665 
+	#R_ARM_ALU_SB_G1
+ 73
+
+	)
+
+2666 
+	#R_ARM_ALU_SB_G2
+ 74
+
+	)
+
+2667 
+	#R_ARM_LDR_SB_G0
+ 75
+
+	)
+
+2669 
+	#R_ARM_LDR_SB_G1
+ 76
+
+	)
+
+2671 
+	#R_ARM_LDR_SB_G2
+ 77
+
+	)
+
+2673 
+	#R_ARM_LDRS_SB_G0
+ 78
+
+	)
+
+2675 
+	#R_ARM_LDRS_SB_G1
+ 79
+
+	)
+
+2677 
+	#R_ARM_LDRS_SB_G2
+ 80
+
+	)
+
+2679 
+	#R_ARM_LDC_SB_G0
+ 81
+
+	)
+
+2680 
+	#R_ARM_LDC_SB_G1
+ 82
+
+	)
+
+2681 
+	#R_ARM_LDC_SB_G2
+ 83
+
+	)
+
+2682 
+	#R_ARM_MOVW_BREL_NC
+ 84
+
+	)
+
+2684 
+	#R_ARM_MOVT_BREL
+ 85
+
+	)
+
+2686 
+	#R_ARM_MOVW_BREL
+ 86
+
+	)
+
+2688 
+	#R_ARM_THM_MOVW_BREL_NC
+ 87
+
+	)
+
+2690 
+	#R_ARM_THM_MOVT_BREL
+ 88
+
+	)
+
+2692 
+	#R_ARM_THM_MOVW_BREL
+ 89
+
+	)
+
+2694 
+	#R_ARM_TLS_GOTDESC
+ 90
+
+	)
+
+2695 
+	#R_ARM_TLS_CALL
+ 91
+
+	)
+
+2696 
+	#R_ARM_TLS_DESCSEQ
+ 92
+
+	)
+
+2697 
+	#R_ARM_THM_TLS_CALL
+ 93
+
+	)
+
+2698 
+	#R_ARM_PLT32_ABS
+ 94
+
+	)
+
+2699 
+	#R_ARM_GOT_ABS
+ 95
+
+	)
+
+2700 
+	#R_ARM_GOT_PREL
+ 96
+
+	)
+
+2701 
+	#R_ARM_GOT_BREL12
+ 97
+
+	)
+
+2703 
+	#R_ARM_GOTOFF12
+ 98
+
+	)
+
+2705 
+	#R_ARM_GOTRELAX
+ 99
+
+	)
+
+2706 
+	#R_ARM_GNU_VTENTRY
+ 100
+
+	)
+
+2707 
+	#R_ARM_GNU_VTINHERIT
+ 101
+
+	)
+
+2708 
+	#R_ARM_THM_PC11
+ 102
+
+	)
+
+2709 
+	#R_ARM_THM_PC9
+ 103
+
+	)
+
+2711 
+	#R_ARM_TLS_GD32
+ 104
+
+	)
+
+2713 
+	#R_ARM_TLS_LDM32
+ 105
+
+	)
+
+2715 
+	#R_ARM_TLS_LDO32
+ 106
+
+	)
+
+2717 
+	#R_ARM_TLS_IE32
+ 107
+
+	)
+
+2719 
+	#R_ARM_TLS_LE32
+ 108
+
+	)
+
+2721 
+	#R_ARM_TLS_LDO12
+ 109
+
+	)
+
+2723 
+	#R_ARM_TLS_LE12
+ 110
+
+	)
+
+2725 
+	#R_ARM_TLS_IE12GP
+ 111
+
+	)
+
+2727 
+	#R_ARM_ME_TOO
+ 128
+
+	)
+
+2728 
+	#R_ARM_THM_TLS_DESCSEQ
+ 129
+
+	)
+
+2729 
+	#R_ARM_THM_TLS_DESCSEQ16
+ 129
+
+	)
+
+2730 
+	#R_ARM_THM_TLS_DESCSEQ32
+ 130
+
+	)
+
+2731 
+	#R_ARM_THM_GOT_BREL12
+ 131
+
+	)
+
+2733 
+	#R_ARM_IRELATIVE
+ 160
+
+	)
+
+2734 
+	#R_ARM_RXPC25
+ 249
+
+	)
+
+2735 
+	#R_ARM_RSBREL32
+ 250
+
+	)
+
+2736 
+	#R_ARM_THM_RPC22
+ 251
+
+	)
+
+2737 
+	#R_ARM_RREL32
+ 252
+
+	)
+
+2738 
+	#R_ARM_RABS22
+ 253
+
+	)
+
+2739 
+	#R_ARM_RPC24
+ 254
+
+	)
+
+2740 
+	#R_ARM_RBASE
+ 255
+
+	)
+
+2742 
+	#R_ARM_NUM
+ 256
+
+	)
+
+2747 
+	#EF_IA_64_MASKOS
+ 0x0000000‡
+
+	)
+
+2748 
+	#EF_IA_64_ABI64
+ 0x00000010
+
+	)
+
+2749 
+	#EF_IA_64_ARCH
+ 0xff000000
+
+	)
+
+2752 
+	#PT_IA_64_ARCHEXT
+ (
+PT_LOPROC
+ + 0Ë
+
+	)
+
+2753 
+	#PT_IA_64_UNWIND
+ (
+PT_LOPROC
+ + 1Ë
+
+	)
+
+2754 
+	#PT_IA_64_HP_OPT_ANOT
+ (
+PT_LOOS
+ + 0x12)
+
+	)
+
+2755 
+	#PT_IA_64_HP_HSL_ANOT
+ (
+PT_LOOS
+ + 0x13)
+
+	)
+
+2756 
+	#PT_IA_64_HP_STACK
+ (
+PT_LOOS
+ + 0x14)
+
+	)
+
+2759 
+	#PF_IA_64_NORECOV
+ 0x80000000
+
+	)
+
+2762 
+	#SHT_IA_64_EXT
+ (
+SHT_LOPROC
+ + 0Ë
+
+	)
+
+2763 
+	#SHT_IA_64_UNWIND
+ (
+SHT_LOPROC
+ + 1Ë
+
+	)
+
+2766 
+	#SHF_IA_64_SHORT
+ 0x10000000
+
+	)
+
+2767 
+	#SHF_IA_64_NORECOV
+ 0x20000000
+
+	)
+
+2770 
+	#DT_IA_64_PLT_RESERVE
+ (
+DT_LOPROC
+ + 0)
+
+	)
+
+2771 
+	#DT_IA_64_NUM
+ 1
+
+	)
+
+2774 
+	#R_IA64_NONE
+ 0x00
+
+	)
+
+2775 
+	#R_IA64_IMM14
+ 0x21
+
+	)
+
+2776 
+	#R_IA64_IMM22
+ 0x22
+
+	)
+
+2777 
+	#R_IA64_IMM64
+ 0x23
+
+	)
+
+2778 
+	#R_IA64_DIR32MSB
+ 0x24
+
+	)
+
+2779 
+	#R_IA64_DIR32LSB
+ 0x25
+
+	)
+
+2780 
+	#R_IA64_DIR64MSB
+ 0x26
+
+	)
+
+2781 
+	#R_IA64_DIR64LSB
+ 0x27
+
+	)
+
+2782 
+	#R_IA64_GPREL22
+ 0x2®
+
+	)
+
+2783 
+	#R_IA64_GPREL64I
+ 0x2b
+
+	)
+
+2784 
+	#R_IA64_GPREL32MSB
+ 0x2¯
+
+	)
+
+2785 
+	#R_IA64_GPREL32LSB
+ 0x2d
+
+	)
+
+2786 
+	#R_IA64_GPREL64MSB
+ 0x2ê
+
+	)
+
+2787 
+	#R_IA64_GPREL64LSB
+ 0x2‡
+
+	)
+
+2788 
+	#R_IA64_LTOFF22
+ 0x32
+
+	)
+
+2789 
+	#R_IA64_LTOFF64I
+ 0x33
+
+	)
+
+2790 
+	#R_IA64_PLTOFF22
+ 0x3®
+
+	)
+
+2791 
+	#R_IA64_PLTOFF64I
+ 0x3b
+
+	)
+
+2792 
+	#R_IA64_PLTOFF64MSB
+ 0x3ê
+
+	)
+
+2793 
+	#R_IA64_PLTOFF64LSB
+ 0x3‡
+
+	)
+
+2794 
+	#R_IA64_FPTR64I
+ 0x43
+
+	)
+
+2795 
+	#R_IA64_FPTR32MSB
+ 0x44
+
+	)
+
+2796 
+	#R_IA64_FPTR32LSB
+ 0x45
+
+	)
+
+2797 
+	#R_IA64_FPTR64MSB
+ 0x46
+
+	)
+
+2798 
+	#R_IA64_FPTR64LSB
+ 0x47
+
+	)
+
+2799 
+	#R_IA64_PCREL60B
+ 0x48
+
+	)
+
+2800 
+	#R_IA64_PCREL21B
+ 0x49
+
+	)
+
+2801 
+	#R_IA64_PCREL21M
+ 0x4®
+
+	)
+
+2802 
+	#R_IA64_PCREL21F
+ 0x4b
+
+	)
+
+2803 
+	#R_IA64_PCREL32MSB
+ 0x4¯
+
+	)
+
+2804 
+	#R_IA64_PCREL32LSB
+ 0x4d
+
+	)
+
+2805 
+	#R_IA64_PCREL64MSB
+ 0x4ê
+
+	)
+
+2806 
+	#R_IA64_PCREL64LSB
+ 0x4‡
+
+	)
+
+2807 
+	#R_IA64_LTOFF_FPTR22
+ 0x52
+
+	)
+
+2808 
+	#R_IA64_LTOFF_FPTR64I
+ 0x53
+
+	)
+
+2809 
+	#R_IA64_LTOFF_FPTR32MSB
+ 0x54
+
+	)
+
+2810 
+	#R_IA64_LTOFF_FPTR32LSB
+ 0x55
+
+	)
+
+2811 
+	#R_IA64_LTOFF_FPTR64MSB
+ 0x56
+
+	)
+
+2812 
+	#R_IA64_LTOFF_FPTR64LSB
+ 0x57
+
+	)
+
+2813 
+	#R_IA64_SEGREL32MSB
+ 0x5¯
+
+	)
+
+2814 
+	#R_IA64_SEGREL32LSB
+ 0x5d
+
+	)
+
+2815 
+	#R_IA64_SEGREL64MSB
+ 0x5ê
+
+	)
+
+2816 
+	#R_IA64_SEGREL64LSB
+ 0x5‡
+
+	)
+
+2817 
+	#R_IA64_SECREL32MSB
+ 0x64
+
+	)
+
+2818 
+	#R_IA64_SECREL32LSB
+ 0x65
+
+	)
+
+2819 
+	#R_IA64_SECREL64MSB
+ 0x66
+
+	)
+
+2820 
+	#R_IA64_SECREL64LSB
+ 0x67
+
+	)
+
+2821 
+	#R_IA64_REL32MSB
+ 0x6¯
+
+	)
+
+2822 
+	#R_IA64_REL32LSB
+ 0x6d
+
+	)
+
+2823 
+	#R_IA64_REL64MSB
+ 0x6ê
+
+	)
+
+2824 
+	#R_IA64_REL64LSB
+ 0x6‡
+
+	)
+
+2825 
+	#R_IA64_LTV32MSB
+ 0x74
+
+	)
+
+2826 
+	#R_IA64_LTV32LSB
+ 0x75
+
+	)
+
+2827 
+	#R_IA64_LTV64MSB
+ 0x76
+
+	)
+
+2828 
+	#R_IA64_LTV64LSB
+ 0x77
+
+	)
+
+2829 
+	#R_IA64_PCREL21BI
+ 0x79
+
+	)
+
+2830 
+	#R_IA64_PCREL22
+ 0x7®
+
+	)
+
+2831 
+	#R_IA64_PCREL64I
+ 0x7b
+
+	)
+
+2832 
+	#R_IA64_IPLTMSB
+ 0x80
+
+	)
+
+2833 
+	#R_IA64_IPLTLSB
+ 0x81
+
+	)
+
+2834 
+	#R_IA64_COPY
+ 0x84
+
+	)
+
+2835 
+	#R_IA64_SUB
+ 0x85
+
+	)
+
+2836 
+	#R_IA64_LTOFF22X
+ 0x86
+
+	)
+
+2837 
+	#R_IA64_LDXMOV
+ 0x87
+
+	)
+
+2838 
+	#R_IA64_TPREL14
+ 0x91
+
+	)
+
+2839 
+	#R_IA64_TPREL22
+ 0x92
+
+	)
+
+2840 
+	#R_IA64_TPREL64I
+ 0x93
+
+	)
+
+2841 
+	#R_IA64_TPREL64MSB
+ 0x96
+
+	)
+
+2842 
+	#R_IA64_TPREL64LSB
+ 0x97
+
+	)
+
+2843 
+	#R_IA64_LTOFF_TPREL22
+ 0x9®
+
+	)
+
+2844 
+	#R_IA64_DTPMOD64MSB
+ 0xa6
+
+	)
+
+2845 
+	#R_IA64_DTPMOD64LSB
+ 0xa7
+
+	)
+
+2846 
+	#R_IA64_LTOFF_DTPMOD22
+ 0xØ
+
+	)
+
+2847 
+	#R_IA64_DTPREL14
+ 0xb1
+
+	)
+
+2848 
+	#R_IA64_DTPREL22
+ 0xb2
+
+	)
+
+2849 
+	#R_IA64_DTPREL64I
+ 0xb3
+
+	)
+
+2850 
+	#R_IA64_DTPREL32MSB
+ 0xb4
+
+	)
+
+2851 
+	#R_IA64_DTPREL32LSB
+ 0xb5
+
+	)
+
+2852 
+	#R_IA64_DTPREL64MSB
+ 0xb6
+
+	)
+
+2853 
+	#R_IA64_DTPREL64LSB
+ 0xb7
+
+	)
+
+2854 
+	#R_IA64_LTOFF_DTPREL22
+ 0xb®
+
+	)
+
+2859 
+	#EF_SH_MACH_MASK
+ 0x1f
+
+	)
+
+2860 
+	#EF_SH_UNKNOWN
+ 0x0
+
+	)
+
+2861 
+	#EF_SH1
+ 0x1
+
+	)
+
+2862 
+	#EF_SH2
+ 0x2
+
+	)
+
+2863 
+	#EF_SH3
+ 0x3
+
+	)
+
+2864 
+	#EF_SH_DSP
+ 0x4
+
+	)
+
+2865 
+	#EF_SH3_DSP
+ 0x5
+
+	)
+
+2866 
+	#EF_SH4AL_DSP
+ 0x6
+
+	)
+
+2867 
+	#EF_SH3E
+ 0x8
+
+	)
+
+2868 
+	#EF_SH4
+ 0x9
+
+	)
+
+2869 
+	#EF_SH2E
+ 0xb
+
+	)
+
+2870 
+	#EF_SH4A
+ 0xc
+
+	)
+
+2871 
+	#EF_SH2A
+ 0xd
+
+	)
+
+2872 
+	#EF_SH4_NOFPU
+ 0x10
+
+	)
+
+2873 
+	#EF_SH4A_NOFPU
+ 0x11
+
+	)
+
+2874 
+	#EF_SH4_NOMMU_NOFPU
+ 0x12
+
+	)
+
+2875 
+	#EF_SH2A_NOFPU
+ 0x13
+
+	)
+
+2876 
+	#EF_SH3_NOMMU
+ 0x14
+
+	)
+
+2877 
+	#EF_SH2A_SH4_NOFPU
+ 0x15
+
+	)
+
+2878 
+	#EF_SH2A_SH3_NOFPU
+ 0x16
+
+	)
+
+2879 
+	#EF_SH2A_SH4
+ 0x17
+
+	)
+
+2880 
+	#EF_SH2A_SH3E
+ 0x18
+
+	)
+
+2883 
+	#R_SH_NONE
+ 0
+
+	)
+
+2884 
+	#R_SH_DIR32
+ 1
+
+	)
+
+2885 
+	#R_SH_REL32
+ 2
+
+	)
+
+2886 
+	#R_SH_DIR8WPN
+ 3
+
+	)
+
+2887 
+	#R_SH_IND12W
+ 4
+
+	)
+
+2888 
+	#R_SH_DIR8WPL
+ 5
+
+	)
+
+2889 
+	#R_SH_DIR8WPZ
+ 6
+
+	)
+
+2890 
+	#R_SH_DIR8BP
+ 7
+
+	)
+
+2891 
+	#R_SH_DIR8W
+ 8
+
+	)
+
+2892 
+	#R_SH_DIR8L
+ 9
+
+	)
+
+2893 
+	#R_SH_SWITCH16
+ 25
+
+	)
+
+2894 
+	#R_SH_SWITCH32
+ 26
+
+	)
+
+2895 
+	#R_SH_USES
+ 27
+
+	)
+
+2896 
+	#R_SH_COUNT
+ 28
+
+	)
+
+2897 
+	#R_SH_ALIGN
+ 29
+
+	)
+
+2898 
+	#R_SH_CODE
+ 30
+
+	)
+
+2899 
+	#R_SH_DATA
+ 31
+
+	)
+
+2900 
+	#R_SH_LABEL
+ 32
+
+	)
+
+2901 
+	#R_SH_SWITCH8
+ 33
+
+	)
+
+2902 
+	#R_SH_GNU_VTINHERIT
+ 34
+
+	)
+
+2903 
+	#R_SH_GNU_VTENTRY
+ 35
+
+	)
+
+2904 
+	#R_SH_TLS_GD_32
+ 144
+
+	)
+
+2905 
+	#R_SH_TLS_LD_32
+ 145
+
+	)
+
+2906 
+	#R_SH_TLS_LDO_32
+ 146
+
+	)
+
+2907 
+	#R_SH_TLS_IE_32
+ 147
+
+	)
+
+2908 
+	#R_SH_TLS_LE_32
+ 148
+
+	)
+
+2909 
+	#R_SH_TLS_DTPMOD32
+ 149
+
+	)
+
+2910 
+	#R_SH_TLS_DTPOFF32
+ 150
+
+	)
+
+2911 
+	#R_SH_TLS_TPOFF32
+ 151
+
+	)
+
+2912 
+	#R_SH_GOT32
+ 160
+
+	)
+
+2913 
+	#R_SH_PLT32
+ 161
+
+	)
+
+2914 
+	#R_SH_COPY
+ 162
+
+	)
+
+2915 
+	#R_SH_GLOB_DAT
+ 163
+
+	)
+
+2916 
+	#R_SH_JMP_SLOT
+ 164
+
+	)
+
+2917 
+	#R_SH_RELATIVE
+ 165
+
+	)
+
+2918 
+	#R_SH_GOTOFF
+ 166
+
+	)
+
+2919 
+	#R_SH_GOTPC
+ 167
+
+	)
+
+2921 
+	#R_SH_NUM
+ 256
+
+	)
+
+2927 
+	#EF_S390_HIGH_GPRS
+ 0x00000001
+
+	)
+
+2931 
+	#R_390_NONE
+ 0
+
+	)
+
+2932 
+	#R_390_8
+ 1
+
+	)
+
+2933 
+	#R_390_12
+ 2
+
+	)
+
+2934 
+	#R_390_16
+ 3
+
+	)
+
+2935 
+	#R_390_32
+ 4
+
+	)
+
+2936 
+	#R_390_PC32
+ 5
+
+	)
+
+2937 
+	#R_390_GOT12
+ 6
+
+	)
+
+2938 
+	#R_390_GOT32
+ 7
+
+	)
+
+2939 
+	#R_390_PLT32
+ 8
+
+	)
+
+2940 
+	#R_390_COPY
+ 9
+
+	)
+
+2941 
+	#R_390_GLOB_DAT
+ 10
+
+	)
+
+2942 
+	#R_390_JMP_SLOT
+ 11
+
+	)
+
+2943 
+	#R_390_RELATIVE
+ 12
+
+	)
+
+2944 
+	#R_390_GOTOFF32
+ 13
+
+	)
+
+2945 
+	#R_390_GOTPC
+ 14
+
+	)
+
+2946 
+	#R_390_GOT16
+ 15
+
+	)
+
+2947 
+	#R_390_PC16
+ 16
+
+	)
+
+2948 
+	#R_390_PC16DBL
+ 17
+
+	)
+
+2949 
+	#R_390_PLT16DBL
+ 18
+
+	)
+
+2950 
+	#R_390_PC32DBL
+ 19
+
+	)
+
+2951 
+	#R_390_PLT32DBL
+ 20
+
+	)
+
+2952 
+	#R_390_GOTPCDBL
+ 21
+
+	)
+
+2953 
+	#R_390_64
+ 22
+
+	)
+
+2954 
+	#R_390_PC64
+ 23
+
+	)
+
+2955 
+	#R_390_GOT64
+ 24
+
+	)
+
+2956 
+	#R_390_PLT64
+ 25
+
+	)
+
+2957 
+	#R_390_GOTENT
+ 26
+
+	)
+
+2958 
+	#R_390_GOTOFF16
+ 27
+
+	)
+
+2959 
+	#R_390_GOTOFF64
+ 28
+
+	)
+
+2960 
+	#R_390_GOTPLT12
+ 29
+
+	)
+
+2961 
+	#R_390_GOTPLT16
+ 30
+
+	)
+
+2962 
+	#R_390_GOTPLT32
+ 31
+
+	)
+
+2963 
+	#R_390_GOTPLT64
+ 32
+
+	)
+
+2964 
+	#R_390_GOTPLTENT
+ 33
+
+	)
+
+2965 
+	#R_390_PLTOFF16
+ 34
+
+	)
+
+2966 
+	#R_390_PLTOFF32
+ 35
+
+	)
+
+2967 
+	#R_390_PLTOFF64
+ 36
+
+	)
+
+2968 
+	#R_390_TLS_LOAD
+ 37
+
+	)
+
+2969 
+	#R_390_TLS_GDCALL
+ 38
+
+	)
+
+2971 
+	#R_390_TLS_LDCALL
+ 39
+
+	)
+
+2973 
+	#R_390_TLS_GD32
+ 40
+
+	)
+
+2975 
+	#R_390_TLS_GD64
+ 41
+
+	)
+
+2977 
+	#R_390_TLS_GOTIE12
+ 42
+
+	)
+
+2979 
+	#R_390_TLS_GOTIE32
+ 43
+
+	)
+
+2981 
+	#R_390_TLS_GOTIE64
+ 44
+
+	)
+
+2983 
+	#R_390_TLS_LDM32
+ 45
+
+	)
+
+2985 
+	#R_390_TLS_LDM64
+ 46
+
+	)
+
+2987 
+	#R_390_TLS_IE32
+ 47
+
+	)
+
+2989 
+	#R_390_TLS_IE64
+ 48
+
+	)
+
+2991 
+	#R_390_TLS_IEENT
+ 49
+
+	)
+
+2993 
+	#R_390_TLS_LE32
+ 50
+
+	)
+
+2995 
+	#R_390_TLS_LE64
+ 51
+
+	)
+
+2997 
+	#R_390_TLS_LDO32
+ 52
+
+	)
+
+2999 
+	#R_390_TLS_LDO64
+ 53
+
+	)
+
+3001 
+	#R_390_TLS_DTPMOD
+ 54
+
+	)
+
+3002 
+	#R_390_TLS_DTPOFF
+ 55
+
+	)
+
+3003 
+	#R_390_TLS_TPOFF
+ 56
+
+	)
+
+3005 
+	#R_390_20
+ 57
+
+	)
+
+3006 
+	#R_390_GOT20
+ 58
+
+	)
+
+3007 
+	#R_390_GOTPLT20
+ 59
+
+	)
+
+3008 
+	#R_390_TLS_GOTIE20
+ 60
+
+	)
+
+3010 
+	#R_390_IRELATIVE
+ 61
+
+	)
+
+3012 
+	#R_390_NUM
+ 62
+
+	)
+
+3016 
+	#R_CRIS_NONE
+ 0
+
+	)
+
+3017 
+	#R_CRIS_8
+ 1
+
+	)
+
+3018 
+	#R_CRIS_16
+ 2
+
+	)
+
+3019 
+	#R_CRIS_32
+ 3
+
+	)
+
+3020 
+	#R_CRIS_8_PCREL
+ 4
+
+	)
+
+3021 
+	#R_CRIS_16_PCREL
+ 5
+
+	)
+
+3022 
+	#R_CRIS_32_PCREL
+ 6
+
+	)
+
+3023 
+	#R_CRIS_GNU_VTINHERIT
+ 7
+
+	)
+
+3024 
+	#R_CRIS_GNU_VTENTRY
+ 8
+
+	)
+
+3025 
+	#R_CRIS_COPY
+ 9
+
+	)
+
+3026 
+	#R_CRIS_GLOB_DAT
+ 10
+
+	)
+
+3027 
+	#R_CRIS_JUMP_SLOT
+ 11
+
+	)
+
+3028 
+	#R_CRIS_RELATIVE
+ 12
+
+	)
+
+3029 
+	#R_CRIS_16_GOT
+ 13
+
+	)
+
+3030 
+	#R_CRIS_32_GOT
+ 14
+
+	)
+
+3031 
+	#R_CRIS_16_GOTPLT
+ 15
+
+	)
+
+3032 
+	#R_CRIS_32_GOTPLT
+ 16
+
+	)
+
+3033 
+	#R_CRIS_32_GOTREL
+ 17
+
+	)
+
+3034 
+	#R_CRIS_32_PLT_GOTREL
+ 18
+
+	)
+
+3035 
+	#R_CRIS_32_PLT_PCREL
+ 19
+
+	)
+
+3037 
+	#R_CRIS_NUM
+ 20
+
+	)
+
+3041 
+	#R_X86_64_NONE
+ 0
+
+	)
+
+3042 
+	#R_X86_64_64
+ 1
+
+	)
+
+3043 
+	#R_X86_64_PC32
+ 2
+
+	)
+
+3044 
+	#R_X86_64_GOT32
+ 3
+
+	)
+
+3045 
+	#R_X86_64_PLT32
+ 4
+
+	)
+
+3046 
+	#R_X86_64_COPY
+ 5
+
+	)
+
+3047 
+	#R_X86_64_GLOB_DAT
+ 6
+
+	)
+
+3048 
+	#R_X86_64_JUMP_SLOT
+ 7
+
+	)
+
+3049 
+	#R_X86_64_RELATIVE
+ 8
+
+	)
+
+3050 
+	#R_X86_64_GOTPCREL
+ 9
+
+	)
+
+3052 
+	#R_X86_64_32
+ 10
+
+	)
+
+3053 
+	#R_X86_64_32S
+ 11
+
+	)
+
+3054 
+	#R_X86_64_16
+ 12
+
+	)
+
+3055 
+	#R_X86_64_PC16
+ 13
+
+	)
+
+3056 
+	#R_X86_64_8
+ 14
+
+	)
+
+3057 
+	#R_X86_64_PC8
+ 15
+
+	)
+
+3058 
+	#R_X86_64_DTPMOD64
+ 16
+
+	)
+
+3059 
+	#R_X86_64_DTPOFF64
+ 17
+
+	)
+
+3060 
+	#R_X86_64_TPOFF64
+ 18
+
+	)
+
+3061 
+	#R_X86_64_TLSGD
+ 19
+
+	)
+
+3063 
+	#R_X86_64_TLSLD
+ 20
+
+	)
+
+3065 
+	#R_X86_64_DTPOFF32
+ 21
+
+	)
+
+3066 
+	#R_X86_64_GOTTPOFF
+ 22
+
+	)
+
+3068 
+	#R_X86_64_TPOFF32
+ 23
+
+	)
+
+3069 
+	#R_X86_64_PC64
+ 24
+
+	)
+
+3070 
+	#R_X86_64_GOTOFF64
+ 25
+
+	)
+
+3071 
+	#R_X86_64_GOTPC32
+ 26
+
+	)
+
+3073 
+	#R_X86_64_GOT64
+ 27
+
+	)
+
+3074 
+	#R_X86_64_GOTPCREL64
+ 28
+
+	)
+
+3076 
+	#R_X86_64_GOTPC64
+ 29
+
+	)
+
+3077 
+	#R_X86_64_GOTPLT64
+ 30
+
+	)
+
+3078 
+	#R_X86_64_PLTOFF64
+ 31
+
+	)
+
+3080 
+	#R_X86_64_SIZE32
+ 32
+
+	)
+
+3081 
+	#R_X86_64_SIZE64
+ 33
+
+	)
+
+3082 
+	#R_X86_64_GOTPC32_TLSDESC
+ 34
+
+	)
+
+3083 
+	#R_X86_64_TLSDESC_CALL
+ 35
+
+	)
+
+3085 
+	#R_X86_64_TLSDESC
+ 36
+
+	)
+
+3086 
+	#R_X86_64_IRELATIVE
+ 37
+
+	)
+
+3087 
+	#R_X86_64_RELATIVE64
+ 38
+
+	)
+
+3089 
+	#R_X86_64_NUM
+ 39
+
+	)
+
+3093 
+	#R_MN10300_NONE
+ 0
+
+	)
+
+3094 
+	#R_MN10300_32
+ 1
+
+	)
+
+3095 
+	#R_MN10300_16
+ 2
+
+	)
+
+3096 
+	#R_MN10300_8
+ 3
+
+	)
+
+3097 
+	#R_MN10300_PCREL32
+ 4
+
+	)
+
+3098 
+	#R_MN10300_PCREL16
+ 5
+
+	)
+
+3099 
+	#R_MN10300_PCREL8
+ 6
+
+	)
+
+3100 
+	#R_MN10300_GNU_VTINHERIT
+ 7
+
+	)
+
+3101 
+	#R_MN10300_GNU_VTENTRY
+ 8
+
+	)
+
+3102 
+	#R_MN10300_24
+ 9
+
+	)
+
+3103 
+	#R_MN10300_GOTPC32
+ 10
+
+	)
+
+3104 
+	#R_MN10300_GOTPC16
+ 11
+
+	)
+
+3105 
+	#R_MN10300_GOTOFF32
+ 12
+
+	)
+
+3106 
+	#R_MN10300_GOTOFF24
+ 13
+
+	)
+
+3107 
+	#R_MN10300_GOTOFF16
+ 14
+
+	)
+
+3108 
+	#R_MN10300_PLT32
+ 15
+
+	)
+
+3109 
+	#R_MN10300_PLT16
+ 16
+
+	)
+
+3110 
+	#R_MN10300_GOT32
+ 17
+
+	)
+
+3111 
+	#R_MN10300_GOT24
+ 18
+
+	)
+
+3112 
+	#R_MN10300_GOT16
+ 19
+
+	)
+
+3113 
+	#R_MN10300_COPY
+ 20
+
+	)
+
+3114 
+	#R_MN10300_GLOB_DAT
+ 21
+
+	)
+
+3115 
+	#R_MN10300_JMP_SLOT
+ 22
+
+	)
+
+3116 
+	#R_MN10300_RELATIVE
+ 23
+
+	)
+
+3117 
+	#R_MN10300_TLS_GD
+ 24
+
+	)
+
+3118 
+	#R_MN10300_TLS_LD
+ 25
+
+	)
+
+3119 
+	#R_MN10300_TLS_LDO
+ 26
+
+	)
+
+3120 
+	#R_MN10300_TLS_GOTIE
+ 27
+
+	)
+
+3122 
+	#R_MN10300_TLS_IE
+ 28
+
+	)
+
+3124 
+	#R_MN10300_TLS_LE
+ 29
+
+	)
+
+3126 
+	#R_MN10300_TLS_DTPMOD
+ 30
+
+	)
+
+3127 
+	#R_MN10300_TLS_DTPOFF
+ 31
+
+	)
+
+3128 
+	#R_MN10300_TLS_TPOFF
+ 32
+
+	)
+
+3129 
+	#R_MN10300_SYM_DIFF
+ 33
+
+	)
+
+3131 
+	#R_MN10300_ALIGN
+ 34
+
+	)
+
+3133 
+	#R_MN10300_NUM
+ 35
+
+	)
+
+3137 
+	#R_M32R_NONE
+ 0
+
+	)
+
+3138 
+	#R_M32R_16
+ 1
+
+	)
+
+3139 
+	#R_M32R_32
+ 2
+
+	)
+
+3140 
+	#R_M32R_24
+ 3
+
+	)
+
+3141 
+	#R_M32R_10_PCREL
+ 4
+
+	)
+
+3142 
+	#R_M32R_18_PCREL
+ 5
+
+	)
+
+3143 
+	#R_M32R_26_PCREL
+ 6
+
+	)
+
+3144 
+	#R_M32R_HI16_ULO
+ 7
+
+	)
+
+3145 
+	#R_M32R_HI16_SLO
+ 8
+
+	)
+
+3146 
+	#R_M32R_LO16
+ 9
+
+	)
+
+3147 
+	#R_M32R_SDA16
+ 10
+
+	)
+
+3148 
+	#R_M32R_GNU_VTINHERIT
+ 11
+
+	)
+
+3149 
+	#R_M32R_GNU_VTENTRY
+ 12
+
+	)
+
+3151 
+	#R_M32R_16_RELA
+ 33
+
+	)
+
+3152 
+	#R_M32R_32_RELA
+ 34
+
+	)
+
+3153 
+	#R_M32R_24_RELA
+ 35
+
+	)
+
+3154 
+	#R_M32R_10_PCREL_RELA
+ 36
+
+	)
+
+3155 
+	#R_M32R_18_PCREL_RELA
+ 37
+
+	)
+
+3156 
+	#R_M32R_26_PCREL_RELA
+ 38
+
+	)
+
+3157 
+	#R_M32R_HI16_ULO_RELA
+ 39
+
+	)
+
+3158 
+	#R_M32R_HI16_SLO_RELA
+ 40
+
+	)
+
+3159 
+	#R_M32R_LO16_RELA
+ 41
+
+	)
+
+3160 
+	#R_M32R_SDA16_RELA
+ 42
+
+	)
+
+3161 
+	#R_M32R_RELA_GNU_VTINHERIT
+ 43
+
+	)
+
+3162 
+	#R_M32R_RELA_GNU_VTENTRY
+ 44
+
+	)
+
+3163 
+	#R_M32R_REL32
+ 45
+
+	)
+
+3165 
+	#R_M32R_GOT24
+ 48
+
+	)
+
+3166 
+	#R_M32R_26_PLTREL
+ 49
+
+	)
+
+3167 
+	#R_M32R_COPY
+ 50
+
+	)
+
+3168 
+	#R_M32R_GLOB_DAT
+ 51
+
+	)
+
+3169 
+	#R_M32R_JMP_SLOT
+ 52
+
+	)
+
+3170 
+	#R_M32R_RELATIVE
+ 53
+
+	)
+
+3171 
+	#R_M32R_GOTOFF
+ 54
+
+	)
+
+3172 
+	#R_M32R_GOTPC24
+ 55
+
+	)
+
+3173 
+	#R_M32R_GOT16_HI_ULO
+ 56
+
+	)
+
+3175 
+	#R_M32R_GOT16_HI_SLO
+ 57
+
+	)
+
+3177 
+	#R_M32R_GOT16_LO
+ 58
+
+	)
+
+3178 
+	#R_M32R_GOTPC_HI_ULO
+ 59
+
+	)
+
+3180 
+	#R_M32R_GOTPC_HI_SLO
+ 60
+
+	)
+
+3182 
+	#R_M32R_GOTPC_LO
+ 61
+
+	)
+
+3184 
+	#R_M32R_GOTOFF_HI_ULO
+ 62
+
+	)
+
+3186 
+	#R_M32R_GOTOFF_HI_SLO
+ 63
+
+	)
+
+3188 
+	#R_M32R_GOTOFF_LO
+ 64
+
+	)
+
+3189 
+	#R_M32R_NUM
+ 256
+
+	)
+
+3192 
+	#R_MICROBLAZE_NONE
+ 0
+
+	)
+
+3193 
+	#R_MICROBLAZE_32
+ 1
+
+	)
+
+3194 
+	#R_MICROBLAZE_32_PCREL
+ 2
+
+	)
+
+3195 
+	#R_MICROBLAZE_64_PCREL
+ 3
+
+	)
+
+3196 
+	#R_MICROBLAZE_32_PCREL_LO
+ 4
+
+	)
+
+3197 
+	#R_MICROBLAZE_64
+ 5
+
+	)
+
+3198 
+	#R_MICROBLAZE_32_LO
+ 6
+
+	)
+
+3199 
+	#R_MICROBLAZE_SRO32
+ 7
+
+	)
+
+3200 
+	#R_MICROBLAZE_SRW32
+ 8
+
+	)
+
+3201 
+	#R_MICROBLAZE_64_NONE
+ 9
+
+	)
+
+3202 
+	#R_MICROBLAZE_32_SYM_OP_SYM
+ 10
+
+	)
+
+3203 
+	#R_MICROBLAZE_GNU_VTINHERIT
+ 11
+
+	)
+
+3204 
+	#R_MICROBLAZE_GNU_VTENTRY
+ 12
+
+	)
+
+3205 
+	#R_MICROBLAZE_GOTPC_64
+ 13
+
+	)
+
+3206 
+	#R_MICROBLAZE_GOT_64
+ 14
+
+	)
+
+3207 
+	#R_MICROBLAZE_PLT_64
+ 15
+
+	)
+
+3208 
+	#R_MICROBLAZE_REL
+ 16
+
+	)
+
+3209 
+	#R_MICROBLAZE_JUMP_SLOT
+ 17
+
+	)
+
+3210 
+	#R_MICROBLAZE_GLOB_DAT
+ 18
+
+	)
+
+3211 
+	#R_MICROBLAZE_GOTOFF_64
+ 19
+
+	)
+
+3212 
+	#R_MICROBLAZE_GOTOFF_32
+ 20
+
+	)
+
+3213 
+	#R_MICROBLAZE_COPY
+ 21
+
+	)
+
+3214 
+	#R_MICROBLAZE_TLS
+ 22
+
+	)
+
+3215 
+	#R_MICROBLAZE_TLSGD
+ 23
+
+	)
+
+3216 
+	#R_MICROBLAZE_TLSLD
+ 24
+
+	)
+
+3217 
+	#R_MICROBLAZE_TLSDTPMOD32
+ 25
+
+	)
+
+3218 
+	#R_MICROBLAZE_TLSDTPREL32
+ 26
+
+	)
+
+3219 
+	#R_MICROBLAZE_TLSDTPREL64
+ 27
+
+	)
+
+3220 
+	#R_MICROBLAZE_TLSGOTTPREL32
+ 28
+
+	)
+
+3221 
+	#R_MICROBLAZE_TLSTPREL32
+ 29
+
+	)
+
+3224 
+	#DT_NIOS2_GP
+ 0x70000002
+
+	)
+
+3227 
+	#R_NIOS2_NONE
+ 0
+
+	)
+
+3228 
+	#R_NIOS2_S16
+ 1
+
+	)
+
+3229 
+	#R_NIOS2_U16
+ 2
+
+	)
+
+3230 
+	#R_NIOS2_PCREL16
+ 3
+
+	)
+
+3231 
+	#R_NIOS2_CALL26
+ 4
+
+	)
+
+3232 
+	#R_NIOS2_IMM5
+ 5
+
+	)
+
+3233 
+	#R_NIOS2_CACHE_OPX
+ 6
+
+	)
+
+3234 
+	#R_NIOS2_IMM6
+ 7
+
+	)
+
+3235 
+	#R_NIOS2_IMM8
+ 8
+
+	)
+
+3236 
+	#R_NIOS2_HI16
+ 9
+
+	)
+
+3237 
+	#R_NIOS2_LO16
+ 10
+
+	)
+
+3238 
+	#R_NIOS2_HIADJ16
+ 11
+
+	)
+
+3239 
+	#R_NIOS2_BFD_RELOC_32
+ 12
+
+	)
+
+3240 
+	#R_NIOS2_BFD_RELOC_16
+ 13
+
+	)
+
+3241 
+	#R_NIOS2_BFD_RELOC_8
+ 14
+
+	)
+
+3242 
+	#R_NIOS2_GPREL
+ 15
+
+	)
+
+3243 
+	#R_NIOS2_GNU_VTINHERIT
+ 16
+
+	)
+
+3244 
+	#R_NIOS2_GNU_VTENTRY
+ 17
+
+	)
+
+3245 
+	#R_NIOS2_UJMP
+ 18
+
+	)
+
+3246 
+	#R_NIOS2_CJMP
+ 19
+
+	)
+
+3247 
+	#R_NIOS2_CALLR
+ 20
+
+	)
+
+3248 
+	#R_NIOS2_ALIGN
+ 21
+
+	)
+
+3250 
+	#R_NIOS2_GOT16
+ 22
+
+	)
+
+3251 
+	#R_NIOS2_CALL16
+ 23
+
+	)
+
+3252 
+	#R_NIOS2_GOTOFF_LO
+ 24
+
+	)
+
+3253 
+	#R_NIOS2_GOTOFF_HA
+ 25
+
+	)
+
+3254 
+	#R_NIOS2_PCREL_LO
+ 26
+
+	)
+
+3255 
+	#R_NIOS2_PCREL_HA
+ 27
+
+	)
+
+3256 
+	#R_NIOS2_TLS_GD16
+ 28
+
+	)
+
+3257 
+	#R_NIOS2_TLS_LDM16
+ 29
+
+	)
+
+3258 
+	#R_NIOS2_TLS_LDO16
+ 30
+
+	)
+
+3259 
+	#R_NIOS2_TLS_IE16
+ 31
+
+	)
+
+3260 
+	#R_NIOS2_TLS_LE16
+ 32
+
+	)
+
+3261 
+	#R_NIOS2_TLS_DTPMOD
+ 33
+
+	)
+
+3262 
+	#R_NIOS2_TLS_DTPREL
+ 34
+
+	)
+
+3263 
+	#R_NIOS2_TLS_TPREL
+ 35
+
+	)
+
+3264 
+	#R_NIOS2_COPY
+ 36
+
+	)
+
+3265 
+	#R_NIOS2_GLOB_DAT
+ 37
+
+	)
+
+3266 
+	#R_NIOS2_JUMP_SLOT
+ 38
+
+	)
+
+3267 
+	#R_NIOS2_RELATIVE
+ 39
+
+	)
+
+3268 
+	#R_NIOS2_GOTOFF
+ 40
+
+	)
+
+3269 
+	#R_NIOS2_CALL26_NOAT
+ 41
+
+	)
+
+3270 
+	#R_NIOS2_GOT_LO
+ 42
+
+	)
+
+3271 
+	#R_NIOS2_GOT_HA
+ 43
+
+	)
+
+3272 
+	#R_NIOS2_CALL_LO
+ 44
+
+	)
+
+3273 
+	#R_NIOS2_CALL_HA
+ 45
+
+	)
+
+3276 
+	#R_TILEPRO_NONE
+ 0
+
+	)
+
+3277 
+	#R_TILEPRO_32
+ 1
+
+	)
+
+3278 
+	#R_TILEPRO_16
+ 2
+
+	)
+
+3279 
+	#R_TILEPRO_8
+ 3
+
+	)
+
+3280 
+	#R_TILEPRO_32_PCREL
+ 4
+
+	)
+
+3281 
+	#R_TILEPRO_16_PCREL
+ 5
+
+	)
+
+3282 
+	#R_TILEPRO_8_PCREL
+ 6
+
+	)
+
+3283 
+	#R_TILEPRO_LO16
+ 7
+
+	)
+
+3284 
+	#R_TILEPRO_HI16
+ 8
+
+	)
+
+3285 
+	#R_TILEPRO_HA16
+ 9
+
+	)
+
+3286 
+	#R_TILEPRO_COPY
+ 10
+
+	)
+
+3287 
+	#R_TILEPRO_GLOB_DAT
+ 11
+
+	)
+
+3288 
+	#R_TILEPRO_JMP_SLOT
+ 12
+
+	)
+
+3289 
+	#R_TILEPRO_RELATIVE
+ 13
+
+	)
+
+3290 
+	#R_TILEPRO_BROFF_X1
+ 14
+
+	)
+
+3291 
+	#R_TILEPRO_JOFFLONG_X1
+ 15
+
+	)
+
+3292 
+	#R_TILEPRO_JOFFLONG_X1_PLT
+ 16
+
+	)
+
+3293 
+	#R_TILEPRO_IMM8_X0
+ 17
+
+	)
+
+3294 
+	#R_TILEPRO_IMM8_Y0
+ 18
+
+	)
+
+3295 
+	#R_TILEPRO_IMM8_X1
+ 19
+
+	)
+
+3296 
+	#R_TILEPRO_IMM8_Y1
+ 20
+
+	)
+
+3297 
+	#R_TILEPRO_MT_IMM15_X1
+ 21
+
+	)
+
+3298 
+	#R_TILEPRO_MF_IMM15_X1
+ 22
+
+	)
+
+3299 
+	#R_TILEPRO_IMM16_X0
+ 23
+
+	)
+
+3300 
+	#R_TILEPRO_IMM16_X1
+ 24
+
+	)
+
+3301 
+	#R_TILEPRO_IMM16_X0_LO
+ 25
+
+	)
+
+3302 
+	#R_TILEPRO_IMM16_X1_LO
+ 26
+
+	)
+
+3303 
+	#R_TILEPRO_IMM16_X0_HI
+ 27
+
+	)
+
+3304 
+	#R_TILEPRO_IMM16_X1_HI
+ 28
+
+	)
+
+3305 
+	#R_TILEPRO_IMM16_X0_HA
+ 29
+
+	)
+
+3306 
+	#R_TILEPRO_IMM16_X1_HA
+ 30
+
+	)
+
+3307 
+	#R_TILEPRO_IMM16_X0_PCREL
+ 31
+
+	)
+
+3308 
+	#R_TILEPRO_IMM16_X1_PCREL
+ 32
+
+	)
+
+3309 
+	#R_TILEPRO_IMM16_X0_LO_PCREL
+ 33
+
+	)
+
+3310 
+	#R_TILEPRO_IMM16_X1_LO_PCREL
+ 34
+
+	)
+
+3311 
+	#R_TILEPRO_IMM16_X0_HI_PCREL
+ 35
+
+	)
+
+3312 
+	#R_TILEPRO_IMM16_X1_HI_PCREL
+ 36
+
+	)
+
+3313 
+	#R_TILEPRO_IMM16_X0_HA_PCREL
+ 37
+
+	)
+
+3314 
+	#R_TILEPRO_IMM16_X1_HA_PCREL
+ 38
+
+	)
+
+3315 
+	#R_TILEPRO_IMM16_X0_GOT
+ 39
+
+	)
+
+3316 
+	#R_TILEPRO_IMM16_X1_GOT
+ 40
+
+	)
+
+3317 
+	#R_TILEPRO_IMM16_X0_GOT_LO
+ 41
+
+	)
+
+3318 
+	#R_TILEPRO_IMM16_X1_GOT_LO
+ 42
+
+	)
+
+3319 
+	#R_TILEPRO_IMM16_X0_GOT_HI
+ 43
+
+	)
+
+3320 
+	#R_TILEPRO_IMM16_X1_GOT_HI
+ 44
+
+	)
+
+3321 
+	#R_TILEPRO_IMM16_X0_GOT_HA
+ 45
+
+	)
+
+3322 
+	#R_TILEPRO_IMM16_X1_GOT_HA
+ 46
+
+	)
+
+3323 
+	#R_TILEPRO_MMSTART_X0
+ 47
+
+	)
+
+3324 
+	#R_TILEPRO_MMEND_X0
+ 48
+
+	)
+
+3325 
+	#R_TILEPRO_MMSTART_X1
+ 49
+
+	)
+
+3326 
+	#R_TILEPRO_MMEND_X1
+ 50
+
+	)
+
+3327 
+	#R_TILEPRO_SHAMT_X0
+ 51
+
+	)
+
+3328 
+	#R_TILEPRO_SHAMT_X1
+ 52
+
+	)
+
+3329 
+	#R_TILEPRO_SHAMT_Y0
+ 53
+
+	)
+
+3330 
+	#R_TILEPRO_SHAMT_Y1
+ 54
+
+	)
+
+3331 
+	#R_TILEPRO_DEST_IMM8_X1
+ 55
+
+	)
+
+3333 
+	#R_TILEPRO_TLS_GD_CALL
+ 60
+
+	)
+
+3334 
+	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
+ 61
+
+	)
+
+3335 
+	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
+ 62
+
+	)
+
+3336 
+	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
+ 63
+
+	)
+
+3337 
+	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
+ 64
+
+	)
+
+3338 
+	#R_TILEPRO_TLS_IE_LOAD
+ 65
+
+	)
+
+3339 
+	#R_TILEPRO_IMM16_X0_TLS_GD
+ 66
+
+	)
+
+3340 
+	#R_TILEPRO_IMM16_X1_TLS_GD
+ 67
+
+	)
+
+3341 
+	#R_TILEPRO_IMM16_X0_TLS_GD_LO
+ 68
+
+	)
+
+3342 
+	#R_TILEPRO_IMM16_X1_TLS_GD_LO
+ 69
+
+	)
+
+3343 
+	#R_TILEPRO_IMM16_X0_TLS_GD_HI
+ 70
+
+	)
+
+3344 
+	#R_TILEPRO_IMM16_X1_TLS_GD_HI
+ 71
+
+	)
+
+3345 
+	#R_TILEPRO_IMM16_X0_TLS_GD_HA
+ 72
+
+	)
+
+3346 
+	#R_TILEPRO_IMM16_X1_TLS_GD_HA
+ 73
+
+	)
+
+3347 
+	#R_TILEPRO_IMM16_X0_TLS_IE
+ 74
+
+	)
+
+3348 
+	#R_TILEPRO_IMM16_X1_TLS_IE
+ 75
+
+	)
+
+3349 
+	#R_TILEPRO_IMM16_X0_TLS_IE_LO
+ 76
+
+	)
+
+3350 
+	#R_TILEPRO_IMM16_X1_TLS_IE_LO
+ 77
+
+	)
+
+3351 
+	#R_TILEPRO_IMM16_X0_TLS_IE_HI
+ 78
+
+	)
+
+3352 
+	#R_TILEPRO_IMM16_X1_TLS_IE_HI
+ 79
+
+	)
+
+3353 
+	#R_TILEPRO_IMM16_X0_TLS_IE_HA
+ 80
+
+	)
+
+3354 
+	#R_TILEPRO_IMM16_X1_TLS_IE_HA
+ 81
+
+	)
+
+3355 
+	#R_TILEPRO_TLS_DTPMOD32
+ 82
+
+	)
+
+3356 
+	#R_TILEPRO_TLS_DTPOFF32
+ 83
+
+	)
+
+3357 
+	#R_TILEPRO_TLS_TPOFF32
+ 84
+
+	)
+
+3358 
+	#R_TILEPRO_IMM16_X0_TLS_LE
+ 85
+
+	)
+
+3359 
+	#R_TILEPRO_IMM16_X1_TLS_LE
+ 86
+
+	)
+
+3360 
+	#R_TILEPRO_IMM16_X0_TLS_LE_LO
+ 87
+
+	)
+
+3361 
+	#R_TILEPRO_IMM16_X1_TLS_LE_LO
+ 88
+
+	)
+
+3362 
+	#R_TILEPRO_IMM16_X0_TLS_LE_HI
+ 89
+
+	)
+
+3363 
+	#R_TILEPRO_IMM16_X1_TLS_LE_HI
+ 90
+
+	)
+
+3364 
+	#R_TILEPRO_IMM16_X0_TLS_LE_HA
+ 91
+
+	)
+
+3365 
+	#R_TILEPRO_IMM16_X1_TLS_LE_HA
+ 92
+
+	)
+
+3367 
+	#R_TILEPRO_GNU_VTINHERIT
+ 128
+
+	)
+
+3368 
+	#R_TILEPRO_GNU_VTENTRY
+ 129
+
+	)
+
+3370 
+	#R_TILEPRO_NUM
+ 130
+
+	)
+
+3374 
+	#R_TILEGX_NONE
+ 0
+
+	)
+
+3375 
+	#R_TILEGX_64
+ 1
+
+	)
+
+3376 
+	#R_TILEGX_32
+ 2
+
+	)
+
+3377 
+	#R_TILEGX_16
+ 3
+
+	)
+
+3378 
+	#R_TILEGX_8
+ 4
+
+	)
+
+3379 
+	#R_TILEGX_64_PCREL
+ 5
+
+	)
+
+3380 
+	#R_TILEGX_32_PCREL
+ 6
+
+	)
+
+3381 
+	#R_TILEGX_16_PCREL
+ 7
+
+	)
+
+3382 
+	#R_TILEGX_8_PCREL
+ 8
+
+	)
+
+3383 
+	#R_TILEGX_HW0
+ 9
+
+	)
+
+3384 
+	#R_TILEGX_HW1
+ 10
+
+	)
+
+3385 
+	#R_TILEGX_HW2
+ 11
+
+	)
+
+3386 
+	#R_TILEGX_HW3
+ 12
+
+	)
+
+3387 
+	#R_TILEGX_HW0_LAST
+ 13
+
+	)
+
+3388 
+	#R_TILEGX_HW1_LAST
+ 14
+
+	)
+
+3389 
+	#R_TILEGX_HW2_LAST
+ 15
+
+	)
+
+3390 
+	#R_TILEGX_COPY
+ 16
+
+	)
+
+3391 
+	#R_TILEGX_GLOB_DAT
+ 17
+
+	)
+
+3392 
+	#R_TILEGX_JMP_SLOT
+ 18
+
+	)
+
+3393 
+	#R_TILEGX_RELATIVE
+ 19
+
+	)
+
+3394 
+	#R_TILEGX_BROFF_X1
+ 20
+
+	)
+
+3395 
+	#R_TILEGX_JUMPOFF_X1
+ 21
+
+	)
+
+3396 
+	#R_TILEGX_JUMPOFF_X1_PLT
+ 22
+
+	)
+
+3397 
+	#R_TILEGX_IMM8_X0
+ 23
+
+	)
+
+3398 
+	#R_TILEGX_IMM8_Y0
+ 24
+
+	)
+
+3399 
+	#R_TILEGX_IMM8_X1
+ 25
+
+	)
+
+3400 
+	#R_TILEGX_IMM8_Y1
+ 26
+
+	)
+
+3401 
+	#R_TILEGX_DEST_IMM8_X1
+ 27
+
+	)
+
+3402 
+	#R_TILEGX_MT_IMM14_X1
+ 28
+
+	)
+
+3403 
+	#R_TILEGX_MF_IMM14_X1
+ 29
+
+	)
+
+3404 
+	#R_TILEGX_MMSTART_X0
+ 30
+
+	)
+
+3405 
+	#R_TILEGX_MMEND_X0
+ 31
+
+	)
+
+3406 
+	#R_TILEGX_SHAMT_X0
+ 32
+
+	)
+
+3407 
+	#R_TILEGX_SHAMT_X1
+ 33
+
+	)
+
+3408 
+	#R_TILEGX_SHAMT_Y0
+ 34
+
+	)
+
+3409 
+	#R_TILEGX_SHAMT_Y1
+ 35
+
+	)
+
+3410 
+	#R_TILEGX_IMM16_X0_HW0
+ 36
+
+	)
+
+3411 
+	#R_TILEGX_IMM16_X1_HW0
+ 37
+
+	)
+
+3412 
+	#R_TILEGX_IMM16_X0_HW1
+ 38
+
+	)
+
+3413 
+	#R_TILEGX_IMM16_X1_HW1
+ 39
+
+	)
+
+3414 
+	#R_TILEGX_IMM16_X0_HW2
+ 40
+
+	)
+
+3415 
+	#R_TILEGX_IMM16_X1_HW2
+ 41
+
+	)
+
+3416 
+	#R_TILEGX_IMM16_X0_HW3
+ 42
+
+	)
+
+3417 
+	#R_TILEGX_IMM16_X1_HW3
+ 43
+
+	)
+
+3418 
+	#R_TILEGX_IMM16_X0_HW0_LAST
+ 44
+
+	)
+
+3419 
+	#R_TILEGX_IMM16_X1_HW0_LAST
+ 45
+
+	)
+
+3420 
+	#R_TILEGX_IMM16_X0_HW1_LAST
+ 46
+
+	)
+
+3421 
+	#R_TILEGX_IMM16_X1_HW1_LAST
+ 47
+
+	)
+
+3422 
+	#R_TILEGX_IMM16_X0_HW2_LAST
+ 48
+
+	)
+
+3423 
+	#R_TILEGX_IMM16_X1_HW2_LAST
+ 49
+
+	)
+
+3424 
+	#R_TILEGX_IMM16_X0_HW0_PCREL
+ 50
+
+	)
+
+3425 
+	#R_TILEGX_IMM16_X1_HW0_PCREL
+ 51
+
+	)
+
+3426 
+	#R_TILEGX_IMM16_X0_HW1_PCREL
+ 52
+
+	)
+
+3427 
+	#R_TILEGX_IMM16_X1_HW1_PCREL
+ 53
+
+	)
+
+3428 
+	#R_TILEGX_IMM16_X0_HW2_PCREL
+ 54
+
+	)
+
+3429 
+	#R_TILEGX_IMM16_X1_HW2_PCREL
+ 55
+
+	)
+
+3430 
+	#R_TILEGX_IMM16_X0_HW3_PCREL
+ 56
+
+	)
+
+3431 
+	#R_TILEGX_IMM16_X1_HW3_PCREL
+ 57
+
+	)
+
+3432 
+	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
+ 58
+
+	)
+
+3433 
+	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
+ 59
+
+	)
+
+3434 
+	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
+ 60
+
+	)
+
+3435 
+	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
+ 61
+
+	)
+
+3436 
+	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
+ 62
+
+	)
+
+3437 
+	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
+ 63
+
+	)
+
+3438 
+	#R_TILEGX_IMM16_X0_HW0_GOT
+ 64
+
+	)
+
+3439 
+	#R_TILEGX_IMM16_X1_HW0_GOT
+ 65
+
+	)
+
+3440 
+	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
+ 66
+
+	)
+
+3441 
+	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
+ 67
+
+	)
+
+3442 
+	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
+ 68
+
+	)
+
+3443 
+	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
+ 69
+
+	)
+
+3444 
+	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
+ 70
+
+	)
+
+3445 
+	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
+ 71
+
+	)
+
+3446 
+	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
+ 72
+
+	)
+
+3447 
+	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
+ 73
+
+	)
+
+3448 
+	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
+ 74
+
+	)
+
+3449 
+	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
+ 75
+
+	)
+
+3450 
+	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
+ 76
+
+	)
+
+3451 
+	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
+ 77
+
+	)
+
+3452 
+	#R_TILEGX_IMM16_X0_HW0_TLS_GD
+ 78
+
+	)
+
+3453 
+	#R_TILEGX_IMM16_X1_HW0_TLS_GD
+ 79
+
+	)
+
+3454 
+	#R_TILEGX_IMM16_X0_HW0_TLS_LE
+ 80
+
+	)
+
+3455 
+	#R_TILEGX_IMM16_X1_HW0_TLS_LE
+ 81
+
+	)
+
+3456 
+	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
+ 82
+
+	)
+
+3457 
+	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
+ 83
+
+	)
+
+3458 
+	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
+ 84
+
+	)
+
+3459 
+	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
+ 85
+
+	)
+
+3460 
+	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
+ 86
+
+	)
+
+3461 
+	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
+ 87
+
+	)
+
+3462 
+	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
+ 88
+
+	)
+
+3463 
+	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
+ 89
+
+	)
+
+3465 
+	#R_TILEGX_IMM16_X0_HW0_TLS_IE
+ 92
+
+	)
+
+3466 
+	#R_TILEGX_IMM16_X1_HW0_TLS_IE
+ 93
+
+	)
+
+3467 
+	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
+ 94
+
+	)
+
+3468 
+	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
+ 95
+
+	)
+
+3469 
+	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
+ 96
+
+	)
+
+3470 
+	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
+ 97
+
+	)
+
+3471 
+	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
+ 98
+
+	)
+
+3472 
+	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
+ 99
+
+	)
+
+3473 
+	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
+ 100
+
+	)
+
+3474 
+	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
+ 101
+
+	)
+
+3475 
+	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
+ 102
+
+	)
+
+3476 
+	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
+ 103
+
+	)
+
+3478 
+	#R_TILEGX_TLS_DTPMOD64
+ 106
+
+	)
+
+3479 
+	#R_TILEGX_TLS_DTPOFF64
+ 107
+
+	)
+
+3480 
+	#R_TILEGX_TLS_TPOFF64
+ 108
+
+	)
+
+3481 
+	#R_TILEGX_TLS_DTPMOD32
+ 109
+
+	)
+
+3482 
+	#R_TILEGX_TLS_DTPOFF32
+ 110
+
+	)
+
+3483 
+	#R_TILEGX_TLS_TPOFF32
+ 111
+
+	)
+
+3484 
+	#R_TILEGX_TLS_GD_CALL
+ 112
+
+	)
+
+3485 
+	#R_TILEGX_IMM8_X0_TLS_GD_ADD
+ 113
+
+	)
+
+3486 
+	#R_TILEGX_IMM8_X1_TLS_GD_ADD
+ 114
+
+	)
+
+3487 
+	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
+ 115
+
+	)
+
+3488 
+	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
+ 116
+
+	)
+
+3489 
+	#R_TILEGX_TLS_IE_LOAD
+ 117
+
+	)
+
+3490 
+	#R_TILEGX_IMM8_X0_TLS_ADD
+ 118
+
+	)
+
+3491 
+	#R_TILEGX_IMM8_X1_TLS_ADD
+ 119
+
+	)
+
+3492 
+	#R_TILEGX_IMM8_Y0_TLS_ADD
+ 120
+
+	)
+
+3493 
+	#R_TILEGX_IMM8_Y1_TLS_ADD
+ 121
+
+	)
+
+3495 
+	#R_TILEGX_GNU_VTINHERIT
+ 128
+
+	)
+
+3496 
+	#R_TILEGX_GNU_VTENTRY
+ 129
+
+	)
+
+3498 
+	#R_TILEGX_NUM
+ 130
+
+	)
+
+3501 
+	g__END_DECLS
+
+
+	@/usr/include/errno.h
+
+22 #i‚def 
+_ERRNO_H
+
+
+26 #i‚def 
+__√ed_Em©h
+
+
+27 
+	#_ERRNO_H
+ 1
+
+	)
+
+28 
+	~<„©uªs.h
+>
+
+31 
+	g__BEGIN_DECLS
+
+
+35 
+	~<bôs/î∫o.h
+>
+
+36 #unde‡
+__√ed_Em©h
+
+
+38 #ifdef 
+_ERRNO_H
+
+
+45 #i‚def 
+î∫o
+
+
+46 
+î∫o
+;
+
+49 #ifde‡
+__USE_GNU
+
+
+54 *
+¥ogøm_övoˇti⁄_«me
+, *
+¥ogøm_övoˇti⁄_sh‹t_«me
+;
+
+58 
+	g__END_DECLS
+
+
+66 #i‡
+deföed
+ 
+__USE_GNU
+ || deföed 
+__√ed_îr‹_t
+
+
+67 #i‚de‡
+__îr‹_t_deföed
+
+
+68 
+	tîr‹_t
+;
+
+69 
+	#__îr‹_t_deföed
+ 1
+
+	)
+
+71 #unde‡
+__√ed_îr‹_t
+
+
+	@/usr/include/error.h
+
+19 #i‚de‡
+_ERROR_H
+
+
+20 
+	#_ERROR_H
+ 1
+
+	)
+
+22 
+	~<„©uªs.h
+>
+
+25 
+__BEGIN_DECLS
+
+
+31 
+	$îr‹
+ (
+__°©us
+, 
+__î∫um
+, c⁄° *
+__f‹m©
+, ...)
+
+32 
+	`__©åibuã__
+ ((
+	`__f‹m©__
+ (
+__¥ötf__
+, 3, 4)));
+
+34 
+	$îr‹_©_löe
+ (
+__°©us
+, 
+__î∫um
+, c⁄° *
+__‚ame
+,
+
+35 
+__löío
+, c⁄° *
+__f‹m©
+, ...)
+
+36 
+	`__©åibuã__
+ ((
+	`__f‹m©__
+ (
+__¥ötf__
+, 5, 6)));
+
+41 (*
+îr‹_¥öt_¥og«me
+) ();
+
+44 
+îr‹_mesßge_cou¡
+;
+
+48 
+îr‹_⁄e_≥r_löe
+;
+
+51 #i‡
+deföed
+ 
+__exã∫_Æways_ölöe
+ && deföed 
+__va_¨g_∑ck
+
+
+52 
+	~<bôs/îr‹.h
+>
+
+55 
+__END_DECLS
+
+
+	@/usr/include/stab.h
+
+1 #i‚de‡
+__GNU_STAB__
+
+
+5 
+	#__GNU_STAB__
+
+
+	)
+
+7 
+	#__deföe_°ab
+(
+NAME
+, 
+CODE
+, 
+STRING
+ËNAME=CODE,
+
+	)
+
+9 
+	e__°ab_debug_code
+
+
+11 
+	~<bôs/°ab.def
+>
+
+12 
+	mLAST_UNUSED_STAB_CODE
+
+
+15 #unde‡
+__deföe_°ab
+
+
+	@/usr/include/stdio.h
+
+23 #i‚de‡
+_STDIO_H
+
+
+25 #i‡!
+deföed
+ 
+__√ed_FILE
+ && !deföed 
+__√ed___FILE
+
+
+26 
+	#_STDIO_H
+ 1
+
+	)
+
+27 
+	~<„©uªs.h
+>
+
+29 
+	g__BEGIN_DECLS
+
+
+31 
+	#__√ed_size_t
+
+
+	)
+
+32 
+	#__√ed_NULL
+
+
+	)
+
+33 
+	~<°ddef.h
+>
+
+35 
+	~<bôs/ty≥s.h
+>
+
+36 
+	#__√ed_FILE
+
+
+	)
+
+37 
+	#__√ed___FILE
+
+
+	)
+
+41 #i‡!
+deföed
+ 
+__FILE_deföed
+ && deföed 
+__√ed_FILE
+
+
+44 
+	g_IO_FILE
+;
+
+46 
+__BEGIN_NAMESPACE_STD
+
+
+48 
+_IO_FILE
+ 
+	tFILE
+;
+
+49 
+	g__END_NAMESPACE_STD
+
+
+50 #i‡
+deföed
+ 
+__USE_LARGEFILE64
+ || deföed 
+__USE_POSIX
+ \
+
+51 || 
+deföed
+ 
+	g__USE_ISOC99
+ || deföed 
+	g__USE_XOPEN
+ \
+
+52 || 
+deföed
+ 
+__USE_POSIX2
+
+
+53 
+	$__USING_NAMESPACE_STD
+(
+FILE
+)
+
+56 
+	#__FILE_deföed
+ 1
+
+	)
+
+58 #unde‡
+__√ed_FILE
+
+
+61 #i‡!
+deföed
+ 
+____FILE_deföed
+ && deföed 
+__√ed___FILE
+
+
+64 
+_IO_FILE
+ 
+	t__FILE
+;
+
+66 
+	#____FILE_deföed
+ 1
+
+	)
+
+68 #unde‡
+__√ed___FILE
+
+
+71 #ifdef 
+_STDIO_H
+
+
+72 
+	#_STDIO_USES_IOSTREAM
+
+
+	)
+
+74 
+	~<libio.h
+>
+
+76 #i‡
+deföed
+ 
+__USE_XOPEN
+ || deföed 
+__USE_XOPEN2K8
+
+
+77 #ifde‡
+__GNUC__
+
+
+78 #i‚de‡
+_VA_LIST_DEFINED
+
+
+79 
+_G_va_li°
+ 
+	tva_li°
+;
+
+80 
+	#_VA_LIST_DEFINED
+
+
+	)
+
+83 
+	~<°d¨g.h
+>
+
+87 #ifde‡
+__USE_XOPEN2K8
+
+
+88 #i‚de‡
+__off_t_deföed
+
+
+89 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+90 
+__off_t
+ 
+	toff_t
+;
+
+92 
+__off64_t
+ 
+	toff_t
+;
+
+94 
+	#__off_t_deföed
+
+
+	)
+
+96 #i‡
+deföed
+ 
+__USE_LARGEFILE64
+ && !deföed 
+__off64_t_deföed
+
+
+97 
+__off64_t
+ 
+	toff64_t
+;
+
+98 
+	#__off64_t_deföed
+
+
+	)
+
+101 #i‚de‡
+__ssize_t_deföed
+
+
+102 
+__ssize_t
+ 
+	tssize_t
+;
+
+103 
+	#__ssize_t_deföed
+
+
+	)
+
+108 
+__BEGIN_NAMESPACE_STD
+
+
+109 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+110 
+_G_Âos_t
+ 
+	tÂos_t
+;
+
+112 
+_G_Âos64_t
+ 
+	tÂos_t
+;
+
+114 
+__END_NAMESPACE_STD
+
+
+115 #ifde‡
+__USE_LARGEFILE64
+
+
+116 
+_G_Âos64_t
+ 
+	tÂos64_t
+;
+
+120 
+	#_IOFBF
+ 0
+
+	)
+
+121 
+	#_IOLBF
+ 1
+
+	)
+
+122 
+	#_IONBF
+ 2
+
+	)
+
+126 #i‚de‡
+BUFSIZ
+
+
+127 
+	#BUFSIZ
+ 
+_IO_BUFSIZ
+
+
+	)
+
+133 #i‚de‡
+EOF
+
+
+134 
+	#EOF
+ (-1)
+
+	)
+
+140 
+	#SEEK_SET
+ 0
+
+	)
+
+141 
+	#SEEK_CUR
+ 1
+
+	)
+
+142 
+	#SEEK_END
+ 2
+
+	)
+
+143 #ifde‡
+__USE_GNU
+
+
+144 
+	#SEEK_DATA
+ 3
+
+	)
+
+145 
+	#SEEK_HOLE
+ 4
+
+	)
+
+149 #i‡
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_XOPEN
+
+
+151 
+	#P_tmpdú
+ "/tmp"
+
+	)
+
+164 
+	~<bôs/°dio_lim.h
+>
+
+168 
+_IO_FILE
+ *
+°dö
+;
+
+169 
+_IO_FILE
+ *
+°dout
+;
+
+170 
+_IO_FILE
+ *
+°dîr
+;
+
+172 
+	#°dö
+ 
+°dö
+
+
+	)
+
+173 
+	#°dout
+ 
+°dout
+
+
+	)
+
+174 
+	#°dîr
+ 
+°dîr
+
+
+	)
+
+176 
+__BEGIN_NAMESPACE_STD
+
+
+178 
+	$ªmove
+ (c⁄° *
+__fûíame
+Ë
+__THROW
+;
+
+180 
+	$ª«me
+ (c⁄° *
+__ﬁd
+, c⁄° *
+__√w
+Ë
+__THROW
+;
+
+181 
+__END_NAMESPACE_STD
+
+
+183 #ifde‡
+__USE_ATFILE
+
+
+185 
+	$ª«mót
+ (
+__ﬁdfd
+, c⁄° *
+__ﬁd
+, 
+__√wfd
+,
+
+186 c⁄° *
+__√w
+Ë
+__THROW
+;
+
+189 
+__BEGIN_NAMESPACE_STD
+
+
+194 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+195 
+FILE
+ *
+	$tmpfûe
+ (Ë
+__wur
+;
+
+197 #ifde‡
+__REDIRECT
+
+
+198 
+FILE
+ *
+	`__REDIRECT
+ (
+tmpfûe
+, (), 
+tmpfûe64
+Ë
+__wur
+;
+
+200 
+	#tmpfûe
+ 
+tmpfûe64
+
+
+	)
+
+204 #ifde‡
+__USE_LARGEFILE64
+
+
+205 
+FILE
+ *
+	$tmpfûe64
+ (Ë
+__wur
+;
+
+209 *
+	$tm≤am
+ (*
+__s
+Ë
+__THROW
+ 
+__wur
+;
+
+210 
+__END_NAMESPACE_STD
+
+
+212 #ifde‡
+__USE_MISC
+
+
+215 *
+	$tm≤am_r
+ (*
+__s
+Ë
+__THROW
+ 
+__wur
+;
+
+219 #i‡
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_XOPEN
+
+
+227 *
+	$ãm≤am
+ (c⁄° *
+__dú
+, c⁄° *
+__pfx
+)
+
+228 
+__THROW
+ 
+__©åibuã_mÆloc__
+ 
+__wur
+;
+
+232 
+__BEGIN_NAMESPACE_STD
+
+
+237 
+	`f˛o£
+ (
+FILE
+ *
+__°ªam
+);
+
+242 
+	`fÊush
+ (
+FILE
+ *
+__°ªam
+);
+
+243 
+__END_NAMESPACE_STD
+
+
+245 #ifde‡
+__USE_MISC
+
+
+252 
+	`fÊush_u∆ocked
+ (
+FILE
+ *
+__°ªam
+);
+
+255 #ifde‡
+__USE_GNU
+
+
+262 
+	`f˛o£Æl
+ ();
+
+266 
+__BEGIN_NAMESPACE_STD
+
+
+267 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+272 
+FILE
+ *
+	$f›í
+ (c⁄° *
+__ª°ri˘
+ 
+__fûíame
+,
+
+273 c⁄° *
+__ª°ri˘
+ 
+__modes
+Ë
+__wur
+;
+
+278 
+FILE
+ *
+	$‰e›í
+ (c⁄° *
+__ª°ri˘
+ 
+__fûíame
+,
+
+279 c⁄° *
+__ª°ri˘
+ 
+__modes
+,
+
+280 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+Ë
+__wur
+;
+
+282 #ifde‡
+__REDIRECT
+
+
+283 
+FILE
+ *
+	`__REDIRECT
+ (
+f›í
+, (c⁄° *
+__ª°ri˘
+ 
+__fûíame
+,
+
+284 c⁄° *
+__ª°ri˘
+ 
+__modes
+), 
+f›í64
+)
+
+285 
+__wur
+;
+
+286 
+FILE
+ *
+	`__REDIRECT
+ (
+‰e›í
+, (c⁄° *
+__ª°ri˘
+ 
+__fûíame
+,
+
+287 c⁄° *
+__ª°ri˘
+ 
+__modes
+,
+
+288 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+), 
+‰e›í64
+)
+
+289 
+__wur
+;
+
+291 
+	#f›í
+ 
+f›í64
+
+
+	)
+
+292 
+	#‰e›í
+ 
+‰e›í64
+
+
+	)
+
+295 
+__END_NAMESPACE_STD
+
+
+296 #ifde‡
+__USE_LARGEFILE64
+
+
+297 
+FILE
+ *
+	$f›í64
+ (c⁄° *
+__ª°ri˘
+ 
+__fûíame
+,
+
+298 c⁄° *
+__ª°ri˘
+ 
+__modes
+Ë
+__wur
+;
+
+299 
+FILE
+ *
+	$‰e›í64
+ (c⁄° *
+__ª°ri˘
+ 
+__fûíame
+,
+
+300 c⁄° *
+__ª°ri˘
+ 
+__modes
+,
+
+301 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+Ë
+__wur
+;
+
+304 #ifdef 
+__USE_POSIX
+
+
+306 
+FILE
+ *
+	$fd›í
+ (
+__fd
+, c⁄° *
+__modes
+Ë
+__THROW
+ 
+__wur
+;
+
+309 #ifdef 
+__USE_GNU
+
+
+312 
+FILE
+ *
+	$f›ícookõ
+ (*
+__ª°ri˘
+ 
+__magic_cookõ
+,
+
+313 c⁄° *
+__ª°ri˘
+ 
+__modes
+,
+
+314 
+_IO_cookõ_io_fun˘i⁄s_t
+ 
+__io_funcs
+Ë
+__THROW
+ 
+__wur
+;
+
+317 #ifde‡
+__USE_XOPEN2K8
+
+
+319 
+FILE
+ *
+	$fmem›í
+ (*
+__s
+, 
+size_t
+ 
+__Àn
+, c⁄° *
+__modes
+)
+
+320 
+__THROW
+ 
+__wur
+;
+
+325 
+FILE
+ *
+	$›í_mem°ªam
+ (**
+__buÊoc
+, 
+size_t
+ *
+__sizñoc
+Ë
+__THROW
+ 
+__wur
+;
+
+329 
+__BEGIN_NAMESPACE_STD
+
+
+332 
+	$£tbuf
+ (
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+, *__ª°ri˘ 
+__buf
+Ë
+__THROW
+;
+
+336 
+	$£tvbuf
+ (
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+, *__ª°ri˘ 
+__buf
+,
+
+337 
+__modes
+, 
+size_t
+ 
+__n
+Ë
+__THROW
+;
+
+338 
+__END_NAMESPACE_STD
+
+
+340 #ifdef 
+__USE_MISC
+
+
+343 
+	$£tbuf„r
+ (
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+, *__ª°ri˘ 
+__buf
+,
+
+344 
+size_t
+ 
+__size
+Ë
+__THROW
+;
+
+347 
+	$£éöebuf
+ (
+FILE
+ *
+__°ªam
+Ë
+__THROW
+;
+
+351 
+__BEGIN_NAMESPACE_STD
+
+
+356 
+	`Ârötf
+ (
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+,
+
+357 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, ...);
+
+362 
+	`¥ötf
+ (c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, ...);
+
+364 
+	$•rötf
+ (*
+__ª°ri˘
+ 
+__s
+,
+
+365 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, ...Ë
+__THROWNL
+;
+
+371 
+	`vÂrötf
+ (
+FILE
+ *
+__ª°ri˘
+ 
+__s
+, c⁄° *__ª°ri˘ 
+__f‹m©
+,
+
+372 
+_G_va_li°
+ 
+__¨g
+);
+
+377 
+	`v¥ötf
+ (c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, 
+_G_va_li°
+ 
+__¨g
+);
+
+379 
+	$v•rötf
+ (*
+__ª°ri˘
+ 
+__s
+, c⁄° *__ª°ri˘ 
+__f‹m©
+,
+
+380 
+_G_va_li°
+ 
+__¨g
+Ë
+__THROWNL
+;
+
+381 
+__END_NAMESPACE_STD
+
+
+383 #i‡
+deföed
+ 
+__USE_ISOC99
+ || deföed 
+__USE_UNIX98
+
+
+384 
+__BEGIN_NAMESPACE_C99
+
+
+386 
+	$¢¥ötf
+ (*
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__maxÀn
+,
+
+387 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, ...)
+
+388 
+__THROWNL
+ 
+	`__©åibuã__
+ ((
+	`__f‹m©__
+ (
+__¥ötf__
+, 3, 4)));
+
+390 
+	$v¢¥ötf
+ (*
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__maxÀn
+,
+
+391 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, 
+_G_va_li°
+ 
+__¨g
+)
+
+392 
+__THROWNL
+ 
+	`__©åibuã__
+ ((
+	`__f‹m©__
+ (
+__¥ötf__
+, 3, 0)));
+
+393 
+__END_NAMESPACE_C99
+
+
+396 #ifde‡
+__USE_GNU
+
+
+399 
+	$va•rötf
+ (**
+__ª°ri˘
+ 
+__±r
+, c⁄° *__ª°ri˘ 
+__f
+,
+
+400 
+_G_va_li°
+ 
+__¨g
+)
+
+401 
+__THROWNL
+ 
+	`__©åibuã__
+ ((
+	$__f‹m©__
+ (
+__¥ötf__
+, 2, 0))Ë
+__wur
+;
+
+402 
+	$__a•rötf
+ (**
+__ª°ri˘
+ 
+__±r
+,
+
+403 c⁄° *
+__ª°ri˘
+ 
+__fmt
+, ...)
+
+404 
+__THROWNL
+ 
+	`__©åibuã__
+ ((
+	$__f‹m©__
+ (
+__¥ötf__
+, 2, 3))Ë
+__wur
+;
+
+405 
+	$a•rötf
+ (**
+__ª°ri˘
+ 
+__±r
+,
+
+406 c⁄° *
+__ª°ri˘
+ 
+__fmt
+, ...)
+
+407 
+__THROWNL
+ 
+	`__©åibuã__
+ ((
+	$__f‹m©__
+ (
+__¥ötf__
+, 2, 3))Ë
+__wur
+;
+
+410 #ifde‡
+__USE_XOPEN2K8
+
+
+412 
+	$vd¥ötf
+ (
+__fd
+, c⁄° *
+__ª°ri˘
+ 
+__fmt
+,
+
+413 
+_G_va_li°
+ 
+__¨g
+)
+
+414 
+	`__©åibuã__
+ ((
+	`__f‹m©__
+ (
+__¥ötf__
+, 2, 0)));
+
+415 
+	$d¥ötf
+ (
+__fd
+, c⁄° *
+__ª°ri˘
+ 
+__fmt
+, ...)
+
+416 
+	`__©åibuã__
+ ((
+	`__f‹m©__
+ (
+__¥ötf__
+, 2, 3)));
+
+420 
+__BEGIN_NAMESPACE_STD
+
+
+425 
+	$fsˇnf
+ (
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+,
+
+426 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, ...Ë
+__wur
+;
+
+431 
+	$sˇnf
+ (c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, ...Ë
+__wur
+;
+
+433 
+	$ssˇnf
+ (c⁄° *
+__ª°ri˘
+ 
+__s
+,
+
+434 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, ...Ë
+__THROW
+;
+
+436 #i‡
+deföed
+ 
+__USE_ISOC99
+ && !deföed 
+__USE_GNU
+ \
+
+437 && (!
+deföed
+ 
+__LDBL_COMPAT
+ || !deföed 
+__REDIRECT
+) \
+
+438 && (
+deföed
+ 
+__STRICT_ANSI__
+ || deföed 
+__USE_XOPEN2K
+)
+
+439 #ifde‡
+__REDIRECT
+
+
+443 
+	`__REDIRECT
+ (
+fsˇnf
+, (
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+,
+
+444 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, ...),
+
+445 
+__isoc99_fsˇnf
+Ë
+__wur
+;
+
+446 
+	`__REDIRECT
+ (
+sˇnf
+, (c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, ...),
+
+447 
+__isoc99_sˇnf
+Ë
+__wur
+;
+
+448 
+	`__REDIRECT_NTH
+ (
+ssˇnf
+, (c⁄° *
+__ª°ri˘
+ 
+__s
+,
+
+449 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, ...),
+
+450 
+__isoc99_ssˇnf
+);
+
+452 
+	$__isoc99_fsˇnf
+ (
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+,
+
+453 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, ...Ë
+__wur
+;
+
+454 
+	$__isoc99_sˇnf
+ (c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, ...Ë
+__wur
+;
+
+455 
+	$__isoc99_ssˇnf
+ (c⁄° *
+__ª°ri˘
+ 
+__s
+,
+
+456 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, ...Ë
+__THROW
+;
+
+457 
+	#fsˇnf
+ 
+__isoc99_fsˇnf
+
+
+	)
+
+458 
+	#sˇnf
+ 
+__isoc99_sˇnf
+
+
+	)
+
+459 
+	#ssˇnf
+ 
+__isoc99_ssˇnf
+
+
+	)
+
+463 
+__END_NAMESPACE_STD
+
+
+465 #ifdef 
+__USE_ISOC99
+
+
+466 
+__BEGIN_NAMESPACE_C99
+
+
+471 
+	$vfsˇnf
+ (
+FILE
+ *
+__ª°ri˘
+ 
+__s
+, c⁄° *__ª°ri˘ 
+__f‹m©
+,
+
+472 
+_G_va_li°
+ 
+__¨g
+)
+
+473 
+	`__©åibuã__
+ ((
+	$__f‹m©__
+ (
+__sˇnf__
+, 2, 0))Ë
+__wur
+;
+
+479 
+	$vsˇnf
+ (c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, 
+_G_va_li°
+ 
+__¨g
+)
+
+480 
+	`__©åibuã__
+ ((
+	$__f‹m©__
+ (
+__sˇnf__
+, 1, 0))Ë
+__wur
+;
+
+483 
+	$vssˇnf
+ (c⁄° *
+__ª°ri˘
+ 
+__s
+,
+
+484 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, 
+_G_va_li°
+ 
+__¨g
+)
+
+485 
+__THROW
+ 
+	`__©åibuã__
+ ((
+	`__f‹m©__
+ (
+__sˇnf__
+, 2, 0)));
+
+487 #i‡!
+deföed
+ 
+__USE_GNU
+ \
+
+488 && (!
+deföed
+ 
+__LDBL_COMPAT
+ || !deföed 
+__REDIRECT
+) \
+
+489 && (
+deföed
+ 
+__STRICT_ANSI__
+ || deföed 
+__USE_XOPEN2K
+)
+
+490 #ifde‡
+__REDIRECT
+
+
+494 
+	`__REDIRECT
+ (
+vfsˇnf
+,
+
+495 (
+FILE
+ *
+__ª°ri˘
+ 
+__s
+,
+
+496 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, 
+_G_va_li°
+ 
+__¨g
+),
+
+497 
+__isoc99_vfsˇnf
+)
+
+498 
+	`__©åibuã__
+ ((
+	$__f‹m©__
+ (
+__sˇnf__
+, 2, 0))Ë
+__wur
+;
+
+499 
+	`__REDIRECT
+ (
+vsˇnf
+, (c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+500 
+_G_va_li°
+ 
+__¨g
+), 
+__isoc99_vsˇnf
+)
+
+501 
+	`__©åibuã__
+ ((
+	$__f‹m©__
+ (
+__sˇnf__
+, 1, 0))Ë
+__wur
+;
+
+502 
+	`__REDIRECT_NTH
+ (
+vssˇnf
+,
+
+503 (c⁄° *
+__ª°ri˘
+ 
+__s
+,
+
+504 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+505 
+_G_va_li°
+ 
+__¨g
+), 
+__isoc99_vssˇnf
+)
+
+506 
+	`__©åibuã__
+ ((
+	`__f‹m©__
+ (
+__sˇnf__
+, 2, 0)));
+
+508 
+	$__isoc99_vfsˇnf
+ (
+FILE
+ *
+__ª°ri˘
+ 
+__s
+,
+
+509 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+510 
+_G_va_li°
+ 
+__¨g
+Ë
+__wur
+;
+
+511 
+	$__isoc99_vsˇnf
+ (c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+512 
+_G_va_li°
+ 
+__¨g
+Ë
+__wur
+;
+
+513 
+	$__isoc99_vssˇnf
+ (c⁄° *
+__ª°ri˘
+ 
+__s
+,
+
+514 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+515 
+_G_va_li°
+ 
+__¨g
+Ë
+__THROW
+;
+
+516 
+	#vfsˇnf
+ 
+__isoc99_vfsˇnf
+
+
+	)
+
+517 
+	#vsˇnf
+ 
+__isoc99_vsˇnf
+
+
+	)
+
+518 
+	#vssˇnf
+ 
+__isoc99_vssˇnf
+
+
+	)
+
+522 
+__END_NAMESPACE_C99
+
+
+526 
+__BEGIN_NAMESPACE_STD
+
+
+531 
+	`fgëc
+ (
+FILE
+ *
+__°ªam
+);
+
+532 
+	`gëc
+ (
+FILE
+ *
+__°ªam
+);
+
+538 
+	`gëch¨
+ ();
+
+539 
+__END_NAMESPACE_STD
+
+
+543 
+	#gëc
+(
+_Â
+Ë
+	`_IO_gëc
+ (_Â)
+
+	)
+
+545 #ifde‡
+__USE_POSIX
+
+
+550 
+	`gëc_u∆ocked
+ (
+FILE
+ *
+__°ªam
+);
+
+551 
+	`gëch¨_u∆ocked
+ ();
+
+554 #ifde‡
+__USE_MISC
+
+
+561 
+	`fgëc_u∆ocked
+ (
+FILE
+ *
+__°ªam
+);
+
+565 
+__BEGIN_NAMESPACE_STD
+
+
+573 
+	`Âutc
+ (
+__c
+, 
+FILE
+ *
+__°ªam
+);
+
+574 
+	`putc
+ (
+__c
+, 
+FILE
+ *
+__°ªam
+);
+
+580 
+	`putch¨
+ (
+__c
+);
+
+581 
+__END_NAMESPACE_STD
+
+
+585 
+	#putc
+(
+_ch
+, 
+_Â
+Ë
+	`_IO_putc
+ (_ch, _Â)
+
+	)
+
+587 #ifde‡
+__USE_MISC
+
+
+594 
+	`Âutc_u∆ocked
+ (
+__c
+, 
+FILE
+ *
+__°ªam
+);
+
+597 #ifde‡
+__USE_POSIX
+
+
+602 
+	`putc_u∆ocked
+ (
+__c
+, 
+FILE
+ *
+__°ªam
+);
+
+603 
+	`putch¨_u∆ocked
+ (
+__c
+);
+
+607 #i‡
+deföed
+ 
+__USE_MISC
+ \
+
+608 || (
+deföed
+ 
+__USE_XOPEN
+ && !deföed 
+__USE_XOPEN2K
+)
+
+610 
+	`gëw
+ (
+FILE
+ *
+__°ªam
+);
+
+613 
+	`putw
+ (
+__w
+, 
+FILE
+ *
+__°ªam
+);
+
+617 
+__BEGIN_NAMESPACE_STD
+
+
+622 *
+	$fgës
+ (*
+__ª°ri˘
+ 
+__s
+, 
+__n
+, 
+FILE
+ *__ª°ri˘ 
+__°ªam
+)
+
+623 
+__wur
+;
+
+625 #i‡!
+deföed
+ 
+__USE_ISOC11
+ \
+
+626 || (
+deföed
+ 
+__˝lu•lus
+ && __cplusplus <= 201103L)
+
+638 *
+	$gës
+ (*
+__s
+Ë
+__wur
+ 
+__©åibuã_dïªˇãd__
+;
+
+640 
+__END_NAMESPACE_STD
+
+
+642 #ifde‡
+__USE_GNU
+
+
+649 *
+	$fgës_u∆ocked
+ (*
+__ª°ri˘
+ 
+__s
+, 
+__n
+,
+
+650 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+Ë
+__wur
+;
+
+654 #ifdef 
+__USE_XOPEN2K8
+
+
+665 
+_IO_ssize_t
+ 
+	$__gëdñim
+ (**
+__ª°ri˘
+ 
+__löïå
+,
+
+666 
+size_t
+ *
+__ª°ri˘
+ 
+__n
+, 
+__dñimôî
+,
+
+667 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+Ë
+__wur
+;
+
+668 
+_IO_ssize_t
+ 
+	$gëdñim
+ (**
+__ª°ri˘
+ 
+__löïå
+,
+
+669 
+size_t
+ *
+__ª°ri˘
+ 
+__n
+, 
+__dñimôî
+,
+
+670 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+Ë
+__wur
+;
+
+678 
+_IO_ssize_t
+ 
+	$gëlöe
+ (**
+__ª°ri˘
+ 
+__löïå
+,
+
+679 
+size_t
+ *
+__ª°ri˘
+ 
+__n
+,
+
+680 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+Ë
+__wur
+;
+
+684 
+__BEGIN_NAMESPACE_STD
+
+
+689 
+	`Âuts
+ (c⁄° *
+__ª°ri˘
+ 
+__s
+, 
+FILE
+ *__ª°ri˘ 
+__°ªam
+);
+
+695 
+	`puts
+ (c⁄° *
+__s
+);
+
+702 
+	`ungëc
+ (
+__c
+, 
+FILE
+ *
+__°ªam
+);
+
+709 
+size_t
+ 
+	$‰ód
+ (*
+__ª°ri˘
+ 
+__±r
+, 
+size_t
+ 
+__size
+,
+
+710 
+size_t
+ 
+__n
+, 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+Ë
+__wur
+;
+
+715 
+size_t
+ 
+	`fwrôe
+ (c⁄° *
+__ª°ri˘
+ 
+__±r
+, size_à
+__size
+,
+
+716 
+size_t
+ 
+__n
+, 
+FILE
+ *
+__ª°ri˘
+ 
+__s
+);
+
+717 
+__END_NAMESPACE_STD
+
+
+719 #ifde‡
+__USE_GNU
+
+
+726 
+	`Âuts_u∆ocked
+ (c⁄° *
+__ª°ri˘
+ 
+__s
+,
+
+727 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+);
+
+730 #ifde‡
+__USE_MISC
+
+
+737 
+size_t
+ 
+	$‰ód_u∆ocked
+ (*
+__ª°ri˘
+ 
+__±r
+, 
+size_t
+ 
+__size
+,
+
+738 
+size_t
+ 
+__n
+, 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+Ë
+__wur
+;
+
+739 
+size_t
+ 
+	`fwrôe_u∆ocked
+ (c⁄° *
+__ª°ri˘
+ 
+__±r
+, size_à
+__size
+,
+
+740 
+size_t
+ 
+__n
+, 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+);
+
+744 
+__BEGIN_NAMESPACE_STD
+
+
+749 
+	`f£ek
+ (
+FILE
+ *
+__°ªam
+, 
+__off
+, 
+__whí˚
+);
+
+754 
+	$·ñl
+ (
+FILE
+ *
+__°ªam
+Ë
+__wur
+;
+
+759 
+	`ªwöd
+ (
+FILE
+ *
+__°ªam
+);
+
+760 
+__END_NAMESPACE_STD
+
+
+767 #i‡
+deföed
+ 
+__USE_LARGEFILE
+ || deföed 
+__USE_XOPEN2K
+
+
+768 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+773 
+	`f£eko
+ (
+FILE
+ *
+__°ªam
+, 
+__off_t
+ 
+__off
+, 
+__whí˚
+);
+
+778 
+__off_t
+ 
+	$·ñlo
+ (
+FILE
+ *
+__°ªam
+Ë
+__wur
+;
+
+780 #ifde‡
+__REDIRECT
+
+
+781 
+	`__REDIRECT
+ (
+f£eko
+,
+
+782 (
+FILE
+ *
+__°ªam
+, 
+__off64_t
+ 
+__off
+, 
+__whí˚
+),
+
+783 
+f£eko64
+);
+
+784 
+__off64_t
+ 
+	`__REDIRECT
+ (
+·ñlo
+, (
+FILE
+ *
+__°ªam
+), 
+·ñlo64
+);
+
+786 
+	#f£eko
+ 
+f£eko64
+
+
+	)
+
+787 
+	#·ñlo
+ 
+·ñlo64
+
+
+	)
+
+792 
+__BEGIN_NAMESPACE_STD
+
+
+793 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+798 
+	`fgëpos
+ (
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+, 
+Âos_t
+ *__ª°ri˘ 
+__pos
+);
+
+803 
+	`f£ços
+ (
+FILE
+ *
+__°ªam
+, c⁄° 
+Âos_t
+ *
+__pos
+);
+
+805 #ifde‡
+__REDIRECT
+
+
+806 
+	`__REDIRECT
+ (
+fgëpos
+, (
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+,
+
+807 
+Âos_t
+ *
+__ª°ri˘
+ 
+__pos
+), 
+fgëpos64
+);
+
+808 
+	`__REDIRECT
+ (
+f£ços
+,
+
+809 (
+FILE
+ *
+__°ªam
+, c⁄° 
+Âos_t
+ *
+__pos
+), 
+f£ços64
+);
+
+811 
+	#fgëpos
+ 
+fgëpos64
+
+
+	)
+
+812 
+	#f£ços
+ 
+f£ços64
+
+
+	)
+
+815 
+__END_NAMESPACE_STD
+
+
+817 #ifde‡
+__USE_LARGEFILE64
+
+
+818 
+	`f£eko64
+ (
+FILE
+ *
+__°ªam
+, 
+__off64_t
+ 
+__off
+, 
+__whí˚
+);
+
+819 
+__off64_t
+ 
+	$·ñlo64
+ (
+FILE
+ *
+__°ªam
+Ë
+__wur
+;
+
+820 
+	`fgëpos64
+ (
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+, 
+Âos64_t
+ *__ª°ri˘ 
+__pos
+);
+
+821 
+	`f£ços64
+ (
+FILE
+ *
+__°ªam
+, c⁄° 
+Âos64_t
+ *
+__pos
+);
+
+824 
+__BEGIN_NAMESPACE_STD
+
+
+826 
+	$˛óªº
+ (
+FILE
+ *
+__°ªam
+Ë
+__THROW
+;
+
+828 
+	$„of
+ (
+FILE
+ *
+__°ªam
+Ë
+__THROW
+ 
+__wur
+;
+
+830 
+	$„º‹
+ (
+FILE
+ *
+__°ªam
+Ë
+__THROW
+ 
+__wur
+;
+
+831 
+__END_NAMESPACE_STD
+
+
+833 #ifde‡
+__USE_MISC
+
+
+835 
+	$˛óªº_u∆ocked
+ (
+FILE
+ *
+__°ªam
+Ë
+__THROW
+;
+
+836 
+	$„of_u∆ocked
+ (
+FILE
+ *
+__°ªam
+Ë
+__THROW
+ 
+__wur
+;
+
+837 
+	$„º‹_u∆ocked
+ (
+FILE
+ *
+__°ªam
+Ë
+__THROW
+ 
+__wur
+;
+
+841 
+__BEGIN_NAMESPACE_STD
+
+
+846 
+	`≥º‹
+ (c⁄° *
+__s
+);
+
+847 
+__END_NAMESPACE_STD
+
+
+853 
+	~<bôs/sys_îæi°.h
+>
+
+856 #ifdef 
+__USE_POSIX
+
+
+858 
+	$fûío
+ (
+FILE
+ *
+__°ªam
+Ë
+__THROW
+ 
+__wur
+;
+
+861 #ifde‡
+__USE_MISC
+
+
+863 
+	$fûío_u∆ocked
+ (
+FILE
+ *
+__°ªam
+Ë
+__THROW
+ 
+__wur
+;
+
+867 #ifde‡
+__USE_POSIX2
+
+
+872 
+FILE
+ *
+	$p›í
+ (c⁄° *
+__comm™d
+, c⁄° *
+__modes
+Ë
+__wur
+;
+
+878 
+	`p˛o£
+ (
+FILE
+ *
+__°ªam
+);
+
+882 #ifdef 
+__USE_POSIX
+
+
+884 *
+	$˘îmid
+ (*
+__s
+Ë
+__THROW
+;
+
+888 #ifde‡
+__USE_XOPEN
+
+
+890 *
+	`cu£rid
+ (*
+__s
+);
+
+894 #ifdef 
+__USE_GNU
+
+
+895 
+ob°ack
+;
+
+898 
+	$ob°ack_¥ötf
+ (
+ob°ack
+ *
+__ª°ri˘
+ 
+__ob°ack
+,
+
+899 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, ...)
+
+900 
+__THROWNL
+ 
+	`__©åibuã__
+ ((
+	`__f‹m©__
+ (
+__¥ötf__
+, 2, 3)));
+
+901 
+	$ob°ack_v¥ötf
+ (
+ob°ack
+ *
+__ª°ri˘
+ 
+__ob°ack
+,
+
+902 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+903 
+_G_va_li°
+ 
+__¨gs
+)
+
+904 
+__THROWNL
+ 
+	`__©åibuã__
+ ((
+	`__f‹m©__
+ (
+__¥ötf__
+, 2, 0)));
+
+908 #ifde‡
+__USE_POSIX
+
+
+912 
+	$Êockfûe
+ (
+FILE
+ *
+__°ªam
+Ë
+__THROW
+;
+
+916 
+	$·rylockfûe
+ (
+FILE
+ *
+__°ªam
+Ë
+__THROW
+ 
+__wur
+;
+
+919 
+	$fu∆ockfûe
+ (
+FILE
+ *
+__°ªam
+Ë
+__THROW
+;
+
+922 #i‡
+deföed
+ 
+__USE_XOPEN
+ && !deföed 
+__USE_XOPEN2K
+ && !deföed 
+__USE_GNU
+
+
+926 
+	#__√ed_gë›t
+
+
+	)
+
+927 
+	~<gë›t.h
+>
+
+932 #ifde‡
+__USE_EXTERN_INLINES
+
+
+933 
+	~<bôs/°dio.h
+>
+
+935 #i‡
+__USE_FORTIFY_LEVEL
+ > 0 && 
+deföed
+ 
+__f‹tify_fun˘i⁄
+
+
+936 
+	~<bôs/°dio2.h
+>
+
+938 #ifde‡
+__LDBL_COMPAT
+
+
+939 
+	~<bôs/°dio-ldbl.h
+>
+
+942 
+__END_DECLS
+
+
+	@/usr/include/string.h
+
+22 #i‚def 
+_STRING_H
+
+
+23 
+	#_STRING_H
+ 1
+
+	)
+
+25 
+	~<„©uªs.h
+>
+
+27 
+	g__BEGIN_DECLS
+
+
+30 
+	#__√ed_size_t
+
+
+	)
+
+31 
+	#__√ed_NULL
+
+
+	)
+
+32 
+	~<°ddef.h
+>
+
+35 #i‡
+deföed
+ 
+__˝lu•lus
+ && 
+__GNUC_PREREQ
+ (4, 4)
+
+36 
+	#__CORRECT_ISO_CPP_STRING_H_PROTO
+
+
+	)
+
+40 
+__BEGIN_NAMESPACE_STD
+
+
+42 *
+	$mem˝y
+ (*
+__ª°ri˘
+ 
+__de°
+, c⁄° *__ª°ri˘ 
+__§c
+,
+
+43 
+size_t
+ 
+__n
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+46 *
+	$memmove
+ (*
+__de°
+, c⁄° *
+__§c
+, 
+size_t
+ 
+__n
+)
+
+47 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+48 
+__END_NAMESPACE_STD
+
+
+53 #i‡
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_XOPEN
+
+
+54 *
+	$memc˝y
+ (*
+__ª°ri˘
+ 
+__de°
+, c⁄° *__ª°ri˘ 
+__§c
+,
+
+55 
+__c
+, 
+size_t
+ 
+__n
+)
+
+56 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+60 
+__BEGIN_NAMESPACE_STD
+
+
+62 *
+	$mem£t
+ (*
+__s
+, 
+__c
+, 
+size_t
+ 
+__n
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+65 
+	$memcmp
+ (c⁄° *
+__s1
+, c⁄° *
+__s2
+, 
+size_t
+ 
+__n
+)
+
+66 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+69 #ifde‡
+__CORRECT_ISO_CPP_STRING_H_PROTO
+
+
+72 *
+	`memchr
+ (*
+__s
+, 
+__c
+, 
+size_t
+ 
+__n
+)
+
+73 
+__THROW
+ 
+	`__asm
+ ("memchr"Ë
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+74 c⁄° *
+	`memchr
+ (c⁄° *
+__s
+, 
+__c
+, 
+size_t
+ 
+__n
+)
+
+75 
+__THROW
+ 
+	`__asm
+ ("memchr"Ë
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+77 #ifde‡
+__OPTIMIZE__
+
+
+78 
+__exã∫_Æways_ölöe
+ *
+
+79 
+	`memchr
+ (*
+__s
+, 
+__c
+, 
+size_t
+ 
+__n
+Ë
+__THROW
+
+
+81  
+	`__buûtö_memchr
+ (
+__s
+, 
+__c
+, 
+__n
+);
+
+84 
+__exã∫_Æways_ölöe
+ const *
+
+85 
+	`memchr
+ (c⁄° *
+__s
+, 
+__c
+, 
+size_t
+ 
+__n
+Ë
+__THROW
+
+
+87  
+	`__buûtö_memchr
+ (
+__s
+, 
+__c
+, 
+__n
+);
+
+90 
+	}
+}
+
+92 *
+	$memchr
+ (c⁄° *
+__s
+, 
+__c
+, 
+size_t
+ 
+__n
+)
+
+93 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+95 
+__END_NAMESPACE_STD
+
+
+97 #ifde‡
+__USE_GNU
+
+
+100 #ifde‡
+__CORRECT_ISO_CPP_STRING_H_PROTO
+
+
+101 "C++" *
+	$øwmemchr
+ (*
+__s
+, 
+__c
+)
+
+102 
+__THROW
+ 
+	`__asm
+ ("øwmemchr"Ë
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+103 "C++" c⁄° *
+	$øwmemchr
+ (c⁄° *
+__s
+, 
+__c
+)
+
+104 
+__THROW
+ 
+	`__asm
+ ("øwmemchr"Ë
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+106 *
+	$øwmemchr
+ (c⁄° *
+__s
+, 
+__c
+)
+
+107 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+111 #ifde‡
+__CORRECT_ISO_CPP_STRING_H_PROTO
+
+
+112 "C++" *
+	$memrchr
+ (*
+__s
+, 
+__c
+, 
+size_t
+ 
+__n
+)
+
+113 
+__THROW
+ 
+	`__asm
+ ("memrchr"Ë
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+114 "C++" c⁄° *
+	$memrchr
+ (c⁄° *
+__s
+, 
+__c
+, 
+size_t
+ 
+__n
+)
+
+115 
+__THROW
+ 
+	`__asm
+ ("memrchr"Ë
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+117 *
+	$memrchr
+ (c⁄° *
+__s
+, 
+__c
+, 
+size_t
+ 
+__n
+)
+
+118 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+123 
+__BEGIN_NAMESPACE_STD
+
+
+125 *
+	$°r˝y
+ (*
+__ª°ri˘
+ 
+__de°
+, c⁄° *__ª°ri˘ 
+__§c
+)
+
+126 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+128 *
+	$°∫˝y
+ (*
+__ª°ri˘
+ 
+__de°
+,
+
+129 c⁄° *
+__ª°ri˘
+ 
+__§c
+, 
+size_t
+ 
+__n
+)
+
+130 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+133 *
+	$°rˇt
+ (*
+__ª°ri˘
+ 
+__de°
+, c⁄° *__ª°ri˘ 
+__§c
+)
+
+134 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+136 *
+	$°∫ˇt
+ (*
+__ª°ri˘
+ 
+__de°
+, c⁄° *__ª°ri˘ 
+__§c
+,
+
+137 
+size_t
+ 
+__n
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+140 
+	$°rcmp
+ (c⁄° *
+__s1
+, c⁄° *
+__s2
+)
+
+141 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+143 
+	$°∫cmp
+ (c⁄° *
+__s1
+, c⁄° *
+__s2
+, 
+size_t
+ 
+__n
+)
+
+144 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+147 
+	$°rcﬁl
+ (c⁄° *
+__s1
+, c⁄° *
+__s2
+)
+
+148 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+150 
+size_t
+ 
+	$°rx‰m
+ (*
+__ª°ri˘
+ 
+__de°
+,
+
+151 c⁄° *
+__ª°ri˘
+ 
+__§c
+, 
+size_t
+ 
+__n
+)
+
+152 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2));
+
+153 
+__END_NAMESPACE_STD
+
+
+155 #ifde‡
+__USE_XOPEN2K8
+
+
+159 
+	~<xloˇÀ.h
+>
+
+162 
+	$°rcﬁl_l
+ (c⁄° *
+__s1
+, c⁄° *
+__s2
+, 
+__loˇÀ_t
+ 
+__l
+)
+
+163 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2, 3));
+
+165 
+size_t
+ 
+	$°rx‰m_l
+ (*
+__de°
+, c⁄° *
+__§c
+, 
+size_t
+ 
+__n
+,
+
+166 
+__loˇÀ_t
+ 
+__l
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2, 4));
+
+169 #i‡
+deföed
+ 
+__USE_XOPEN_EXTENDED
+ || deföed 
+__USE_XOPEN2K8
+
+
+171 *
+	$°rdup
+ (c⁄° *
+__s
+)
+
+172 
+__THROW
+ 
+__©åibuã_mÆloc__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+178 #i‡
+deföed
+ 
+__USE_XOPEN2K8
+
+
+179 *
+	$°∫dup
+ (c⁄° *
+__°rög
+, 
+size_t
+ 
+__n
+)
+
+180 
+__THROW
+ 
+__©åibuã_mÆloc__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+183 #i‡
+deföed
+ 
+__USE_GNU
+ && deföed 
+__GNUC__
+
+
+185 
+	#°rdu∑
+(
+s
+) \
+
+186 (
+__exãnsi⁄__
+ \
+
+188 c⁄° *
+__ﬁd
+ = (
+s
+); \
+
+189 
+size_t
+ 
+__Àn
+ = 
+	`°æí
+ (
+__ﬁd
+) + 1; \
+
+190 *
+__√w
+ = (*Ë
+	`__buûtö_Æloˇ
+ (
+__Àn
+); \
+
+191 (*Ë
+	`mem˝y
+ (
+__√w
+, 
+__ﬁd
+, 
+__Àn
+); \
+
+192 
+	}
+}))
+
+	)
+
+195 
+	#°∫du∑
+(
+s
+, 
+n
+) \
+
+196 (
+__exãnsi⁄__
+ \
+
+198 c⁄° *
+__ﬁd
+ = (
+s
+); \
+
+199 
+size_t
+ 
+__Àn
+ = 
+	`°∫Àn
+ (
+__ﬁd
+, (
+n
+)); \
+
+200 *
+__√w
+ = (*Ë
+	`__buûtö_Æloˇ
+ (
+__Àn
+ + 1); \
+
+201 
+__√w
+[
+__Àn
+] = '\0'; \
+
+202 (*Ë
+	`mem˝y
+ (
+__√w
+, 
+__ﬁd
+, 
+__Àn
+); \
+
+203 }))
+
+	)
+
+206 
+	g__BEGIN_NAMESPACE_STD
+
+
+208 #ifde‡
+__CORRECT_ISO_CPP_STRING_H_PROTO
+
+
+211 *
+°rchr
+ (*
+__s
+, 
+__c
+)
+
+212 
+__THROW
+ 
+__asm
+ ("°rchr"Ë
+__©åibuã_puª__
+ 
+__n⁄nuŒ
+ ((1));
+
+213 c⁄° *
+°rchr
+ (c⁄° *
+__s
+, 
+__c
+)
+
+214 
+__THROW
+ 
+__asm
+ ("°rchr"Ë
+__©åibuã_puª__
+ 
+__n⁄nuŒ
+ ((1));
+
+216 #ifde‡
+__OPTIMIZE__
+
+
+217 
+__exã∫_Æways_ölöe
+ *
+
+218 
+°rchr
+ (*
+__s
+, 
+__c
+Ë
+	g__THROW
+
+
+220  
+__buûtö_°rchr
+ (
+__s
+, 
+__c
+);
+
+223 
+__exã∫_Æways_ölöe
+ const *
+
+224 
+°rchr
+ (c⁄° *
+__s
+, 
+__c
+Ë
+	g__THROW
+
+
+226  
+__buûtö_°rchr
+ (
+__s
+, 
+__c
+);
+
+231 *
+	$°rchr
+ (c⁄° *
+__s
+, 
+__c
+)
+
+232 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+235 #ifde‡
+__CORRECT_ISO_CPP_STRING_H_PROTO
+
+
+238 *
+	`°ºchr
+ (*
+__s
+, 
+__c
+)
+
+239 
+__THROW
+ 
+	`__asm
+ ("°ºchr"Ë
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+240 c⁄° *
+	`°ºchr
+ (c⁄° *
+__s
+, 
+__c
+)
+
+241 
+__THROW
+ 
+	`__asm
+ ("°ºchr"Ë
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+243 #ifde‡
+__OPTIMIZE__
+
+
+244 
+__exã∫_Æways_ölöe
+ *
+
+245 
+	`°ºchr
+ (*
+__s
+, 
+__c
+Ë
+__THROW
+
+
+247  
+	`__buûtö_°ºchr
+ (
+__s
+, 
+__c
+);
+
+250 
+__exã∫_Æways_ölöe
+ const *
+
+251 
+	`°ºchr
+ (c⁄° *
+__s
+, 
+__c
+Ë
+__THROW
+
+
+253  
+	`__buûtö_°ºchr
+ (
+__s
+, 
+__c
+);
+
+256 
+	}
+}
+
+258 *
+	$°ºchr
+ (c⁄° *
+__s
+, 
+__c
+)
+
+259 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+261 
+__END_NAMESPACE_STD
+
+
+263 #ifde‡
+__USE_GNU
+
+
+266 #ifde‡
+__CORRECT_ISO_CPP_STRING_H_PROTO
+
+
+267 "C++" *
+	$°rch∫ul
+ (*
+__s
+, 
+__c
+)
+
+268 
+__THROW
+ 
+	`__asm
+ ("°rch∫ul"Ë
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+269 "C++" c⁄° *
+	$°rch∫ul
+ (c⁄° *
+__s
+, 
+__c
+)
+
+270 
+__THROW
+ 
+	`__asm
+ ("°rch∫ul"Ë
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+272 *
+	$°rch∫ul
+ (c⁄° *
+__s
+, 
+__c
+)
+
+273 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+277 
+__BEGIN_NAMESPACE_STD
+
+
+280 
+size_t
+ 
+	$°rc•n
+ (c⁄° *
+__s
+, c⁄° *
+__ªje˘
+)
+
+281 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+284 
+size_t
+ 
+	$°r•n
+ (c⁄° *
+__s
+, c⁄° *
+__ac˚±
+)
+
+285 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+287 #ifde‡
+__CORRECT_ISO_CPP_STRING_H_PROTO
+
+
+290 *
+	`°Ωbrk
+ (*
+__s
+, c⁄° *
+__ac˚±
+)
+
+291 
+__THROW
+ 
+	`__asm
+ ("°Ωbrk"Ë
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+292 c⁄° *
+	`°Ωbrk
+ (c⁄° *
+__s
+, c⁄° *
+__ac˚±
+)
+
+293 
+__THROW
+ 
+	`__asm
+ ("°Ωbrk"Ë
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+295 #ifde‡
+__OPTIMIZE__
+
+
+296 
+__exã∫_Æways_ölöe
+ *
+
+297 
+	`°Ωbrk
+ (*
+__s
+, c⁄° *
+__ac˚±
+Ë
+__THROW
+
+
+299  
+	`__buûtö_°Ωbrk
+ (
+__s
+, 
+__ac˚±
+);
+
+302 
+__exã∫_Æways_ölöe
+ const *
+
+303 
+	`°Ωbrk
+ (c⁄° *
+__s
+, c⁄° *
+__ac˚±
+Ë
+__THROW
+
+
+305  
+	`__buûtö_°Ωbrk
+ (
+__s
+, 
+__ac˚±
+);
+
+308 
+	}
+}
+
+310 *
+	$°Ωbrk
+ (c⁄° *
+__s
+, c⁄° *
+__ac˚±
+)
+
+311 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+314 #ifde‡
+__CORRECT_ISO_CPP_STRING_H_PROTO
+
+
+317 *
+	`°r°r
+ (*
+__hay°ack
+, c⁄° *
+__√edÀ
+)
+
+318 
+__THROW
+ 
+	`__asm
+ ("°r°r"Ë
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+319 c⁄° *
+	`°r°r
+ (c⁄° *
+__hay°ack
+, c⁄° *
+__√edÀ
+)
+
+320 
+__THROW
+ 
+	`__asm
+ ("°r°r"Ë
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+322 #ifde‡
+__OPTIMIZE__
+
+
+323 
+__exã∫_Æways_ölöe
+ *
+
+324 
+	`°r°r
+ (*
+__hay°ack
+, c⁄° *
+__√edÀ
+Ë
+__THROW
+
+
+326  
+	`__buûtö_°r°r
+ (
+__hay°ack
+, 
+__√edÀ
+);
+
+329 
+__exã∫_Æways_ölöe
+ const *
+
+330 
+	`°r°r
+ (c⁄° *
+__hay°ack
+, c⁄° *
+__√edÀ
+Ë
+__THROW
+
+
+332  
+	`__buûtö_°r°r
+ (
+__hay°ack
+, 
+__√edÀ
+);
+
+335 
+	}
+}
+
+337 *
+	$°r°r
+ (c⁄° *
+__hay°ack
+, c⁄° *
+__√edÀ
+)
+
+338 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+343 *
+	$°πok
+ (*
+__ª°ri˘
+ 
+__s
+, c⁄° *__ª°ri˘ 
+__dñim
+)
+
+344 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2));
+
+345 
+__END_NAMESPACE_STD
+
+
+349 *
+	$__°πok_r
+ (*
+__ª°ri˘
+ 
+__s
+,
+
+350 c⁄° *
+__ª°ri˘
+ 
+__dñim
+,
+
+351 **
+__ª°ri˘
+ 
+__ßve_±r
+)
+
+352 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2, 3));
+
+353 #ifde‡
+__USE_POSIX
+
+
+354 *
+	$°πok_r
+ (*
+__ª°ri˘
+ 
+__s
+, c⁄° *__ª°ri˘ 
+__dñim
+,
+
+355 **
+__ª°ri˘
+ 
+__ßve_±r
+)
+
+356 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2, 3));
+
+359 #ifde‡
+__USE_GNU
+
+
+361 #ifde‡
+__CORRECT_ISO_CPP_STRING_H_PROTO
+
+
+362 "C++" *
+	$°rˇ£°r
+ (*
+__hay°ack
+, c⁄° *
+__√edÀ
+)
+
+363 
+__THROW
+ 
+	`__asm
+ ("°rˇ£°r"Ë
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+364 "C++" c⁄° *
+	$°rˇ£°r
+ (c⁄° *
+__hay°ack
+,
+
+365 c⁄° *
+__√edÀ
+)
+
+366 
+__THROW
+ 
+	`__asm
+ ("°rˇ£°r"Ë
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+368 *
+	$°rˇ£°r
+ (c⁄° *
+__hay°ack
+, c⁄° *
+__√edÀ
+)
+
+369 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+373 #ifde‡
+__USE_GNU
+
+
+377 *
+	$memmem
+ (c⁄° *
+__hay°ack
+, 
+size_t
+ 
+__hay°ackÀn
+,
+
+378 c⁄° *
+__√edÀ
+, 
+size_t
+ 
+__√edÀÀn
+)
+
+379 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 3));
+
+383 *
+	$__memp˝y
+ (*
+__ª°ri˘
+ 
+__de°
+,
+
+384 c⁄° *
+__ª°ri˘
+ 
+__§c
+, 
+size_t
+ 
+__n
+)
+
+385 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+386 *
+	$memp˝y
+ (*
+__ª°ri˘
+ 
+__de°
+,
+
+387 c⁄° *
+__ª°ri˘
+ 
+__§c
+, 
+size_t
+ 
+__n
+)
+
+388 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+392 
+__BEGIN_NAMESPACE_STD
+
+
+394 
+size_t
+ 
+	$°æí
+ (c⁄° *
+__s
+)
+
+395 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+396 
+__END_NAMESPACE_STD
+
+
+398 #ifdef 
+__USE_XOPEN2K8
+
+
+401 
+size_t
+ 
+	$°∫Àn
+ (c⁄° *
+__°rög
+, 
+size_t
+ 
+__maxÀn
+)
+
+402 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+406 
+__BEGIN_NAMESPACE_STD
+
+
+408 *
+	$°ªº‹
+ (
+__î∫um
+Ë
+__THROW
+;
+
+409 
+__END_NAMESPACE_STD
+
+
+410 #ifde‡
+__USE_XOPEN2K
+
+
+418 #i‡
+deföed
+ 
+__USE_XOPEN2K
+ && !deföed 
+__USE_GNU
+
+
+421 #ifde‡
+__REDIRECT_NTH
+
+
+422 
+	`__REDIRECT_NTH
+ (
+°ªº‹_r
+,
+
+423 (
+__î∫um
+, *
+__buf
+, 
+size_t
+ 
+__buÊí
+),
+
+424 
+__xpg_°ªº‹_r
+Ë
+	`__n⁄nuŒ
+ ((2));
+
+426 
+	$__xpg_°ªº‹_r
+ (
+__î∫um
+, *
+__buf
+, 
+size_t
+ 
+__buÊí
+)
+
+427 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2));
+
+428 
+	#°ªº‹_r
+ 
+__xpg_°ªº‹_r
+
+
+	)
+
+433 *
+	$°ªº‹_r
+ (
+__î∫um
+, *
+__buf
+, 
+size_t
+ 
+__buÊí
+)
+
+434 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2)Ë
+__wur
+;
+
+438 #ifde‡
+__USE_XOPEN2K8
+
+
+440 *
+	$°ªº‹_l
+ (
+__î∫um
+, 
+__loˇÀ_t
+ 
+__l
+Ë
+__THROW
+;
+
+446 
+	$__bzîo
+ (*
+__s
+, 
+size_t
+ 
+__n
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+448 #ifde‡
+__USE_MISC
+
+
+450 
+	$bc›y
+ (c⁄° *
+__§c
+, *
+__de°
+, 
+size_t
+ 
+__n
+)
+
+451 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+454 
+	$bzîo
+ (*
+__s
+, 
+size_t
+ 
+__n
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+457 
+	$bcmp
+ (c⁄° *
+__s1
+, c⁄° *
+__s2
+, 
+size_t
+ 
+__n
+)
+
+458 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+461 #ifde‡
+__CORRECT_ISO_CPP_STRING_H_PROTO
+
+
+464 *
+	`ödex
+ (*
+__s
+, 
+__c
+)
+
+465 
+__THROW
+ 
+	`__asm
+ ("ödex"Ë
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+466 c⁄° *
+	`ödex
+ (c⁄° *
+__s
+, 
+__c
+)
+
+467 
+__THROW
+ 
+	`__asm
+ ("ödex"Ë
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+469 #i‡
+deföed
+ 
+__OPTIMIZE__
+ && !deföed 
+__CORRECT_ISO_CPP_STRINGS_H_PROTO
+
+
+470 
+__exã∫_Æways_ölöe
+ *
+
+471 
+	`ödex
+ (*
+__s
+, 
+__c
+Ë
+__THROW
+
+
+473  
+	`__buûtö_ödex
+ (
+__s
+, 
+__c
+);
+
+476 
+__exã∫_Æways_ölöe
+ const *
+
+477 
+	`ödex
+ (c⁄° *
+__s
+, 
+__c
+Ë
+__THROW
+
+
+479  
+	`__buûtö_ödex
+ (
+__s
+, 
+__c
+);
+
+482 
+	}
+}
+
+484 *
+	$ödex
+ (c⁄° *
+__s
+, 
+__c
+)
+
+485 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+489 #ifde‡
+__CORRECT_ISO_CPP_STRING_H_PROTO
+
+
+492 *
+	`rödex
+ (*
+__s
+, 
+__c
+)
+
+493 
+__THROW
+ 
+	`__asm
+ ("rödex"Ë
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+494 c⁄° *
+	`rödex
+ (c⁄° *
+__s
+, 
+__c
+)
+
+495 
+__THROW
+ 
+	`__asm
+ ("rödex"Ë
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+497 #i‡
+deföed
+ 
+__OPTIMIZE__
+ && !deföed 
+__CORRECT_ISO_CPP_STRINGS_H_PROTO
+
+
+498 
+__exã∫_Æways_ölöe
+ *
+
+499 
+	`rödex
+ (*
+__s
+, 
+__c
+Ë
+__THROW
+
+
+501  
+	`__buûtö_rödex
+ (
+__s
+, 
+__c
+);
+
+504 
+__exã∫_Æways_ölöe
+ const *
+
+505 
+	`rödex
+ (c⁄° *
+__s
+, 
+__c
+Ë
+__THROW
+
+
+507  
+	`__buûtö_rödex
+ (
+__s
+, 
+__c
+);
+
+510 
+	}
+}
+
+512 *
+	$rödex
+ (c⁄° *
+__s
+, 
+__c
+)
+
+513 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1));
+
+518 
+	$ffs
+ (
+__i
+Ë
+__THROW
+ 
+	`__©åibuã__
+ ((
+__c⁄°__
+));
+
+522 #ifdef 
+__USE_GNU
+
+
+523 
+	$ff¶
+ (
+__l
+Ë
+__THROW
+ 
+	`__©åibuã__
+ ((
+__c⁄°__
+));
+
+524 
+__exãnsi⁄__
+ 
+	$ff¶l
+ (
+__Œ
+)
+
+525 
+__THROW
+ 
+	`__©åibuã__
+ ((
+__c⁄°__
+));
+
+529 
+	$°rˇ£cmp
+ (c⁄° *
+__s1
+, c⁄° *
+__s2
+)
+
+530 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+533 
+	$°∫ˇ£cmp
+ (c⁄° *
+__s1
+, c⁄° *
+__s2
+, 
+size_t
+ 
+__n
+)
+
+534 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+537 #ifdef 
+__USE_GNU
+
+
+540 
+	$°rˇ£cmp_l
+ (c⁄° *
+__s1
+, c⁄° *
+__s2
+,
+
+541 
+__loˇÀ_t
+ 
+__loc
+)
+
+542 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2, 3));
+
+544 
+	$°∫ˇ£cmp_l
+ (c⁄° *
+__s1
+, c⁄° *
+__s2
+,
+
+545 
+size_t
+ 
+__n
+, 
+__loˇÀ_t
+ 
+__loc
+)
+
+546 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2, 4));
+
+549 #ifdef 
+__USE_MISC
+
+
+552 *
+	$°r£p
+ (**
+__ª°ri˘
+ 
+__°rögp
+,
+
+553 c⁄° *
+__ª°ri˘
+ 
+__dñim
+)
+
+554 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+557 #ifdef 
+__USE_XOPEN2K8
+
+
+559 *
+	$°rsig«l
+ (
+__sig
+Ë
+__THROW
+;
+
+562 *
+	$__°p˝y
+ (*
+__ª°ri˘
+ 
+__de°
+, c⁄° *__ª°ri˘ 
+__§c
+)
+
+563 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+564 *
+	$°p˝y
+ (*
+__ª°ri˘
+ 
+__de°
+, c⁄° *__ª°ri˘ 
+__§c
+)
+
+565 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+569 *
+	$__°≤˝y
+ (*
+__ª°ri˘
+ 
+__de°
+,
+
+570 c⁄° *
+__ª°ri˘
+ 
+__§c
+, 
+size_t
+ 
+__n
+)
+
+571 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+572 *
+	$°≤˝y
+ (*
+__ª°ri˘
+ 
+__de°
+,
+
+573 c⁄° *
+__ª°ri˘
+ 
+__§c
+, 
+size_t
+ 
+__n
+)
+
+574 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+577 #ifdef 
+__USE_GNU
+
+
+579 
+	$°rvîscmp
+ (c⁄° *
+__s1
+, c⁄° *
+__s2
+)
+
+580 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+583 *
+	$°r‰y
+ (*
+__°rög
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+586 *
+	$mem‰ob
+ (*
+__s
+, 
+size_t
+ 
+__n
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+588 #i‚de‡
+ba£«me
+
+
+593 #ifde‡
+__CORRECT_ISO_CPP_STRING_H_PROTO
+
+
+594 "C++" *
+	$ba£«me
+ (*
+__fûíame
+)
+
+595 
+__THROW
+ 
+	`__asm
+ ("ba£«me"Ë
+	`__n⁄nuŒ
+ ((1));
+
+596 "C++" c⁄° *
+	$ba£«me
+ (c⁄° *
+__fûíame
+)
+
+597 
+__THROW
+ 
+	`__asm
+ ("ba£«me"Ë
+	`__n⁄nuŒ
+ ((1));
+
+599 *
+	$ba£«me
+ (c⁄° *
+__fûíame
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+605 #i‡
+deföed
+ 
+__GNUC__
+ && __GNUC__ >= 2
+
+606 #i‡
+deföed
+ 
+__OPTIMIZE__
+ && !deföed 
+__OPTIMIZE_SIZE__
+ \
+
+607 && !
+deföed
+ 
+__NO_INLINE__
+ && !deföed 
+__˝lu•lus
+
+
+627 
+	~<bôs/°rög.h
+>
+
+630 
+	~<bôs/°rög2.h
+>
+
+633 #i‡
+__USE_FORTIFY_LEVEL
+ > 0 && 
+deföed
+ 
+__f‹tify_fun˘i⁄
+
+
+635 
+	~<bôs/°rög3.h
+>
+
+639 #i‡
+deföed
+ 
+__USE_GNU
+ && deföed 
+__OPTIMIZE__
+ \
+
+640 && 
+deföed
+ 
+__exã∫_Æways_ölöe
+ && 
+	$__GNUC_PREREQ
+ (3,2)
+
+641 #i‡!
+deföed
+ 
+_FORCE_INLINES
+ && !deföed 
+_HAVE_STRING_ARCH_memp˝y
+
+
+643 #unde‡
+memp˝y
+
+
+644 #unde‡
+__memp˝y
+
+
+645 
+	#memp˝y
+(
+de°
+, 
+§c
+, 
+n
+Ë
+	`__memp˝y_ölöe
+ (de°, src,Ç)
+
+	)
+
+646 
+	#__memp˝y
+(
+de°
+, 
+§c
+, 
+n
+Ë
+	`__memp˝y_ölöe
+ (de°, src,Ç)
+
+	)
+
+648 
+__exã∫_Æways_ölöe
+ *
+
+649 
+	$__memp˝y_ölöe
+ (*
+__ª°ri˘
+ 
+__de°
+,
+
+650 c⁄° *
+__ª°ri˘
+ 
+__§c
+, 
+size_t
+ 
+__n
+)
+
+652  (*Ë
+	`mem˝y
+ (
+__de°
+, 
+__§c
+, 
+__n
+) + __n;
+
+653 
+	}
+}
+
+658 
+	g__END_DECLS
+
+
+	@/usr/include/sys/stat.h
+
+22 #i‚def 
+_SYS_STAT_H
+
+
+23 
+	#_SYS_STAT_H
+ 1
+
+	)
+
+25 
+	~<„©uªs.h
+>
+
+27 
+	~<bôs/ty≥s.h
+>
+
+29 #i‡
+deföed
+ 
+__USE_XOPEN
+ || deföed 
+__USE_XOPEN2K
+ || deföed 
+__USE_ATFILE
+
+
+30 #i‡
+deföed
+ 
+__USE_XOPEN
+ || deföed 
+__USE_XOPEN2K
+
+
+31 
+	#__√ed_time_t
+
+
+	)
+
+33 #ifde‡
+__USE_ATFILE
+
+
+34 
+	#__√ed_time•ec
+
+
+	)
+
+36 
+	~<time.h
+>
+
+39 #i‡
+deföed
+ 
+__USE_XOPEN
+ || deföed 
+__USE_XOPEN2K
+
+
+42 #i‚de‡
+__dev_t_deföed
+
+
+43 
+__dev_t
+ 
+	tdev_t
+;
+
+44 
+	#__dev_t_deföed
+
+
+	)
+
+47 #i‚de‡
+__gid_t_deföed
+
+
+48 
+__gid_t
+ 
+	tgid_t
+;
+
+49 
+	#__gid_t_deföed
+
+
+	)
+
+52 #i‚de‡
+__öo_t_deföed
+
+
+53 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+54 
+__öo_t
+ 
+	töo_t
+;
+
+56 
+__öo64_t
+ 
+	töo_t
+;
+
+58 
+	#__öo_t_deföed
+
+
+	)
+
+61 #i‚de‡
+__mode_t_deföed
+
+
+62 
+__mode_t
+ 
+	tmode_t
+;
+
+63 
+	#__mode_t_deföed
+
+
+	)
+
+66 #i‚de‡
+__∆ök_t_deföed
+
+
+67 
+__∆ök_t
+ 
+	t∆ök_t
+;
+
+68 
+	#__∆ök_t_deföed
+
+
+	)
+
+71 #i‚de‡
+__off_t_deföed
+
+
+72 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+73 
+__off_t
+ 
+	toff_t
+;
+
+75 
+__off64_t
+ 
+	toff_t
+;
+
+77 
+	#__off_t_deföed
+
+
+	)
+
+80 #i‚de‡
+__uid_t_deföed
+
+
+81 
+__uid_t
+ 
+	tuid_t
+;
+
+82 
+	#__uid_t_deföed
+
+
+	)
+
+86 #ifde‡
+__USE_UNIX98
+
+
+87 #i‚de‡
+__blk˙t_t_deföed
+
+
+88 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+89 
+__blk˙t_t
+ 
+	tblk˙t_t
+;
+
+91 
+__blk˙t64_t
+ 
+	tblk˙t_t
+;
+
+93 
+	#__blk˙t_t_deföed
+
+
+	)
+
+96 #i‚de‡
+__blksize_t_deföed
+
+
+97 
+__blksize_t
+ 
+	tblksize_t
+;
+
+98 
+	#__blksize_t_deföed
+
+
+	)
+
+102 
+	g__BEGIN_DECLS
+
+
+104 
+	~<bôs/°©.h
+>
+
+106 #i‡
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_XOPEN
+
+
+107 
+	#S_IFMT
+ 
+__S_IFMT
+
+
+	)
+
+108 
+	#S_IFDIR
+ 
+__S_IFDIR
+
+
+	)
+
+109 
+	#S_IFCHR
+ 
+__S_IFCHR
+
+
+	)
+
+110 
+	#S_IFBLK
+ 
+__S_IFBLK
+
+
+	)
+
+111 
+	#S_IFREG
+ 
+__S_IFREG
+
+
+	)
+
+112 #ifde‡
+__S_IFIFO
+
+
+113 
+	#S_IFIFO
+ 
+__S_IFIFO
+
+
+	)
+
+115 #ifde‡
+__S_IFLNK
+
+
+116 
+	#S_IFLNK
+ 
+__S_IFLNK
+
+
+	)
+
+118 #i‡(
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_UNIX98
+) \
+
+119 && 
+deföed
+ 
+	g__S_IFSOCK
+
+
+120 
+	#S_IFSOCK
+ 
+__S_IFSOCK
+
+
+	)
+
+126 
+	#__S_ISTYPE
+(
+mode
+, 
+mask
+Ë(((modeË& 
+__S_IFMT
+Ë=(mask))
+
+	)
+
+128 
+	#S_ISDIR
+(
+mode
+Ë
+	`__S_ISTYPE
+((mode), 
+__S_IFDIR
+)
+
+	)
+
+129 
+	#S_ISCHR
+(
+mode
+Ë
+	`__S_ISTYPE
+((mode), 
+__S_IFCHR
+)
+
+	)
+
+130 
+	#S_ISBLK
+(
+mode
+Ë
+	`__S_ISTYPE
+((mode), 
+__S_IFBLK
+)
+
+	)
+
+131 
+	#S_ISREG
+(
+mode
+Ë
+	`__S_ISTYPE
+((mode), 
+__S_IFREG
+)
+
+	)
+
+132 #ifde‡
+__S_IFIFO
+
+
+133 
+	#S_ISFIFO
+(
+mode
+Ë
+	`__S_ISTYPE
+((mode), 
+__S_IFIFO
+)
+
+	)
+
+135 #ifde‡
+__S_IFLNK
+
+
+136 
+	#S_ISLNK
+(
+mode
+Ë
+	`__S_ISTYPE
+((mode), 
+__S_IFLNK
+)
+
+	)
+
+139 #i‡
+deföed
+ 
+__USE_MISC
+ && !deföed 
+__S_IFLNK
+
+
+140 
+	#S_ISLNK
+(
+mode
+Ë0
+
+	)
+
+143 #i‡(
+deföed
+ 
+__USE_UNIX98
+ || deföed 
+__USE_XOPEN2K
+) \
+
+144 && 
+deföed
+ 
+	g__S_IFSOCK
+
+
+145 
+	#S_ISSOCK
+(
+mode
+Ë
+	`__S_ISTYPE
+((mode), 
+__S_IFSOCK
+)
+
+	)
+
+146 #ñi‡
+deföed
+ 
+__USE_XOPEN2K
+
+
+147 
+	#S_ISSOCK
+(
+mode
+Ë0
+
+	)
+
+154 #ifdef 
+__USE_POSIX199309
+
+
+155 
+	#S_TYPEISMQ
+(
+buf
+Ë
+	`__S_TYPEISMQ
+(buf)
+
+	)
+
+156 
+	#S_TYPEISSEM
+(
+buf
+Ë
+	`__S_TYPEISSEM
+(buf)
+
+	)
+
+157 
+	#S_TYPEISSHM
+(
+buf
+Ë
+	`__S_TYPEISSHM
+(buf)
+
+	)
+
+163 
+	#S_ISUID
+ 
+__S_ISUID
+
+
+	)
+
+164 
+	#S_ISGID
+ 
+__S_ISGID
+
+
+	)
+
+166 #i‡
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_XOPEN
+
+
+168 
+	#S_ISVTX
+ 
+__S_ISVTX
+
+
+	)
+
+171 
+	#S_IRUSR
+ 
+__S_IREAD
+
+
+	)
+
+172 
+	#S_IWUSR
+ 
+__S_IWRITE
+
+
+	)
+
+173 
+	#S_IXUSR
+ 
+__S_IEXEC
+
+
+	)
+
+175 
+	#S_IRWXU
+ (
+__S_IREAD
+|
+__S_IWRITE
+|
+__S_IEXEC
+)
+
+	)
+
+177 #ifde‡
+__USE_MISC
+
+
+178 
+	#S_IREAD
+ 
+S_IRUSR
+
+
+	)
+
+179 
+	#S_IWRITE
+ 
+S_IWUSR
+
+
+	)
+
+180 
+	#S_IEXEC
+ 
+S_IXUSR
+
+
+	)
+
+183 
+	#S_IRGRP
+ (
+S_IRUSR
+ >> 3Ë
+
+	)
+
+184 
+	#S_IWGRP
+ (
+S_IWUSR
+ >> 3Ë
+
+	)
+
+185 
+	#S_IXGRP
+ (
+S_IXUSR
+ >> 3Ë
+
+	)
+
+187 
+	#S_IRWXG
+ (
+S_IRWXU
+ >> 3)
+
+	)
+
+189 
+	#S_IROTH
+ (
+S_IRGRP
+ >> 3Ë
+
+	)
+
+190 
+	#S_IWOTH
+ (
+S_IWGRP
+ >> 3Ë
+
+	)
+
+191 
+	#S_IXOTH
+ (
+S_IXGRP
+ >> 3Ë
+
+	)
+
+193 
+	#S_IRWXO
+ (
+S_IRWXG
+ >> 3)
+
+	)
+
+196 #ifdef 
+__USE_MISC
+
+
+198 
+	#ACCESSPERMS
+ (
+S_IRWXU
+|
+S_IRWXG
+|
+S_IRWXO
+Ë
+
+	)
+
+199 
+	#ALLPERMS
+ (
+S_ISUID
+|
+S_ISGID
+|
+S_ISVTX
+|
+S_IRWXU
+|
+S_IRWXG
+|
+S_IRWXO
+)
+
+	)
+
+200 
+	#DEFFILEMODE
+ (
+S_IRUSR
+|
+S_IWUSR
+|
+S_IRGRP
+|
+S_IWGRP
+|
+S_IROTH
+|
+S_IWOTH
+)
+
+	)
+
+202 
+	#S_BLKSIZE
+ 512
+
+	)
+
+206 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+208 
+	$°©
+ (c⁄° *
+__ª°ri˘
+ 
+__fûe
+,
+
+209 
+°©
+ *
+__ª°ri˘
+ 
+__buf
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+213 
+	$f°©
+ (
+__fd
+, 
+°©
+ *
+__buf
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2));
+
+215 #ifde‡
+__REDIRECT_NTH
+
+
+216 
+	`__REDIRECT_NTH
+ (
+°©
+, (c⁄° *
+__ª°ri˘
+ 
+__fûe
+,
+
+217 
+°©
+ *
+__ª°ri˘
+ 
+__buf
+), 
+°©64
+)
+
+218 
+	`__n⁄nuŒ
+ ((1, 2));
+
+219 
+	`__REDIRECT_NTH
+ (
+f°©
+, (
+__fd
+, 
+°©
+ *
+__buf
+), 
+f°©64
+)
+
+220 
+	`__n⁄nuŒ
+ ((2));
+
+222 
+	#°©
+ 
+°©64
+
+
+	)
+
+223 
+	#f°©
+ 
+f°©64
+
+
+	)
+
+226 #ifde‡
+__USE_LARGEFILE64
+
+
+227 
+	$°©64
+ (c⁄° *
+__ª°ri˘
+ 
+__fûe
+,
+
+228 
+°©64
+ *
+__ª°ri˘
+ 
+__buf
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+229 
+	$f°©64
+ (
+__fd
+, 
+°©64
+ *
+__buf
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2));
+
+232 #ifde‡
+__USE_ATFILE
+
+
+236 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+237 
+	$f°©©
+ (
+__fd
+, c⁄° *
+__ª°ri˘
+ 
+__fûe
+,
+
+238 
+°©
+ *
+__ª°ri˘
+ 
+__buf
+, 
+__Êag
+)
+
+239 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2, 3));
+
+241 #ifde‡
+__REDIRECT_NTH
+
+
+242 
+	`__REDIRECT_NTH
+ (
+f°©©
+, (
+__fd
+, c⁄° *
+__ª°ri˘
+ 
+__fûe
+,
+
+243 
+°©
+ *
+__ª°ri˘
+ 
+__buf
+,
+
+244 
+__Êag
+),
+
+245 
+f°©©64
+Ë
+	`__n⁄nuŒ
+ ((2, 3));
+
+247 
+	#f°©©
+ 
+f°©©64
+
+
+	)
+
+251 #ifde‡
+__USE_LARGEFILE64
+
+
+252 
+	$f°©©64
+ (
+__fd
+, c⁄° *
+__ª°ri˘
+ 
+__fûe
+,
+
+253 
+°©64
+ *
+__ª°ri˘
+ 
+__buf
+, 
+__Êag
+)
+
+254 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2, 3));
+
+258 #i‡
+deföed
+ 
+__USE_XOPEN_EXTENDED
+ || deföed 
+__USE_XOPEN2K
+
+
+259 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+262 
+	$l°©
+ (c⁄° *
+__ª°ri˘
+ 
+__fûe
+,
+
+263 
+°©
+ *
+__ª°ri˘
+ 
+__buf
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+265 #ifde‡
+__REDIRECT_NTH
+
+
+266 
+	`__REDIRECT_NTH
+ (
+l°©
+,
+
+267 (c⁄° *
+__ª°ri˘
+ 
+__fûe
+,
+
+268 
+°©
+ *
+__ª°ri˘
+ 
+__buf
+), 
+l°©64
+)
+
+269 
+	`__n⁄nuŒ
+ ((1, 2));
+
+271 
+	#l°©
+ 
+l°©64
+
+
+	)
+
+274 #ifde‡
+__USE_LARGEFILE64
+
+
+275 
+	$l°©64
+ (c⁄° *
+__ª°ri˘
+ 
+__fûe
+,
+
+276 
+°©64
+ *
+__ª°ri˘
+ 
+__buf
+)
+
+277 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+283 
+	$chmod
+ (c⁄° *
+__fûe
+, 
+__mode_t
+ 
+__mode
+)
+
+284 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+286 #ifde‡
+__USE_MISC
+
+
+290 
+	$lchmod
+ (c⁄° *
+__fûe
+, 
+__mode_t
+ 
+__mode
+)
+
+291 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+295 #ifde‡
+__USE_POSIX
+
+
+296 
+	$fchmod
+ (
+__fd
+, 
+__mode_t
+ 
+__mode
+Ë
+__THROW
+;
+
+299 #ifde‡
+__USE_ATFILE
+
+
+302 
+	$fchmod©
+ (
+__fd
+, c⁄° *
+__fûe
+, 
+__mode_t
+ 
+__mode
+,
+
+303 
+__Êag
+)
+
+304 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2)Ë
+__wur
+;
+
+311 
+__mode_t
+ 
+	$umask
+ (
+__mode_t
+ 
+__mask
+Ë
+__THROW
+;
+
+313 #ifdef 
+__USE_GNU
+
+
+316 
+__mode_t
+ 
+	$gëumask
+ (Ë
+__THROW
+;
+
+320 
+	$mkdú
+ (c⁄° *
+__∑th
+, 
+__mode_t
+ 
+__mode
+)
+
+321 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+323 #ifde‡
+__USE_ATFILE
+
+
+327 
+	$mkdú©
+ (
+__fd
+, c⁄° *
+__∑th
+, 
+__mode_t
+ 
+__mode
+)
+
+328 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2));
+
+334 #i‡
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_XOPEN_EXTENDED
+
+
+335 
+	$mknod
+ (c⁄° *
+__∑th
+, 
+__mode_t
+ 
+__mode
+, 
+__dev_t
+ 
+__dev
+)
+
+336 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+338 #ifde‡
+__USE_ATFILE
+
+
+342 
+	$mknod©
+ (
+__fd
+, c⁄° *
+__∑th
+, 
+__mode_t
+ 
+__mode
+,
+
+343 
+__dev_t
+ 
+__dev
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2));
+
+349 
+	$mkfifo
+ (c⁄° *
+__∑th
+, 
+__mode_t
+ 
+__mode
+)
+
+350 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+352 #ifde‡
+__USE_ATFILE
+
+
+356 
+	$mkfifﬂt
+ (
+__fd
+, c⁄° *
+__∑th
+, 
+__mode_t
+ 
+__mode
+)
+
+357 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2));
+
+360 #ifde‡
+__USE_ATFILE
+
+
+363 
+	$utimíßt
+ (
+__fd
+, c⁄° *
+__∑th
+,
+
+364 c⁄° 
+time•ec
+ 
+__times
+[2],
+
+365 
+__Êags
+)
+
+366 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2));
+
+369 #ifde‡
+__USE_XOPEN2K8
+
+
+371 
+	$futimís
+ (
+__fd
+, c⁄° 
+time•ec
+ 
+__times
+[2]Ë
+__THROW
+;
+
+389 #i‚de‡
+_STAT_VER
+
+
+390 
+	#_STAT_VER
+ 0
+
+	)
+
+392 #i‚de‡
+_MKNOD_VER
+
+
+393 
+	#_MKNOD_VER
+ 0
+
+	)
+
+397 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+398 
+	$__fx°©
+ (
+__vî
+, 
+__fûdes
+, 
+°©
+ *
+__°©_buf
+)
+
+399 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((3));
+
+400 
+	$__x°©
+ (
+__vî
+, c⁄° *
+__fûíame
+,
+
+401 
+°©
+ *
+__°©_buf
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2, 3));
+
+402 
+	$__lx°©
+ (
+__vî
+, c⁄° *
+__fûíame
+,
+
+403 
+°©
+ *
+__°©_buf
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2, 3));
+
+404 
+	$__fx°©©
+ (
+__vî
+, 
+__fûdes
+, c⁄° *
+__fûíame
+,
+
+405 
+°©
+ *
+__°©_buf
+, 
+__Êag
+)
+
+406 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((3, 4));
+
+408 #ifde‡
+__REDIRECT_NTH
+
+
+409 
+	`__REDIRECT_NTH
+ (
+__fx°©
+, (
+__vî
+, 
+__fûdes
+,
+
+410 
+°©
+ *
+__°©_buf
+), 
+__fx°©64
+)
+
+411 
+	`__n⁄nuŒ
+ ((3));
+
+412 
+	`__REDIRECT_NTH
+ (
+__x°©
+, (
+__vî
+, c⁄° *
+__fûíame
+,
+
+413 
+°©
+ *
+__°©_buf
+), 
+__x°©64
+)
+
+414 
+	`__n⁄nuŒ
+ ((2, 3));
+
+415 
+	`__REDIRECT_NTH
+ (
+__lx°©
+, (
+__vî
+, c⁄° *
+__fûíame
+,
+
+416 
+°©
+ *
+__°©_buf
+), 
+__lx°©64
+)
+
+417 
+	`__n⁄nuŒ
+ ((2, 3));
+
+418 
+	`__REDIRECT_NTH
+ (
+__fx°©©
+, (
+__vî
+, 
+__fûdes
+,
+
+419 c⁄° *
+__fûíame
+,
+
+420 
+°©
+ *
+__°©_buf
+, 
+__Êag
+),
+
+421 
+__fx°©©64
+Ë
+	`__n⁄nuŒ
+ ((3, 4));
+
+424 
+	#__fx°©
+ 
+__fx°©64
+
+
+	)
+
+425 
+	#__x°©
+ 
+__x°©64
+
+
+	)
+
+426 
+	#__lx°©
+ 
+__lx°©64
+
+
+	)
+
+430 #ifde‡
+__USE_LARGEFILE64
+
+
+431 
+	$__fx°©64
+ (
+__vî
+, 
+__fûdes
+, 
+°©64
+ *
+__°©_buf
+)
+
+432 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((3));
+
+433 
+	$__x°©64
+ (
+__vî
+, c⁄° *
+__fûíame
+,
+
+434 
+°©64
+ *
+__°©_buf
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2, 3));
+
+435 
+	$__lx°©64
+ (
+__vî
+, c⁄° *
+__fûíame
+,
+
+436 
+°©64
+ *
+__°©_buf
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2, 3));
+
+437 
+	$__fx°©©64
+ (
+__vî
+, 
+__fûdes
+, c⁄° *
+__fûíame
+,
+
+438 
+°©64
+ *
+__°©_buf
+, 
+__Êag
+)
+
+439 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((3, 4));
+
+441 
+	$__xmknod
+ (
+__vî
+, c⁄° *
+__∑th
+, 
+__mode_t
+ 
+__mode
+,
+
+442 
+__dev_t
+ *
+__dev
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2, 4));
+
+444 
+	$__xmknod©
+ (
+__vî
+, 
+__fd
+, c⁄° *
+__∑th
+,
+
+445 
+__mode_t
+ 
+__mode
+, 
+__dev_t
+ *
+__dev
+)
+
+446 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((3, 5));
+
+448 #ifde‡
+__USE_EXTERN_INLINES
+
+
+451 
+__exã∫_ölöe
+ 
+
+452 
+	`__NTH
+ (
+	$°©
+ (c⁄° *
+__∑th
+, 
+°©
+ *
+__°©buf
+))
+
+454  
+	`__x°©
+ (
+_STAT_VER
+, 
+__∑th
+, 
+__°©buf
+);
+
+455 
+	}
+}
+
+457 #i‡
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_XOPEN_EXTENDED
+
+
+458 
+__exã∫_ölöe
+ 
+
+459 
+__NTH
+ (
+	$l°©
+ (c⁄° *
+__∑th
+, 
+°©
+ *
+__°©buf
+))
+
+461  
+	`__lx°©
+ (
+_STAT_VER
+, 
+__∑th
+, 
+__°©buf
+);
+
+462 
+	}
+}
+
+465 
+__exã∫_ölöe
+ 
+
+466 
+__NTH
+ (
+	$f°©
+ (
+__fd
+, 
+°©
+ *
+__°©buf
+))
+
+468  
+	`__fx°©
+ (
+_STAT_VER
+, 
+__fd
+, 
+__°©buf
+);
+
+469 
+	}
+}
+
+471 #ifde‡
+__USE_ATFILE
+
+
+472 
+__exã∫_ölöe
+ 
+
+473 
+__NTH
+ (
+	$f°©©
+ (
+__fd
+, c⁄° *
+__fûíame
+, 
+°©
+ *
+__°©buf
+,
+
+474 
+__Êag
+))
+
+476  
+	`__fx°©©
+ (
+_STAT_VER
+, 
+__fd
+, 
+__fûíame
+, 
+__°©buf
+, 
+__Êag
+);
+
+477 
+	}
+}
+
+480 #ifde‡
+__USE_MISC
+
+
+481 
+__exã∫_ölöe
+ 
+
+482 
+__NTH
+ (
+	$mknod
+ (c⁄° *
+__∑th
+, 
+__mode_t
+ 
+__mode
+, 
+__dev_t
+ 
+__dev
+))
+
+484  
+	`__xmknod
+ (
+_MKNOD_VER
+, 
+__∑th
+, 
+__mode
+, &
+__dev
+);
+
+485 
+	}
+}
+
+488 #ifde‡
+__USE_ATFILE
+
+
+489 
+__exã∫_ölöe
+ 
+
+490 
+__NTH
+ (
+	$mknod©
+ (
+__fd
+, c⁄° *
+__∑th
+, 
+__mode_t
+ 
+__mode
+,
+
+491 
+__dev_t
+ 
+__dev
+))
+
+493  
+	`__xmknod©
+ (
+_MKNOD_VER
+, 
+__fd
+, 
+__∑th
+, 
+__mode
+, &
+__dev
+);
+
+494 
+	}
+}
+
+497 #i‡
+deföed
+ 
+__USE_LARGEFILE64
+ \
+
+498 && (! 
+deföed
+ 
+	g__USE_FILE_OFFSET64
+ \
+
+499 || (
+deföed
+ 
+	g__REDIRECT_NTH
+ && deföed 
+	g__OPTIMIZE__
+))
+
+500 
+__exã∫_ölöe
+ 
+
+501 
+__NTH
+ (
+	$°©64
+ (c⁄° *
+__∑th
+, 
+°©64
+ *
+__°©buf
+))
+
+503  
+	`__x°©64
+ (
+_STAT_VER
+, 
+__∑th
+, 
+__°©buf
+);
+
+504 
+	}
+}
+
+506 #i‡
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_XOPEN_EXTENDED
+
+
+507 
+__exã∫_ölöe
+ 
+
+508 
+__NTH
+ (
+	$l°©64
+ (c⁄° *
+__∑th
+, 
+°©64
+ *
+__°©buf
+))
+
+510  
+	`__lx°©64
+ (
+_STAT_VER
+, 
+__∑th
+, 
+__°©buf
+);
+
+511 
+	}
+}
+
+514 
+__exã∫_ölöe
+ 
+
+515 
+__NTH
+ (
+	$f°©64
+ (
+__fd
+, 
+°©64
+ *
+__°©buf
+))
+
+517  
+	`__fx°©64
+ (
+_STAT_VER
+, 
+__fd
+, 
+__°©buf
+);
+
+518 
+	}
+}
+
+520 #ifde‡
+__USE_ATFILE
+
+
+521 
+__exã∫_ölöe
+ 
+
+522 
+__NTH
+ (
+	$f°©©64
+ (
+__fd
+, c⁄° *
+__fûíame
+, 
+°©64
+ *
+__°©buf
+,
+
+523 
+__Êag
+))
+
+525  
+	`__fx°©©64
+ (
+_STAT_VER
+, 
+__fd
+, 
+__fûíame
+, 
+__°©buf
+, 
+__Êag
+);
+
+526 
+	}
+}
+
+533 
+	g__END_DECLS
+
+
+	@/usr/include/bits/auxv.h
+
+20 
+	#AT_NULL
+ 0
+
+	)
+
+21 
+	#AT_IGNORE
+ 1
+
+	)
+
+22 
+	#AT_EXECFD
+ 2
+
+	)
+
+23 
+	#AT_PHDR
+ 3
+
+	)
+
+24 
+	#AT_PHENT
+ 4
+
+	)
+
+25 
+	#AT_PHNUM
+ 5
+
+	)
+
+26 
+	#AT_PAGESZ
+ 6
+
+	)
+
+27 
+	#AT_BASE
+ 7
+
+	)
+
+28 
+	#AT_FLAGS
+ 8
+
+	)
+
+29 
+	#AT_ENTRY
+ 9
+
+	)
+
+30 
+	#AT_NOTELF
+ 10
+
+	)
+
+31 
+	#AT_UID
+ 11
+
+	)
+
+32 
+	#AT_EUID
+ 12
+
+	)
+
+33 
+	#AT_GID
+ 13
+
+	)
+
+34 
+	#AT_EGID
+ 14
+
+	)
+
+35 
+	#AT_CLKTCK
+ 17
+
+	)
+
+38 
+	#AT_PLATFORM
+ 15
+
+	)
+
+39 
+	#AT_HWCAP
+ 16
+
+	)
+
+44 
+	#AT_FPUCW
+ 18
+
+	)
+
+47 
+	#AT_DCACHEBSIZE
+ 19
+
+	)
+
+48 
+	#AT_ICACHEBSIZE
+ 20
+
+	)
+
+49 
+	#AT_UCACHEBSIZE
+ 21
+
+	)
+
+53 
+	#AT_IGNOREPPC
+ 22
+
+	)
+
+55 
+	#AT_SECURE
+ 23
+
+	)
+
+57 
+	#AT_BASE_PLATFORM
+ 24
+
+	)
+
+59 
+	#AT_RANDOM
+ 25
+
+	)
+
+61 
+	#AT_HWCAP2
+ 26
+
+	)
+
+64 
+	#AT_EXECFN
+ 31
+
+	)
+
+68 
+	#AT_SYSINFO
+ 32
+
+	)
+
+69 
+	#AT_SYSINFO_EHDR
+ 33
+
+	)
+
+73 
+	#AT_L1I_CACHESHAPE
+ 34
+
+	)
+
+74 
+	#AT_L1D_CACHESHAPE
+ 35
+
+	)
+
+75 
+	#AT_L2_CACHESHAPE
+ 36
+
+	)
+
+76 
+	#AT_L3_CACHESHAPE
+ 37
+
+	)
+
+	@/usr/include/bits/errno.h
+
+19 #ifde‡
+_ERRNO_H
+
+
+21 #unde‡
+EDOM
+
+
+22 #unde‡
+EILSEQ
+
+
+23 #unde‡
+ERANGE
+
+
+24 
+	~<löux/î∫o.h
+>
+
+27 
+	#ENOTSUP
+ 
+EOPNOTSUPP
+
+
+	)
+
+30 #i‚de‡
+ECANCELED
+
+
+31 
+	#ECANCELED
+ 125
+
+	)
+
+35 #i‚de‡
+EOWNERDEAD
+
+
+36 
+	#EOWNERDEAD
+ 130
+
+	)
+
+37 
+	#ENOTRECOVERABLE
+ 131
+
+	)
+
+40 #i‚de‡
+ERFKILL
+
+
+41 
+	#ERFKILL
+ 132
+
+	)
+
+44 #i‚de‡
+EHWPOISON
+
+
+45 
+	#EHWPOISON
+ 133
+
+	)
+
+48 #i‚de‡
+__ASSEMBLER__
+
+
+50 *
+	$__î∫o_loˇti⁄
+ (Ë
+__THROW
+ 
+	`__©åibuã__
+ ((
+__c⁄°__
+));
+
+52 #i‡!
+deföed
+ 
+_LIBC
+ || deföed 
+_LIBC_REENTRANT
+
+
+54 
+	#î∫o
+ (*
+	`__î∫o_loˇti⁄
+ ())
+
+	)
+
+59 #i‡!
+deföed
+ 
+_ERRNO_H
+ && deföed 
+__√ed_Em©h
+
+
+63 
+	#EDOM
+ 33
+
+	)
+
+64 
+	#EILSEQ
+ 84
+
+	)
+
+65 
+	#ERANGE
+ 34
+
+	)
+
+	@/usr/include/bits/error.h
+
+19 #i‚def 
+_ERROR_H
+
+
+24 
+__REDIRECT
+ (
+__îr‹_Æüs
+, (
+__°©us
+, 
+__î∫um
+,
+
+25 c⁄° *
+__f‹m©
+, ...),
+
+26 
+îr‹
+)
+
+27 
+__©åibuã__
+ ((
+__f‹m©__
+ (
+__¥ötf__
+, 3, 4)));
+
+28 
+__REDIRECT
+ (
+__îr‹_n‹ëu∫
+, (
+__°©us
+, 
+__î∫um
+,
+
+29 c⁄° *
+__f‹m©
+, ...),
+
+30 
+îr‹
+)
+
+31 
+__©åibuã__
+ ((
+__n‹ëu∫__
+, 
+__f‹m©__
+ (
+__¥ötf__
+, 3, 4)));
+
+36 
+__exã∫_Æways_ölöe
+ 
+
+37 
+	$îr‹
+ (
+__°©us
+, 
+__î∫um
+, c⁄° *
+__f‹m©
+, ...)
+
+39 i‡(
+	`__buûtö_c⁄°™t_p
+ (
+__°©us
+) && __status != 0)
+
+40 
+	`__îr‹_n‹ëu∫
+ (
+__°©us
+, 
+__î∫um
+, 
+__f‹m©
+, 
+	`__va_¨g_∑ck
+ ());
+
+42 
+	`__îr‹_Æüs
+ (
+__°©us
+, 
+__î∫um
+, 
+__f‹m©
+, 
+	`__va_¨g_∑ck
+ ());
+
+43 
+	}
+}
+
+46 
+__REDIRECT
+ (
+__îr‹_©_löe_Æüs
+, (
+__°©us
+, 
+__î∫um
+,
+
+47 c⁄° *
+__‚ame
+,
+
+48 
+__löe
+,
+
+49 c⁄° *
+__f‹m©
+, ...),
+
+50 
+îr‹_©_löe
+)
+
+51 
+__©åibuã__
+ ((
+__f‹m©__
+ (
+__¥ötf__
+, 5, 6)));
+
+52 
+__REDIRECT
+ (
+__îr‹_©_löe_n‹ëu∫
+, (
+__°©us
+, 
+__î∫um
+,
+
+53 c⁄° *
+__‚ame
+,
+
+54 
+__löe
+,
+
+55 c⁄° *
+__f‹m©
+,
+
+57 
+îr‹_©_löe
+)
+
+58 
+__©åibuã__
+ ((
+__n‹ëu∫__
+, 
+__f‹m©__
+ (
+__¥ötf__
+, 5, 6)));
+
+63 
+__exã∫_Æways_ölöe
+ 
+
+64 
+	$îr‹_©_löe
+ (
+__°©us
+, 
+__î∫um
+, c⁄° *
+__‚ame
+,
+
+65 
+__löe
+, c⁄° *
+__f‹m©
+, ...)
+
+67 i‡(
+	`__buûtö_c⁄°™t_p
+ (
+__°©us
+) && __status != 0)
+
+68 
+	`__îr‹_©_löe_n‹ëu∫
+ (
+__°©us
+, 
+__î∫um
+, 
+__‚ame
+, 
+__löe
+, 
+__f‹m©
+,
+
+69 
+	`__va_¨g_∑ck
+ ());
+
+71 
+	`__îr‹_©_löe_Æüs
+ (
+__°©us
+, 
+__î∫um
+, 
+__‚ame
+, 
+__löe
+,
+
+72 
+__f‹m©
+, 
+	`__va_¨g_∑ck
+ ());
+
+73 
+	}
+}
+
+	@/usr/include/bits/stab.def
+
+23 
+__deföe_°ab
+ (
+N_GSYM
+, 0x20, "GSYM")
+
+27 
+__deföe_°ab
+ (
+N_FNAME
+, 0x22, "FNAME")
+
+32 
+__deföe_°ab
+ (
+N_FUN
+, 0x24, "FUN")
+
+36 
+__deföe_°ab
+ (
+N_STSYM
+, 0x26, "STSYM")
+
+39 
+__deföe_°ab
+ (
+N_LCSYM
+, 0x28, "LCSYM")
+
+43 
+__deföe_°ab
+ (
+N_MAIN
+, 0x2a, "MAIN")
+
+47 
+__deföe_°ab
+ (
+N_PC
+, 0x30, "PC")
+
+50 
+__deföe_°ab
+ (
+N_NSYMS
+, 0x32, "NSYMS")
+
+53 
+__deföe_°ab
+ (
+N_NOMAP
+, 0x34, "NOMAP")
+
+57 
+__deföe_°ab
+ (
+N_OBJ
+, 0x38, "OBJ")
+
+62 
+__deföe_°ab
+ (
+N_OPT
+, 0x3c, "OPT")
+
+65 
+__deföe_°ab
+ (
+N_RSYM
+, 0x40, "RSYM")
+
+68 
+__deföe_°ab
+ (
+N_M2C
+, 0x42, "M2C")
+
+72 
+__deföe_°ab
+ (
+N_SLINE
+, 0x44, "SLINE")
+
+75 
+__deföe_°ab
+ (
+N_DSLINE
+, 0x46, "DSLINE")
+
+78 
+__deföe_°ab
+ (
+N_BSLINE
+, 0x48, "BSLINE")
+
+83 
+__deföe_°ab
+ (
+N_BROWS
+, 0x48, "BROWS")
+
+89 
+__deföe_°ab
+(
+N_DEFD
+, 0x4a, "DEFD")
+
+94 
+__deföe_°ab
+ (
+N_EHDECL
+, 0x50, "EHDECL")
+
+96 
+__deföe_°ab
+ (
+N_MOD2
+, 0x50, "MOD2")
+
+103 
+__deföe_°ab
+ (
+N_CATCH
+, 0x54, "CATCH")
+
+106 
+__deföe_°ab
+ (
+N_SSYM
+, 0x60, "SSYM")
+
+110 
+__deföe_°ab
+ (
+N_SO
+, 0x64, "SO")
+
+114 
+__deföe_°ab
+ (
+N_LSYM
+, 0x80, "LSYM")
+
+119 
+__deföe_°ab
+ (
+N_BINCL
+, 0x82, "BINCL")
+
+123 
+__deföe_°ab
+ (
+N_SOL
+, 0x84, "SOL")
+
+127 
+__deföe_°ab
+ (
+N_PSYM
+, 0xa0, "PSYM")
+
+133 
+__deföe_°ab
+ (
+N_EINCL
+, 0xa2, "EINCL")
+
+136 
+__deföe_°ab
+ (
+N_ENTRY
+, 0xa4, "ENTRY")
+
+142 
+__deföe_°ab
+ (
+N_LBRAC
+, 0xc0, "LBRAC")
+
+148 
+__deföe_°ab
+ (
+N_EXCL
+, 0xc2, "EXCL")
+
+151 
+__deföe_°ab
+ (
+N_SCOPE
+, 0xc4, "SCOPE")
+
+155 
+__deföe_°ab
+ (
+N_RBRAC
+, 0xe0, "RBRAC")
+
+158 
+__deföe_°ab
+ (
+N_BCOMM
+, 0xe2, "BCOMM")
+
+162 
+__deföe_°ab
+ (
+N_ECOMM
+, 0xe4, "ECOMM")
+
+166 
+__deföe_°ab
+ (
+N_ECOML
+, 0xe8, "ECOML")
+
+171 
+__deföe_°ab
+ (
+N_NBTEXT
+, 0xF0, "NBTEXT")
+
+172 
+__deföe_°ab
+ (
+N_NBDATA
+, 0xF2, "NBDATA")
+
+173 
+__deföe_°ab
+ (
+N_NBBSS
+, 0xF4, "NBBSS")
+
+174 
+__deföe_°ab
+ (
+N_NBSTS
+, 0xF6, "NBSTS")
+
+175 
+__deföe_°ab
+ (
+N_NBLCS
+, 0xF8, "NBLCS")
+
+179 
+__deföe_°ab
+ (
+N_LENG
+, 0xfe, "LENG")
+
+	@/usr/include/bits/stat.h
+
+18 #i‡!
+deföed
+ 
+_SYS_STAT_H
+ && !deföed 
+_FCNTL_H
+
+
+22 #i‚de‡
+_BITS_STAT_H
+
+
+23 
+	#_BITS_STAT_H
+ 1
+
+	)
+
+26 #i‚de‡
+__x86_64__
+
+
+27 
+	#_STAT_VER_LINUX_OLD
+ 1
+
+	)
+
+28 
+	#_STAT_VER_KERNEL
+ 1
+
+	)
+
+29 
+	#_STAT_VER_SVR4
+ 2
+
+	)
+
+30 
+	#_STAT_VER_LINUX
+ 3
+
+	)
+
+33 
+	#_MKNOD_VER_LINUX
+ 1
+
+	)
+
+34 
+	#_MKNOD_VER_SVR4
+ 2
+
+	)
+
+35 
+	#_MKNOD_VER
+ 
+_MKNOD_VER_LINUX
+
+
+	)
+
+37 
+	#_STAT_VER_KERNEL
+ 0
+
+	)
+
+38 
+	#_STAT_VER_LINUX
+ 1
+
+	)
+
+41 
+	#_MKNOD_VER_LINUX
+ 0
+
+	)
+
+44 
+	#_STAT_VER
+ 
+_STAT_VER_LINUX
+
+
+	)
+
+46 
+	s°©
+
+
+48 
+__dev_t
+ 
+	m°_dev
+;
+
+49 #i‚de‡
+__x86_64__
+
+
+50 
+	m__∑d1
+;
+
+52 #i‡
+deföed
+ 
+__x86_64__
+ || !deföed 
+__USE_FILE_OFFSET64
+
+
+53 
+__öo_t
+ 
+	m°_öo
+;
+
+55 
+__öo_t
+ 
+	m__°_öo
+;
+
+57 #i‚de‡
+__x86_64__
+
+
+58 
+__mode_t
+ 
+	m°_mode
+;
+
+59 
+__∆ök_t
+ 
+	m°_∆ök
+;
+
+61 
+__∆ök_t
+ 
+	m°_∆ök
+;
+
+62 
+__mode_t
+ 
+	m°_mode
+;
+
+64 
+__uid_t
+ 
+	m°_uid
+;
+
+65 
+__gid_t
+ 
+	m°_gid
+;
+
+66 #ifde‡
+__x86_64__
+
+
+67 
+	m__∑d0
+;
+
+69 
+__dev_t
+ 
+	m°_rdev
+;
+
+70 #i‚de‡
+__x86_64__
+
+
+71 
+	m__∑d2
+;
+
+73 #i‡
+deföed
+ 
+__x86_64__
+ || !deföed 
+__USE_FILE_OFFSET64
+
+
+74 
+__off_t
+ 
+	m°_size
+;
+
+76 
+__off64_t
+ 
+	m°_size
+;
+
+78 
+__blksize_t
+ 
+	m°_blksize
+;
+
+79 #i‡
+deföed
+ 
+__x86_64__
+ || !deföed 
+__USE_FILE_OFFSET64
+
+
+80 
+__blk˙t_t
+ 
+	m°_blocks
+;
+
+82 
+__blk˙t64_t
+ 
+	m°_blocks
+;
+
+84 #ifde‡
+__USE_XOPEN2K8
+
+
+91 
+time•ec
+ 
+	m°_©im
+;
+
+92 
+time•ec
+ 
+	m°_mtim
+;
+
+93 
+time•ec
+ 
+	m°_˘im
+;
+
+94 
+	#°_©ime
+ 
+°_©im
+.
+tv_£c
+
+
+	)
+
+95 
+	#°_mtime
+ 
+°_mtim
+.
+tv_£c
+
+
+	)
+
+96 
+	#°_˘ime
+ 
+°_˘im
+.
+tv_£c
+
+
+	)
+
+98 
+__time_t
+ 
+	m°_©ime
+;
+
+99 
+__sysˇŒ_ul⁄g_t
+ 
+	m°_©imí£c
+;
+
+100 
+__time_t
+ 
+	m°_mtime
+;
+
+101 
+__sysˇŒ_ul⁄g_t
+ 
+	m°_mtimí£c
+;
+
+102 
+__time_t
+ 
+	m°_˘ime
+;
+
+103 
+__sysˇŒ_ul⁄g_t
+ 
+	m°_˘imí£c
+;
+
+105 #ifde‡
+__x86_64__
+
+
+106 
+__sysˇŒ_¶⁄g_t
+ 
+	m__glibc_ª£rved
+[3];
+
+108 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+109 
+	m__glibc_ª£rved4
+;
+
+110 
+	m__glibc_ª£rved5
+;
+
+112 
+__öo64_t
+ 
+	m°_öo
+;
+
+117 #ifde‡
+__USE_LARGEFILE64
+
+
+119 
+	s°©64
+
+
+121 
+__dev_t
+ 
+	m°_dev
+;
+
+122 #ifde‡
+__x86_64__
+
+
+123 
+__öo64_t
+ 
+	m°_öo
+;
+
+124 
+__∆ök_t
+ 
+	m°_∆ök
+;
+
+125 
+__mode_t
+ 
+	m°_mode
+;
+
+127 
+	m__∑d1
+;
+
+128 
+__öo_t
+ 
+	m__°_öo
+;
+
+129 
+__mode_t
+ 
+	m°_mode
+;
+
+130 
+__∆ök_t
+ 
+	m°_∆ök
+;
+
+132 
+__uid_t
+ 
+	m°_uid
+;
+
+133 
+__gid_t
+ 
+	m°_gid
+;
+
+134 #ifde‡
+__x86_64__
+
+
+135 
+	m__∑d0
+;
+
+136 
+__dev_t
+ 
+	m°_rdev
+;
+
+137 
+__off_t
+ 
+	m°_size
+;
+
+139 
+__dev_t
+ 
+	m°_rdev
+;
+
+140 
+	m__∑d2
+;
+
+141 
+__off64_t
+ 
+	m°_size
+;
+
+143 
+__blksize_t
+ 
+	m°_blksize
+;
+
+144 
+__blk˙t64_t
+ 
+	m°_blocks
+;
+
+145 #ifde‡
+__USE_XOPEN2K8
+
+
+152 
+time•ec
+ 
+	m°_©im
+;
+
+153 
+time•ec
+ 
+	m°_mtim
+;
+
+154 
+time•ec
+ 
+	m°_˘im
+;
+
+156 
+__time_t
+ 
+	m°_©ime
+;
+
+157 
+__sysˇŒ_ul⁄g_t
+ 
+	m°_©imí£c
+;
+
+158 
+__time_t
+ 
+	m°_mtime
+;
+
+159 
+__sysˇŒ_ul⁄g_t
+ 
+	m°_mtimí£c
+;
+
+160 
+__time_t
+ 
+	m°_˘ime
+;
+
+161 
+__sysˇŒ_ul⁄g_t
+ 
+	m°_˘imí£c
+;
+
+163 #ifde‡
+__x86_64__
+
+
+164 
+__sysˇŒ_¶⁄g_t
+ 
+	m__glibc_ª£rved
+[3];
+
+166 
+__öo64_t
+ 
+	m°_öo
+;
+
+172 
+	#_STATBUF_ST_BLKSIZE
+
+
+	)
+
+173 
+	#_STATBUF_ST_RDEV
+
+
+	)
+
+175 
+	#_STATBUF_ST_NSEC
+
+
+	)
+
+179 
+	#__S_IFMT
+ 0170000
+
+	)
+
+182 
+	#__S_IFDIR
+ 0040000
+
+	)
+
+183 
+	#__S_IFCHR
+ 0020000
+
+	)
+
+184 
+	#__S_IFBLK
+ 0060000
+
+	)
+
+185 
+	#__S_IFREG
+ 0100000
+
+	)
+
+186 
+	#__S_IFIFO
+ 0010000
+
+	)
+
+187 
+	#__S_IFLNK
+ 0120000
+
+	)
+
+188 
+	#__S_IFSOCK
+ 0140000
+
+	)
+
+192 
+	#__S_TYPEISMQ
+(
+buf
+Ë((buf)->
+°_mode
+ - (buf)->°_mode)
+
+	)
+
+193 
+	#__S_TYPEISSEM
+(
+buf
+Ë((buf)->
+°_mode
+ - (buf)->°_mode)
+
+	)
+
+194 
+	#__S_TYPEISSHM
+(
+buf
+Ë((buf)->
+°_mode
+ - (buf)->°_mode)
+
+	)
+
+198 
+	#__S_ISUID
+ 04000
+
+	)
+
+199 
+	#__S_ISGID
+ 02000
+
+	)
+
+200 
+	#__S_ISVTX
+ 01000
+
+	)
+
+201 
+	#__S_IREAD
+ 0400
+
+	)
+
+202 
+	#__S_IWRITE
+ 0200
+
+	)
+
+203 
+	#__S_IEXEC
+ 0100
+
+	)
+
+205 #ifde‡
+__USE_ATFILE
+
+
+206 
+	#UTIME_NOW
+ ((1»<< 30Ë- 1l)
+
+	)
+
+207 
+	#UTIME_OMIT
+ ((1»<< 30Ë- 2l)
+
+	)
+
+	@/usr/include/bits/stdio-ldbl.h
+
+19 #i‚de‡
+_STDIO_H
+
+
+23 
+__BEGIN_NAMESPACE_STD
+
+
+24 
+	$__LDBL_REDIR_DECL
+ (
+Ârötf
+)
+
+25 
+	$__LDBL_REDIR_DECL
+ (
+¥ötf
+)
+
+26 
+	$__LDBL_REDIR_DECL
+ (
+•rötf
+)
+
+27 
+	$__LDBL_REDIR_DECL
+ (
+vÂrötf
+)
+
+28 
+	$__LDBL_REDIR_DECL
+ (
+v¥ötf
+)
+
+29 
+	$__LDBL_REDIR_DECL
+ (
+v•rötf
+)
+
+30 #i‡
+deföed
+ 
+__USE_ISOC99
+ && !deföed 
+__USE_GNU
+ \
+
+31 && !
+deföed
+ 
+__REDIRECT
+ \
+
+32 && (
+deföed
+ 
+__STRICT_ANSI__
+ || deföed 
+__USE_XOPEN2K
+)
+
+33 
+	$__LDBL_REDIR1_DECL
+ (
+fsˇnf
+, 
+__∆dbl___isoc99_fsˇnf
+)
+
+34 
+	$__LDBL_REDIR1_DECL
+ (
+sˇnf
+, 
+__∆dbl___isoc99_sˇnf
+)
+
+35 
+	$__LDBL_REDIR1_DECL
+ (
+ssˇnf
+, 
+__∆dbl___isoc99_ssˇnf
+)
+
+37 
+	$__LDBL_REDIR_DECL
+ (
+fsˇnf
+)
+
+38 
+	$__LDBL_REDIR_DECL
+ (
+sˇnf
+)
+
+39 
+	$__LDBL_REDIR_DECL
+ (
+ssˇnf
+)
+
+41 
+__END_NAMESPACE_STD
+
+
+43 #i‡
+deföed
+ 
+__USE_ISOC99
+ || deföed 
+__USE_UNIX98
+
+
+44 
+__BEGIN_NAMESPACE_C99
+
+
+45 
+	$__LDBL_REDIR_DECL
+ (
+¢¥ötf
+)
+
+46 
+	$__LDBL_REDIR_DECL
+ (
+v¢¥ötf
+)
+
+47 
+__END_NAMESPACE_C99
+
+
+50 #ifdef 
+__USE_ISOC99
+
+
+51 
+__BEGIN_NAMESPACE_C99
+
+
+52 #i‡!
+deföed
+ 
+__USE_GNU
+ && !deföed 
+__REDIRECT
+ \
+
+53 && (
+deföed
+ 
+__STRICT_ANSI__
+ || deföed 
+__USE_XOPEN2K
+)
+
+54 
+	$__LDBL_REDIR1_DECL
+ (
+vfsˇnf
+, 
+__∆dbl___isoc99_vfsˇnf
+)
+
+55 
+	$__LDBL_REDIR1_DECL
+ (
+vsˇnf
+, 
+__∆dbl___isoc99_vsˇnf
+)
+
+56 
+	$__LDBL_REDIR1_DECL
+ (
+vssˇnf
+, 
+__∆dbl___isoc99_vssˇnf
+)
+
+58 
+	$__LDBL_REDIR_DECL
+ (
+vfsˇnf
+)
+
+59 
+	$__LDBL_REDIR_DECL
+ (
+vssˇnf
+)
+
+60 
+	$__LDBL_REDIR_DECL
+ (
+vsˇnf
+)
+
+62 
+__END_NAMESPACE_C99
+
+
+65 #ifde‡
+__USE_XOPEN2K8
+
+
+66 
+	$__LDBL_REDIR_DECL
+ (
+vd¥ötf
+)
+
+67 
+	$__LDBL_REDIR_DECL
+ (
+d¥ötf
+)
+
+70 #ifde‡
+__USE_GNU
+
+
+71 
+	$__LDBL_REDIR_DECL
+ (
+va•rötf
+)
+
+72 
+	$__LDBL_REDIR_DECL
+ (
+__a•rötf
+)
+
+73 
+	$__LDBL_REDIR_DECL
+ (
+a•rötf
+)
+
+74 
+	$__LDBL_REDIR_DECL
+ (
+ob°ack_¥ötf
+)
+
+75 
+	$__LDBL_REDIR_DECL
+ (
+ob°ack_v¥ötf
+)
+
+78 #i‡
+__USE_FORTIFY_LEVEL
+ > 0 && 
+deföed
+ 
+__f‹tify_fun˘i⁄
+
+
+79 
+	$__LDBL_REDIR_DECL
+ (
+__•rötf_chk
+)
+
+80 
+	$__LDBL_REDIR_DECL
+ (
+__v•rötf_chk
+)
+
+81 #i‡
+deföed
+ 
+__USE_ISOC99
+ || deföed 
+__USE_UNIX98
+
+
+82 
+	$__LDBL_REDIR_DECL
+ (
+__¢¥ötf_chk
+)
+
+83 
+	$__LDBL_REDIR_DECL
+ (
+__v¢¥ötf_chk
+)
+
+85 #i‡
+__USE_FORTIFY_LEVEL
+ > 1
+
+86 
+	$__LDBL_REDIR_DECL
+ (
+__Ârötf_chk
+)
+
+87 
+	$__LDBL_REDIR_DECL
+ (
+__¥ötf_chk
+)
+
+88 
+	$__LDBL_REDIR_DECL
+ (
+__vÂrötf_chk
+)
+
+89 
+	$__LDBL_REDIR_DECL
+ (
+__v¥ötf_chk
+)
+
+90 #ifde‡
+__USE_XOPEN2K8
+
+
+91 
+	$__LDBL_REDIR_DECL
+ (
+__d¥ötf_chk
+)
+
+92 
+	$__LDBL_REDIR_DECL
+ (
+__vd¥ötf_chk
+)
+
+94 #ifde‡
+__USE_GNU
+
+
+95 
+	$__LDBL_REDIR_DECL
+ (
+__a•rötf_chk
+)
+
+96 
+	$__LDBL_REDIR_DECL
+ (
+__va•rötf_chk
+)
+
+97 
+	$__LDBL_REDIR_DECL
+ (
+__ob°ack_¥ötf_chk
+)
+
+98 
+	$__LDBL_REDIR_DECL
+ (
+__ob°ack_v¥ötf_chk
+)
+
+	@/usr/include/bits/stdio.h
+
+19 #i‚de‡
+_STDIO_H
+
+
+23 #i‚de‡
+__exã∫_ölöe
+
+
+24 
+	#__STDIO_INLINE
+ 
+ölöe
+
+
+	)
+
+26 
+	#__STDIO_INLINE
+ 
+__exã∫_ölöe
+
+
+	)
+
+30 #ifde‡
+__USE_EXTERN_INLINES
+
+
+33 #i‡!(
+__USE_FORTIFY_LEVEL
+ > 0 && 
+deföed
+ 
+__f‹tify_fun˘i⁄
+)
+
+35 
+__STDIO_INLINE
+ 
+
+36 
+	$v¥ötf
+ (c⁄° *
+__ª°ri˘
+ 
+__fmt
+, 
+_G_va_li°
+ 
+__¨g
+)
+
+38  
+	`vÂrötf
+ (
+°dout
+, 
+__fmt
+, 
+__¨g
+);
+
+39 
+	}
+}
+
+43 
+__STDIO_INLINE
+ 
+
+44 
+	$gëch¨
+ ()
+
+46  
+	`_IO_gëc
+ (
+°dö
+);
+
+47 
+	}
+}
+
+50 #ifde‡
+__USE_MISC
+
+
+52 
+__STDIO_INLINE
+ 
+
+53 
+	$fgëc_u∆ocked
+ (
+FILE
+ *
+__Â
+)
+
+55  
+	`_IO_gëc_u∆ocked
+ (
+__Â
+);
+
+56 
+	}
+}
+
+60 #ifde‡
+__USE_POSIX
+
+
+62 
+__STDIO_INLINE
+ 
+
+63 
+	$gëc_u∆ocked
+ (
+FILE
+ *
+__Â
+)
+
+65  
+	`_IO_gëc_u∆ocked
+ (
+__Â
+);
+
+66 
+	}
+}
+
+69 
+__STDIO_INLINE
+ 
+
+70 
+	$gëch¨_u∆ocked
+ ()
+
+72  
+	`_IO_gëc_u∆ocked
+ (
+°dö
+);
+
+73 
+	}
+}
+
+78 
+__STDIO_INLINE
+ 
+
+79 
+	$putch¨
+ (
+__c
+)
+
+81  
+	`_IO_putc
+ (
+__c
+, 
+°dout
+);
+
+82 
+	}
+}
+
+85 #ifde‡
+__USE_MISC
+
+
+87 
+__STDIO_INLINE
+ 
+
+88 
+	$Âutc_u∆ocked
+ (
+__c
+, 
+FILE
+ *
+__°ªam
+)
+
+90  
+	`_IO_putc_u∆ocked
+ (
+__c
+, 
+__°ªam
+);
+
+91 
+	}
+}
+
+95 #ifde‡
+__USE_POSIX
+
+
+97 
+__STDIO_INLINE
+ 
+
+98 
+	$putc_u∆ocked
+ (
+__c
+, 
+FILE
+ *
+__°ªam
+)
+
+100  
+	`_IO_putc_u∆ocked
+ (
+__c
+, 
+__°ªam
+);
+
+101 
+	}
+}
+
+104 
+__STDIO_INLINE
+ 
+
+105 
+	$putch¨_u∆ocked
+ (
+__c
+)
+
+107  
+	`_IO_putc_u∆ocked
+ (
+__c
+, 
+°dout
+);
+
+108 
+	}
+}
+
+112 #ifdef 
+__USE_GNU
+
+
+114 
+__STDIO_INLINE
+ 
+_IO_ssize_t
+
+
+115 
+	$gëlöe
+ (**
+__löïå
+, 
+size_t
+ *
+__n
+, 
+FILE
+ *
+__°ªam
+)
+
+117  
+	`__gëdñim
+ (
+__löïå
+, 
+__n
+, '\n', 
+__°ªam
+);
+
+118 
+	}
+}
+
+122 #ifde‡
+__USE_MISC
+
+
+124 
+__STDIO_INLINE
+ 
+
+125 
+__NTH
+ (
+	$„of_u∆ocked
+ (
+FILE
+ *
+__°ªam
+))
+
+127  
+	`_IO_„of_u∆ocked
+ (
+__°ªam
+);
+
+128 
+	}
+}
+
+131 
+__STDIO_INLINE
+ 
+
+132 
+__NTH
+ (
+	$„º‹_u∆ocked
+ (
+FILE
+ *
+__°ªam
+))
+
+134  
+	`_IO_„º‹_u∆ocked
+ (
+__°ªam
+);
+
+135 
+	}
+}
+
+141 #i‡
+deföed
+ 
+__USE_MISC
+ && deföed 
+__GNUC__
+ && deföed 
+__OPTIMIZE__
+ \
+
+142 && !
+deföed
+ 
+	g__˝lu•lus
+
+
+144 
+	#‰ód_u∆ocked
+(
+±r
+, 
+size
+, 
+n
+, 
+°ªam
+) \
+
+145 (
+	`__exãnsi⁄__
+ ((
+	`__buûtö_c⁄°™t_p
+ (
+size
+Ë&& __buûtö_c⁄°™t_∞(
+n
+) \
+
+146 && (
+size_t
+Ë(
+size
+Ë* (size_tË(
+n
+) <= 8 \
+
+147 && (
+size_t
+Ë(
+size
+) != 0) \
+
+148 ? ({ *
+__±r
+ = (*Ë(
+±r
+); \
+
+149 
+FILE
+ *
+__°ªam
+ = (
+°ªam
+); \
+
+150 
+size_t
+ 
+__˙t
+; \
+
+151 
+__˙t
+ = (
+size_t
+Ë(
+size
+Ë* (size_tË(
+n
+); \
+
+152 
+__˙t
+ > 0; --__cnt) \
+
+154 
+__c
+ = 
+	`_IO_gëc_u∆ocked
+ (
+__°ªam
+); \
+
+155 i‡(
+__c
+ =
+EOF
+) \
+
+157 *
+__±r
+++ = 
+__c
+; \
+
+159 ((
+size_t
+Ë(
+size
+Ë* (size_tË(
+n
+Ë- 
+__˙t
+) \
+
+160 / (
+size_t
+Ë(
+size
+); }) \
+
+161 : (((
+	`__buûtö_c⁄°™t_p
+ (
+size
+Ë&& (
+size_t
+) (size) == 0) \
+
+162 || (
+	`__buûtö_c⁄°™t_p
+ (
+n
+Ë&& (
+size_t
+) (n) == 0)) \
+
+164 ? ((Ë(
+±r
+), (Ë(
+°ªam
+), (Ë(
+size
+), \
+
+165 (Ë(
+n
+), (
+size_t
+) 0) \
+
+166 : 
+	`‰ód_u∆ocked
+ (
+±r
+, 
+size
+, 
+n
+, 
+°ªam
+))))
+
+	)
+
+168 
+	#fwrôe_u∆ocked
+(
+±r
+, 
+size
+, 
+n
+, 
+°ªam
+) \
+
+169 (
+	`__exãnsi⁄__
+ ((
+	`__buûtö_c⁄°™t_p
+ (
+size
+Ë&& __buûtö_c⁄°™t_∞(
+n
+) \
+
+170 && (
+size_t
+Ë(
+size
+Ë* (size_tË(
+n
+) <= 8 \
+
+171 && (
+size_t
+Ë(
+size
+) != 0) \
+
+172 ? ({ c⁄° *
+__±r
+ = (c⁄° *Ë(
+±r
+); \
+
+173 
+FILE
+ *
+__°ªam
+ = (
+°ªam
+); \
+
+174 
+size_t
+ 
+__˙t
+; \
+
+175 
+__˙t
+ = (
+size_t
+Ë(
+size
+Ë* (size_tË(
+n
+); \
+
+176 
+__˙t
+ > 0; --__cnt) \
+
+177 i‡(
+	`_IO_putc_u∆ocked
+ (*
+__±r
+++, 
+__°ªam
+Ë=
+EOF
+) \
+
+179 ((
+size_t
+Ë(
+size
+Ë* (size_tË(
+n
+Ë- 
+__˙t
+) \
+
+180 / (
+size_t
+Ë(
+size
+); }) \
+
+181 : (((
+	`__buûtö_c⁄°™t_p
+ (
+size
+Ë&& (
+size_t
+) (size) == 0) \
+
+182 || (
+	`__buûtö_c⁄°™t_p
+ (
+n
+Ë&& (
+size_t
+) (n) == 0)) \
+
+184 ? ((Ë(
+±r
+), (Ë(
+°ªam
+), (Ë(
+size
+), \
+
+185 (Ë(
+n
+), (
+size_t
+) 0) \
+
+186 : 
+	`fwrôe_u∆ocked
+ (
+±r
+, 
+size
+, 
+n
+, 
+°ªam
+))))
+
+	)
+
+190 #unde‡
+__STDIO_INLINE
+
+
+	@/usr/include/bits/stdio2.h
+
+19 #i‚de‡
+_STDIO_H
+
+
+23 
+	$__•rötf_chk
+ (*
+__ª°ri˘
+ 
+__s
+, 
+__Êag
+, 
+size_t
+ 
+__¶í
+,
+
+24 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, ...Ë
+__THROW
+;
+
+25 
+	$__v•rötf_chk
+ (*
+__ª°ri˘
+ 
+__s
+, 
+__Êag
+, 
+size_t
+ 
+__¶í
+,
+
+26 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+27 
+_G_va_li°
+ 
+__≠
+Ë
+__THROW
+;
+
+29 #ifde‡
+__va_¨g_∑ck
+
+
+30 
+__f‹tify_fun˘i⁄
+ 
+
+31 
+	`__NTH
+ (
+	$•rötf
+ (*
+__ª°ri˘
+ 
+__s
+, c⁄° *__ª°ri˘ 
+__fmt
+, ...))
+
+33  
+	`__buûtö___•rötf_chk
+ (
+__s
+, 
+__USE_FORTIFY_LEVEL
+ - 1,
+
+34 
+	`__bos
+ (
+__s
+), 
+__fmt
+, 
+	`__va_¨g_∑ck
+ ());
+
+35 
+	}
+}
+
+36 #ñi‡!
+deföed
+ 
+__˝lu•lus
+
+
+37 
+	#•rötf
+(
+°r
+, ...) \
+
+38 
+	`__buûtö___•rötf_chk
+ (
+°r
+, 
+__USE_FORTIFY_LEVEL
+ - 1, 
+	`__bos
+ (str), \
+
+39 
+__VA_ARGS__
+)
+
+	)
+
+42 
+__f‹tify_fun˘i⁄
+ 
+
+43 
+__NTH
+ (
+	$v•rötf
+ (*
+__ª°ri˘
+ 
+__s
+, c⁄° *__ª°ri˘ 
+__fmt
+,
+
+44 
+_G_va_li°
+ 
+__≠
+))
+
+46  
+	`__buûtö___v•rötf_chk
+ (
+__s
+, 
+__USE_FORTIFY_LEVEL
+ - 1,
+
+47 
+	`__bos
+ (
+__s
+), 
+__fmt
+, 
+__≠
+);
+
+48 
+	}
+}
+
+50 #i‡
+deföed
+ 
+__USE_ISOC99
+ || deföed 
+__USE_UNIX98
+
+
+52 
+	$__¢¥ötf_chk
+ (*
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__n
+, 
+__Êag
+,
+
+53 
+size_t
+ 
+__¶í
+, c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+54 ...Ë
+__THROW
+;
+
+55 
+	$__v¢¥ötf_chk
+ (*
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__n
+, 
+__Êag
+,
+
+56 
+size_t
+ 
+__¶í
+, c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+57 
+_G_va_li°
+ 
+__≠
+Ë
+__THROW
+;
+
+59 #ifde‡
+__va_¨g_∑ck
+
+
+60 
+__f‹tify_fun˘i⁄
+ 
+
+61 
+	`__NTH
+ (
+	$¢¥ötf
+ (*
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__n
+,
+
+62 c⁄° *
+__ª°ri˘
+ 
+__fmt
+, ...))
+
+64  
+	`__buûtö___¢¥ötf_chk
+ (
+__s
+, 
+__n
+, 
+__USE_FORTIFY_LEVEL
+ - 1,
+
+65 
+	`__bos
+ (
+__s
+), 
+__fmt
+, 
+	`__va_¨g_∑ck
+ ());
+
+66 
+	}
+}
+
+67 #ñi‡!
+deföed
+ 
+__˝lu•lus
+
+
+68 
+	#¢¥ötf
+(
+°r
+, 
+Àn
+, ...) \
+
+69 
+	`__buûtö___¢¥ötf_chk
+ (
+°r
+, 
+Àn
+, 
+__USE_FORTIFY_LEVEL
+ - 1, 
+	`__bos
+ (str), \
+
+70 
+__VA_ARGS__
+)
+
+	)
+
+73 
+__f‹tify_fun˘i⁄
+ 
+
+74 
+__NTH
+ (
+	$v¢¥ötf
+ (*
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__n
+,
+
+75 c⁄° *
+__ª°ri˘
+ 
+__fmt
+, 
+_G_va_li°
+ 
+__≠
+))
+
+77  
+	`__buûtö___v¢¥ötf_chk
+ (
+__s
+, 
+__n
+, 
+__USE_FORTIFY_LEVEL
+ - 1,
+
+78 
+	`__bos
+ (
+__s
+), 
+__fmt
+, 
+__≠
+);
+
+79 
+	}
+}
+
+83 #i‡
+__USE_FORTIFY_LEVEL
+ > 1
+
+85 
+__Ârötf_chk
+ (
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+, 
+__Êag
+,
+
+86 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, ...);
+
+87 
+__¥ötf_chk
+ (
+__Êag
+, c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, ...);
+
+88 
+__vÂrötf_chk
+ (
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+, 
+__Êag
+,
+
+89 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+, 
+_G_va_li°
+ 
+__≠
+);
+
+90 
+__v¥ötf_chk
+ (
+__Êag
+, c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+91 
+_G_va_li°
+ 
+__≠
+);
+
+93 #ifde‡
+__va_¨g_∑ck
+
+
+94 
+__f‹tify_fun˘i⁄
+ 
+
+95 
+	$Ârötf
+ (
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+, c⁄° *__ª°ri˘ 
+__fmt
+, ...)
+
+97  
+	`__Ârötf_chk
+ (
+__°ªam
+, 
+__USE_FORTIFY_LEVEL
+ - 1, 
+__fmt
+,
+
+98 
+	`__va_¨g_∑ck
+ ());
+
+99 
+	}
+}
+
+101 
+__f‹tify_fun˘i⁄
+ 
+
+102 
+	$¥ötf
+ (c⁄° *
+__ª°ri˘
+ 
+__fmt
+, ...)
+
+104  
+	`__¥ötf_chk
+ (
+__USE_FORTIFY_LEVEL
+ - 1, 
+__fmt
+, 
+	`__va_¨g_∑ck
+ ());
+
+105 
+	}
+}
+
+106 #ñi‡!
+deföed
+ 
+__˝lu•lus
+
+
+107 
+	#¥ötf
+(...) \
+
+108 
+	`__¥ötf_chk
+ (
+__USE_FORTIFY_LEVEL
+ - 1, 
+__VA_ARGS__
+)
+
+	)
+
+109 
+	#Ârötf
+(
+°ªam
+, ...) \
+
+110 
+	`__Ârötf_chk
+ (
+°ªam
+, 
+__USE_FORTIFY_LEVEL
+ - 1, 
+__VA_ARGS__
+)
+
+	)
+
+113 
+__f‹tify_fun˘i⁄
+ 
+
+114 
+	$v¥ötf
+ (c⁄° *
+__ª°ri˘
+ 
+__fmt
+, 
+_G_va_li°
+ 
+__≠
+)
+
+116 #ifde‡
+__USE_EXTERN_INLINES
+
+
+117  
+	`__vÂrötf_chk
+ (
+°dout
+, 
+__USE_FORTIFY_LEVEL
+ - 1, 
+__fmt
+, 
+__≠
+);
+
+119  
+	`__v¥ötf_chk
+ (
+__USE_FORTIFY_LEVEL
+ - 1, 
+__fmt
+, 
+__≠
+);
+
+121 
+	}
+}
+
+123 
+__f‹tify_fun˘i⁄
+ 
+
+124 
+	$vÂrötf
+ (
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+,
+
+125 c⁄° *
+__ª°ri˘
+ 
+__fmt
+, 
+_G_va_li°
+ 
+__≠
+)
+
+127  
+	`__vÂrötf_chk
+ (
+__°ªam
+, 
+__USE_FORTIFY_LEVEL
+ - 1, 
+__fmt
+, 
+__≠
+);
+
+128 
+	}
+}
+
+130 #ifde‡
+__USE_XOPEN2K8
+
+
+131 
+	$__d¥ötf_chk
+ (
+__fd
+, 
+__Êag
+, c⁄° *
+__ª°ri˘
+ 
+__fmt
+,
+
+132 ...Ë
+	`__©åibuã__
+ ((
+	`__f‹m©__
+ (
+__¥ötf__
+, 3, 4)));
+
+133 
+	$__vd¥ötf_chk
+ (
+__fd
+, 
+__Êag
+,
+
+134 c⁄° *
+__ª°ri˘
+ 
+__fmt
+, 
+_G_va_li°
+ 
+__¨g
+)
+
+135 
+	`__©åibuã__
+ ((
+	`__f‹m©__
+ (
+__¥ötf__
+, 3, 0)));
+
+137 #ifde‡
+__va_¨g_∑ck
+
+
+138 
+__f‹tify_fun˘i⁄
+ 
+
+139 
+	$d¥ötf
+ (
+__fd
+, c⁄° *
+__ª°ri˘
+ 
+__fmt
+, ...)
+
+141  
+	`__d¥ötf_chk
+ (
+__fd
+, 
+__USE_FORTIFY_LEVEL
+ - 1, 
+__fmt
+,
+
+142 
+	`__va_¨g_∑ck
+ ());
+
+143 
+	}
+}
+
+144 #ñi‡!
+deföed
+ 
+__˝lu•lus
+
+
+145 
+	#d¥ötf
+(
+fd
+, ...) \
+
+146 
+	`__d¥ötf_chk
+ (
+fd
+, 
+__USE_FORTIFY_LEVEL
+ - 1, 
+__VA_ARGS__
+)
+
+	)
+
+149 
+__f‹tify_fun˘i⁄
+ 
+
+150 
+	$vd¥ötf
+ (
+__fd
+, c⁄° *
+__ª°ri˘
+ 
+__fmt
+, 
+_G_va_li°
+ 
+__≠
+)
+
+152  
+	`__vd¥ötf_chk
+ (
+__fd
+, 
+__USE_FORTIFY_LEVEL
+ - 1, 
+__fmt
+, 
+__≠
+);
+
+153 
+	}
+}
+
+156 #ifde‡
+__USE_GNU
+
+
+158 
+	$__a•rötf_chk
+ (**
+__ª°ri˘
+ 
+__±r
+, 
+__Êag
+,
+
+159 c⁄° *
+__ª°ri˘
+ 
+__fmt
+, ...)
+
+160 
+__THROW
+ 
+	`__©åibuã__
+ ((
+	$__f‹m©__
+ (
+__¥ötf__
+, 3, 4))Ë
+__wur
+;
+
+161 
+	$__va•rötf_chk
+ (**
+__ª°ri˘
+ 
+__±r
+, 
+__Êag
+,
+
+162 c⁄° *
+__ª°ri˘
+ 
+__fmt
+, 
+_G_va_li°
+ 
+__¨g
+)
+
+163 
+__THROW
+ 
+	`__©åibuã__
+ ((
+	$__f‹m©__
+ (
+__¥ötf__
+, 3, 0))Ë
+__wur
+;
+
+164 
+	$__ob°ack_¥ötf_chk
+ (
+ob°ack
+ *
+__ª°ri˘
+ 
+__ob°ack
+,
+
+165 
+__Êag
+, c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+167 
+__THROW
+ 
+	`__©åibuã__
+ ((
+	`__f‹m©__
+ (
+__¥ötf__
+, 3, 4)));
+
+168 
+	$__ob°ack_v¥ötf_chk
+ (
+ob°ack
+ *
+__ª°ri˘
+ 
+__ob°ack
+,
+
+169 
+__Êag
+,
+
+170 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+171 
+_G_va_li°
+ 
+__¨gs
+)
+
+172 
+__THROW
+ 
+	`__©åibuã__
+ ((
+	`__f‹m©__
+ (
+__¥ötf__
+, 3, 0)));
+
+174 #ifde‡
+__va_¨g_∑ck
+
+
+175 
+__f‹tify_fun˘i⁄
+ 
+
+176 
+	`__NTH
+ (
+	$a•rötf
+ (**
+__ª°ri˘
+ 
+__±r
+, c⁄° *__ª°ri˘ 
+__fmt
+, ...))
+
+178  
+	`__a•rötf_chk
+ (
+__±r
+, 
+__USE_FORTIFY_LEVEL
+ - 1, 
+__fmt
+,
+
+179 
+	`__va_¨g_∑ck
+ ());
+
+180 
+	}
+}
+
+182 
+__f‹tify_fun˘i⁄
+ 
+
+183 
+__NTH
+ (
+	$__a•rötf
+ (**
+__ª°ri˘
+ 
+__±r
+, c⁄° *__ª°ri˘ 
+__fmt
+,
+
+186  
+	`__a•rötf_chk
+ (
+__±r
+, 
+__USE_FORTIFY_LEVEL
+ - 1, 
+__fmt
+,
+
+187 
+	`__va_¨g_∑ck
+ ());
+
+188 
+	}
+}
+
+190 
+__f‹tify_fun˘i⁄
+ 
+
+191 
+__NTH
+ (
+	$ob°ack_¥ötf
+ (
+ob°ack
+ *
+__ª°ri˘
+ 
+__ob°ack
+,
+
+192 c⁄° *
+__ª°ri˘
+ 
+__fmt
+, ...))
+
+194  
+	`__ob°ack_¥ötf_chk
+ (
+__ob°ack
+, 
+__USE_FORTIFY_LEVEL
+ - 1, 
+__fmt
+,
+
+195 
+	`__va_¨g_∑ck
+ ());
+
+196 
+	}
+}
+
+197 #ñi‡!
+deföed
+ 
+__˝lu•lus
+
+
+198 
+	#a•rötf
+(
+±r
+, ...) \
+
+199 
+	`__a•rötf_chk
+ (
+±r
+, 
+__USE_FORTIFY_LEVEL
+ - 1, 
+__VA_ARGS__
+)
+
+	)
+
+200 
+	#__a•rötf
+(
+±r
+, ...) \
+
+201 
+	`__a•rötf_chk
+ (
+±r
+, 
+__USE_FORTIFY_LEVEL
+ - 1, 
+__VA_ARGS__
+)
+
+	)
+
+202 
+	#ob°ack_¥ötf
+(
+ob°ack
+, ...) \
+
+203 
+	`__ob°ack_¥ötf_chk
+ (
+ob°ack
+, 
+__USE_FORTIFY_LEVEL
+ - 1, 
+__VA_ARGS__
+)
+
+	)
+
+206 
+__f‹tify_fun˘i⁄
+ 
+
+207 
+__NTH
+ (
+	$va•rötf
+ (**
+__ª°ri˘
+ 
+__±r
+, c⁄° *__ª°ri˘ 
+__fmt
+,
+
+208 
+_G_va_li°
+ 
+__≠
+))
+
+210  
+	`__va•rötf_chk
+ (
+__±r
+, 
+__USE_FORTIFY_LEVEL
+ - 1, 
+__fmt
+, 
+__≠
+);
+
+211 
+	}
+}
+
+213 
+__f‹tify_fun˘i⁄
+ 
+
+214 
+__NTH
+ (
+	$ob°ack_v¥ötf
+ (
+ob°ack
+ *
+__ª°ri˘
+ 
+__ob°ack
+,
+
+215 c⁄° *
+__ª°ri˘
+ 
+__fmt
+, 
+_G_va_li°
+ 
+__≠
+))
+
+217  
+	`__ob°ack_v¥ötf_chk
+ (
+__ob°ack
+, 
+__USE_FORTIFY_LEVEL
+ - 1, 
+__fmt
+,
+
+218 
+__≠
+);
+
+219 
+	}
+}
+
+225 #i‡!
+deföed
+ 
+__USE_ISOC11
+ \
+
+226 || (
+deföed
+ 
+	g__˝lu•lus
+ && __˝lu•lu†<201103L && !deföed 
+__USE_GNU
+)
+
+227 *
+	$__gës_chk
+ (*
+__°r
+, 
+size_t
+Ë
+__wur
+;
+
+228 *
+	`__REDIRECT
+ (
+__gës_w¨n
+, (*
+__°r
+), 
+gës
+)
+
+229 
+__wur
+ 
+	`__w¨«âr
+ ("please use fgets or getline instead, gets can't "
+
+232 
+__f‹tify_fun˘i⁄
+ 
+__wur
+ *
+
+233 
+	$gës
+ (*
+__°r
+)
+
+235 i‡(
+	`__bos
+ (
+__°r
+Ë!(
+size_t
+) -1)
+
+236  
+	`__gës_chk
+ (
+__°r
+, 
+	`__bos
+ (__str));
+
+237  
+	`__gës_w¨n
+ (
+__°r
+);
+
+238 
+	}
+}
+
+241 *
+	$__fgës_chk
+ (*
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__size
+, 
+__n
+,
+
+242 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+Ë
+__wur
+;
+
+243 *
+	`__REDIRECT
+ (
+__fgës_Æüs
+,
+
+244 (*
+__ª°ri˘
+ 
+__s
+, 
+__n
+,
+
+245 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+), 
+fgës
+Ë
+__wur
+;
+
+246 *
+	`__REDIRECT
+ (
+__fgës_chk_w¨n
+,
+
+247 (*
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__size
+, 
+__n
+,
+
+248 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+), 
+__fgës_chk
+)
+
+249 
+__wur
+ 
+	`__w¨«âr
+ ("fgets called with bigger sizeÅhanÜength "
+
+252 
+__f‹tify_fun˘i⁄
+ 
+__wur
+ *
+
+253 
+	$fgës
+ (*
+__ª°ri˘
+ 
+__s
+, 
+__n
+, 
+FILE
+ *__ª°ri˘ 
+__°ªam
+)
+
+255 i‡(
+	`__bos
+ (
+__s
+Ë!(
+size_t
+) -1)
+
+257 i‡(!
+	`__buûtö_c⁄°™t_p
+ (
+__n
+) || __n <= 0)
+
+258  
+	`__fgës_chk
+ (
+__s
+, 
+	`__bos
+ (__s), 
+__n
+, 
+__°ªam
+);
+
+260 i‡((
+size_t
+Ë
+__n
+ > 
+	`__bos
+ (
+__s
+))
+
+261  
+	`__fgës_chk_w¨n
+ (
+__s
+, 
+	`__bos
+ (__s), 
+__n
+, 
+__°ªam
+);
+
+263  
+	`__fgës_Æüs
+ (
+__s
+, 
+__n
+, 
+__°ªam
+);
+
+264 
+	}
+}
+
+266 
+size_t
+ 
+	$__‰ód_chk
+ (*
+__ª°ri˘
+ 
+__±r
+, 
+size_t
+ 
+__±æí
+,
+
+267 
+size_t
+ 
+__size
+, size_à
+__n
+,
+
+268 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+Ë
+__wur
+;
+
+269 
+size_t
+ 
+	`__REDIRECT
+ (
+__‰ód_Æüs
+,
+
+270 (*
+__ª°ri˘
+ 
+__±r
+, 
+size_t
+ 
+__size
+,
+
+271 
+size_t
+ 
+__n
+, 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+),
+
+272 
+‰ód
+Ë
+__wur
+;
+
+273 
+size_t
+ 
+	`__REDIRECT
+ (
+__‰ód_chk_w¨n
+,
+
+274 (*
+__ª°ri˘
+ 
+__±r
+, 
+size_t
+ 
+__±æí
+,
+
+275 
+size_t
+ 
+__size
+, size_à
+__n
+,
+
+276 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+),
+
+277 
+__‰ód_chk
+)
+
+278 
+__wur
+ 
+	`__w¨«âr
+ ("fread called with bigger size *ÇmembÅhanÜength "
+
+281 
+__f‹tify_fun˘i⁄
+ 
+__wur
+ 
+size_t
+
+
+282 
+	$‰ód
+ (*
+__ª°ri˘
+ 
+__±r
+, 
+size_t
+ 
+__size
+, size_à
+__n
+,
+
+283 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+)
+
+285 i‡(
+	`__bos0
+ (
+__±r
+Ë!(
+size_t
+) -1)
+
+287 i‡(!
+	`__buûtö_c⁄°™t_p
+ (
+__size
+)
+
+288 || !
+	`__buûtö_c⁄°™t_p
+ (
+__n
+)
+
+289 || (
+__size
+ | 
+__n
+Ë>(((
+size_t
+) 1) << (8 *  (size_t) / 2)))
+
+290  
+	`__‰ód_chk
+ (
+__±r
+, 
+	`__bos0
+ (__±r), 
+__size
+, 
+__n
+, 
+__°ªam
+);
+
+292 i‡(
+__size
+ * 
+__n
+ > 
+	`__bos0
+ (
+__±r
+))
+
+293  
+	`__‰ód_chk_w¨n
+ (
+__±r
+, 
+	`__bos0
+ (__±r), 
+__size
+, 
+__n
+, 
+__°ªam
+);
+
+295  
+	`__‰ód_Æüs
+ (
+__±r
+, 
+__size
+, 
+__n
+, 
+__°ªam
+);
+
+296 
+	}
+}
+
+298 #ifde‡
+__USE_GNU
+
+
+299 *
+	$__fgës_u∆ocked_chk
+ (*
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__size
+,
+
+300 
+__n
+, 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+Ë
+__wur
+;
+
+301 *
+	`__REDIRECT
+ (
+__fgës_u∆ocked_Æüs
+,
+
+302 (*
+__ª°ri˘
+ 
+__s
+, 
+__n
+,
+
+303 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+), 
+fgës_u∆ocked
+Ë
+__wur
+;
+
+304 *
+	`__REDIRECT
+ (
+__fgës_u∆ocked_chk_w¨n
+,
+
+305 (*
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__size
+, 
+__n
+,
+
+306 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+), 
+__fgës_u∆ocked_chk
+)
+
+307 
+__wur
+ 
+	`__w¨«âr
+ ("fgets_unlocked called with bigger sizeÅhanÜength "
+
+310 
+__f‹tify_fun˘i⁄
+ 
+__wur
+ *
+
+311 
+	$fgës_u∆ocked
+ (*
+__ª°ri˘
+ 
+__s
+, 
+__n
+, 
+FILE
+ *__ª°ri˘ 
+__°ªam
+)
+
+313 i‡(
+	`__bos
+ (
+__s
+Ë!(
+size_t
+) -1)
+
+315 i‡(!
+	`__buûtö_c⁄°™t_p
+ (
+__n
+) || __n <= 0)
+
+316  
+	`__fgës_u∆ocked_chk
+ (
+__s
+, 
+	`__bos
+ (__s), 
+__n
+, 
+__°ªam
+);
+
+318 i‡((
+size_t
+Ë
+__n
+ > 
+	`__bos
+ (
+__s
+))
+
+319  
+	`__fgës_u∆ocked_chk_w¨n
+ (
+__s
+, 
+	`__bos
+ (__s), 
+__n
+, 
+__°ªam
+);
+
+321  
+	`__fgës_u∆ocked_Æüs
+ (
+__s
+, 
+__n
+, 
+__°ªam
+);
+
+322 
+	}
+}
+
+325 #ifde‡
+__USE_MISC
+
+
+326 #unde‡
+‰ód_u∆ocked
+
+
+327 
+size_t
+ 
+	$__‰ód_u∆ocked_chk
+ (*
+__ª°ri˘
+ 
+__±r
+, 
+size_t
+ 
+__±æí
+,
+
+328 
+size_t
+ 
+__size
+, size_à
+__n
+,
+
+329 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+Ë
+__wur
+;
+
+330 
+size_t
+ 
+	`__REDIRECT
+ (
+__‰ód_u∆ocked_Æüs
+,
+
+331 (*
+__ª°ri˘
+ 
+__±r
+, 
+size_t
+ 
+__size
+,
+
+332 
+size_t
+ 
+__n
+, 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+),
+
+333 
+‰ód_u∆ocked
+Ë
+__wur
+;
+
+334 
+size_t
+ 
+	`__REDIRECT
+ (
+__‰ód_u∆ocked_chk_w¨n
+,
+
+335 (*
+__ª°ri˘
+ 
+__±r
+, 
+size_t
+ 
+__±æí
+,
+
+336 
+size_t
+ 
+__size
+, size_à
+__n
+,
+
+337 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+),
+
+338 
+__‰ód_u∆ocked_chk
+)
+
+339 
+__wur
+ 
+	`__w¨«âr
+ ("fread_unlocked called with bigger size *ÇmembÅhan "
+
+342 
+__f‹tify_fun˘i⁄
+ 
+__wur
+ 
+size_t
+
+
+343 
+	$‰ód_u∆ocked
+ (*
+__ª°ri˘
+ 
+__±r
+, 
+size_t
+ 
+__size
+, size_à
+__n
+,
+
+344 
+FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+)
+
+346 i‡(
+	`__bos0
+ (
+__±r
+Ë!(
+size_t
+) -1)
+
+348 i‡(!
+	`__buûtö_c⁄°™t_p
+ (
+__size
+)
+
+349 || !
+	`__buûtö_c⁄°™t_p
+ (
+__n
+)
+
+350 || (
+__size
+ | 
+__n
+Ë>(((
+size_t
+) 1) << (8 *  (size_t) / 2)))
+
+351  
+	`__‰ód_u∆ocked_chk
+ (
+__±r
+, 
+	`__bos0
+ (__±r), 
+__size
+, 
+__n
+,
+
+352 
+__°ªam
+);
+
+354 i‡(
+__size
+ * 
+__n
+ > 
+	`__bos0
+ (
+__±r
+))
+
+355  
+	`__‰ód_u∆ocked_chk_w¨n
+ (
+__±r
+, 
+	`__bos0
+ (__±r), 
+__size
+, 
+__n
+,
+
+356 
+__°ªam
+);
+
+359 #ifde‡
+__USE_EXTERN_INLINES
+
+
+360 i‡(
+	`__buûtö_c⁄°™t_p
+ (
+__size
+)
+
+361 && 
+	`__buûtö_c⁄°™t_p
+ (
+__n
+)
+
+362 && (
+__size
+ | 
+__n
+Ë< (((
+size_t
+) 1) << (8 *  (size_t) / 2))
+
+363 && 
+__size
+ * 
+__n
+ <= 8)
+
+365 
+size_t
+ 
+__˙t
+ = 
+__size
+ * 
+__n
+;
+
+366 *
+__˝å
+ = (*Ë
+__±r
+;
+
+367 i‡(
+__˙t
+ == 0)
+
+370 ; 
+__˙t
+ > 0; --__cnt)
+
+372 
+__c
+ = 
+	`_IO_gëc_u∆ocked
+ (
+__°ªam
+);
+
+373 i‡(
+__c
+ =
+EOF
+)
+
+375 *
+__˝å
+++ = 
+__c
+;
+
+377  (
+__˝å
+ - (*Ë
+__±r
+Ë/ 
+__size
+;
+
+380  
+	`__‰ód_u∆ocked_Æüs
+ (
+__±r
+, 
+__size
+, 
+__n
+, 
+__°ªam
+);
+
+381 
+	}
+}
+
+	@/usr/include/bits/stdio_lim.h
+
+18 #i‡!
+deföed
+ 
+_STDIO_H
+ && !deföed 
+__√ed_FOPEN_MAX
+ && !deföed 
+__√ed_IOV_MAX
+
+
+22 #ifde‡
+_STDIO_H
+
+
+23 
+	#L_tm≤am
+ 20
+
+	)
+
+24 
+	#TMP_MAX
+ 238328
+
+	)
+
+25 
+	#FILENAME_MAX
+ 4096
+
+	)
+
+27 #ifde‡
+__USE_POSIX
+
+
+28 
+	#L_˘îmid
+ 9
+
+	)
+
+29 #i‡!
+deföed
+ 
+__USE_XOPEN2K
+ || deföed 
+__USE_GNU
+
+
+30 
+	#L_cu£rid
+ 9
+
+	)
+
+35 #i‡
+deföed
+ 
+__√ed_FOPEN_MAX
+ || deföed 
+_STDIO_H
+
+
+36 #unde‡
+FOPEN_MAX
+
+
+37 
+	#FOPEN_MAX
+ 16
+
+	)
+
+40 #i‡
+deföed
+ 
+__√ed_IOV_MAX
+ && !deföed 
+IOV_MAX
+
+
+41 
+	#IOV_MAX
+ 1024
+
+	)
+
+	@/usr/include/bits/string.h
+
+19 #i‚de‡
+_STRING_H
+
+
+24 
+	#_STRING_INLINE_u«lig√d
+ 1
+
+	)
+
+27 
+	#_HAVE_STRING_ARCH_memp˝y
+ 1
+
+	)
+
+31 #i‡!
+deföed
+ 
+__x86_64__
+ && (deföed 
+__i486__
+ || deföed 
+__≥¡ium__
+ \
+
+32 || 
+deföed
+ 
+	g__≥¡ium¥o__
+ || deföed 
+	g__≥¡ium4__
+ \
+
+33 || 
+deföed
+ 
+	g__noc⁄a__
+ || deföed 
+	g__©om__
+ \
+
+34 || 
+deföed
+ 
+	g__c‹e2__
+ || deföed 
+	g__c‹ei7__
+ \
+
+35 || 
+deföed
+ 
+	g__ßndybridge__
+ || deföed 
+	g__haswñl__
+ \
+
+36 || 
+deföed
+ 
+	g__b⁄√Œ__
+ || deföed 
+	g__sûvîm⁄t__
+ \
+
+37 || 
+deföed
+ 
+	g__k6__
+ || deföed 
+	g__geode__
+ \
+
+38 || 
+deföed
+ 
+	g__k8__
+ || deföed 
+	g__©hl⁄__
+ \
+
+39 || 
+deföed
+ 
+	g__amdÁm10__
+ || deföed 
+	g__bdvî1__
+ \
+
+40 || 
+deföed
+ 
+	g__bdvî2__
+ || deföed 
+	g__bdvî3__
+ \
+
+41 || 
+deföed
+ 
+	g__bdvî4__
+ || deföed 
+	g__btvî1__
+ \
+
+42 || 
+deföed
+ 
+	g__btvî2__
+)
+
+46 #i‡!
+deföed
+ 
+__NO_STRING_INLINES
+ && deföed 
+__USE_STRING_INLINES
+ \
+
+47 && 
+deföed
+ 
+	g__GNUC__
+ && __GNUC__ >= 2
+
+49 #i‚de‡
+__STRING_INLINE
+
+
+50 #i‚de‡
+__exã∫_ölöe
+
+
+51 
+	#__STRING_INLINE
+ 
+ölöe
+
+
+	)
+
+53 
+	#__STRING_INLINE
+ 
+__exã∫_ölöe
+
+
+	)
+
+58 
+	#__STRING_SMALL_GET16
+(
+§c
+, 
+idx
+) \
+
+59 ((((c⁄° *Ë(
+§c
+))[
+idx
+ + 1] << 8) \
+
+60 | ((c⁄° *Ë(
+§c
+))[
+idx
+])
+
+	)
+
+61 
+	#__STRING_SMALL_GET32
+(
+§c
+, 
+idx
+) \
+
+62 (((((c⁄° *Ë(
+§c
+))[
+idx
+ + 3] << 8 \
+
+63 | ((c⁄° *Ë(
+§c
+))[
+idx
+ + 2]) << 8 \
+
+64 | ((c⁄° *Ë(
+§c
+))[
+idx
+ + 1]) << 8 \
+
+65 | ((c⁄° *Ë(
+§c
+))[
+idx
+])
+
+	)
+
+69 
+	#_HAVE_STRING_ARCH_mem˝y
+ 1
+
+	)
+
+70 
+	#mem˝y
+(
+de°
+, 
+§c
+, 
+n
+) \
+
+71 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+n
+) \
+
+72 ? 
+	`__mem˝y_c
+ ((
+de°
+), (
+§c
+), (
+n
+)) \
+
+73 : 
+	`__mem˝y_g
+ ((
+de°
+), (
+§c
+), (
+n
+))))
+
+	)
+
+74 
+	#__mem˝y_c
+(
+de°
+, 
+§c
+, 
+n
+) \
+
+75 ((
+n
+) == 0 \
+
+76 ? (
+de°
+) \
+
+77 : (((
+n
+) % 4 == 0) \
+
+78 ? 
+	`__mem˝y_by4
+ (
+de°
+, 
+§c
+, 
+n
+) \
+
+79 : (((
+n
+) % 2 == 0) \
+
+80 ? 
+	`__mem˝y_by2
+ (
+de°
+, 
+§c
+, 
+n
+) \
+
+81 : 
+	`__mem˝y_g
+ (
+de°
+, 
+§c
+, 
+n
+))))
+
+	)
+
+83 
+__STRING_INLINE
+ *
+__mem˝y_by4
+ (*
+__de°
+, c⁄° *
+__§c
+,
+
+84 
+size_t
+ 
+__n
+);
+
+86 
+__STRING_INLINE
+ *
+
+87 
+	$__mem˝y_by4
+ (*
+__de°
+, c⁄° *
+__§c
+, 
+size_t
+ 
+__n
+)
+
+89 
+__d0
+, 
+__d1
+;
+
+90 *
+__tmp
+ = 
+__de°
+;
+
+91 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+99 : "=&r" (
+__d0
+), "=&r" (
+__tmp
+), "=&r" (
+__§c
+), "=&r" (
+__d1
+)
+
+100 : "1" (
+__tmp
+), "2" (
+__§c
+), "3" (
+__n
+ / 4)
+
+102  
+__de°
+;
+
+103 
+	}
+}
+
+105 
+__STRING_INLINE
+ *
+__mem˝y_by2
+ (*
+__de°
+, c⁄° *
+__§c
+,
+
+106 
+size_t
+ 
+__n
+);
+
+108 
+__STRING_INLINE
+ *
+
+109 
+	$__mem˝y_by2
+ (*
+__de°
+, c⁄° *
+__§c
+, 
+size_t
+ 
+__n
+)
+
+111 
+__d0
+, 
+__d1
+;
+
+112 *
+__tmp
+ = 
+__de°
+;
+
+113 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+126 : "=&q" (
+__d0
+), "=&r" (
+__tmp
+), "=&r" (
+__§c
+), "=&r" (
+__d1
+)
+
+127 : "1" (
+__tmp
+), "2" (
+__§c
+), "3" (
+__n
+ / 2)
+
+129  
+__de°
+;
+
+130 
+	}
+}
+
+132 
+__STRING_INLINE
+ *
+__mem˝y_g
+ (*
+__de°
+, c⁄° *
+__§c
+, 
+size_t
+ 
+__n
+);
+
+134 
+__STRING_INLINE
+ *
+
+135 
+	$__mem˝y_g
+ (*
+__de°
+, c⁄° *
+__§c
+, 
+size_t
+ 
+__n
+)
+
+137 
+__d0
+, 
+__d1
+, 
+__d2
+;
+
+138 *
+__tmp
+ = 
+__de°
+;
+
+139 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+150 : "=&c" (
+__d0
+), "=&D" (
+__d1
+), "=&S" (
+__d2
+),
+
+151 "=m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__n
+]; } *)
+__de°
+)
+
+152 : "0" (
+__n
+), "1" (
+__tmp
+), "2" (
+__§c
+),
+
+153 "m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__n
+]; } *)
+__§c
+)
+
+155  
+__de°
+;
+
+156 
+	}
+}
+
+158 
+	#_HAVE_STRING_ARCH_memmove
+ 1
+
+	)
+
+159 #i‚de‡
+_FORCE_INLINES
+
+
+162 
+	#memmove
+(
+de°
+, 
+§c
+, 
+n
+Ë
+	`__memmove_g
+ (de°, src,Ç)
+
+	)
+
+164 
+__STRING_INLINE
+ *
+	$__memmove_g
+ (*, c⁄° *, 
+size_t
+)
+
+165 
+	`__asm__
+ ("memmove");
+
+167 
+__STRING_INLINE
+ *
+
+168 
+	$__memmove_g
+ (*
+__de°
+, c⁄° *
+__§c
+, 
+size_t
+ 
+__n
+)
+
+170 
+__d0
+, 
+__d1
+, 
+__d2
+;
+
+171 *
+__tmp
+ = 
+__de°
+;
+
+172 i‡(
+__de°
+ < 
+__§c
+)
+
+173 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+176 : "=&c" (
+__d0
+), "=&S" (
+__d1
+), "=&D" (
+__d2
+),
+
+177 "=m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__n
+]; } *)
+__de°
+)
+
+178 : "0" (
+__n
+), "1" (
+__§c
+), "2" (
+__tmp
+),
+
+179 "m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__n
+]; } *)
+__§c
+));
+
+181 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+187 : "=&c" (
+__d0
+), "=&S" (
+__d1
+), "=&D" (
+__d2
+),
+
+188 "=m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__n
+]; } *)
+__de°
+)
+
+189 : "0" (
+__n
+), "1" (__¿+ (c⁄° *Ë
+__§c
+),
+
+190 "2" (
+__n
+ + (*Ë
+__tmp
+),
+
+191 "m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__n
+]; } *)
+__§c
+));
+
+192  
+__de°
+;
+
+193 
+	}
+}
+
+197 
+	#_HAVE_STRING_ARCH_memcmp
+ 1
+
+	)
+
+198 #i‚de‡
+_FORCE_INLINES
+
+
+199 #i‚de‡
+__PIC__
+
+
+201 
+__STRING_INLINE
+ 
+
+202 
+	$memcmp
+ (c⁄° *
+__s1
+, c⁄° *
+__s2
+, 
+size_t
+ 
+__n
+)
+
+204 
+__d0
+, 
+__d1
+, 
+__d2
+;
+
+205 
+__ªs
+;
+
+206 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+214 : "=&a" (
+__ªs
+), "=&S" (
+__d0
+), "=&D" (
+__d1
+), "=&c" (
+__d2
+)
+
+215 : "0" (0), "1" (
+__s1
+), "2" (
+__s2
+), "3" (
+__n
+),
+
+216 "m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__n
+]; } *)
+__s1
+),
+
+217 "m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__n
+]; } *)
+__s2
+)
+
+219  
+__ªs
+;
+
+220 
+	}
+}
+
+225 
+	#_HAVE_STRING_ARCH_mem£t
+ 1
+
+	)
+
+226 
+	#_USE_STRING_ARCH_mem£t
+ 1
+
+	)
+
+227 
+	#mem£t
+(
+s
+, 
+c
+, 
+n
+) \
+
+228 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+n
+) && (n) <= 16 \
+
+229 ? ((
+n
+) == 1 \
+
+230 ? 
+	`__mem£t_c1
+ ((
+s
+), (
+c
+)) \
+
+231 : 
+	`__mem£t_gc
+ ((
+s
+), (
+c
+), (
+n
+))) \
+
+232 : (
+	`__buûtö_c⁄°™t_p
+ (
+c
+) \
+
+233 ? (
+	`__buûtö_c⁄°™t_p
+ (
+n
+) \
+
+234 ? 
+	`__mem£t_c˙
+ ((
+s
+), (
+c
+), (
+n
+)) \
+
+235 : 
+	`mem£t
+ ((
+s
+), (
+c
+), (
+n
+))) \
+
+236 : (
+	`__buûtö_c⁄°™t_p
+ (
+n
+) \
+
+237 ? 
+	`__mem£t_g˙
+ ((
+s
+), (
+c
+), (
+n
+)) \
+
+238 : 
+	`mem£t
+ ((
+s
+), (
+c
+), (
+n
+))))))
+
+	)
+
+240 
+	#__mem£t_c1
+(
+s
+, 
+c
+Ë({ *
+__s
+ = (s); \
+
+241 *((*Ë
+__s
+Ë(Ë(
+c
+); \
+
+242 
+__s
+; })
+
+	)
+
+244 
+	#__mem£t_gc
+(
+s
+, 
+c
+, 
+n
+) \
+
+245 ({ *
+__s
+ = (
+s
+); \
+
+247 
+__ui
+; \
+
+248 
+__usi
+; \
+
+249 
+__uc
+; \
+
+250 } *
+__u
+ = 
+__s
+; \
+
+251 
+__c
+ = ((Ë((Ë(
+c
+))) * 0x01010101; \
+
+257 i‡((
+n
+) == 3 || (n) >= 5) \
+
+258 
+__asm__
+ 
+	`__vﬁ©ûe__
+ ("" : "Ù" (
+__c
+) : "0" (__c)); \
+
+261 
+n
+) \
+
+264 
+__u
+->
+__ui
+ = 
+__c
+; \
+
+265 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+267 
+__u
+->
+__ui
+ = 
+__c
+; \
+
+268 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+270 
+__u
+->
+__ui
+ = 
+__c
+; \
+
+271 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+273 
+__u
+->
+__usi
+ = (Ë
+__c
+; \
+
+274 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 2); \
+
+275 
+__u
+->
+__uc
+ = (Ë
+__c
+; \
+
+279 
+__u
+->
+__ui
+ = 
+__c
+; \
+
+280 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+282 
+__u
+->
+__ui
+ = 
+__c
+; \
+
+283 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+285 
+__u
+->
+__ui
+ = 
+__c
+; \
+
+286 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+288 
+__u
+->
+__usi
+ = (Ë
+__c
+; \
+
+292 
+__u
+->
+__ui
+ = 
+__c
+; \
+
+293 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+295 
+__u
+->
+__ui
+ = 
+__c
+; \
+
+296 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+298 
+__u
+->
+__ui
+ = 
+__c
+; \
+
+299 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+301 
+__u
+->
+__uc
+ = (Ë
+__c
+; \
+
+305 
+__u
+->
+__ui
+ = 
+__c
+; \
+
+306 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+308 
+__u
+->
+__ui
+ = 
+__c
+; \
+
+309 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+311 
+__u
+->
+__ui
+ = 
+__c
+; \
+
+312 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+314 
+__u
+->
+__ui
+ = 
+__c
+; \
+
+319 
+__s
+; })
+
+	)
+
+321 
+	#__mem£t_c˙
+(
+s
+, 
+c
+, 
+n
+) \
+
+322 (((
+n
+) % 4 == 0) \
+
+323 ? 
+	`__mem£t_c˙_by4
+ (
+s
+, ((Ë((Ë(
+c
+))) * 0x01010101,\
+
+324 
+n
+) \
+
+325 : (((
+n
+) % 2 == 0) \
+
+326 ? 
+	`__mem£t_c˙_by2
+ (
+s
+, \
+
+327 ((Ë((Ë(
+c
+))) * 0x01010101,\
+
+328 
+n
+) \
+
+329 : 
+	`mem£t
+ (
+s
+, 
+c
+, 
+n
+)))
+
+	)
+
+331 
+__STRING_INLINE
+ *
+__mem£t_c˙_by4
+ (*
+__s
+, 
+__c
+,
+
+332 
+size_t
+ 
+__n
+);
+
+334 
+__STRING_INLINE
+ *
+
+335 
+	$__mem£t_c˙_by4
+ (*
+__s
+, 
+__c
+, 
+size_t
+ 
+__n
+)
+
+337 *
+__tmp
+ = 
+__s
+;
+
+338 
+__d0
+;
+
+339 #ifde‡
+__i686__
+
+
+340 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+343 : "=&a" (
+__c
+), "=&D" (
+__tmp
+), "=&c" (
+__d0
+),
+
+344 "=m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__n
+]; } *)
+__s
+)
+
+345 : "0" ((Ë
+__c
+), "1" (
+__tmp
+), "2" (
+__n
+ / 4)
+
+348 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+354 : "=&r" (
+__c
+), "=&r" (
+__tmp
+), "=&r" (
+__d0
+),
+
+355 "=m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__n
+]; } *)
+__s
+)
+
+356 : "0" ((Ë
+__c
+), "1" (
+__tmp
+), "2" (
+__n
+ / 4)
+
+359  
+__s
+;
+
+360 
+	}
+}
+
+362 
+__STRING_INLINE
+ *
+__mem£t_c˙_by2
+ (*
+__s
+, 
+__c
+,
+
+363 
+size_t
+ 
+__n
+);
+
+365 
+__STRING_INLINE
+ *
+
+366 
+	$__mem£t_c˙_by2
+ (*
+__s
+, 
+__c
+, 
+size_t
+ 
+__n
+)
+
+368 
+__d0
+, 
+__d1
+;
+
+369 *
+__tmp
+ = 
+__s
+;
+
+370 #ifde‡
+__i686__
+
+
+371 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+375 : "=&a" (
+__d0
+), "=&D" (
+__tmp
+), "=&c" (
+__d1
+),
+
+376 "=m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__n
+]; } *)
+__s
+)
+
+377 : "0" ((Ë
+__c
+), "1" (
+__tmp
+), "2" (
+__n
+ / 4)
+
+380 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+386 : "=&q" (
+__d0
+), "=&r" (
+__tmp
+), "=&r" (
+__d1
+),
+
+387 "=m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__n
+]; } *)
+__s
+)
+
+388 : "0" ((Ë
+__c
+), "1" (
+__tmp
+), "2" (
+__n
+ / 4)
+
+391  
+__s
+;
+
+392 
+	}
+}
+
+394 
+	#__mem£t_g˙
+(
+s
+, 
+c
+, 
+n
+) \
+
+395 (((
+n
+) % 4 == 0) \
+
+396 ? 
+	`__mem£t_g˙_by4
+ (
+s
+, 
+c
+, 
+n
+) \
+
+397 : (((
+n
+) % 2 == 0) \
+
+398 ? 
+	`__mem£t_g˙_by2
+ (
+s
+, 
+c
+, 
+n
+) \
+
+399 : 
+	`mem£t
+ (
+s
+, 
+c
+, 
+n
+)))
+
+	)
+
+401 
+__STRING_INLINE
+ *
+__mem£t_g˙_by4
+ (*
+__s
+, 
+__c
+, 
+size_t
+ 
+__n
+);
+
+403 
+__STRING_INLINE
+ *
+
+404 
+	$__mem£t_g˙_by4
+ (*
+__s
+, 
+__c
+, 
+size_t
+ 
+__n
+)
+
+406 *
+__tmp
+ = 
+__s
+;
+
+407 
+__d0
+;
+
+408 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+418 : "=&q" (
+__c
+), "=&r" (
+__tmp
+), "=&r" (
+__d0
+),
+
+419 "=m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__n
+]; } *)
+__s
+)
+
+420 : "0" ((Ë
+__c
+), "1" (
+__tmp
+), "2" (
+__n
+ / 4)
+
+422  
+__s
+;
+
+423 
+	}
+}
+
+425 
+__STRING_INLINE
+ *
+__mem£t_g˙_by2
+ (*
+__s
+, 
+__c
+, 
+size_t
+ 
+__n
+);
+
+427 
+__STRING_INLINE
+ *
+
+428 
+	$__mem£t_g˙_by2
+ (*
+__s
+, 
+__c
+, 
+size_t
+ 
+__n
+)
+
+430 
+__d0
+, 
+__d1
+;
+
+431 *
+__tmp
+ = 
+__s
+;
+
+432 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+443 : "=&q" (
+__d0
+), "=&r" (
+__tmp
+), "=&r" (
+__d1
+),
+
+444 "=m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__n
+]; } *)
+__s
+)
+
+445 : "0" ((Ë
+__c
+), "1" (
+__tmp
+), "2" (
+__n
+ / 4)
+
+447  
+__s
+;
+
+448 
+	}
+}
+
+452 
+	#_HAVE_STRING_ARCH_memchr
+ 1
+
+	)
+
+453 #i‚de‡
+_FORCE_INLINES
+
+
+454 
+__STRING_INLINE
+ *
+
+455 
+	$memchr
+ (c⁄° *
+__s
+, 
+__c
+, 
+size_t
+ 
+__n
+)
+
+457 
+__d0
+;
+
+458 #ifde‡
+__i686__
+
+
+459 
+__d1
+;
+
+461 *
+__ªs
+;
+
+462 i‡(
+__n
+ == 0)
+
+463  
+NULL
+;
+
+464 #ifde‡
+__i686__
+
+
+465 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+469 : "=D" (
+__ªs
+), "=&c" (
+__d0
+), "=&r" (
+__d1
+)
+
+470 : "a" (
+__c
+), "0" (
+__s
+), "1" (
+__n
+), "2" (1),
+
+471 "m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__n
+]; } *)
+__s
+)
+
+474 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+480 : "=D" (
+__ªs
+), "=&c" (
+__d0
+)
+
+481 : "a" (
+__c
+), "0" (
+__s
+), "1" (
+__n
+),
+
+482 "m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__n
+]; } *)
+__s
+)
+
+485  
+__ªs
+ - 1;
+
+486 
+	}
+}
+
+489 
+	#_HAVE_STRING_ARCH_memrchr
+ 1
+
+	)
+
+490 #i‚de‡
+_FORCE_INLINES
+
+
+491 
+__STRING_INLINE
+ *
+__memrchr
+ (c⁄° *
+__s
+, 
+__c
+, 
+size_t
+ 
+__n
+);
+
+493 
+__STRING_INLINE
+ *
+
+494 
+	$__memrchr
+ (c⁄° *
+__s
+, 
+__c
+, 
+size_t
+ 
+__n
+)
+
+496 
+__d0
+;
+
+497 #ifde‡
+__i686__
+
+
+498 
+__d1
+;
+
+500 *
+__ªs
+;
+
+501 i‡(
+__n
+ == 0)
+
+502  
+NULL
+;
+
+503 #ifde‡
+__i686__
+
+
+504 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+510 : "=D" (
+__ªs
+), "=&c" (
+__d0
+), "=&r" (
+__d1
+)
+
+511 : "a" (
+__c
+), "0" (
+__s
+ + 
+__n
+ - 1), "1" (__n), "2" (-1),
+
+512 "m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__n
+]; } *)
+__s
+)
+
+515 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+522 : "=D" (
+__ªs
+), "=&c" (
+__d0
+)
+
+523 : "a" (
+__c
+), "0" (
+__s
+ + 
+__n
+ - 1), "1" (__n),
+
+524 "m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__n
+]; } *)
+__s
+)
+
+527  
+__ªs
+;
+
+528 
+	}
+}
+
+529 #ifde‡
+__USE_GNU
+
+
+530 
+	#memrchr
+(
+s
+, 
+c
+, 
+n
+Ë
+	`__memrchr
+ ((s), (c), (n))
+
+	)
+
+535 
+	#_HAVE_STRING_ARCH_øwmemchr
+ 1
+
+	)
+
+536 
+__STRING_INLINE
+ *
+__øwmemchr
+ (c⁄° *
+__s
+, 
+__c
+);
+
+538 #i‚de‡
+_FORCE_INLINES
+
+
+539 
+__STRING_INLINE
+ *
+
+540 
+	$__øwmemchr
+ (c⁄° *
+__s
+, 
+__c
+)
+
+542 
+__d0
+;
+
+543 *
+__ªs
+;
+
+544 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+547 : "=D" (
+__ªs
+), "=&c" (
+__d0
+)
+
+548 : "a" (
+__c
+), "0" (
+__s
+), "1" (0xffffffff),
+
+549 "m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__s
+)
+
+551  
+__ªs
+ - 1;
+
+552 
+	}
+}
+
+553 #ifde‡
+__USE_GNU
+
+
+554 
+__STRING_INLINE
+ *
+
+555 
+	$øwmemchr
+ (c⁄° *
+__s
+, 
+__c
+)
+
+557  
+	`__øwmemchr
+ (
+__s
+, 
+__c
+);
+
+558 
+	}
+}
+
+564 
+	#_HAVE_STRING_ARCH_°æí
+ 1
+
+	)
+
+565 
+	#°æí
+(
+°r
+) \
+
+566 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+°r
+) \
+
+567 ? 
+	`__buûtö_°æí
+ (
+°r
+) \
+
+568 : 
+	`__°æí_g
+ (
+°r
+)))
+
+	)
+
+569 
+__STRING_INLINE
+ 
+size_t
+ 
+__°æí_g
+ (c⁄° *
+__°r
+);
+
+571 
+__STRING_INLINE
+ 
+size_t
+
+
+572 
+	$__°æí_g
+ (c⁄° *
+__°r
+)
+
+574 
+__dummy
+;
+
+575 c⁄° *
+__tmp
+ = 
+__°r
+;
+
+576 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+582 : "Ù" (
+__tmp
+), "=&q" (
+__dummy
+)
+
+583 : "0" (
+__°r
+),
+
+584 "m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__°r
+)
+
+586  
+__tmp
+ - 
+__°r
+ - 1;
+
+587 
+	}
+}
+
+591 
+	#_HAVE_STRING_ARCH_°r˝y
+ 1
+
+	)
+
+592 
+	#°r˝y
+(
+de°
+, 
+§c
+) \
+
+593 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+§c
+) \
+
+594 ? ( ((
+§c
+)[0]Ë=1 && 
+	`°æí
+ (src) + 1 <= 8 \
+
+595 ? 
+	`__°r˝y_a_smÆl
+ ((
+de°
+), (
+§c
+), 
+	`°æí
+ (src) + 1) \
+
+596 : (*Ë
+	`mem˝y
+ ((*Ë(
+de°
+), \
+
+597 (c⁄° *Ë(
+§c
+), \
+
+598 
+	`°æí
+ (
+§c
+) + 1)) \
+
+599 : 
+	`__°r˝y_g
+ ((
+de°
+), (
+§c
+))))
+
+	)
+
+601 
+	#__°r˝y_a_smÆl
+(
+de°
+, 
+§c
+, 
+§˛í
+) \
+
+602 (
+	`__exãnsi⁄__
+ ({ *
+__de°
+ = (
+de°
+); \
+
+604 
+__ui
+; \
+
+605 
+__usi
+; \
+
+606 
+__uc
+; \
+
+607 
+__c
+; \
+
+608 } *
+__u
+ = (*Ë
+__de°
+; \
+
+609 
+§˛í
+) \
+
+612 
+__u
+->
+__uc
+ = '\0'; \
+
+615 
+__u
+->
+__usi
+ = 
+	`__STRING_SMALL_GET16
+ (
+§c
+, 0); \
+
+618 
+__u
+->
+__usi
+ = 
+	`__STRING_SMALL_GET16
+ (
+§c
+, 0); \
+
+619 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 2); \
+
+620 
+__u
+->
+__uc
+ = '\0'; \
+
+623 
+__u
+->
+__ui
+ = 
+	`__STRING_SMALL_GET32
+ (
+§c
+, 0); \
+
+626 
+__u
+->
+__ui
+ = 
+	`__STRING_SMALL_GET32
+ (
+§c
+, 0); \
+
+627 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+628 
+__u
+->
+__uc
+ = '\0'; \
+
+631 
+__u
+->
+__ui
+ = 
+	`__STRING_SMALL_GET32
+ (
+§c
+, 0); \
+
+632 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+633 
+__u
+->
+__usi
+ = 
+	`__STRING_SMALL_GET16
+ (
+§c
+, 4); \
+
+636 
+__u
+->
+__ui
+ = 
+	`__STRING_SMALL_GET32
+ (
+§c
+, 0); \
+
+637 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+638 
+__u
+->
+__usi
+ = 
+	`__STRING_SMALL_GET16
+ (
+§c
+, 4); \
+
+639 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 2); \
+
+640 
+__u
+->
+__uc
+ = '\0'; \
+
+643 
+__u
+->
+__ui
+ = 
+	`__STRING_SMALL_GET32
+ (
+§c
+, 0); \
+
+644 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+645 
+__u
+->
+__ui
+ = 
+	`__STRING_SMALL_GET32
+ (
+§c
+, 4); \
+
+648 (*Ë
+__de°
+; }))
+
+	)
+
+650 
+__STRING_INLINE
+ *
+__°r˝y_g
+ (*
+__de°
+, c⁄° *
+__§c
+);
+
+652 
+__STRING_INLINE
+ *
+
+653 
+	$__°r˝y_g
+ (*
+__de°
+, c⁄° *
+__§c
+)
+
+655 *
+__tmp
+ = 
+__de°
+;
+
+656 
+__dummy
+;
+
+657 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+666 : "=&r" (
+__§c
+), "=&r" (
+__tmp
+), "=&q" (
+__dummy
+),
+
+667 "=m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__de°
+)
+
+668 : "0" (
+__§c
+), "1" (
+__tmp
+),
+
+669 "m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__§c
+)
+
+671  
+__de°
+;
+
+672 
+	}
+}
+
+675 #ifde‡
+__USE_GNU
+
+
+676 
+	#_HAVE_STRING_ARCH_°p˝y
+ 1
+
+	)
+
+678 
+	#__°p˝y
+(
+de°
+, 
+§c
+) \
+
+679 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+§c
+) \
+
+680 ? (
+	`°æí
+ (
+§c
+) + 1 <= 8 \
+
+681 ? 
+	`__°p˝y_a_smÆl
+ ((
+de°
+), (
+§c
+), 
+	`°æí
+ (src) + 1) \
+
+682 : 
+	`__°p˝y_c
+ ((
+de°
+), (
+§c
+), 
+	`°æí
+ (src) + 1)) \
+
+683 : 
+	`__°p˝y_g
+ ((
+de°
+), (
+§c
+))))
+
+	)
+
+684 
+	#__°p˝y_c
+(
+de°
+, 
+§c
+, 
+§˛í
+) \
+
+685 ((
+§˛í
+) % 4 == 0 \
+
+686 ? 
+	`__memp˝y_by4
+ (
+de°
+, 
+§c
+, 
+§˛í
+) - 1 \
+
+687 : ((
+§˛í
+) % 2 == 0 \
+
+688 ? 
+	`__memp˝y_by2
+ (
+de°
+, 
+§c
+, 
+§˛í
+) - 1 \
+
+689 : 
+	`__memp˝y_byn
+ (
+de°
+, 
+§c
+, 
+§˛í
+Ë- 1))
+
+	)
+
+692 
+	#°p˝y
+(
+de°
+, 
+§c
+Ë
+	`__°p˝y
+ ((de°), (§c))
+
+	)
+
+694 
+	#__°p˝y_a_smÆl
+(
+de°
+, 
+§c
+, 
+§˛í
+) \
+
+695 (
+	`__exãnsi⁄__
+ ({ union { \
+
+696 
+__ui
+; \
+
+697 
+__usi
+; \
+
+698 
+__uc
+; \
+
+699 
+__c
+; \
+
+700 } *
+__u
+ = (*Ë(
+de°
+); \
+
+701 
+§˛í
+) \
+
+704 
+__u
+->
+__uc
+ = '\0'; \
+
+707 
+__u
+->
+__usi
+ = 
+	`__STRING_SMALL_GET16
+ (
+§c
+, 0); \
+
+708 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 1); \
+
+711 
+__u
+->
+__usi
+ = 
+	`__STRING_SMALL_GET16
+ (
+§c
+, 0); \
+
+712 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 2); \
+
+713 
+__u
+->
+__uc
+ = '\0'; \
+
+716 
+__u
+->
+__ui
+ = 
+	`__STRING_SMALL_GET32
+ (
+§c
+, 0); \
+
+717 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 3); \
+
+720 
+__u
+->
+__ui
+ = 
+	`__STRING_SMALL_GET32
+ (
+§c
+, 0); \
+
+721 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+722 
+__u
+->
+__uc
+ = '\0'; \
+
+725 
+__u
+->
+__ui
+ = 
+	`__STRING_SMALL_GET32
+ (
+§c
+, 0); \
+
+726 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+727 
+__u
+->
+__usi
+ = 
+	`__STRING_SMALL_GET16
+ (
+§c
+, 4); \
+
+728 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 1); \
+
+731 
+__u
+->
+__ui
+ = 
+	`__STRING_SMALL_GET32
+ (
+§c
+, 0); \
+
+732 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+733 
+__u
+->
+__usi
+ = 
+	`__STRING_SMALL_GET16
+ (
+§c
+, 4); \
+
+734 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 2); \
+
+735 
+__u
+->
+__uc
+ = '\0'; \
+
+738 
+__u
+->
+__ui
+ = 
+	`__STRING_SMALL_GET32
+ (
+§c
+, 0); \
+
+739 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+740 
+__u
+->
+__ui
+ = 
+	`__STRING_SMALL_GET32
+ (
+§c
+, 4); \
+
+741 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 3); \
+
+744 (*Ë
+__u
+; }))
+
+	)
+
+746 
+__STRING_INLINE
+ *
+__memp˝y_by4
+ (*
+__de°
+, c⁄° *
+__§c
+,
+
+747 
+size_t
+ 
+__§˛í
+);
+
+749 
+__STRING_INLINE
+ *
+
+750 
+	$__memp˝y_by4
+ (*
+__de°
+, c⁄° *
+__§c
+, 
+size_t
+ 
+__§˛í
+)
+
+752 *
+__tmp
+ = 
+__de°
+;
+
+753 
+__d0
+, 
+__d1
+;
+
+754 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+762 : "=&r" (
+__d0
+), "Ù" (
+__tmp
+), "=&r" (
+__§c
+), "=&r" (
+__d1
+)
+
+763 : "1" (
+__tmp
+), "2" (
+__§c
+), "3" (
+__§˛í
+ / 4)
+
+765  
+__tmp
+;
+
+766 
+	}
+}
+
+768 
+__STRING_INLINE
+ *
+__memp˝y_by2
+ (*
+__de°
+, c⁄° *
+__§c
+,
+
+769 
+size_t
+ 
+__§˛í
+);
+
+771 
+__STRING_INLINE
+ *
+
+772 
+	$__memp˝y_by2
+ (*
+__de°
+, c⁄° *
+__§c
+, 
+size_t
+ 
+__§˛í
+)
+
+774 *
+__tmp
+ = 
+__de°
+;
+
+775 
+__d0
+, 
+__d1
+;
+
+776 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+789 : "=&q" (
+__d0
+), "Ù" (
+__tmp
+), "=&r" (
+__§c
+), "=&r" (
+__d1
+),
+
+790 "=m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__§˛í
+]; } *)
+__de°
+)
+
+791 : "1" (
+__tmp
+), "2" (
+__§c
+), "3" (
+__§˛í
+ / 2),
+
+792 "m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__§˛í
+]; } *)
+__§c
+)
+
+794  
+__tmp
+ + 2;
+
+795 
+	}
+}
+
+797 
+__STRING_INLINE
+ *
+__memp˝y_byn
+ (*
+__de°
+, c⁄° *
+__§c
+,
+
+798 
+size_t
+ 
+__§˛í
+);
+
+800 
+__STRING_INLINE
+ *
+
+801 
+	$__memp˝y_byn
+ (*
+__de°
+, c⁄° *
+__§c
+, 
+size_t
+ 
+__§˛í
+)
+
+803 
+__d0
+, 
+__d1
+;
+
+804 *
+__tmp
+ = 
+__de°
+;
+
+805 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+816 : "=D" (
+__tmp
+), "=&c" (
+__d0
+), "=&S" (
+__d1
+),
+
+817 "=m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__§˛í
+]; } *)
+__de°
+)
+
+818 : "0" (
+__tmp
+), "1" (
+__§˛í
+), "2" (
+__§c
+),
+
+819 "m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__§˛í
+]; } *)
+__§c
+)
+
+821  
+__tmp
+;
+
+822 
+	}
+}
+
+824 
+__STRING_INLINE
+ *
+__°p˝y_g
+ (*
+__de°
+, c⁄° *
+__§c
+);
+
+826 
+__STRING_INLINE
+ *
+
+827 
+	$__°p˝y_g
+ (*
+__de°
+, c⁄° *
+__§c
+)
+
+829 *
+__tmp
+ = 
+__de°
+;
+
+830 
+__dummy
+;
+
+831 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+840 : "=&r" (
+__§c
+), "Ù" (
+__tmp
+), "=&q" (
+__dummy
+),
+
+841 "=m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__de°
+)
+
+842 : "0" (
+__§c
+), "1" (
+__tmp
+),
+
+843 "m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__§c
+)
+
+845  
+__tmp
+ - 1;
+
+846 
+	}
+}
+
+851 
+	#_HAVE_STRING_ARCH_°∫˝y
+ 1
+
+	)
+
+852 
+	#°∫˝y
+(
+de°
+, 
+§c
+, 
+n
+) \
+
+853 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+§c
+) \
+
+854 ? ((
+	`°æí
+ (
+§c
+Ë+ 1 >((
+size_t
+Ë(
+n
+)) \
+
+855 ? (*Ë
+	`mem˝y
+ ((*Ë(
+de°
+), \
+
+856 (c⁄° *Ë(
+§c
+), 
+n
+) \
+
+857 : 
+	`__°∫˝y_cg
+ ((
+de°
+), (
+§c
+), 
+	`°æí
+ (§cË+ 1, 
+n
+))) \
+
+858 : 
+	`__°∫˝y_gg
+ ((
+de°
+), (
+§c
+), 
+n
+)))
+
+	)
+
+859 
+	#__°∫˝y_cg
+(
+de°
+, 
+§c
+, 
+§˛í
+, 
+n
+) \
+
+860 (((
+§˛í
+) % 4 == 0) \
+
+861 ? 
+	`__°∫˝y_by4
+ (
+de°
+, 
+§c
+, 
+§˛í
+, 
+n
+) \
+
+862 : (((
+§˛í
+) % 2 == 0) \
+
+863 ? 
+	`__°∫˝y_by2
+ (
+de°
+, 
+§c
+, 
+§˛í
+, 
+n
+) \
+
+864 : 
+	`__°∫˝y_byn
+ (
+de°
+, 
+§c
+, 
+§˛í
+, 
+n
+)))
+
+	)
+
+866 
+__STRING_INLINE
+ *
+__°∫˝y_by4
+ (*
+__de°
+, c⁄° 
+__§c
+[],
+
+867 
+size_t
+ 
+__§˛í
+, size_à
+__n
+);
+
+869 
+__STRING_INLINE
+ *
+
+870 
+	$__°∫˝y_by4
+ (*
+__de°
+, c⁄° 
+__§c
+[], 
+size_t
+ 
+__§˛í
+, size_à
+__n
+)
+
+872 *
+__tmp
+ = 
+__de°
+;
+
+873 
+__dummy1
+, 
+__dummy2
+;
+
+874 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+882 : "=&r" (
+__dummy1
+), "Ù" (
+__tmp
+), "=&r" (
+__§c
+), "=&r" (
+__dummy2
+),
+
+883 "=m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__§˛í
+]; } *)
+__de°
+)
+
+884 : "1" (
+__tmp
+), "2" (
+__§c
+), "3" (
+__§˛í
+ / 4),
+
+885 "m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__§˛í
+]; } *)
+__§c
+)
+
+887 (Ë
+	`mem£t
+ (
+__tmp
+, '\0', 
+__n
+ - 
+__§˛í
+);
+
+888  
+__de°
+;
+
+889 
+	}
+}
+
+891 
+__STRING_INLINE
+ *
+__°∫˝y_by2
+ (*
+__de°
+, c⁄° 
+__§c
+[],
+
+892 
+size_t
+ 
+__§˛í
+, size_à
+__n
+);
+
+894 
+__STRING_INLINE
+ *
+
+895 
+	$__°∫˝y_by2
+ (*
+__de°
+, c⁄° 
+__§c
+[], 
+size_t
+ 
+__§˛í
+, size_à
+__n
+)
+
+897 *
+__tmp
+ = 
+__de°
+;
+
+898 
+__dummy1
+, 
+__dummy2
+;
+
+899 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+912 : "=&q" (
+__dummy1
+), "Ù" (
+__tmp
+), "=&r" (
+__§c
+), "=&r" (
+__dummy2
+),
+
+913 "=m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__§˛í
+]; } *)
+__de°
+)
+
+914 : "1" (
+__tmp
+), "2" (
+__§c
+), "3" (
+__§˛í
+ / 2),
+
+915 "m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__§˛í
+]; } *)
+__§c
+)
+
+917 (Ë
+	`mem£t
+ (
+__tmp
+ + 2, '\0', 
+__n
+ - 
+__§˛í
+);
+
+918  
+__de°
+;
+
+919 
+	}
+}
+
+921 
+__STRING_INLINE
+ *
+__°∫˝y_byn
+ (*
+__de°
+, c⁄° 
+__§c
+[],
+
+922 
+size_t
+ 
+__§˛í
+, size_à
+__n
+);
+
+924 
+__STRING_INLINE
+ *
+
+925 
+	$__°∫˝y_byn
+ (*
+__de°
+, c⁄° 
+__§c
+[], 
+size_t
+ 
+__§˛í
+, size_à
+__n
+)
+
+927 
+__d0
+, 
+__d1
+;
+
+928 *
+__tmp
+ = 
+__de°
+;
+
+929 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+940 : "=D" (
+__tmp
+), "=&c" (
+__d0
+), "=&S" (
+__d1
+),
+
+941 "=m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__§˛í
+]; } *)
+__de°
+)
+
+942 : "1" (
+__§˛í
+), "0" (
+__tmp
+),"2" (
+__§c
+),
+
+943 "m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__§˛í
+]; } *)
+__§c
+)
+
+945 (Ë
+	`mem£t
+ (
+__tmp
+, '\0', 
+__n
+ - 
+__§˛í
+);
+
+946  
+__de°
+;
+
+947 
+	}
+}
+
+949 
+__STRING_INLINE
+ *
+__°∫˝y_gg
+ (*
+__de°
+, c⁄° *
+__§c
+,
+
+950 
+size_t
+ 
+__n
+);
+
+952 
+__STRING_INLINE
+ *
+
+953 
+	$__°∫˝y_gg
+ (*
+__de°
+, c⁄° *
+__§c
+, 
+size_t
+ 
+__n
+)
+
+955 *
+__tmp
+ = 
+__de°
+;
+
+956 
+__dummy
+;
+
+957 i‡(
+__n
+ > 0)
+
+958 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+974 : "=&r" (
+__§c
+), "=&r" (
+__tmp
+), "=&q" (
+__dummy
+), "=&r" (
+__n
+)
+
+975 : "0" (
+__§c
+), "1" (
+__tmp
+), "3" (
+__n
+)
+
+978  
+__de°
+;
+
+979 
+	}
+}
+
+983 
+	#_HAVE_STRING_ARCH_°rˇt
+ 1
+
+	)
+
+984 
+	#°rˇt
+(
+de°
+, 
+§c
+) \
+
+985 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+§c
+) \
+
+986 ? 
+	`__°rˇt_c
+ ((
+de°
+), (
+§c
+), 
+	`°æí
+ (src) + 1) \
+
+987 : 
+	`__°rˇt_g
+ ((
+de°
+), (
+§c
+))))
+
+	)
+
+989 
+__STRING_INLINE
+ *
+__°rˇt_c
+ (*
+__de°
+, c⁄° 
+__§c
+[],
+
+990 
+size_t
+ 
+__§˛í
+);
+
+992 
+__STRING_INLINE
+ *
+
+993 
+	$__°rˇt_c
+ (*
+__de°
+, c⁄° 
+__§c
+[], 
+size_t
+ 
+__§˛í
+)
+
+995 #ifde‡
+__i686__
+
+
+996 
+__d0
+;
+
+997 *
+__tmp
+;
+
+998 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1000 : "=D" (
+__tmp
+), "=&c" (
+__d0
+),
+
+1001 "=m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__de°
+)
+
+1002 : "0" (
+__de°
+), "1" (0xffffffff), "a" (0),
+
+1003 "m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__§˛í
+]; } *)
+__§c
+)
+
+1005 --
+__tmp
+;
+
+1007 *
+__tmp
+ = 
+__de°
+;
+
+1008 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1014 : "Ù" (
+__tmp
+),
+
+1015 "=m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__de°
+)
+
+1016 : "0" (
+__tmp
+),
+
+1017 "m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__§˛í
+]; } *)
+__§c
+)
+
+1020 (Ë
+	`mem˝y
+ (
+__tmp
+, 
+__§c
+, 
+__§˛í
+);
+
+1021  
+__de°
+;
+
+1022 
+	}
+}
+
+1024 
+__STRING_INLINE
+ *
+__°rˇt_g
+ (*
+__de°
+, c⁄° *
+__§c
+);
+
+1026 
+__STRING_INLINE
+ *
+
+1027 
+	$__°rˇt_g
+ (*
+__de°
+, c⁄° *
+__§c
+)
+
+1029 *
+__tmp
+ = 
+__de°
+;
+
+1030 
+__dummy
+;
+
+1031 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1044 : "=&q" (
+__dummy
+), "=&r" (
+__tmp
+), "=&r" (
+__§c
+),
+
+1045 "=m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__de°
+)
+
+1046 : "1" (
+__tmp
+), "2" (
+__§c
+),
+
+1047 "m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__§c
+)
+
+1049  
+__de°
+;
+
+1050 
+	}
+}
+
+1054 
+	#_HAVE_STRING_ARCH_°∫ˇt
+ 1
+
+	)
+
+1055 
+	#°∫ˇt
+(
+de°
+, 
+§c
+, 
+n
+) \
+
+1056 (
+	`__exãnsi⁄__
+ ({ *
+__de°
+ = (
+de°
+); \
+
+1057 
+	`__buûtö_c⁄°™t_p
+ (
+§c
+Ë&& __buûtö_c⁄°™t_∞(
+n
+) \
+
+1058 ? (
+	`°æí
+ (
+§c
+Ë< ((
+size_t
+Ë(
+n
+)) \
+
+1059 ? 
+	`°rˇt
+ (
+__de°
+, (
+§c
+)) \
+
+1060 : (*(*)
+	`__memp˝y
+ (
+	`°rchr
+ (
+__de°
+, '\0'), \
+
+1061 (c⁄° *Ë(
+§c
+), \
+
+1062 (
+n
+)Ë0, 
+__de°
+)) \
+
+1063 : 
+	`__°∫ˇt_g
+ (
+__de°
+, (
+§c
+), (
+n
+)); }))
+
+	)
+
+1065 
+__STRING_INLINE
+ *
+__°∫ˇt_g
+ (*
+__de°
+, c⁄° 
+__§c
+[],
+
+1066 
+size_t
+ 
+__n
+);
+
+1068 
+__STRING_INLINE
+ *
+
+1069 
+	$__°∫ˇt_g
+ (*
+__de°
+, c⁄° 
+__§c
+[], 
+size_t
+ 
+__n
+)
+
+1071 *
+__tmp
+ = 
+__de°
+;
+
+1072 
+__dummy
+;
+
+1073 #ifde‡
+__i686__
+
+
+1074 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1088 : "=&a" (
+__dummy
+), "=&D" (
+__tmp
+), "=&S" (
+__§c
+), "=&c" (
+__n
+)
+
+1089 : "g" (
+__n
+), "0" (0), "1" (
+__tmp
+), "2" (
+__§c
+), "3" (0xffffffff)
+
+1092 --
+__tmp
+;
+
+1093 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1110 : "=&q" (
+__dummy
+), "=&r" (
+__tmp
+), "=&r" (
+__§c
+), "=&r" (
+__n
+)
+
+1111 : "1" (
+__tmp
+), "2" (
+__§c
+), "3" (
+__n
+)
+
+1114  
+__de°
+;
+
+1115 
+	}
+}
+
+1119 
+	#_HAVE_STRING_ARCH_°rcmp
+ 1
+
+	)
+
+1120 
+	#°rcmp
+(
+s1
+, 
+s2
+) \
+
+1121 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+s1
+Ë&& __buûtö_c⁄°™t_∞(
+s2
+) \
+
+1122 && ( ((
+s1
+)[0]Ë!1 || 
+	`°æí
+ (s1) >= 4) \
+
+1123 && ( ((
+s2
+)[0]Ë!1 || 
+	`°æí
+ (s2) >= 4) \
+
+1124 ? 
+	`memcmp
+ ((c⁄° *Ë(
+s1
+), (c⁄° *Ë(
+s2
+), \
+
+1125 (
+	`°æí
+ (
+s1
+Ë< såÀ¿(
+s2
+) \
+
+1126 ? 
+	`°æí
+ (
+s1
+Ë: såÀ¿(
+s2
+)) + 1) \
+
+1127 : (
+	`__buûtö_c⁄°™t_p
+ (
+s1
+) &&  ((s1)[0]) == 1 \
+
+1128 &&  ((
+s2
+)[0]Ë=1 && 
+	`°æí
+ (
+s1
+) < 4 \
+
+1129 ? (
+	`__buûtö_c⁄°™t_p
+ (
+s2
+) &&  ((s2)[0]) == 1 \
+
+1130 ? 
+	`__°rcmp_cc
+ ((c⁄° *Ë(
+s1
+), \
+
+1131 (c⁄° *Ë(
+s2
+), \
+
+1132 
+	`°æí
+ (
+s1
+)) \
+
+1133 : 
+	`__°rcmp_cg
+ ((c⁄° *Ë(
+s1
+), \
+
+1134 (c⁄° *Ë(
+s2
+), \
+
+1135 
+	`°æí
+ (
+s1
+))) \
+
+1136 : (
+	`__buûtö_c⁄°™t_p
+ (
+s2
+Ë&&  ((
+s1
+)[0]) == 1 \
+
+1137 &&  ((
+s2
+)[0]Ë=1 && 
+	`°æí
+ (s2) < 4 \
+
+1138 ? (
+	`__buûtö_c⁄°™t_p
+ (
+s1
+) \
+
+1139 ? 
+	`__°rcmp_cc
+ ((c⁄° *Ë(
+s1
+), \
+
+1140 (c⁄° *Ë(
+s2
+), \
+
+1141 
+	`°æí
+ (
+s2
+)) \
+
+1142 : 
+	`__°rcmp_gc
+ ((c⁄° *Ë(
+s1
+), \
+
+1143 (c⁄° *Ë(
+s2
+), \
+
+1144 
+	`°æí
+ (
+s2
+))) \
+
+1145 : 
+	`__°rcmp_gg
+ ((
+s1
+), (
+s2
+))))))
+
+	)
+
+1147 
+	#__°rcmp_cc
+(
+s1
+, 
+s2
+, 
+l
+) \
+
+1148 (
+	`__exãnsi⁄__
+ ({ 
+__ªsu…
+ = (
+s1
+)[0] - (
+s2
+)[0]; \
+
+1149 i‡(
+l
+ > 0 && 
+__ªsu…
+ == 0) \
+
+1151 
+__ªsu…
+ = (
+s1
+)[1] - (
+s2
+)[1]; \
+
+1152 i‡(
+l
+ > 1 && 
+__ªsu…
+ == 0) \
+
+1154 
+__ªsu…
+ = (
+s1
+)[2] - (
+s2
+)[2]; \
+
+1155 i‡(
+l
+ > 2 && 
+__ªsu…
+ == 0) \
+
+1156 
+__ªsu…
+ = (
+s1
+)[3] - (
+s2
+)[3]; \
+
+1159 
+__ªsu…
+; }))
+
+	)
+
+1161 
+	#__°rcmp_cg
+(
+s1
+, 
+s2
+, 
+l1
+) \
+
+1162 (
+	`__exãnsi⁄__
+ ({ c⁄° *
+__s2
+ = (
+s2
+); \
+
+1163 
+__ªsu…
+ = (
+s1
+)[0] - 
+__s2
+[0]; \
+
+1164 i‡(
+l1
+ > 0 && 
+__ªsu…
+ == 0) \
+
+1166 
+__ªsu…
+ = (
+s1
+)[1] - 
+__s2
+[1]; \
+
+1167 i‡(
+l1
+ > 1 && 
+__ªsu…
+ == 0) \
+
+1169 
+__ªsu…
+ = (
+s1
+)[2] - 
+__s2
+[2]; \
+
+1170 i‡(
+l1
+ > 2 && 
+__ªsu…
+ == 0) \
+
+1171 
+__ªsu…
+ = (
+s1
+)[3] - 
+__s2
+[3]; \
+
+1174 
+__ªsu…
+; }))
+
+	)
+
+1176 
+	#__°rcmp_gc
+(
+s1
+, 
+s2
+, 
+l2
+) \
+
+1177 (
+	`__exãnsi⁄__
+ ({ c⁄° *
+__s1
+ = (
+s1
+); \
+
+1178 
+__ªsu…
+ = 
+__s1
+[0] - (
+s2
+)[0]; \
+
+1179 i‡(
+l2
+ > 0 && 
+__ªsu…
+ == 0) \
+
+1181 
+__ªsu…
+ = 
+__s1
+[1] - (
+s2
+)[1]; \
+
+1182 i‡(
+l2
+ > 1 && 
+__ªsu…
+ == 0) \
+
+1184 
+__ªsu…
+ = 
+__s1
+[2] - (
+s2
+)[2]; \
+
+1185 i‡(
+l2
+ > 2 && 
+__ªsu…
+ == 0) \
+
+1186 
+__ªsu…
+ = 
+__s1
+[3] - (
+s2
+)[3]; \
+
+1189 
+__ªsu…
+; }))
+
+	)
+
+1191 
+__STRING_INLINE
+ 
+__°rcmp_gg
+ (c⁄° *
+__s1
+, c⁄° *
+__s2
+);
+
+1193 
+__STRING_INLINE
+ 
+
+1194 
+	$__°rcmp_gg
+ (c⁄° *
+__s1
+, c⁄° *
+__s2
+)
+
+1196 
+__ªs
+;
+
+1197 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1213 : "=q" (
+__ªs
+), "=&r" (
+__s1
+), "=&r" (
+__s2
+)
+
+1214 : "1" (
+__s1
+), "2" (
+__s2
+),
+
+1215 "m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__s1
+),
+
+1216 "m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__s2
+)
+
+1218  
+__ªs
+;
+
+1219 
+	}
+}
+
+1223 
+	#_HAVE_STRING_ARCH_°∫cmp
+ 1
+
+	)
+
+1224 
+	#°∫cmp
+(
+s1
+, 
+s2
+, 
+n
+) \
+
+1225 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+s1
+Ë&& 
+	`°æí
+ (s1Ë< ((
+size_t
+Ë(
+n
+)) \
+
+1226 ? 
+	`°rcmp
+ ((
+s1
+), (
+s2
+)) \
+
+1227 : (
+	`__buûtö_c⁄°™t_p
+ (
+s2
+Ë&& 
+	`°æí
+ (s2Ë< ((
+size_t
+Ë(
+n
+))\
+
+1228 ? 
+	`°rcmp
+ ((
+s1
+), (
+s2
+)) \
+
+1229 : 
+	`__°∫cmp_g
+ ((
+s1
+), (
+s2
+), (
+n
+)))))
+
+	)
+
+1231 
+__STRING_INLINE
+ 
+__°∫cmp_g
+ (c⁄° *
+__s1
+, c⁄° *
+__s2
+,
+
+1232 
+size_t
+ 
+__n
+);
+
+1234 
+__STRING_INLINE
+ 
+
+1235 
+	$__°∫cmp_g
+ (c⁄° *
+__s1
+, c⁄° *
+__s2
+, 
+size_t
+ 
+__n
+)
+
+1237 
+__ªs
+;
+
+1238 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1257 : "=q" (
+__ªs
+), "=&r" (
+__s1
+), "=&r" (
+__s2
+), "=&r" (
+__n
+)
+
+1258 : "1" (
+__s1
+), "2" (
+__s2
+), "3" (
+__n
+),
+
+1259 "m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__n
+]; } *)
+__s1
+),
+
+1260 "m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__n
+]; } *)
+__s2
+)
+
+1262  
+__ªs
+;
+
+1263 
+	}
+}
+
+1267 
+	#_HAVE_STRING_ARCH_°rchr
+ 1
+
+	)
+
+1268 
+	#_USE_STRING_ARCH_°rchr
+ 1
+
+	)
+
+1269 
+	#°rchr
+(
+s
+, 
+c
+) \
+
+1270 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+c
+) \
+
+1271 ? ((
+c
+) == '\0' \
+
+1272 ? (*Ë
+	`__øwmemchr
+ ((
+s
+), (
+c
+)) \
+
+1273 : 
+	`__°rchr_c
+ ((
+s
+), ((
+c
+) & 0xff) << 8)) \
+
+1274 : 
+	`__°rchr_g
+ ((
+s
+), (
+c
+))))
+
+	)
+
+1276 
+__STRING_INLINE
+ *
+__°rchr_c
+ (c⁄° *
+__s
+, 
+__c
+);
+
+1278 
+__STRING_INLINE
+ *
+
+1279 
+	$__°rchr_c
+ (c⁄° *
+__s
+, 
+__c
+)
+
+1281 
+__d0
+;
+
+1282 *
+__ªs
+;
+
+1283 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1293 : "Ù" (
+__ªs
+), "=&a" (
+__d0
+)
+
+1294 : "0" (
+__s
+), "1" (
+__c
+),
+
+1295 "m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__s
+)
+
+1297  
+__ªs
+;
+
+1298 
+	}
+}
+
+1300 
+__STRING_INLINE
+ *
+__°rchr_g
+ (c⁄° *
+__s
+, 
+__c
+);
+
+1302 
+__STRING_INLINE
+ *
+
+1303 
+	$__°rchr_g
+ (c⁄° *
+__s
+, 
+__c
+)
+
+1305 
+__d0
+;
+
+1306 *
+__ªs
+;
+
+1307 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1318 : "Ù" (
+__ªs
+), "=&a" (
+__d0
+)
+
+1319 : "0" (
+__s
+), "1" (
+__c
+),
+
+1320 "m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__s
+)
+
+1322  
+__ªs
+;
+
+1323 
+	}
+}
+
+1327 
+	#_HAVE_STRING_ARCH_°rch∫ul
+ 1
+
+	)
+
+1328 
+	#__°rch∫ul
+(
+s
+, 
+c
+) \
+
+1329 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+c
+) \
+
+1330 ? ((
+c
+) == '\0' \
+
+1331 ? (*Ë
+	`__øwmemchr
+ ((
+s
+), 
+c
+) \
+
+1332 : 
+	`__°rch∫ul_c
+ ((
+s
+), ((
+c
+) & 0xff) << 8)) \
+
+1333 : 
+	`__°rch∫ul_g
+ ((
+s
+), 
+c
+)))
+
+	)
+
+1335 
+__STRING_INLINE
+ *
+__°rch∫ul_c
+ (c⁄° *
+__s
+, 
+__c
+);
+
+1337 
+__STRING_INLINE
+ *
+
+1338 
+	$__°rch∫ul_c
+ (c⁄° *
+__s
+, 
+__c
+)
+
+1340 
+__d0
+;
+
+1341 *
+__ªs
+;
+
+1342 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1352 : "Ù" (
+__ªs
+), "=&a" (
+__d0
+)
+
+1353 : "0" (
+__s
+), "1" (
+__c
+),
+
+1354 "m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__s
+)
+
+1356  
+__ªs
+;
+
+1357 
+	}
+}
+
+1359 
+__STRING_INLINE
+ *
+__°rch∫ul_g
+ (c⁄° *
+__s
+, 
+__c
+);
+
+1361 
+__STRING_INLINE
+ *
+
+1362 
+	$__°rch∫ul_g
+ (c⁄° *
+__s
+, 
+__c
+)
+
+1364 
+__d0
+;
+
+1365 *
+__ªs
+;
+
+1366 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1377 : "Ù" (
+__ªs
+), "=&a" (
+__d0
+)
+
+1378 : "0" (
+__s
+), "1" (
+__c
+),
+
+1379 "m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__s
+)
+
+1381  
+__ªs
+;
+
+1382 
+	}
+}
+
+1383 #ifde‡
+__USE_GNU
+
+
+1384 
+	#°rch∫ul
+(
+s
+, 
+c
+Ë
+	`__°rch∫ul
+ ((s), (c))
+
+	)
+
+1388 #i‡
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_XOPEN_EXTENDED
+
+
+1390 
+	#_HAVE_STRING_ARCH_ödex
+ 1
+
+	)
+
+1391 
+	#ödex
+(
+s
+, 
+c
+) \
+
+1392 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+c
+) \
+
+1393 ? 
+	`__°rchr_c
+ ((
+s
+), ((
+c
+) & 0xff) << 8) \
+
+1394 : 
+	`__°rchr_g
+ ((
+s
+), (
+c
+))))
+
+	)
+
+1399 
+	#_HAVE_STRING_ARCH_°ºchr
+ 1
+
+	)
+
+1400 
+	#°ºchr
+(
+s
+, 
+c
+) \
+
+1401 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+c
+) \
+
+1402 ? 
+	`__°ºchr_c
+ ((
+s
+), ((
+c
+) & 0xff) << 8) \
+
+1403 : 
+	`__°ºchr_g
+ ((
+s
+), (
+c
+))))
+
+	)
+
+1405 #ifde‡
+__i686__
+
+
+1406 
+__STRING_INLINE
+ *
+__°ºchr_c
+ (c⁄° *
+__s
+, 
+__c
+);
+
+1408 
+__STRING_INLINE
+ *
+
+1409 
+	$__°ºchr_c
+ (c⁄° *
+__s
+, 
+__c
+)
+
+1411 
+__d0
+, 
+__d1
+;
+
+1412 *
+__ªs
+;
+
+1413 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1421 : "=d" (
+__ªs
+), "=&S" (
+__d0
+), "=&a" (
+__d1
+)
+
+1422 : "0" (1), "1" (
+__s
+), "2" (
+__c
+),
+
+1423 "m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__s
+)
+
+1425  
+__ªs
+ - 1;
+
+1426 
+	}
+}
+
+1428 
+__STRING_INLINE
+ *
+__°ºchr_g
+ (c⁄° *
+__s
+, 
+__c
+);
+
+1430 
+__STRING_INLINE
+ *
+
+1431 
+	$__°ºchr_g
+ (c⁄° *
+__s
+, 
+__c
+)
+
+1433 
+__d0
+, 
+__d1
+;
+
+1434 *
+__ªs
+;
+
+1435 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1444 : "=d" (
+__ªs
+), "=&S" (
+__d0
+), "=&a" (
+__d1
+)
+
+1445 : "0" (1), "1" (
+__s
+), "2" (
+__c
+),
+
+1446 "m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__s
+)
+
+1448  
+__ªs
+ - 1;
+
+1449 
+	}
+}
+
+1451 
+__STRING_INLINE
+ *
+__°ºchr_c
+ (c⁄° *
+__s
+, 
+__c
+);
+
+1453 
+__STRING_INLINE
+ *
+
+1454 
+	$__°ºchr_c
+ (c⁄° *
+__s
+, 
+__c
+)
+
+1456 
+__d0
+, 
+__d1
+;
+
+1457 *
+__ªs
+;
+
+1458 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1468 : "=d" (
+__ªs
+), "=&S" (
+__d0
+), "=&a" (
+__d1
+)
+
+1469 : "0" (0), "1" (
+__s
+), "2" (
+__c
+),
+
+1470 "m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__s
+)
+
+1472  
+__ªs
+;
+
+1473 
+	}
+}
+
+1475 
+__STRING_INLINE
+ *
+__°ºchr_g
+ (c⁄° *
+__s
+, 
+__c
+);
+
+1477 
+__STRING_INLINE
+ *
+
+1478 
+	$__°ºchr_g
+ (c⁄° *
+__s
+, 
+__c
+)
+
+1480 
+__d0
+, 
+__d1
+;
+
+1481 *
+__ªs
+;
+
+1482 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1493 : "Ù" (
+__ªs
+), "=&S" (
+__d0
+), "=&a" (
+__d1
+)
+
+1494 : "0" (0), "1" (
+__s
+), "2" (
+__c
+),
+
+1495 "m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__s
+)
+
+1497  
+__ªs
+;
+
+1498 
+	}
+}
+
+1502 #i‡
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_XOPEN_EXTENDED
+
+
+1504 
+	#_HAVE_STRING_ARCH_rödex
+ 1
+
+	)
+
+1505 
+	#rödex
+(
+s
+, 
+c
+) \
+
+1506 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+c
+) \
+
+1507 ? 
+	`__°ºchr_c
+ ((
+s
+), ((
+c
+) & 0xff) << 8) \
+
+1508 : 
+	`__°ºchr_g
+ ((
+s
+), (
+c
+))))
+
+	)
+
+1514 
+	#_HAVE_STRING_ARCH_°rc•n
+ 1
+
+	)
+
+1515 
+	#°rc•n
+(
+s
+, 
+ªje˘
+) \
+
+1516 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+ªje˘
+) &&  ((reject)[0]) == 1 \
+
+1517 ? ((
+ªje˘
+)[0] == '\0' \
+
+1518 ? 
+	`°æí
+ (
+s
+) \
+
+1519 : ((
+ªje˘
+)[1] == '\0' \
+
+1520 ? 
+	`__°rc•n_c1
+ ((
+s
+), (((
+ªje˘
+)[0] << 8) & 0xff00)) \
+
+1521 : 
+	`__°rc•n_cg
+ ((
+s
+), (
+ªje˘
+), 
+	`°æí
+ (reject)))) \
+
+1522 : 
+	`__°rc•n_g
+ ((
+s
+), (
+ªje˘
+))))
+
+	)
+
+1524 
+__STRING_INLINE
+ 
+size_t
+ 
+__°rc•n_c1
+ (c⁄° *
+__s
+, 
+__ªje˘
+);
+
+1526 #i‚de‡
+_FORCE_INLINES
+
+
+1527 
+__STRING_INLINE
+ 
+size_t
+
+
+1528 
+	$__°rc•n_c1
+ (c⁄° *
+__s
+, 
+__ªje˘
+)
+
+1530 
+__d0
+;
+
+1531 *
+__ªs
+;
+
+1532 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1541 : "Ù" (
+__ªs
+), "=&a" (
+__d0
+)
+
+1542 : "0" (
+__s
+), "1" (
+__ªje˘
+),
+
+1543 "m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__s
+)
+
+1545  (
+__ªs
+ - 1Ë- 
+__s
+;
+
+1546 
+	}
+}
+
+1549 
+__STRING_INLINE
+ 
+size_t
+ 
+__°rc•n_cg
+ (c⁄° *
+__s
+, c⁄° 
+__ªje˘
+[],
+
+1550 
+size_t
+ 
+__ªje˘_Àn
+);
+
+1552 
+__STRING_INLINE
+ 
+size_t
+
+
+1553 
+	$__°rc•n_cg
+ (c⁄° *
+__s
+, c⁄° 
+__ªje˘
+[], 
+size_t
+ 
+__ªje˘_Àn
+)
+
+1555 
+__d0
+, 
+__d1
+, 
+__d2
+;
+
+1556 c⁄° *
+__ªs
+;
+
+1557 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1568 : "=S" (
+__ªs
+), "=&a" (
+__d0
+), "=&c" (
+__d1
+), "=&D" (
+__d2
+)
+
+1569 : "0" (
+__s
+), "d" (
+__ªje˘
+), "g" (
+__ªje˘_Àn
+)
+
+1571  (
+__ªs
+ - 1Ë- 
+__s
+;
+
+1572 
+	}
+}
+
+1574 
+__STRING_INLINE
+ 
+size_t
+ 
+__°rc•n_g
+ (c⁄° *
+__s
+, c⁄° *
+__ªje˘
+);
+
+1575 #ifde‡
+__PIC__
+
+
+1577 
+__STRING_INLINE
+ 
+size_t
+
+
+1578 
+	$__°rc•n_g
+ (c⁄° *
+__s
+, c⁄° *
+__ªje˘
+)
+
+1580 
+__d0
+, 
+__d1
+, 
+__d2
+;
+
+1581 c⁄° *
+__ªs
+;
+
+1582 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1599 : "=S" (
+__ªs
+), "=&a" (
+__d0
+), "=&c" (
+__d1
+), "=&D" (
+__d2
+)
+
+1600 : "r" (
+__ªje˘
+), "0" (
+__s
+), "1" (0), "2" (0xffffffff)
+
+1602  (
+__ªs
+ - 1Ë- 
+__s
+;
+
+1603 
+	}
+}
+
+1605 
+__STRING_INLINE
+ 
+size_t
+
+
+1606 
+	$__°rc•n_g
+ (c⁄° *
+__s
+, c⁄° *
+__ªje˘
+)
+
+1608 
+__d0
+, 
+__d1
+, 
+__d2
+, 
+__d3
+;
+
+1609 c⁄° *
+__ªs
+;
+
+1610 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1624 : "=S" (
+__ªs
+), "=&a" (
+__d0
+), "=&c" (
+__d1
+), "=&D" (
+__d2
+), "=&d" (
+__d3
+)
+
+1625 : "0" (
+__s
+), "1" (0), "2" (0xffffffff), "3" (
+__ªje˘
+), "b" (__reject)
+
+1628  (
+__ªs
+ - 1Ë- 
+__s
+;
+
+1629 
+	}
+}
+
+1635 
+	#_HAVE_STRING_ARCH_°r•n
+ 1
+
+	)
+
+1636 
+	#°r•n
+(
+s
+, 
+ac˚±
+) \
+
+1637 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+ac˚±
+) &&  ((accept)[0]) == 1 \
+
+1638 ? ((
+ac˚±
+)[0] == '\0' \
+
+1639 ? ((Ë(
+s
+), 0) \
+
+1640 : ((
+ac˚±
+)[1] == '\0' \
+
+1641 ? 
+	`__°r•n_c1
+ ((
+s
+), (((
+ac˚±
+)[0] << 8 ) & 0xff00)) \
+
+1642 : 
+	`__°r•n_cg
+ ((
+s
+), (
+ac˚±
+), 
+	`°æí
+ (accept)))) \
+
+1643 : 
+	`__°r•n_g
+ ((
+s
+), (
+ac˚±
+))))
+
+	)
+
+1645 #i‚de‡
+_FORCE_INLINES
+
+
+1646 
+__STRING_INLINE
+ 
+size_t
+ 
+__°r•n_c1
+ (c⁄° *
+__s
+, 
+__ac˚±
+);
+
+1648 
+__STRING_INLINE
+ 
+size_t
+
+
+1649 
+	$__°r•n_c1
+ (c⁄° *
+__s
+, 
+__ac˚±
+)
+
+1651 
+__d0
+;
+
+1652 *
+__ªs
+;
+
+1654 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1660 : "Ù" (
+__ªs
+), "=&q" (
+__d0
+)
+
+1661 : "0" (
+__s
+), "1" (
+__ac˚±
+),
+
+1662 "m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__s
+)
+
+1664  (
+__ªs
+ - 1Ë- 
+__s
+;
+
+1665 
+	}
+}
+
+1668 
+__STRING_INLINE
+ 
+size_t
+ 
+__°r•n_cg
+ (c⁄° *
+__s
+, c⁄° 
+__ac˚±
+[],
+
+1669 
+size_t
+ 
+__ac˚±_Àn
+);
+
+1671 
+__STRING_INLINE
+ 
+size_t
+
+
+1672 
+	$__°r•n_cg
+ (c⁄° *
+__s
+, c⁄° 
+__ac˚±
+[], 
+size_t
+ 
+__ac˚±_Àn
+)
+
+1674 
+__d0
+, 
+__d1
+, 
+__d2
+;
+
+1675 c⁄° *
+__ªs
+;
+
+1676 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1687 : "=S" (
+__ªs
+), "=&a" (
+__d0
+), "=&c" (
+__d1
+), "=&D" (
+__d2
+)
+
+1688 : "0" (
+__s
+), "g" (
+__ac˚±
+), "g" (
+__ac˚±_Àn
+),
+
+1691 "m" ( *(°ru˘ { 
+__x
+[0xfffffff]; } *)
+__s
+),
+
+1692 "m" ( *(°ru˘ { 
+__exãnsi⁄__
+ 
+__x
+[
+__ac˚±_Àn
+]; } *)
+__ac˚±
+)
+
+1694  (
+__ªs
+ - 1Ë- 
+__s
+;
+
+1695 
+	}
+}
+
+1697 
+__STRING_INLINE
+ 
+size_t
+ 
+__°r•n_g
+ (c⁄° *
+__s
+, c⁄° *
+__ac˚±
+);
+
+1698 #ifde‡
+__PIC__
+
+
+1700 
+__STRING_INLINE
+ 
+size_t
+
+
+1701 
+	$__°r•n_g
+ (c⁄° *
+__s
+, c⁄° *
+__ac˚±
+)
+
+1703 
+__d0
+, 
+__d1
+, 
+__d2
+;
+
+1704 c⁄° *
+__ªs
+;
+
+1705 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1721 : "=S" (
+__ªs
+), "=&a" (
+__d0
+), "=&c" (
+__d1
+), "=&D" (
+__d2
+)
+
+1722 : "d" (
+__ac˚±
+), "0" (
+__s
+), "1" (0), "2" (0xffffffff), "3" (__accept)
+
+1724  (
+__ªs
+ - 1Ë- 
+__s
+;
+
+1725 
+	}
+}
+
+1727 
+__STRING_INLINE
+ 
+size_t
+
+
+1728 
+	$__°r•n_g
+ (c⁄° *
+__s
+, c⁄° *
+__ac˚±
+)
+
+1730 
+__d0
+, 
+__d1
+, 
+__d2
+, 
+__d3
+;
+
+1731 c⁄° *
+__ªs
+;
+
+1732 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1746 : "=S" (
+__ªs
+), "=&a" (
+__d0
+), "=&c" (
+__d1
+), "=&D" (
+__d2
+), "=&d" (
+__d3
+)
+
+1747 : "0" (
+__s
+), "1" (0), "2" (0xffffffff), "3" (
+__ac˚±
+), "b" (__accept)
+
+1749  (
+__ªs
+ - 1Ë- 
+__s
+;
+
+1750 
+	}
+}
+
+1755 
+	#_HAVE_STRING_ARCH_°Ωbrk
+ 1
+
+	)
+
+1756 
+	#°Ωbrk
+(
+s
+, 
+ac˚±
+) \
+
+1757 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+ac˚±
+) &&  ((accept)[0]) == 1 \
+
+1758 ? ((
+ac˚±
+)[0] == '\0' \
+
+1759 ? ((Ë(
+s
+), (*) 0) \
+
+1760 : ((
+ac˚±
+)[1] == '\0' \
+
+1761 ? 
+	`°rchr
+ ((
+s
+), (
+ac˚±
+)[0]) \
+
+1762 : 
+	`__°Ωbrk_cg
+ ((
+s
+), (
+ac˚±
+), 
+	`°æí
+ (accept)))) \
+
+1763 : 
+	`__°Ωbrk_g
+ ((
+s
+), (
+ac˚±
+))))
+
+	)
+
+1765 
+__STRING_INLINE
+ *
+__°Ωbrk_cg
+ (c⁄° *
+__s
+, c⁄° 
+__ac˚±
+[],
+
+1766 
+size_t
+ 
+__ac˚±_Àn
+);
+
+1768 
+__STRING_INLINE
+ *
+
+1769 
+	$__°Ωbrk_cg
+ (c⁄° *
+__s
+, c⁄° 
+__ac˚±
+[], 
+size_t
+ 
+__ac˚±_Àn
+)
+
+1771 
+__d0
+, 
+__d1
+, 
+__d2
+;
+
+1772 *
+__ªs
+;
+
+1773 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1788 : "=S" (
+__ªs
+), "=&a" (
+__d0
+), "=&c" (
+__d1
+), "=&D" (
+__d2
+)
+
+1789 : "0" (
+__s
+), "d" (
+__ac˚±
+), "g" (
+__ac˚±_Àn
+)
+
+1791  
+__ªs
+;
+
+1792 
+	}
+}
+
+1794 
+__STRING_INLINE
+ *
+__°Ωbrk_g
+ (c⁄° *
+__s
+, c⁄° *
+__ac˚±
+);
+
+1795 #ifde‡
+__PIC__
+
+
+1797 
+__STRING_INLINE
+ *
+
+1798 
+	$__°Ωbrk_g
+ (c⁄° *
+__s
+, c⁄° *
+__ac˚±
+)
+
+1800 
+__d0
+, 
+__d1
+, 
+__d2
+;
+
+1801 *
+__ªs
+;
+
+1802 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1823 : "=S" (
+__ªs
+), "=&a" (
+__d0
+), "=&c" (
+__d1
+), "=&D" (
+__d2
+)
+
+1824 : "d" (
+__ac˚±
+), "0" (
+__s
+), "1" (0), "2" (0xffffffff)
+
+1826  
+__ªs
+;
+
+1827 
+	}
+}
+
+1829 
+__STRING_INLINE
+ *
+
+1830 
+	$__°Ωbrk_g
+ (c⁄° *
+__s
+, c⁄° *
+__ac˚±
+)
+
+1832 
+__d0
+, 
+__d1
+, 
+__d2
+, 
+__d3
+;
+
+1833 *
+__ªs
+;
+
+1834 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1853 : "=S" (
+__ªs
+), "=&a" (
+__d0
+), "=&c" (
+__d1
+), "=&d" (
+__d2
+), "=&D" (
+__d3
+)
+
+1854 : "0" (
+__s
+), "1" (0), "2" (0xffffffff), "b" (
+__ac˚±
+)
+
+1856  
+__ªs
+;
+
+1857 
+	}
+}
+
+1862 
+	#_HAVE_STRING_ARCH_°r°r
+ 1
+
+	)
+
+1863 
+	#°r°r
+(
+hay°ack
+, 
+√edÀ
+) \
+
+1864 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+√edÀ
+) &&  ((needle)[0]) == 1 \
+
+1865 ? ((
+√edÀ
+)[0] == '\0' \
+
+1866 ? (
+hay°ack
+) \
+
+1867 : ((
+√edÀ
+)[1] == '\0' \
+
+1868 ? 
+	`°rchr
+ ((
+hay°ack
+), (
+√edÀ
+)[0]) \
+
+1869 : 
+	`__°r°r_cg
+ ((
+hay°ack
+), (
+√edÀ
+), \
+
+1870 
+	`°æí
+ (
+√edÀ
+)))) \
+
+1871 : 
+	`__°r°r_g
+ ((
+hay°ack
+), (
+√edÀ
+))))
+
+	)
+
+1875 
+__STRING_INLINE
+ *
+__°r°r_cg
+ (c⁄° *
+__hay°ack
+,
+
+1876 c⁄° 
+__√edÀ
+[],
+
+1877 
+size_t
+ 
+__√edÀ_Àn
+);
+
+1879 
+__STRING_INLINE
+ *
+
+1880 
+	$__°r°r_cg
+ (c⁄° *
+__hay°ack
+, c⁄° 
+__√edÀ
+[],
+
+1881 
+size_t
+ 
+__√edÀ_Àn
+)
+
+1883 
+__d0
+, 
+__d1
+, 
+__d2
+;
+
+1884 *
+__ªs
+;
+
+1885 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1898 : "=&a" (
+__ªs
+), "=&S" (
+__d0
+), "=&D" (
+__d1
+), "=&c" (
+__d2
+)
+
+1899 : "g" (
+__√edÀ_Àn
+), "1" (
+__hay°ack
+), "d" (
+__√edÀ
+)
+
+1901  
+__ªs
+;
+
+1902 
+	}
+}
+
+1904 
+__STRING_INLINE
+ *
+__°r°r_g
+ (c⁄° *
+__hay°ack
+,
+
+1905 c⁄° *
+__√edÀ
+);
+
+1906 #ifde‡
+__PIC__
+
+
+1908 
+__STRING_INLINE
+ *
+
+1909 
+	$__°r°r_g
+ (c⁄° *
+__hay°ack
+, c⁄° *
+__√edÀ
+)
+
+1911 
+__d0
+, 
+__d1
+, 
+__d2
+;
+
+1912 *
+__ªs
+;
+
+1913 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1932 : "=&a" (
+__ªs
+), "=&c" (
+__d0
+), "=&S" (
+__d1
+), "=&D" (
+__d2
+)
+
+1933 : "0" (0), "1" (0xffffffff), "2" (
+__hay°ack
+), "3" (
+__√edÀ
+),
+
+1934 "d" (
+__√edÀ
+)
+
+1936  
+__ªs
+;
+
+1937 
+	}
+}
+
+1939 
+__STRING_INLINE
+ *
+
+1940 
+	$__°r°r_g
+ (c⁄° *
+__hay°ack
+, c⁄° *
+__√edÀ
+)
+
+1942 
+__d0
+, 
+__d1
+, 
+__d2
+, 
+__d3
+;
+
+1943 *
+__ªs
+;
+
+1944 
+__asm__
+ 
+__vﬁ©ûe__
+
+
+1961 : "=&a" (
+__ªs
+), "=&c" (
+__d0
+), "=&S" (
+__d1
+), "=&D" (
+__d2
+), "=&d" (
+__d3
+)
+
+1962 : "0" (0), "1" (0xffffffff), "2" (
+__hay°ack
+), "3" (
+__√edÀ
+),
+
+1963 "b" (
+__√edÀ
+)
+
+1965  
+__ªs
+;
+
+1966 
+	}
+}
+
+1972 #i‡
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_XOPEN_EXTENDED
+
+
+1973 #ifde‡
+__i686__
+
+
+1974 
+	#_HAVE_STRING_ARCH_ffs
+ 1
+
+	)
+
+1975 
+	#ffs
+(
+w‹d
+Ë(
+	`__buûtö_c⁄°™t_p
+ (word) \
+
+1976 ? 
+	`__buûtö_ffs
+ (
+w‹d
+) \
+
+1977 : ({ 
+__˙t
+, 
+__tmp
+; \
+
+1978 
+__asm__
+ 
+__vﬁ©ûe__
+ \
+
+1981 : "=&r" (
+__˙t
+), "Ù" (
+__tmp
+) \
+
+1982 : "rm" (
+w‹d
+), "1" (-1)); \
+
+1983 
+__˙t
+ + 1; }))
+
+	)
+
+1985 #i‚de‡
+ff¶
+
+
+1986 
+	#ff¶
+(
+w‹d
+Ë
+	`ffs
+(w‹d)
+
+	)
+
+1991 #i‚de‡
+_FORCE_INLINES
+
+
+1992 #unde‡
+__STRING_INLINE
+
+
+	@/usr/include/bits/string2.h
+
+20 #i‚de‡
+_STRING_H
+
+
+24 #i‚de‡
+__NO_STRING_INLINES
+
+
+41 #i‚de‡
+__STRING_INLINE
+
+
+42 #ifde‡
+__˝lu•lus
+
+
+43 
+	#__STRING_INLINE
+ 
+ölöe
+
+
+	)
+
+45 
+	#__STRING_INLINE
+ 
+__exã∫_ölöe
+
+
+	)
+
+49 #i‡
+_STRING_INLINE_u«lig√d
+
+
+51 
+	~<ídün.h
+>
+
+52 
+	~<bôs/ty≥s.h
+>
+
+54 #i‡
+__BYTE_ORDER
+ =
+__LITTLE_ENDIAN
+
+
+55 
+	#__STRING2_SMALL_GET16
+(
+§c
+, 
+idx
+) \
+
+56 (((c⁄° *Ë(c⁄° *Ë(
+§c
+))[
+idx
+ + 1] << 8 \
+
+57 | ((c⁄° *Ë(c⁄° *Ë(
+§c
+))[
+idx
+])
+
+	)
+
+58 
+	#__STRING2_SMALL_GET32
+(
+§c
+, 
+idx
+) \
+
+59 (((((c⁄° *Ë(c⁄° *Ë(
+§c
+))[
+idx
+ + 3] << 8 \
+
+60 | ((c⁄° *Ë(c⁄° *Ë(
+§c
+))[
+idx
+ + 2]) << 8 \
+
+61 | ((c⁄° *Ë(c⁄° *Ë(
+§c
+))[
+idx
+ + 1]) << 8 \
+
+62 | ((c⁄° *Ë(c⁄° *Ë(
+§c
+))[
+idx
+])
+
+	)
+
+64 
+	#__STRING2_SMALL_GET16
+(
+§c
+, 
+idx
+) \
+
+65 (((c⁄° *Ë(c⁄° *Ë(
+§c
+))[
+idx
+] << 8 \
+
+66 | ((c⁄° *Ë(c⁄° *Ë(
+§c
+))[
+idx
+ + 1])
+
+	)
+
+67 
+	#__STRING2_SMALL_GET32
+(
+§c
+, 
+idx
+) \
+
+68 (((((c⁄° *Ë(c⁄° *Ë(
+§c
+))[
+idx
+] << 8 \
+
+69 | ((c⁄° *Ë(c⁄° *Ë(
+§c
+))[
+idx
+ + 1]) << 8 \
+
+70 | ((c⁄° *Ë(c⁄° *Ë(
+§c
+))[
+idx
+ + 2]) << 8 \
+
+71 | ((c⁄° *Ë(c⁄° *Ë(
+§c
+))[
+idx
+ + 3])
+
+	)
+
+76 
+	#__STRING2_COPY_TYPE
+(
+N
+) \
+
+77 °ru˘ { 
+__¨r
+[
+N
+]; } \
+
+78 
+	t__©åibuã__
+ ((
+	t__∑cked__
+)Ë
+	t__STRING2_COPY_ARR
+##
+	tN
+
+
+	)
+
+79 
+	t__STRING2_COPY_TYPE
+ (2);
+
+80 
+__STRING2_COPY_TYPE
+ (3);
+
+81 
+__STRING2_COPY_TYPE
+ (4);
+
+82 
+__STRING2_COPY_TYPE
+ (5);
+
+83 
+__STRING2_COPY_TYPE
+ (6);
+
+84 
+__STRING2_COPY_TYPE
+ (7);
+
+85 
+__STRING2_COPY_TYPE
+ (8);
+
+86 #unde‡
+__STRING2_COPY_TYPE
+
+
+92 
+	#__°rög2_1b±r_p
+(
+__x
+) \
+
+93 ((
+size_t
+)(c⁄° *)((
+__x
+Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)
+
+	)
+
+96 #i‡!
+deföed
+ 
+_HAVE_STRING_ARCH_mem£t
+
+
+97 #i‡!
+__GNUC_PREREQ
+ (3, 0)
+
+98 #i‡
+_STRING_INLINE_u«lig√d
+
+
+99 
+	#mem£t
+(
+s
+, 
+c
+, 
+n
+) \
+
+100 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+n
+) && (n) <= 16 \
+
+101 ? ((
+n
+) == 1 \
+
+102 ? 
+	`__mem£t_1
+ (
+s
+, 
+c
+) \
+
+103 : 
+	`__mem£t_gc
+ (
+s
+, 
+c
+, 
+n
+)) \
+
+104 : (
+	`__buûtö_c⁄°™t_p
+ (
+c
+) && (c) == '\0' \
+
+105 ? ({ *
+__s
+ = (
+s
+); 
+	`__bzîo
+ (__s, 
+n
+); __s; }) \
+
+106 : 
+	`mem£t
+ (
+s
+, 
+c
+, 
+n
+))))
+
+	)
+
+108 
+	#__mem£t_1
+(
+s
+, 
+c
+Ë({ *
+__s
+ = (s); \
+
+109 *((
+__uöt8_t
+ *Ë
+__s
+Ë(__uöt8_tË
+c
+; __s; })
+
+	)
+
+111 
+	#__mem£t_gc
+(
+s
+, 
+c
+, 
+n
+) \
+
+112 ({ *
+__s
+ = (
+s
+); \
+
+114 
+__ui
+; \
+
+115 
+__usi
+; \
+
+116 
+__uc
+; \
+
+117 } *
+__u
+ = 
+__s
+; \
+
+118 
+__uöt8_t
+ 
+__c
+ = (__uöt8_tË(
+c
+); \
+
+121 (Ë(
+n
+)) \
+
+124 
+__u
+->
+__ui
+ = 
+__c
+ * 0x01010101; \
+
+125 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+127 
+__u
+->
+__ui
+ = 
+__c
+ * 0x01010101; \
+
+128 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+130 
+__u
+->
+__ui
+ = 
+__c
+ * 0x01010101; \
+
+131 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+133 
+__u
+->
+__usi
+ = (Ë
+__c
+ * 0x0101; \
+
+134 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 2); \
+
+135 
+__u
+->
+__uc
+ = (Ë
+__c
+; \
+
+139 
+__u
+->
+__ui
+ = 
+__c
+ * 0x01010101; \
+
+140 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+142 
+__u
+->
+__ui
+ = 
+__c
+ * 0x01010101; \
+
+143 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+145 
+__u
+->
+__ui
+ = 
+__c
+ * 0x01010101; \
+
+146 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+148 
+__u
+->
+__usi
+ = (Ë
+__c
+ * 0x0101; \
+
+152 
+__u
+->
+__ui
+ = 
+__c
+ * 0x01010101; \
+
+153 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+155 
+__u
+->
+__ui
+ = 
+__c
+ * 0x01010101; \
+
+156 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+158 
+__u
+->
+__ui
+ = 
+__c
+ * 0x01010101; \
+
+159 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+161 
+__u
+->
+__uc
+ = (Ë
+__c
+; \
+
+165 
+__u
+->
+__ui
+ = 
+__c
+ * 0x01010101; \
+
+166 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+168 
+__u
+->
+__ui
+ = 
+__c
+ * 0x01010101; \
+
+169 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+171 
+__u
+->
+__ui
+ = 
+__c
+ * 0x01010101; \
+
+172 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4); \
+
+174 
+__u
+->
+__ui
+ = 
+__c
+ * 0x01010101; \
+
+179 
+__s
+; })
+
+	)
+
+181 
+	#mem£t
+(
+s
+, 
+c
+, 
+n
+) \
+
+182 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+c
+) && (c) == '\0' \
+
+183 ? ({ *
+__s
+ = (
+s
+); 
+	`__bzîo
+ (__s, 
+n
+); __s; }) \
+
+184 : 
+	`mem£t
+ (
+s
+, 
+c
+, 
+n
+)))
+
+	)
+
+193 #i‡
+__GNUC_PREREQ
+ (2, 91)
+
+194 
+	#__bzîo
+(
+s
+, 
+n
+Ë
+	`__buûtö_mem£t
+ (s, '\0',Ç)
+
+	)
+
+202 #ifde‡
+__USE_GNU
+
+
+203 #i‡!
+deföed
+ 
+_HAVE_STRING_ARCH_memp˝y
+ || deföed 
+_FORCE_INLINES
+
+
+204 #i‚de‡
+_HAVE_STRING_ARCH_memp˝y
+
+
+205 #i‡
+__GNUC_PREREQ
+ (3, 4)
+
+206 
+	#__memp˝y
+(
+de°
+, 
+§c
+, 
+n
+Ë
+	`__buûtö_memp˝y
+ (de°, src,Ç)
+
+	)
+
+207 #ñi‡
+__GNUC_PREREQ
+ (3, 0)
+
+208 
+	#__memp˝y
+(
+de°
+, 
+§c
+, 
+n
+) \
+
+209 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+§c
+Ë&& __buûtö_c⁄°™t_∞(
+n
+) \
+
+210 && 
+	`__°rög2_1b±r_p
+ (
+§c
+Ë&& 
+n
+ <= 8 \
+
+211 ? 
+	`__buûtö_mem˝y
+ (
+de°
+, 
+§c
+, 
+n
+) + (n) \
+
+212 : 
+	`__memp˝y
+ (
+de°
+, 
+§c
+, 
+n
+)))
+
+	)
+
+214 
+	#__memp˝y
+(
+de°
+, 
+§c
+, 
+n
+) \
+
+215 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+§c
+Ë&& __buûtö_c⁄°™t_∞(
+n
+) \
+
+216 && 
+	`__°rög2_1b±r_p
+ (
+§c
+Ë&& 
+n
+ <= 8 \
+
+217 ? 
+	`__memp˝y_smÆl
+ (
+de°
+, 
+	`__memp˝y_¨gs
+ (
+§c
+), 
+n
+) \
+
+218 : 
+	`__memp˝y
+ (
+de°
+, 
+§c
+, 
+n
+)))
+
+	)
+
+222 
+	#memp˝y
+(
+de°
+, 
+§c
+, 
+n
+Ë
+	`__memp˝y
+ (de°, src,Ç)
+
+	)
+
+225 #i‡!
+__GNUC_PREREQ
+ (3, 0Ë|| 
+deföed
+ 
+_FORCE_INLINES
+
+
+226 #i‡
+_STRING_INLINE_u«lig√d
+
+
+227 #i‚de‡
+_FORCE_INLINES
+
+
+228 
+	#__memp˝y_¨gs
+(
+§c
+) \
+
+229 ((c⁄° *Ë(
+§c
+))[0], ((const *) (src))[2], \
+
+230 ((c⁄° *Ë(
+§c
+))[4], ((const *) (src))[6], \
+
+231 
+__exãnsi⁄__
+ 
+	`__STRING2_SMALL_GET16
+ (
+§c
+, 0), \
+
+232 
+__exãnsi⁄__
+ 
+	`__STRING2_SMALL_GET16
+ (
+§c
+, 4), \
+
+233 
+__exãnsi⁄__
+ 
+	`__STRING2_SMALL_GET32
+ (
+§c
+, 0), \
+
+234 
+__exãnsi⁄__
+ 
+	`__STRING2_SMALL_GET32
+ (
+§c
+, 4)
+
+	)
+
+236 
+__STRING_INLINE
+ *
+__memp˝y_smÆl
+ (*, , , , ,
+
+237 
+__uöt16_t
+, __uöt16_t, 
+__uöt32_t
+,
+
+238 
+__uöt32_t
+, 
+size_t
+);
+
+239 
+__STRING_INLINE
+ *
+
+240 
+	$__memp˝y_smÆl
+ (*
+__de°1
+,
+
+241 
+__§c0_1
+, 
+__§c2_1
+, 
+__§c4_1
+, 
+__§c6_1
+,
+
+242 
+__uöt16_t
+ 
+__§c0_2
+, __uöt16_à
+__§c4_2
+,
+
+243 
+__uöt32_t
+ 
+__§c0_4
+, __uöt32_à
+__§c4_4
+,
+
+244 
+size_t
+ 
+__§˛í
+)
+
+247 
+__uöt32_t
+ 
+__ui
+;
+
+248 
+__uöt16_t
+ 
+__usi
+;
+
+249 
+__uc
+;
+
+250 
+__c
+;
+
+251 } *
+__u
+ = 
+__de°1
+;
+
+252 (Ë
+__§˛í
+)
+
+255 
+__u
+->
+__c
+ = 
+__§c0_1
+;
+
+256 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 1);
+
+259 
+__u
+->
+__usi
+ = 
+__§c0_2
+;
+
+260 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 2);
+
+263 
+__u
+->
+__usi
+ = 
+__§c0_2
+;
+
+264 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 2);
+
+265 
+__u
+->
+__c
+ = 
+__§c2_1
+;
+
+266 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 1);
+
+269 
+__u
+->
+__ui
+ = 
+__§c0_4
+;
+
+270 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4);
+
+273 
+__u
+->
+__ui
+ = 
+__§c0_4
+;
+
+274 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4);
+
+275 
+__u
+->
+__c
+ = 
+__§c4_1
+;
+
+276 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 1);
+
+279 
+__u
+->
+__ui
+ = 
+__§c0_4
+;
+
+280 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4);
+
+281 
+__u
+->
+__usi
+ = 
+__§c4_2
+;
+
+282 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 2);
+
+285 
+__u
+->
+__ui
+ = 
+__§c0_4
+;
+
+286 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4);
+
+287 
+__u
+->
+__usi
+ = 
+__§c4_2
+;
+
+288 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 2);
+
+289 
+__u
+->
+__c
+ = 
+__§c6_1
+;
+
+290 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 1);
+
+293 
+__u
+->
+__ui
+ = 
+__§c0_4
+;
+
+294 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4);
+
+295 
+__u
+->
+__ui
+ = 
+__§c4_4
+;
+
+296 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4);
+
+299  (*Ë
+__u
+;
+
+300 
+	}
+}
+
+302 #i‚de‡
+_FORCE_INLINES
+
+
+303 
+	#__memp˝y_¨gs
+(
+§c
+) \
+
+304 ((c⁄° *Ë(
+§c
+))[0], \
+
+305 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR2
+) \
+
+306 { { ((c⁄° *Ë(
+§c
+))[0], ((const *) (src))[1] } }), \
+
+307 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR3
+) \
+
+308 { { ((c⁄° *Ë(
+§c
+))[0], ((const *) (src))[1], \
+
+309 ((c⁄° *Ë(
+§c
+))[2] } }), \
+
+310 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR4
+) \
+
+311 { { ((c⁄° *Ë(
+§c
+))[0], ((const *) (src))[1], \
+
+312 ((c⁄° *Ë(
+§c
+))[2], ((const *) (src))[3] } }), \
+
+313 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR5
+) \
+
+314 { { ((c⁄° *Ë(
+§c
+))[0], ((const *) (src))[1], \
+
+315 ((c⁄° *Ë(
+§c
+))[2], ((const *) (src))[3], \
+
+316 ((c⁄° *Ë(
+§c
+))[4] } }), \
+
+317 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR6
+) \
+
+318 { { ((c⁄° *Ë(
+§c
+))[0], ((const *) (src))[1], \
+
+319 ((c⁄° *Ë(
+§c
+))[2], ((const *) (src))[3], \
+
+320 ((c⁄° *Ë(
+§c
+))[4], ((const *) (src))[5] } }), \
+
+321 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR7
+) \
+
+322 { { ((c⁄° *Ë(
+§c
+))[0], ((const *) (src))[1], \
+
+323 ((c⁄° *Ë(
+§c
+))[2], ((const *) (src))[3], \
+
+324 ((c⁄° *Ë(
+§c
+))[4], ((const *) (src))[5], \
+
+325 ((c⁄° *Ë(
+§c
+))[6] } }), \
+
+326 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR8
+) \
+
+327 { { ((c⁄° *Ë(
+§c
+))[0], ((const *) (src))[1], \
+
+328 ((c⁄° *Ë(
+§c
+))[2], ((const *) (src))[3], \
+
+329 ((c⁄° *Ë(
+§c
+))[4], ((const *) (src))[5], \
+
+330 ((c⁄° *Ë(
+§c
+))[6], ((c⁄° *Ë(§c))[7] } })
+
+	)
+
+332 
+__STRING_INLINE
+ *
+__memp˝y_smÆl
+ (*, , 
+__STRING2_COPY_ARR2
+,
+
+333 
+__STRING2_COPY_ARR3
+,
+
+334 
+__STRING2_COPY_ARR4
+,
+
+335 
+__STRING2_COPY_ARR5
+,
+
+336 
+__STRING2_COPY_ARR6
+,
+
+337 
+__STRING2_COPY_ARR7
+,
+
+338 
+__STRING2_COPY_ARR8
+, 
+size_t
+);
+
+339 
+__STRING_INLINE
+ *
+
+340 
+	$__memp˝y_smÆl
+ (*
+__de°
+, 
+__§c1
+,
+
+341 
+__STRING2_COPY_ARR2
+ 
+__§c2
+, 
+__STRING2_COPY_ARR3
+ 
+__§c3
+,
+
+342 
+__STRING2_COPY_ARR4
+ 
+__§c4
+, 
+__STRING2_COPY_ARR5
+ 
+__§c5
+,
+
+343 
+__STRING2_COPY_ARR6
+ 
+__§c6
+, 
+__STRING2_COPY_ARR7
+ 
+__§c7
+,
+
+344 
+__STRING2_COPY_ARR8
+ 
+__§c8
+, 
+size_t
+ 
+__§˛í
+)
+
+347 
+__c
+;
+
+348 
+__STRING2_COPY_ARR2
+ 
+__sˇ2
+;
+
+349 
+__STRING2_COPY_ARR3
+ 
+__sˇ3
+;
+
+350 
+__STRING2_COPY_ARR4
+ 
+__sˇ4
+;
+
+351 
+__STRING2_COPY_ARR5
+ 
+__sˇ5
+;
+
+352 
+__STRING2_COPY_ARR6
+ 
+__sˇ6
+;
+
+353 
+__STRING2_COPY_ARR7
+ 
+__sˇ7
+;
+
+354 
+__STRING2_COPY_ARR8
+ 
+__sˇ8
+;
+
+355 } *
+__u
+ = 
+__de°
+;
+
+356 (Ë
+__§˛í
+)
+
+359 
+__u
+->
+__c
+ = 
+__§c1
+;
+
+362 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ2
+ = 
+__§c2
+;
+
+365 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ3
+ = 
+__§c3
+;
+
+368 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ4
+ = 
+__§c4
+;
+
+371 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ5
+ = 
+__§c5
+;
+
+374 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ6
+ = 
+__§c6
+;
+
+377 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ7
+ = 
+__§c7
+;
+
+380 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ8
+ = 
+__§c8
+;
+
+383  
+	`__exãnsi⁄__
+ ((*Ë
+__u
+ + 
+__§˛í
+);
+
+384 
+	}
+}
+
+392 #i‚de‡
+_HAVE_STRING_ARCH_°rchr
+
+
+393 *
+__øwmemchr
+ (c⁄° *
+__s
+, 
+__c
+);
+
+394 #i‡
+__GNUC_PREREQ
+ (3, 2)
+
+395 
+	#°rchr
+(
+s
+, 
+c
+) \
+
+396 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+c
+Ë&& !__buûtö_c⁄°™t_∞(
+s
+) \
+
+397 && (
+c
+) == '\0' \
+
+398 ? (*Ë
+	`__øwmemchr
+ (
+s
+, 
+c
+) \
+
+399 : 
+	`__buûtö_°rchr
+ (
+s
+, 
+c
+)))
+
+	)
+
+401 
+	#°rchr
+(
+s
+, 
+c
+) \
+
+402 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+c
+) && (c) == '\0' \
+
+403 ? (*Ë
+	`__øwmemchr
+ (
+s
+, 
+c
+) \
+
+404 : 
+	`°rchr
+ (
+s
+, 
+c
+)))
+
+	)
+
+410 #i‡(!
+deföed
+ 
+_HAVE_STRING_ARCH_°r˝y
+ && !
+__GNUC_PREREQ
+ (3, 0)) \
+
+411 || 
+deföed
+ 
+	g_FORCE_INLINES
+
+
+412 #i‡!
+deföed
+ 
+_HAVE_STRING_ARCH_°r˝y
+ && !
+__GNUC_PREREQ
+ (3, 0)
+
+413 
+	#°r˝y
+(
+de°
+, 
+§c
+) \
+
+414 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+§c
+) \
+
+415 ? (
+	`__°rög2_1b±r_p
+ (
+§c
+Ë&& 
+	`°æí
+ (src) + 1 <= 8 \
+
+416 ? 
+	`__°r˝y_smÆl
+ (
+de°
+, 
+	`__°r˝y_¨gs
+ (
+§c
+), \
+
+417 
+	`°æí
+ (
+§c
+) + 1) \
+
+418 : (*Ë
+	`mem˝y
+ (
+de°
+, 
+§c
+, 
+	`°æí
+ (src) + 1)) \
+
+419 : 
+	`°r˝y
+ (
+de°
+, 
+§c
+)))
+
+	)
+
+422 #i‡
+_STRING_INLINE_u«lig√d
+
+
+423 #i‚de‡
+_FORCE_INLINES
+
+
+424 
+	#__°r˝y_¨gs
+(
+§c
+) \
+
+425 
+__exãnsi⁄__
+ 
+	`__STRING2_SMALL_GET16
+ (
+§c
+, 0), \
+
+426 
+__exãnsi⁄__
+ 
+	`__STRING2_SMALL_GET16
+ (
+§c
+, 4), \
+
+427 
+__exãnsi⁄__
+ 
+	`__STRING2_SMALL_GET32
+ (
+§c
+, 0), \
+
+428 
+__exãnsi⁄__
+ 
+	`__STRING2_SMALL_GET32
+ (
+§c
+, 4)
+
+	)
+
+430 
+__STRING_INLINE
+ *
+__°r˝y_smÆl
+ (*, 
+__uöt16_t
+, __uint16_t,
+
+431 
+__uöt32_t
+, __uöt32_t, 
+size_t
+);
+
+432 
+__STRING_INLINE
+ *
+
+433 
+	$__°r˝y_smÆl
+ (*
+__de°
+,
+
+434 
+__uöt16_t
+ 
+__§c0_2
+, __uöt16_à
+__§c4_2
+,
+
+435 
+__uöt32_t
+ 
+__§c0_4
+, __uöt32_à
+__§c4_4
+,
+
+436 
+size_t
+ 
+__§˛í
+)
+
+439 
+__uöt32_t
+ 
+__ui
+;
+
+440 
+__uöt16_t
+ 
+__usi
+;
+
+441 
+__uc
+;
+
+442 } *
+__u
+ = (*Ë
+__de°
+;
+
+443 (Ë
+__§˛í
+)
+
+446 
+__u
+->
+__uc
+ = '\0';
+
+449 
+__u
+->
+__usi
+ = 
+__§c0_2
+;
+
+452 
+__u
+->
+__usi
+ = 
+__§c0_2
+;
+
+453 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 2);
+
+454 
+__u
+->
+__uc
+ = '\0';
+
+457 
+__u
+->
+__ui
+ = 
+__§c0_4
+;
+
+460 
+__u
+->
+__ui
+ = 
+__§c0_4
+;
+
+461 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4);
+
+462 
+__u
+->
+__uc
+ = '\0';
+
+465 
+__u
+->
+__ui
+ = 
+__§c0_4
+;
+
+466 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4);
+
+467 
+__u
+->
+__usi
+ = 
+__§c4_2
+;
+
+470 
+__u
+->
+__ui
+ = 
+__§c0_4
+;
+
+471 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4);
+
+472 
+__u
+->
+__usi
+ = 
+__§c4_2
+;
+
+473 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 2);
+
+474 
+__u
+->
+__uc
+ = '\0';
+
+477 
+__u
+->
+__ui
+ = 
+__§c0_4
+;
+
+478 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4);
+
+479 
+__u
+->
+__ui
+ = 
+__§c4_4
+;
+
+482  
+__de°
+;
+
+483 
+	}
+}
+
+485 #i‚de‡
+_FORCE_INLINES
+
+
+486 
+	#__°r˝y_¨gs
+(
+§c
+) \
+
+487 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR2
+) \
+
+488 { { ((c⁄° *Ë(
+§c
+))[0], '\0' } }), \
+
+489 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR3
+) \
+
+490 { { ((c⁄° *Ë(
+§c
+))[0], ((const *) (src))[1], \
+
+492 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR4
+) \
+
+493 { { ((c⁄° *Ë(
+§c
+))[0], ((const *) (src))[1], \
+
+494 ((c⁄° *Ë(
+§c
+))[2], '\0' } }), \
+
+495 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR5
+) \
+
+496 { { ((c⁄° *Ë(
+§c
+))[0], ((const *) (src))[1], \
+
+497 ((c⁄° *Ë(
+§c
+))[2], ((const *) (src))[3], \
+
+499 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR6
+) \
+
+500 { { ((c⁄° *Ë(
+§c
+))[0], ((const *) (src))[1], \
+
+501 ((c⁄° *Ë(
+§c
+))[2], ((const *) (src))[3], \
+
+502 ((c⁄° *Ë(
+§c
+))[4], '\0' } }), \
+
+503 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR7
+) \
+
+504 { { ((c⁄° *Ë(
+§c
+))[0], ((const *) (src))[1], \
+
+505 ((c⁄° *Ë(
+§c
+))[2], ((const *) (src))[3], \
+
+506 ((c⁄° *Ë(
+§c
+))[4], ((const *) (src))[5], \
+
+508 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR8
+) \
+
+509 { { ((c⁄° *Ë(
+§c
+))[0], ((const *) (src))[1], \
+
+510 ((c⁄° *Ë(
+§c
+))[2], ((const *) (src))[3], \
+
+511 ((c⁄° *Ë(
+§c
+))[4], ((const *) (src))[5], \
+
+512 ((c⁄° *Ë(
+§c
+))[6], '\0' } })
+
+	)
+
+514 
+__STRING_INLINE
+ *
+__°r˝y_smÆl
+ (*, 
+__STRING2_COPY_ARR2
+,
+
+515 
+__STRING2_COPY_ARR3
+,
+
+516 
+__STRING2_COPY_ARR4
+,
+
+517 
+__STRING2_COPY_ARR5
+,
+
+518 
+__STRING2_COPY_ARR6
+,
+
+519 
+__STRING2_COPY_ARR7
+,
+
+520 
+__STRING2_COPY_ARR8
+, 
+size_t
+);
+
+521 
+__STRING_INLINE
+ *
+
+522 
+	$__°r˝y_smÆl
+ (*
+__de°
+,
+
+523 
+__STRING2_COPY_ARR2
+ 
+__§c2
+, 
+__STRING2_COPY_ARR3
+ 
+__§c3
+,
+
+524 
+__STRING2_COPY_ARR4
+ 
+__§c4
+, 
+__STRING2_COPY_ARR5
+ 
+__§c5
+,
+
+525 
+__STRING2_COPY_ARR6
+ 
+__§c6
+, 
+__STRING2_COPY_ARR7
+ 
+__§c7
+,
+
+526 
+__STRING2_COPY_ARR8
+ 
+__§c8
+, 
+size_t
+ 
+__§˛í
+)
+
+529 
+__c
+;
+
+530 
+__STRING2_COPY_ARR2
+ 
+__sˇ2
+;
+
+531 
+__STRING2_COPY_ARR3
+ 
+__sˇ3
+;
+
+532 
+__STRING2_COPY_ARR4
+ 
+__sˇ4
+;
+
+533 
+__STRING2_COPY_ARR5
+ 
+__sˇ5
+;
+
+534 
+__STRING2_COPY_ARR6
+ 
+__sˇ6
+;
+
+535 
+__STRING2_COPY_ARR7
+ 
+__sˇ7
+;
+
+536 
+__STRING2_COPY_ARR8
+ 
+__sˇ8
+;
+
+537 } *
+__u
+ = (*Ë
+__de°
+;
+
+538 (Ë
+__§˛í
+)
+
+541 
+__u
+->
+__c
+ = '\0';
+
+544 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ2
+ = 
+__§c2
+;
+
+547 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ3
+ = 
+__§c3
+;
+
+550 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ4
+ = 
+__§c4
+;
+
+553 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ5
+ = 
+__§c5
+;
+
+556 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ6
+ = 
+__§c6
+;
+
+559 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ7
+ = 
+__§c7
+;
+
+562 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ8
+ = 
+__§c8
+;
+
+565  
+__de°
+;
+
+566 
+	}
+}
+
+572 #ifde‡
+__USE_GNU
+
+
+573 #i‡!
+deföed
+ 
+_HAVE_STRING_ARCH_°p˝y
+ || deföed 
+_FORCE_INLINES
+
+
+574 #i‚de‡
+_HAVE_STRING_ARCH_°p˝y
+
+
+575 #i‡
+__GNUC_PREREQ
+ (3, 4)
+
+576 
+	#__°p˝y
+(
+de°
+, 
+§c
+Ë
+	`__buûtö_°p˝y
+ (de°, src)
+
+	)
+
+577 #ñi‡
+__GNUC_PREREQ
+ (3, 0)
+
+578 
+	#__°p˝y
+(
+de°
+, 
+§c
+) \
+
+579 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+§c
+) \
+
+580 ? (
+	`__°rög2_1b±r_p
+ (
+§c
+Ë&& 
+	`°æí
+ (src) + 1 <= 8 \
+
+581 ? 
+	`__buûtö_°r˝y
+ (
+de°
+, 
+§c
+Ë+ 
+	`°æí
+ (src) \
+
+582 : ((*Ë(
+__memp˝y
+Ë(
+de°
+, 
+§c
+, 
+	`°æí
+ (src) + 1) \
+
+584 : 
+	`__°p˝y
+ (
+de°
+, 
+§c
+)))
+
+	)
+
+586 
+	#__°p˝y
+(
+de°
+, 
+§c
+) \
+
+587 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+§c
+) \
+
+588 ? (
+	`__°rög2_1b±r_p
+ (
+§c
+Ë&& 
+	`°æí
+ (src) + 1 <= 8 \
+
+589 ? 
+	`__°p˝y_smÆl
+ (
+de°
+, 
+	`__°p˝y_¨gs
+ (
+§c
+), \
+
+590 
+	`°æí
+ (
+§c
+) + 1) \
+
+591 : ((*Ë(
+__memp˝y
+Ë(
+de°
+, 
+§c
+, 
+	`°æí
+ (src) + 1) \
+
+593 : 
+	`__°p˝y
+ (
+de°
+, 
+§c
+)))
+
+	)
+
+597 
+	#°p˝y
+(
+de°
+, 
+§c
+Ë
+	`__°p˝y
+ (de°, src)
+
+	)
+
+600 #i‡!
+__GNUC_PREREQ
+ (3, 0Ë|| 
+deföed
+ 
+_FORCE_INLINES
+
+
+601 #i‡
+_STRING_INLINE_u«lig√d
+
+
+602 #i‚de‡
+_FORCE_INLINES
+
+
+603 
+	#__°p˝y_¨gs
+(
+§c
+) \
+
+604 
+__exãnsi⁄__
+ 
+	`__STRING2_SMALL_GET16
+ (
+§c
+, 0), \
+
+605 
+__exãnsi⁄__
+ 
+	`__STRING2_SMALL_GET16
+ (
+§c
+, 4), \
+
+606 
+__exãnsi⁄__
+ 
+	`__STRING2_SMALL_GET32
+ (
+§c
+, 0), \
+
+607 
+__exãnsi⁄__
+ 
+	`__STRING2_SMALL_GET32
+ (
+§c
+, 4)
+
+	)
+
+609 
+__STRING_INLINE
+ *
+__°p˝y_smÆl
+ (*, 
+__uöt16_t
+, __uint16_t,
+
+610 
+__uöt32_t
+, __uöt32_t, 
+size_t
+);
+
+611 
+__STRING_INLINE
+ *
+
+612 
+	$__°p˝y_smÆl
+ (*
+__de°
+,
+
+613 
+__uöt16_t
+ 
+__§c0_2
+, __uöt16_à
+__§c4_2
+,
+
+614 
+__uöt32_t
+ 
+__§c0_4
+, __uöt32_à
+__§c4_4
+,
+
+615 
+size_t
+ 
+__§˛í
+)
+
+618 
+__ui
+;
+
+619 
+__usi
+;
+
+620 
+__uc
+;
+
+621 
+__c
+;
+
+622 } *
+__u
+ = (*Ë
+__de°
+;
+
+623 (Ë
+__§˛í
+)
+
+626 
+__u
+->
+__uc
+ = '\0';
+
+629 
+__u
+->
+__usi
+ = 
+__§c0_2
+;
+
+630 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 1);
+
+633 
+__u
+->
+__usi
+ = 
+__§c0_2
+;
+
+634 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 2);
+
+635 
+__u
+->
+__uc
+ = '\0';
+
+638 
+__u
+->
+__ui
+ = 
+__§c0_4
+;
+
+639 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 3);
+
+642 
+__u
+->
+__ui
+ = 
+__§c0_4
+;
+
+643 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4);
+
+644 
+__u
+->
+__uc
+ = '\0';
+
+647 
+__u
+->
+__ui
+ = 
+__§c0_4
+;
+
+648 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4);
+
+649 
+__u
+->
+__usi
+ = 
+__§c4_2
+;
+
+650 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 1);
+
+653 
+__u
+->
+__ui
+ = 
+__§c0_4
+;
+
+654 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4);
+
+655 
+__u
+->
+__usi
+ = 
+__§c4_2
+;
+
+656 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 2);
+
+657 
+__u
+->
+__uc
+ = '\0';
+
+660 
+__u
+->
+__ui
+ = 
+__§c0_4
+;
+
+661 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 4);
+
+662 
+__u
+->
+__ui
+ = 
+__§c4_4
+;
+
+663 
+__u
+ = 
+	`__exãnsi⁄__
+ ((*) __u + 3);
+
+666  &
+__u
+->
+__c
+;
+
+667 
+	}
+}
+
+669 #i‚de‡
+_FORCE_INLINES
+
+
+670 
+	#__°p˝y_¨gs
+(
+§c
+) \
+
+671 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR2
+) \
+
+672 { { ((c⁄° *Ë(
+§c
+))[0], '\0' } }), \
+
+673 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR3
+) \
+
+674 { { ((c⁄° *Ë(
+§c
+))[0], ((const *) (src))[1], \
+
+676 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR4
+) \
+
+677 { { ((c⁄° *Ë(
+§c
+))[0], ((const *) (src))[1], \
+
+678 ((c⁄° *Ë(
+§c
+))[2], '\0' } }), \
+
+679 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR5
+) \
+
+680 { { ((c⁄° *Ë(
+§c
+))[0], ((const *) (src))[1], \
+
+681 ((c⁄° *Ë(
+§c
+))[2], ((const *) (src))[3], \
+
+683 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR6
+) \
+
+684 { { ((c⁄° *Ë(
+§c
+))[0], ((const *) (src))[1], \
+
+685 ((c⁄° *Ë(
+§c
+))[2], ((const *) (src))[3], \
+
+686 ((c⁄° *Ë(
+§c
+))[4], '\0' } }), \
+
+687 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR7
+) \
+
+688 { { ((c⁄° *Ë(
+§c
+))[0], ((const *) (src))[1], \
+
+689 ((c⁄° *Ë(
+§c
+))[2], ((const *) (src))[3], \
+
+690 ((c⁄° *Ë(
+§c
+))[4], ((const *) (src))[5], \
+
+692 
+	`__exãnsi⁄__
+ ((
+__STRING2_COPY_ARR8
+) \
+
+693 { { ((c⁄° *Ë(
+§c
+))[0], ((const *) (src))[1], \
+
+694 ((c⁄° *Ë(
+§c
+))[2], ((const *) (src))[3], \
+
+695 ((c⁄° *Ë(
+§c
+))[4], ((const *) (src))[5], \
+
+696 ((c⁄° *Ë(
+§c
+))[6], '\0' } })
+
+	)
+
+698 
+__STRING_INLINE
+ *
+__°p˝y_smÆl
+ (*, 
+__STRING2_COPY_ARR2
+,
+
+699 
+__STRING2_COPY_ARR3
+,
+
+700 
+__STRING2_COPY_ARR4
+,
+
+701 
+__STRING2_COPY_ARR5
+,
+
+702 
+__STRING2_COPY_ARR6
+,
+
+703 
+__STRING2_COPY_ARR7
+,
+
+704 
+__STRING2_COPY_ARR8
+, 
+size_t
+);
+
+705 
+__STRING_INLINE
+ *
+
+706 
+	$__°p˝y_smÆl
+ (*
+__de°
+,
+
+707 
+__STRING2_COPY_ARR2
+ 
+__§c2
+, 
+__STRING2_COPY_ARR3
+ 
+__§c3
+,
+
+708 
+__STRING2_COPY_ARR4
+ 
+__§c4
+, 
+__STRING2_COPY_ARR5
+ 
+__§c5
+,
+
+709 
+__STRING2_COPY_ARR6
+ 
+__§c6
+, 
+__STRING2_COPY_ARR7
+ 
+__§c7
+,
+
+710 
+__STRING2_COPY_ARR8
+ 
+__§c8
+, 
+size_t
+ 
+__§˛í
+)
+
+713 
+__c
+;
+
+714 
+__STRING2_COPY_ARR2
+ 
+__sˇ2
+;
+
+715 
+__STRING2_COPY_ARR3
+ 
+__sˇ3
+;
+
+716 
+__STRING2_COPY_ARR4
+ 
+__sˇ4
+;
+
+717 
+__STRING2_COPY_ARR5
+ 
+__sˇ5
+;
+
+718 
+__STRING2_COPY_ARR6
+ 
+__sˇ6
+;
+
+719 
+__STRING2_COPY_ARR7
+ 
+__sˇ7
+;
+
+720 
+__STRING2_COPY_ARR8
+ 
+__sˇ8
+;
+
+721 } *
+__u
+ = (*Ë
+__de°
+;
+
+722 (Ë
+__§˛í
+)
+
+725 
+__u
+->
+__c
+ = '\0';
+
+728 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ2
+ = 
+__§c2
+;
+
+731 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ3
+ = 
+__§c3
+;
+
+734 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ4
+ = 
+__§c4
+;
+
+737 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ5
+ = 
+__§c5
+;
+
+740 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ6
+ = 
+__§c6
+;
+
+743 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ7
+ = 
+__§c7
+;
+
+746 
+__exãnsi⁄__
+ 
+__u
+->
+__sˇ8
+ = 
+__§c8
+;
+
+749  
+__de°
+ + 
+__§˛í
+ - 1;
+
+750 
+	}
+}
+
+758 #i‚de‡
+_HAVE_STRING_ARCH_°∫˝y
+
+
+759 #i‡
+__GNUC_PREREQ
+ (3, 2)
+
+760 
+	#°∫˝y
+(
+de°
+, 
+§c
+, 
+n
+Ë
+	`__buûtö_°∫˝y
+ (de°, src,Ç)
+
+	)
+
+762 
+	#°∫˝y
+(
+de°
+, 
+§c
+, 
+n
+) \
+
+763 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+§c
+Ë&& __buûtö_c⁄°™t_∞(
+n
+) \
+
+764 ? (
+	`°æí
+ (
+§c
+Ë+ 1 >((
+size_t
+Ë(
+n
+)) \
+
+765 ? (*Ë
+	`mem˝y
+ (
+de°
+, 
+§c
+, 
+n
+) \
+
+766 : 
+	`°∫˝y
+ (
+de°
+, 
+§c
+, 
+n
+)) \
+
+767 : 
+	`°∫˝y
+ (
+de°
+, 
+§c
+, 
+n
+)))
+
+	)
+
+773 #i‚de‡
+_HAVE_STRING_ARCH_°∫ˇt
+
+
+774 #ifde‡
+_USE_STRING_ARCH_°rchr
+
+
+775 
+	#°∫ˇt
+(
+de°
+, 
+§c
+, 
+n
+) \
+
+776 (
+	`__exãnsi⁄__
+ ({ *
+__de°
+ = (
+de°
+); \
+
+777 
+	`__buûtö_c⁄°™t_p
+ (
+§c
+Ë&& __buûtö_c⁄°™t_∞(
+n
+) \
+
+778 ? (
+	`°æí
+ (
+§c
+Ë< ((
+size_t
+Ë(
+n
+)) \
+
+779 ? 
+	`°rˇt
+ (
+__de°
+, 
+§c
+) \
+
+780 : (*((*Ë
+	`__memp˝y
+ (
+	`°rchr
+ (
+__de°
+, '\0'), \
+
+781 
+§c
+, 
+n
+)Ë'\0', 
+__de°
+)) \
+
+782 : 
+	`°∫ˇt
+ (
+de°
+, 
+§c
+, 
+n
+); }))
+
+	)
+
+783 #ñi‡
+__GNUC_PREREQ
+ (3, 2)
+
+784 
+	#°∫ˇt
+(
+de°
+, 
+§c
+, 
+n
+Ë
+	`__buûtö_°∫ˇt
+ (de°, src,Ç)
+
+	)
+
+786 
+	#°∫ˇt
+(
+de°
+, 
+§c
+, 
+n
+) \
+
+787 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+§c
+Ë&& __buûtö_c⁄°™t_∞(
+n
+) \
+
+788 ? (
+	`°æí
+ (
+§c
+Ë< ((
+size_t
+Ë(
+n
+)) \
+
+789 ? 
+	`°rˇt
+ (
+de°
+, 
+§c
+) \
+
+790 : 
+	`°∫ˇt
+ (
+de°
+, 
+§c
+, 
+n
+)) \
+
+791 : 
+	`°∫ˇt
+ (
+de°
+, 
+§c
+, 
+n
+)))
+
+	)
+
+797 #i‚de‡
+_HAVE_STRING_ARCH_°rcmp
+
+
+798 #i‡
+__GNUC_PREREQ
+ (3, 2)
+
+799 
+	#°rcmp
+(
+s1
+, 
+s2
+) \
+
+800 
+__exãnsi⁄__
+ \
+
+801 ({ 
+size_t
+ 
+__s1_Àn
+, 
+__s2_Àn
+; \
+
+802 (
+	`__buûtö_c⁄°™t_p
+ (
+s1
+Ë&& __buûtö_c⁄°™t_∞(
+s2
+) \
+
+803 && (
+__s1_Àn
+ = 
+	`__buûtö_°æí
+ (
+s1
+), 
+__s2_Àn
+ = __buûtö_°æí (
+s2
+), \
+
+804 (!
+	`__°rög2_1b±r_p
+ (
+s1
+Ë|| 
+__s1_Àn
+ >= 4) \
+
+805 && (!
+	`__°rög2_1b±r_p
+ (
+s2
+Ë|| 
+__s2_Àn
+ >= 4)) \
+
+806 ? 
+	`__buûtö_°rcmp
+ (
+s1
+, 
+s2
+) \
+
+807 : (
+	`__buûtö_c⁄°™t_p
+ (
+s1
+Ë&& 
+	`__°rög2_1b±r_p
+ (s1) \
+
+808 && (
+__s1_Àn
+ = 
+	`__buûtö_°æí
+ (
+s1
+), __s1_len < 4) \
+
+809 ? (
+	`__buûtö_c⁄°™t_p
+ (
+s2
+Ë&& 
+	`__°rög2_1b±r_p
+ (s2) \
+
+810 ? 
+	`__buûtö_°rcmp
+ (
+s1
+, 
+s2
+) \
+
+811 : 
+	`__°rcmp_cg
+ (
+s1
+, 
+s2
+, 
+__s1_Àn
+)) \
+
+812 : (
+	`__buûtö_c⁄°™t_p
+ (
+s2
+Ë&& 
+	`__°rög2_1b±r_p
+ (s2) \
+
+813 && (
+__s2_Àn
+ = 
+	`__buûtö_°æí
+ (
+s2
+), __s2_len < 4) \
+
+814 ? (
+	`__buûtö_c⁄°™t_p
+ (
+s1
+Ë&& 
+	`__°rög2_1b±r_p
+ (s1) \
+
+815 ? 
+	`__buûtö_°rcmp
+ (
+s1
+, 
+s2
+) \
+
+816 : 
+	`__°rcmp_gc
+ (
+s1
+, 
+s2
+, 
+__s2_Àn
+)) \
+
+817 : 
+	`__buûtö_°rcmp
+ (
+s1
+, 
+s2
+)))); })
+
+	)
+
+819 
+	#°rcmp
+(
+s1
+, 
+s2
+) \
+
+820 
+__exãnsi⁄__
+ \
+
+821 ({ 
+size_t
+ 
+__s1_Àn
+, 
+__s2_Àn
+; \
+
+822 (
+	`__buûtö_c⁄°™t_p
+ (
+s1
+Ë&& __buûtö_c⁄°™t_∞(
+s2
+) \
+
+823 && (
+__s1_Àn
+ = 
+	`°æí
+ (
+s1
+), 
+__s2_Àn
+ = såÀ¿(
+s2
+), \
+
+824 (!
+	`__°rög2_1b±r_p
+ (
+s1
+Ë|| 
+__s1_Àn
+ >= 4) \
+
+825 && (!
+	`__°rög2_1b±r_p
+ (
+s2
+Ë|| 
+__s2_Àn
+ >= 4)) \
+
+826 ? 
+	`memcmp
+ ((c⁄° *Ë(
+s1
+), (c⁄° *Ë(
+s2
+), \
+
+827 (
+__s1_Àn
+ < 
+__s2_Àn
+ ? __s1_len : __s2_len) + 1) \
+
+828 : (
+	`__buûtö_c⁄°™t_p
+ (
+s1
+Ë&& 
+	`__°rög2_1b±r_p
+ (s1) \
+
+829 && (
+__s1_Àn
+ = 
+	`°æí
+ (
+s1
+), __s1_len < 4) \
+
+830 ? (
+	`__buûtö_c⁄°™t_p
+ (
+s2
+Ë&& 
+	`__°rög2_1b±r_p
+ (s2) \
+
+831 ? 
+	`__°rcmp_cc
+ (
+s1
+, 
+s2
+, 
+__s1_Àn
+) \
+
+832 : 
+	`__°rcmp_cg
+ (
+s1
+, 
+s2
+, 
+__s1_Àn
+)) \
+
+833 : (
+	`__buûtö_c⁄°™t_p
+ (
+s2
+Ë&& 
+	`__°rög2_1b±r_p
+ (s2) \
+
+834 && (
+__s2_Àn
+ = 
+	`°æí
+ (
+s2
+), __s2_len < 4) \
+
+835 ? (
+	`__buûtö_c⁄°™t_p
+ (
+s1
+Ë&& 
+	`__°rög2_1b±r_p
+ (s1) \
+
+836 ? 
+	`__°rcmp_cc
+ (
+s1
+, 
+s2
+, 
+__s2_Àn
+) \
+
+837 : 
+	`__°rcmp_gc
+ (
+s1
+, 
+s2
+, 
+__s2_Àn
+)) \
+
+838 : 
+	`°rcmp
+ (
+s1
+, 
+s2
+)))); })
+
+	)
+
+841 
+	#__°rcmp_cc
+(
+s1
+, 
+s2
+, 
+l
+) \
+
+842 (
+	`__exãnsi⁄__
+ ({ 
+__ªsu…
+ = \
+
+843 (((c⁄° *Ë(c⁄° *Ë(
+s1
+))[0] \
+
+844 - ((c⁄° *Ë(c⁄° *)(
+s2
+))[0]); \
+
+845 i‡(
+l
+ > 0 && 
+__ªsu…
+ == 0) \
+
+847 
+__ªsu…
+ = (((const *) \
+
+848 (c⁄° *Ë(
+s1
+))[1] \
+
+850 (c⁄° *Ë(
+s2
+))[1]); \
+
+851 i‡(
+l
+ > 1 && 
+__ªsu…
+ == 0) \
+
+853 
+__ªsu…
+ = \
+
+855 (c⁄° *Ë(
+s1
+))[2] \
+
+857 (c⁄° *Ë(
+s2
+))[2]); \
+
+858 i‡(
+l
+ > 2 && 
+__ªsu…
+ == 0) \
+
+859 
+__ªsu…
+ = \
+
+861 (c⁄° *Ë(
+s1
+))[3] \
+
+863 (c⁄° *Ë(
+s2
+))[3]); \
+
+866 
+__ªsu…
+; }))
+
+	)
+
+868 
+	#__°rcmp_cg
+(
+s1
+, 
+s2
+, 
+l1
+) \
+
+869 (
+	`__exãnsi⁄__
+ ({ c⁄° *
+__s2
+ = \
+
+870 (c⁄° *Ë(c⁄° *Ë(
+s2
+); \
+
+871 
+__ªsu…
+ = \
+
+872 (((c⁄° *Ë(c⁄° *Ë(
+s1
+))[0] \
+
+873 - 
+__s2
+[0]); \
+
+874 i‡(
+l1
+ > 0 && 
+__ªsu…
+ == 0) \
+
+876 
+__ªsu…
+ = (((const *) \
+
+877 (c⁄° *Ë(
+s1
+))[1] - 
+__s2
+[1]); \
+
+878 i‡(
+l1
+ > 1 && 
+__ªsu…
+ == 0) \
+
+880 
+__ªsu…
+ = (((const *) \
+
+881 (c⁄° *Ë(
+s1
+))[2] - 
+__s2
+[2]); \
+
+882 i‡(
+l1
+ > 2 && 
+__ªsu…
+ == 0) \
+
+883 
+__ªsu…
+ = (((const *) \
+
+884 (c⁄° *Ë(
+s1
+))[3] \
+
+885 - 
+__s2
+[3]); \
+
+888 
+__ªsu…
+; }))
+
+	)
+
+890 
+	#__°rcmp_gc
+(
+s1
+, 
+s2
+, 
+l2
+Ë(- 
+	`__°rcmp_cg
+ (s2, s1,Ü2))
+
+	)
+
+895 #i‚de‡
+_HAVE_STRING_ARCH_°∫cmp
+
+
+896 
+	#°∫cmp
+(
+s1
+, 
+s2
+, 
+n
+) \
+
+897 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+n
+) \
+
+898 && ((
+	`__buûtö_c⁄°™t_p
+ (
+s1
+) \
+
+899 && 
+	`°æí
+ (
+s1
+Ë< ((
+size_t
+Ë(
+n
+))) \
+
+900 || (
+	`__buûtö_c⁄°™t_p
+ (
+s2
+) \
+
+901 && 
+	`°æí
+ (
+s2
+Ë< ((
+size_t
+Ë(
+n
+)))) \
+
+902 ? 
+	`°rcmp
+ (
+s1
+, 
+s2
+Ë: 
+	`°∫cmp
+ (s1, s2, 
+n
+)))
+
+	)
+
+908 #i‡!
+deföed
+ 
+_HAVE_STRING_ARCH_°rc•n
+ || deföed 
+_FORCE_INLINES
+
+
+909 #i‚de‡
+_HAVE_STRING_ARCH_°rc•n
+
+
+910 #i‡
+__GNUC_PREREQ
+ (3, 2)
+
+911 
+	#°rc•n
+(
+s
+, 
+ªje˘
+) \
+
+912 
+__exãnsi⁄__
+ \
+
+913 ({ 
+__r0
+, 
+__r1
+, 
+__r2
+; \
+
+914 (
+	`__buûtö_c⁄°™t_p
+ (
+ªje˘
+Ë&& 
+	`__°rög2_1b±r_p
+ (reject) \
+
+915 ? ((
+	`__buûtö_c⁄°™t_p
+ (
+s
+Ë&& 
+	`__°rög2_1b±r_p
+ (s)) \
+
+916 ? 
+	`__buûtö_°rc•n
+ (
+s
+, 
+ªje˘
+) \
+
+917 : ((
+__r0
+ = ((c⁄° *Ë(
+ªje˘
+))[0], __r0 == '\0') \
+
+918 ? 
+	`°æí
+ (
+s
+) \
+
+919 : ((
+__r1
+ = ((c⁄° *Ë(
+ªje˘
+))[1], __r1 == '\0') \
+
+920 ? 
+	`__°rc•n_c1
+ (
+s
+, 
+__r0
+) \
+
+921 : ((
+__r2
+ = ((c⁄° *Ë(
+ªje˘
+))[2], __r2 == '\0') \
+
+922 ? 
+	`__°rc•n_c2
+ (
+s
+, 
+__r0
+, 
+__r1
+) \
+
+923 : (((c⁄° *Ë(
+ªje˘
+))[3] == '\0' \
+
+924 ? 
+	`__°rc•n_c3
+ (
+s
+, 
+__r0
+, 
+__r1
+, 
+__r2
+) \
+
+925 : 
+	`__buûtö_°rc•n
+ (
+s
+, 
+ªje˘
+)))))) \
+
+926 : 
+	`__buûtö_°rc•n
+ (
+s
+, 
+ªje˘
+)); })
+
+	)
+
+928 
+	#°rc•n
+(
+s
+, 
+ªje˘
+) \
+
+929 
+__exãnsi⁄__
+ \
+
+930 ({ 
+__r0
+, 
+__r1
+, 
+__r2
+; \
+
+931 (
+	`__buûtö_c⁄°™t_p
+ (
+ªje˘
+Ë&& 
+	`__°rög2_1b±r_p
+ (reject) \
+
+932 ? ((
+__r0
+ = ((c⁄° *Ë(
+ªje˘
+))[0], __r0 == '\0') \
+
+933 ? 
+	`°æí
+ (
+s
+) \
+
+934 : ((
+__r1
+ = ((c⁄° *Ë(
+ªje˘
+))[1], __r1 == '\0') \
+
+935 ? 
+	`__°rc•n_c1
+ (
+s
+, 
+__r0
+) \
+
+936 : ((
+__r2
+ = ((c⁄° *Ë(
+ªje˘
+))[2], __r2 == '\0') \
+
+937 ? 
+	`__°rc•n_c2
+ (
+s
+, 
+__r0
+, 
+__r1
+) \
+
+938 : (((c⁄° *Ë(
+ªje˘
+))[3] == '\0' \
+
+939 ? 
+	`__°rc•n_c3
+ (
+s
+, 
+__r0
+, 
+__r1
+, 
+__r2
+) \
+
+940 : 
+	`°rc•n
+ (
+s
+, 
+ªje˘
+))))) \
+
+941 : 
+	`°rc•n
+ (
+s
+, 
+ªje˘
+)); })
+
+	)
+
+945 
+__STRING_INLINE
+ 
+size_t
+ 
+__°rc•n_c1
+ (c⁄° *
+__s
+, 
+__ªje˘
+);
+
+946 
+__STRING_INLINE
+ 
+size_t
+
+
+947 
+	$__°rc•n_c1
+ (c⁄° *
+__s
+, 
+__ªje˘
+)
+
+949 
+size_t
+ 
+__ªsu…
+ = 0;
+
+950 
+__s
+[
+__ªsu…
+] !'\0' && __s[__ªsu…] !
+__ªje˘
+)
+
+951 ++
+__ªsu…
+;
+
+952  
+__ªsu…
+;
+
+953 
+	}
+}
+
+955 
+__STRING_INLINE
+ 
+size_t
+ 
+__°rc•n_c2
+ (c⁄° *
+__s
+, 
+__ªje˘1
+,
+
+956 
+__ªje˘2
+);
+
+957 
+__STRING_INLINE
+ 
+size_t
+
+
+958 
+	$__°rc•n_c2
+ (c⁄° *
+__s
+, 
+__ªje˘1
+, 
+__ªje˘2
+)
+
+960 
+size_t
+ 
+__ªsu…
+ = 0;
+
+961 
+__s
+[
+__ªsu…
+] !'\0' && __s[__ªsu…] !
+__ªje˘1
+
+
+962 && 
+__s
+[
+__ªsu…
+] !
+__ªje˘2
+)
+
+963 ++
+__ªsu…
+;
+
+964  
+__ªsu…
+;
+
+965 
+	}
+}
+
+967 
+__STRING_INLINE
+ 
+size_t
+ 
+__°rc•n_c3
+ (c⁄° *
+__s
+, 
+__ªje˘1
+,
+
+968 
+__ªje˘2
+, 
+__ªje˘3
+);
+
+969 
+__STRING_INLINE
+ 
+size_t
+
+
+970 
+	$__°rc•n_c3
+ (c⁄° *
+__s
+, 
+__ªje˘1
+, 
+__ªje˘2
+,
+
+971 
+__ªje˘3
+)
+
+973 
+size_t
+ 
+__ªsu…
+ = 0;
+
+974 
+__s
+[
+__ªsu…
+] !'\0' && __s[__ªsu…] !
+__ªje˘1
+
+
+975 && 
+__s
+[
+__ªsu…
+] !
+__ªje˘2
+ && __s[__ªsu…] !
+__ªje˘3
+)
+
+976 ++
+__ªsu…
+;
+
+977  
+__ªsu…
+;
+
+978 
+	}
+}
+
+984 #i‡!
+deföed
+ 
+_HAVE_STRING_ARCH_°r•n
+ || deföed 
+_FORCE_INLINES
+
+
+985 #i‚de‡
+_HAVE_STRING_ARCH_°r•n
+
+
+986 #i‡
+__GNUC_PREREQ
+ (3, 2)
+
+987 
+	#°r•n
+(
+s
+, 
+ac˚±
+) \
+
+988 
+__exãnsi⁄__
+ \
+
+989 ({ 
+__a0
+, 
+__a1
+, 
+__a2
+; \
+
+990 (
+	`__buûtö_c⁄°™t_p
+ (
+ac˚±
+Ë&& 
+	`__°rög2_1b±r_p
+ (accept) \
+
+991 ? ((
+	`__buûtö_c⁄°™t_p
+ (
+s
+Ë&& 
+	`__°rög2_1b±r_p
+ (s)) \
+
+992 ? 
+	`__buûtö_°r•n
+ (
+s
+, 
+ac˚±
+) \
+
+993 : ((
+__a0
+ = ((c⁄° *Ë(
+ac˚±
+))[0], __a0 == '\0') \
+
+994 ? ((Ë(
+s
+), (
+size_t
+) 0) \
+
+995 : ((
+__a1
+ = ((c⁄° *Ë(
+ac˚±
+))[1], __a1 == '\0') \
+
+996 ? 
+	`__°r•n_c1
+ (
+s
+, 
+__a0
+) \
+
+997 : ((
+__a2
+ = ((c⁄° *Ë(
+ac˚±
+))[2], __a2 == '\0') \
+
+998 ? 
+	`__°r•n_c2
+ (
+s
+, 
+__a0
+, 
+__a1
+) \
+
+999 : (((c⁄° *Ë(
+ac˚±
+))[3] == '\0' \
+
+1000 ? 
+	`__°r•n_c3
+ (
+s
+, 
+__a0
+, 
+__a1
+, 
+__a2
+) \
+
+1001 : 
+	`__buûtö_°r•n
+ (
+s
+, 
+ac˚±
+)))))) \
+
+1002 : 
+	`__buûtö_°r•n
+ (
+s
+, 
+ac˚±
+)); })
+
+	)
+
+1004 
+	#°r•n
+(
+s
+, 
+ac˚±
+) \
+
+1005 
+__exãnsi⁄__
+ \
+
+1006 ({ 
+__a0
+, 
+__a1
+, 
+__a2
+; \
+
+1007 (
+	`__buûtö_c⁄°™t_p
+ (
+ac˚±
+Ë&& 
+	`__°rög2_1b±r_p
+ (accept) \
+
+1008 ? ((
+__a0
+ = ((c⁄° *Ë(
+ac˚±
+))[0], __a0 == '\0') \
+
+1009 ? ((Ë(
+s
+), (
+size_t
+) 0) \
+
+1010 : ((
+__a1
+ = ((c⁄° *Ë(
+ac˚±
+))[1], __a1 == '\0') \
+
+1011 ? 
+	`__°r•n_c1
+ (
+s
+, 
+__a0
+) \
+
+1012 : ((
+__a2
+ = ((c⁄° *Ë(
+ac˚±
+))[2], __a2 == '\0') \
+
+1013 ? 
+	`__°r•n_c2
+ (
+s
+, 
+__a0
+, 
+__a1
+) \
+
+1014 : (((c⁄° *Ë(
+ac˚±
+))[3] == '\0' \
+
+1015 ? 
+	`__°r•n_c3
+ (
+s
+, 
+__a0
+, 
+__a1
+, 
+__a2
+) \
+
+1016 : 
+	`°r•n
+ (
+s
+, 
+ac˚±
+))))) \
+
+1017 : 
+	`°r•n
+ (
+s
+, 
+ac˚±
+)); })
+
+	)
+
+1021 
+__STRING_INLINE
+ 
+size_t
+ 
+__°r•n_c1
+ (c⁄° *
+__s
+, 
+__ac˚±
+);
+
+1022 
+__STRING_INLINE
+ 
+size_t
+
+
+1023 
+	$__°r•n_c1
+ (c⁄° *
+__s
+, 
+__ac˚±
+)
+
+1025 
+size_t
+ 
+__ªsu…
+ = 0;
+
+1027 
+__s
+[
+__ªsu…
+] =
+__ac˚±
+)
+
+1028 ++
+__ªsu…
+;
+
+1029  
+__ªsu…
+;
+
+1030 
+	}
+}
+
+1032 
+__STRING_INLINE
+ 
+size_t
+ 
+__°r•n_c2
+ (c⁄° *
+__s
+, 
+__ac˚±1
+,
+
+1033 
+__ac˚±2
+);
+
+1034 
+__STRING_INLINE
+ 
+size_t
+
+
+1035 
+	$__°r•n_c2
+ (c⁄° *
+__s
+, 
+__ac˚±1
+, 
+__ac˚±2
+)
+
+1037 
+size_t
+ 
+__ªsu…
+ = 0;
+
+1039 
+__s
+[
+__ªsu…
+] =
+__ac˚±1
+ || __s[__ªsu…] =
+__ac˚±2
+)
+
+1040 ++
+__ªsu…
+;
+
+1041  
+__ªsu…
+;
+
+1042 
+	}
+}
+
+1044 
+__STRING_INLINE
+ 
+size_t
+ 
+__°r•n_c3
+ (c⁄° *
+__s
+, 
+__ac˚±1
+,
+
+1045 
+__ac˚±2
+, 
+__ac˚±3
+);
+
+1046 
+__STRING_INLINE
+ 
+size_t
+
+
+1047 
+	$__°r•n_c3
+ (c⁄° *
+__s
+, 
+__ac˚±1
+, 
+__ac˚±2
+, 
+__ac˚±3
+)
+
+1049 
+size_t
+ 
+__ªsu…
+ = 0;
+
+1051 
+__s
+[
+__ªsu…
+] =
+__ac˚±1
+ || __s[__ªsu…] =
+__ac˚±2
+
+
+1052 || 
+__s
+[
+__ªsu…
+] =
+__ac˚±3
+)
+
+1053 ++
+__ªsu…
+;
+
+1054  
+__ªsu…
+;
+
+1055 
+	}
+}
+
+1060 #i‡!
+deföed
+ 
+_HAVE_STRING_ARCH_°Ωbrk
+ || deföed 
+_FORCE_INLINES
+
+
+1061 #i‚de‡
+_HAVE_STRING_ARCH_°Ωbrk
+
+
+1062 #i‡
+__GNUC_PREREQ
+ (3, 2)
+
+1063 
+	#°Ωbrk
+(
+s
+, 
+ac˚±
+) \
+
+1064 
+__exãnsi⁄__
+ \
+
+1065 ({ 
+__a0
+, 
+__a1
+, 
+__a2
+; \
+
+1066 (
+	`__buûtö_c⁄°™t_p
+ (
+ac˚±
+Ë&& 
+	`__°rög2_1b±r_p
+ (accept) \
+
+1067 ? ((
+	`__buûtö_c⁄°™t_p
+ (
+s
+Ë&& 
+	`__°rög2_1b±r_p
+ (s)) \
+
+1068 ? 
+	`__buûtö_°Ωbrk
+ (
+s
+, 
+ac˚±
+) \
+
+1069 : ((
+__a0
+ = ((c⁄° *Ë(
+ac˚±
+))[0], __a0 == '\0') \
+
+1070 ? ((Ë(
+s
+), (*Ë
+NULL
+) \
+
+1071 : ((
+__a1
+ = ((c⁄° *Ë(
+ac˚±
+))[1], __a1 == '\0') \
+
+1072 ? 
+	`__buûtö_°rchr
+ (
+s
+, 
+__a0
+) \
+
+1073 : ((
+__a2
+ = ((c⁄° *Ë(
+ac˚±
+))[2], __a2 == '\0') \
+
+1074 ? 
+	`__°Ωbrk_c2
+ (
+s
+, 
+__a0
+, 
+__a1
+) \
+
+1075 : (((c⁄° *Ë(
+ac˚±
+))[3] == '\0' \
+
+1076 ? 
+	`__°Ωbrk_c3
+ (
+s
+, 
+__a0
+, 
+__a1
+, 
+__a2
+) \
+
+1077 : 
+	`__buûtö_°Ωbrk
+ (
+s
+, 
+ac˚±
+)))))) \
+
+1078 : 
+	`__buûtö_°Ωbrk
+ (
+s
+, 
+ac˚±
+)); })
+
+	)
+
+1080 
+	#°Ωbrk
+(
+s
+, 
+ac˚±
+) \
+
+1081 
+__exãnsi⁄__
+ \
+
+1082 ({ 
+__a0
+, 
+__a1
+, 
+__a2
+; \
+
+1083 (
+	`__buûtö_c⁄°™t_p
+ (
+ac˚±
+Ë&& 
+	`__°rög2_1b±r_p
+ (accept) \
+
+1084 ? ((
+__a0
+ = ((c⁄° *Ë(
+ac˚±
+))[0], __a0 == '\0') \
+
+1085 ? ((Ë(
+s
+), (*Ë
+NULL
+) \
+
+1086 : ((
+__a1
+ = ((c⁄° *Ë(
+ac˚±
+))[1], __a1 == '\0') \
+
+1087 ? 
+	`°rchr
+ (
+s
+, 
+__a0
+) \
+
+1088 : ((
+__a2
+ = ((c⁄° *Ë(
+ac˚±
+))[2], __a2 == '\0') \
+
+1089 ? 
+	`__°Ωbrk_c2
+ (
+s
+, 
+__a0
+, 
+__a1
+) \
+
+1090 : (((c⁄° *Ë(
+ac˚±
+))[3] == '\0' \
+
+1091 ? 
+	`__°Ωbrk_c3
+ (
+s
+, 
+__a0
+, 
+__a1
+, 
+__a2
+) \
+
+1092 : 
+	`°Ωbrk
+ (
+s
+, 
+ac˚±
+))))) \
+
+1093 : 
+	`°Ωbrk
+ (
+s
+, 
+ac˚±
+)); })
+
+	)
+
+1097 
+__STRING_INLINE
+ *
+__°Ωbrk_c2
+ (c⁄° *
+__s
+, 
+__ac˚±1
+,
+
+1098 
+__ac˚±2
+);
+
+1099 
+__STRING_INLINE
+ *
+
+1100 
+	$__°Ωbrk_c2
+ (c⁄° *
+__s
+, 
+__ac˚±1
+, 
+__ac˚±2
+)
+
+1103 *
+__s
+ !'\0' && *__†!
+__ac˚±1
+ && *__†!
+__ac˚±2
+)
+
+1104 ++
+__s
+;
+
+1105  *
+__s
+ ='\0' ? 
+NULL
+ : (*Ë(
+size_t
+) __s;
+
+1106 
+	}
+}
+
+1108 
+__STRING_INLINE
+ *
+__°Ωbrk_c3
+ (c⁄° *
+__s
+, 
+__ac˚±1
+,
+
+1109 
+__ac˚±2
+, 
+__ac˚±3
+);
+
+1110 
+__STRING_INLINE
+ *
+
+1111 
+	$__°Ωbrk_c3
+ (c⁄° *
+__s
+, 
+__ac˚±1
+, 
+__ac˚±2
+, 
+__ac˚±3
+)
+
+1114 *
+__s
+ !'\0' && *__†!
+__ac˚±1
+ && *__†!
+__ac˚±2
+
+
+1115 && *
+__s
+ !
+__ac˚±3
+)
+
+1116 ++
+__s
+;
+
+1117  *
+__s
+ ='\0' ? 
+NULL
+ : (*Ë(
+size_t
+) __s;
+
+1118 
+	}
+}
+
+1124 #i‡!
+deföed
+ 
+_HAVE_STRING_ARCH_°r°r
+ && !
+__GNUC_PREREQ
+ (2, 97)
+
+1125 
+	#°r°r
+(
+hay°ack
+, 
+√edÀ
+) \
+
+1126 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+√edÀ
+Ë&& 
+	`__°rög2_1b±r_p
+ (needle) \
+
+1127 ? (((c⁄° *Ë(
+√edÀ
+))[0] == '\0' \
+
+1128 ? (*Ë(
+size_t
+Ë(
+hay°ack
+) \
+
+1129 : (((c⁄° *Ë(
+√edÀ
+))[1] == '\0' \
+
+1130 ? 
+	`°rchr
+ (
+hay°ack
+, \
+
+1131 ((c⁄° *Ë(
+√edÀ
+))[0]) \
+
+1132 : 
+	`°r°r
+ (
+hay°ack
+, 
+√edÀ
+))) \
+
+1133 : 
+	`°r°r
+ (
+hay°ack
+, 
+√edÀ
+)))
+
+	)
+
+1137 #i‡!
+deföed
+ 
+_HAVE_STRING_ARCH_°πok_r
+ || deföed 
+_FORCE_INLINES
+
+
+1138 #i‚de‡
+_HAVE_STRING_ARCH_°πok_r
+
+
+1139 
+	#__°πok_r
+(
+s
+, 
+£p
+, 
+√xç
+) \
+
+1140 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+£p
+Ë&& 
+	`__°rög2_1b±r_p
+ (sep) \
+
+1141 && ((c⁄° *Ë(
+£p
+))[0] != '\0' \
+
+1142 && ((c⁄° *Ë(
+£p
+))[1] == '\0' \
+
+1143 ? 
+	`__°πok_r_1c
+ (
+s
+, ((c⁄° *Ë(
+£p
+))[0], 
+√xç
+) \
+
+1144 : 
+	`__°πok_r
+ (
+s
+, 
+£p
+, 
+√xç
+)))
+
+	)
+
+1147 
+__STRING_INLINE
+ *
+__°πok_r_1c
+ (*
+__s
+, 
+__£p
+, **
+__√xç
+);
+
+1148 
+__STRING_INLINE
+ *
+
+1149 
+	$__°πok_r_1c
+ (*
+__s
+, 
+__£p
+, **
+__√xç
+)
+
+1151 *
+__ªsu…
+;
+
+1152 i‡(
+__s
+ =
+NULL
+)
+
+1153 
+__s
+ = *
+__√xç
+;
+
+1154 *
+__s
+ =
+__£p
+)
+
+1155 ++
+__s
+;
+
+1156 
+__ªsu…
+ = 
+NULL
+;
+
+1157 i‡(*
+__s
+ != '\0')
+
+1159 
+__ªsu…
+ = 
+__s
+++;
+
+1160 *
+__s
+ != '\0')
+
+1161 i‡(*
+__s
+++ =
+__£p
+)
+
+1163 
+__s
+[-1] = '\0';
+
+1167 *
+__√xç
+ = 
+__s
+;
+
+1168  
+__ªsu…
+;
+
+1169 
+	}
+}
+
+1170 #ifde‡
+__USE_POSIX
+
+
+1171 
+	#°πok_r
+(
+s
+, 
+£p
+, 
+√xç
+Ë
+	`__°πok_r
+ (s, sï,Çexç)
+
+	)
+
+1176 #i‡!
+deföed
+ 
+_HAVE_STRING_ARCH_°r£p
+ || deföed 
+_FORCE_INLINES
+
+
+1177 #i‚de‡
+_HAVE_STRING_ARCH_°r£p
+
+
+1179 *
+__°r£p_g
+ (**
+__°rögp
+, c⁄° *
+__dñim
+);
+
+1180 
+	#__°r£p
+(
+s
+, 
+ªje˘
+) \
+
+1181 
+__exãnsi⁄__
+ \
+
+1182 ({ 
+__r0
+, 
+__r1
+, 
+__r2
+; \
+
+1183 (
+	`__buûtö_c⁄°™t_p
+ (
+ªje˘
+Ë&& 
+	`__°rög2_1b±r_p
+ (reject) \
+
+1184 && (
+__r0
+ = ((c⁄° *Ë(
+ªje˘
+))[0], \
+
+1185 ((c⁄° *Ë(
+ªje˘
+))[0] != '\0') \
+
+1186 ? ((
+__r1
+ = ((c⁄° *Ë(
+ªje˘
+))[1], \
+
+1187 ((c⁄° *Ë(
+ªje˘
+))[1] == '\0') \
+
+1188 ? 
+	`__°r£p_1c
+ (
+s
+, 
+__r0
+) \
+
+1189 : ((
+__r2
+ = ((c⁄° *Ë(
+ªje˘
+))[2], __r2 == '\0') \
+
+1190 ? 
+	`__°r£p_2c
+ (
+s
+, 
+__r0
+, 
+__r1
+) \
+
+1191 : (((c⁄° *Ë(
+ªje˘
+))[3] == '\0' \
+
+1192 ? 
+	`__°r£p_3c
+ (
+s
+, 
+__r0
+, 
+__r1
+, 
+__r2
+) \
+
+1193 : 
+	`__°r£p_g
+ (
+s
+, 
+ªje˘
+)))) \
+
+1194 : 
+	`__°r£p_g
+ (
+s
+, 
+ªje˘
+)); })
+
+	)
+
+1197 
+__STRING_INLINE
+ *
+__°r£p_1c
+ (**
+__s
+, 
+__ªje˘
+);
+
+1198 
+__STRING_INLINE
+ *
+
+1199 
+	$__°r£p_1c
+ (**
+__s
+, 
+__ªje˘
+)
+
+1201 *
+__ªtvÆ
+ = *
+__s
+;
+
+1202 i‡(
+__ªtvÆ
+ !
+NULL
+ && (*
+__s
+ = 
+	`°rchr
+ (__ªtvÆ, 
+__ªje˘
+)) != NULL)
+
+1203 *(*
+__s
+)++ = '\0';
+
+1204  
+__ªtvÆ
+;
+
+1205 
+	}
+}
+
+1207 
+__STRING_INLINE
+ *
+__°r£p_2c
+ (**
+__s
+, 
+__ªje˘1
+, 
+__ªje˘2
+);
+
+1208 
+__STRING_INLINE
+ *
+
+1209 
+	$__°r£p_2c
+ (**
+__s
+, 
+__ªje˘1
+, 
+__ªje˘2
+)
+
+1211 *
+__ªtvÆ
+ = *
+__s
+;
+
+1212 i‡(
+__ªtvÆ
+ !
+NULL
+)
+
+1214 *
+__˝
+ = 
+__ªtvÆ
+;
+
+1217 i‡(*
+__˝
+ == '\0')
+
+1219 
+__˝
+ = 
+NULL
+;
+
+1222 i‡(*
+__˝
+ =
+__ªje˘1
+ || *__˝ =
+__ªje˘2
+)
+
+1224 *
+__˝
+++ = '\0';
+
+1227 ++
+__˝
+;
+
+1229 *
+__s
+ = 
+__˝
+;
+
+1231  
+__ªtvÆ
+;
+
+1232 
+	}
+}
+
+1234 
+__STRING_INLINE
+ *
+__°r£p_3c
+ (**
+__s
+, 
+__ªje˘1
+, 
+__ªje˘2
+,
+
+1235 
+__ªje˘3
+);
+
+1236 
+__STRING_INLINE
+ *
+
+1237 
+	$__°r£p_3c
+ (**
+__s
+, 
+__ªje˘1
+, 
+__ªje˘2
+, 
+__ªje˘3
+)
+
+1239 *
+__ªtvÆ
+ = *
+__s
+;
+
+1240 i‡(
+__ªtvÆ
+ !
+NULL
+)
+
+1242 *
+__˝
+ = 
+__ªtvÆ
+;
+
+1245 i‡(*
+__˝
+ == '\0')
+
+1247 
+__˝
+ = 
+NULL
+;
+
+1250 i‡(*
+__˝
+ =
+__ªje˘1
+ || *__˝ =
+__ªje˘2
+ || *__˝ =
+__ªje˘3
+)
+
+1252 *
+__˝
+++ = '\0';
+
+1255 ++
+__˝
+;
+
+1257 *
+__s
+ = 
+__˝
+;
+
+1259  
+__ªtvÆ
+;
+
+1260 
+	}
+}
+
+1261 #ifde‡
+__USE_MISC
+
+
+1262 
+	#°r£p
+(
+s
+, 
+ªje˘
+Ë
+	`__°r£p
+ (s,Ñeje˘)
+
+	)
+
+1269 #ifde‡
+__USE_MISC
+
+
+1271 #i‡!
+deföed
+ 
+_HAVE_STRING_ARCH_°rdup
+ || !deföed 
+_HAVE_STRING_ARCH_°∫dup
+
+
+1272 
+	#__√ed_mÆloc_™d_ˇŒoc
+
+
+	)
+
+1273 
+	~<°dlib.h
+>
+
+1276 #i‚de‡
+_HAVE_STRING_ARCH_°rdup
+
+
+1278 *
+	$__°rdup
+ (c⁄° *
+__°rög
+Ë
+__THROW
+ 
+__©åibuã_mÆloc__
+;
+
+1279 
+	#__°rdup
+(
+s
+) \
+
+1280 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+s
+Ë&& 
+	`__°rög2_1b±r_p
+ (s) \
+
+1281 ? (((c⁄° *Ë(
+s
+))[0] == '\0' \
+
+1282 ? (*Ë
+	`ˇŒoc
+ ((
+size_t
+) 1, (size_t) 1) \
+
+1283 : ({ 
+size_t
+ 
+__Àn
+ = 
+	`°æí
+ (
+s
+) + 1; \
+
+1284 *
+__ªtvÆ
+ = (*Ë
+	`mÆloc
+ (
+__Àn
+); \
+
+1285 i‡(
+__ªtvÆ
+ !
+NULL
+) \
+
+1286 
+__ªtvÆ
+ = (*Ë
+	`mem˝y
+ (__ªtvÆ, 
+s
+, 
+__Àn
+); \
+
+1287 
+__ªtvÆ
+; 
+	}
+})) \
+
+1288 : 
+	`__°rdup
+ (
+s
+)))
+
+	)
+
+1290 #i‡
+deföed
+ 
+__USE_XOPEN_EXTENDED
+ || deföed 
+__USE_XOPEN2K8
+
+
+1291 
+	#°rdup
+(
+s
+Ë
+	`__°rdup
+ (s)
+
+	)
+
+1295 #i‚de‡
+_HAVE_STRING_ARCH_°∫dup
+
+
+1297 *
+	$__°∫dup
+ (c⁄° *
+__°rög
+, 
+size_t
+ 
+__n
+)
+
+1298 
+__THROW
+ 
+__©åibuã_mÆloc__
+;
+
+1299 
+	#__°∫dup
+(
+s
+, 
+n
+) \
+
+1300 (
+	`__exãnsi⁄__
+ (
+	`__buûtö_c⁄°™t_p
+ (
+s
+Ë&& 
+	`__°rög2_1b±r_p
+ (s) \
+
+1301 ? (((c⁄° *Ë(
+s
+))[0] == '\0' \
+
+1302 ? (*Ë
+	`ˇŒoc
+ ((
+size_t
+) 1, (size_t) 1) \
+
+1303 : ({ 
+size_t
+ 
+__Àn
+ = 
+	`°æí
+ (
+s
+) + 1; \
+
+1304 
+size_t
+ 
+__n
+ = (
+n
+); \
+
+1305 *
+__ªtvÆ
+; \
+
+1306 i‡(
+__n
+ < 
+__Àn
+) \
+
+1307 
+__Àn
+ = 
+__n
+ + 1; \
+
+1308 
+__ªtvÆ
+ = (*Ë
+	`mÆloc
+ (
+__Àn
+); \
+
+1309 i‡(
+__ªtvÆ
+ !
+NULL
+) \
+
+1311 
+__ªtvÆ
+[
+__Àn
+ - 1] = '\0'; \
+
+1312 
+__ªtvÆ
+ = (*Ë
+	`mem˝y
+ (__ªtvÆ, 
+s
+, \
+
+1313 
+__Àn
+ - 1); \
+
+1315 
+__ªtvÆ
+; 
+	}
+})) \
+
+1316 : 
+	`__°∫dup
+ (
+s
+, 
+n
+)))
+
+	)
+
+1318 #ifde‡
+__USE_XOPEN2K8
+
+
+1319 
+	#°∫dup
+(
+s
+, 
+n
+Ë
+	`__°∫dup
+ (s,Ç)
+
+	)
+
+1325 #i‚de‡
+_FORCE_INLINES
+
+
+1326 #unde‡
+__STRING_INLINE
+
+
+	@/usr/include/bits/string3.h
+
+18 #i‚de‡
+_STRING_H
+
+
+22 #i‡!
+__GNUC_PREREQ
+ (5,0)
+
+23 
+__w¨nde˛
+ (
+__w¨n_mem£t_zîo_Àn
+,
+
+27 #i‚de‡
+__˝lu•lus
+
+
+31 #unde‡
+mem˝y
+
+
+32 #unde‡
+memmove
+
+
+33 #unde‡
+mem£t
+
+
+34 #unde‡
+°rˇt
+
+
+35 #unde‡
+°r˝y
+
+
+36 #unde‡
+°∫ˇt
+
+
+37 #unde‡
+°∫˝y
+
+
+38 #ifde‡
+__USE_GNU
+
+
+39 #unde‡
+memp˝y
+
+
+40 #unde‡
+°p˝y
+
+
+42 #ifde‡
+__USE_MISC
+
+
+43 #unde‡
+bc›y
+
+
+44 #unde‡
+bzîo
+
+
+49 
+__f‹tify_fun˘i⁄
+ *
+
+50 
+__NTH
+ (
+	$mem˝y
+ (*
+__ª°ri˘
+ 
+__de°
+, c⁄° *__ª°ri˘ 
+__§c
+,
+
+51 
+size_t
+ 
+__Àn
+))
+
+53  
+	`__buûtö___mem˝y_chk
+ (
+__de°
+, 
+__§c
+, 
+__Àn
+, 
+	`__bos0
+ (__dest));
+
+54 
+	}
+}
+
+56 
+__f‹tify_fun˘i⁄
+ *
+
+57 
+__NTH
+ (
+	$memmove
+ (*
+__de°
+, c⁄° *
+__§c
+, 
+size_t
+ 
+__Àn
+))
+
+59  
+	`__buûtö___memmove_chk
+ (
+__de°
+, 
+__§c
+, 
+__Àn
+, 
+	`__bos0
+ (__dest));
+
+60 
+	}
+}
+
+62 #ifde‡
+__USE_GNU
+
+
+63 
+__f‹tify_fun˘i⁄
+ *
+
+64 
+__NTH
+ (
+	$memp˝y
+ (*
+__ª°ri˘
+ 
+__de°
+, c⁄° *__ª°ri˘ 
+__§c
+,
+
+65 
+size_t
+ 
+__Àn
+))
+
+67  
+	`__buûtö___memp˝y_chk
+ (
+__de°
+, 
+__§c
+, 
+__Àn
+, 
+	`__bos0
+ (__dest));
+
+68 
+	}
+}
+
+77 
+__f‹tify_fun˘i⁄
+ *
+
+78 
+__NTH
+ (
+	$mem£t
+ (*
+__de°
+, 
+__ch
+, 
+size_t
+ 
+__Àn
+))
+
+82 #i‡!
+	`__GNUC_PREREQ
+ (5,0)
+
+83 i‡(
+	`__buûtö_c⁄°™t_p
+ (
+__Àn
+) && __len == 0
+
+84 && (!
+	`__buûtö_c⁄°™t_p
+ (
+__ch
+) || __ch != 0))
+
+86 
+	`__w¨n_mem£t_zîo_Àn
+ ();
+
+87  
+__de°
+;
+
+90  
+	`__buûtö___mem£t_chk
+ (
+__de°
+, 
+__ch
+, 
+__Àn
+, 
+	`__bos0
+ (__dest));
+
+91 
+	}
+}
+
+93 #ifde‡
+__USE_MISC
+
+
+94 
+__f‹tify_fun˘i⁄
+ 
+
+95 
+__NTH
+ (
+	$bc›y
+ (c⁄° *
+__§c
+, *
+__de°
+, 
+size_t
+ 
+__Àn
+))
+
+97 (Ë
+	`__buûtö___memmove_chk
+ (
+__de°
+, 
+__§c
+, 
+__Àn
+, 
+	`__bos0
+ (__dest));
+
+98 
+	}
+}
+
+100 
+__f‹tify_fun˘i⁄
+ 
+
+101 
+__NTH
+ (
+	$bzîo
+ (*
+__de°
+, 
+size_t
+ 
+__Àn
+))
+
+103 (Ë
+	`__buûtö___mem£t_chk
+ (
+__de°
+, '\0', 
+__Àn
+, 
+	`__bos0
+ (__dest));
+
+104 
+	}
+}
+
+107 
+__f‹tify_fun˘i⁄
+ *
+
+108 
+__NTH
+ (
+	$°r˝y
+ (*
+__ª°ri˘
+ 
+__de°
+, c⁄° *__ª°ri˘ 
+__§c
+))
+
+110  
+	`__buûtö___°r˝y_chk
+ (
+__de°
+, 
+__§c
+, 
+	`__bos
+ (__dest));
+
+111 
+	}
+}
+
+113 #ifde‡
+__USE_GNU
+
+
+114 
+__f‹tify_fun˘i⁄
+ *
+
+115 
+__NTH
+ (
+	$°p˝y
+ (*
+__ª°ri˘
+ 
+__de°
+, c⁄° *__ª°ri˘ 
+__§c
+))
+
+117  
+	`__buûtö___°p˝y_chk
+ (
+__de°
+, 
+__§c
+, 
+	`__bos
+ (__dest));
+
+118 
+	}
+}
+
+122 
+__f‹tify_fun˘i⁄
+ *
+
+123 
+__NTH
+ (
+	$°∫˝y
+ (*
+__ª°ri˘
+ 
+__de°
+, c⁄° *__ª°ri˘ 
+__§c
+,
+
+124 
+size_t
+ 
+__Àn
+))
+
+126  
+	`__buûtö___°∫˝y_chk
+ (
+__de°
+, 
+__§c
+, 
+__Àn
+, 
+	`__bos
+ (__dest));
+
+127 
+	}
+}
+
+130 *
+	$__°≤˝y_chk
+ (*
+__de°
+, c⁄° *
+__§c
+, 
+size_t
+ 
+__n
+,
+
+131 
+size_t
+ 
+__de°Àn
+Ë
+__THROW
+;
+
+132 *
+	`__REDIRECT_NTH
+ (
+__°≤˝y_Æüs
+, (*
+__de°
+, c⁄° *
+__§c
+,
+
+133 
+size_t
+ 
+__n
+), 
+°≤˝y
+);
+
+135 
+__f‹tify_fun˘i⁄
+ *
+
+136 
+	`__NTH
+ (
+	$°≤˝y
+ (*
+__de°
+, c⁄° *
+__§c
+, 
+size_t
+ 
+__n
+))
+
+138 i‡(
+	`__bos
+ (
+__de°
+Ë!(
+size_t
+) -1
+
+139 && (!
+	`__buûtö_c⁄°™t_p
+ (
+__n
+Ë|| __¿> 
+	`__bos
+ (
+__de°
+)))
+
+140  
+	`__°≤˝y_chk
+ (
+__de°
+, 
+__§c
+, 
+__n
+, 
+	`__bos
+ (__dest));
+
+141  
+	`__°≤˝y_Æüs
+ (
+__de°
+, 
+__§c
+, 
+__n
+);
+
+142 
+	}
+}
+
+145 
+__f‹tify_fun˘i⁄
+ *
+
+146 
+__NTH
+ (
+	$°rˇt
+ (*
+__ª°ri˘
+ 
+__de°
+, c⁄° *__ª°ri˘ 
+__§c
+))
+
+148  
+	`__buûtö___°rˇt_chk
+ (
+__de°
+, 
+__§c
+, 
+	`__bos
+ (__dest));
+
+149 
+	}
+}
+
+152 
+__f‹tify_fun˘i⁄
+ *
+
+153 
+__NTH
+ (
+	$°∫ˇt
+ (*
+__ª°ri˘
+ 
+__de°
+, c⁄° *__ª°ri˘ 
+__§c
+,
+
+154 
+size_t
+ 
+__Àn
+))
+
+156  
+	`__buûtö___°∫ˇt_chk
+ (
+__de°
+, 
+__§c
+, 
+__Àn
+, 
+	`__bos
+ (__dest));
+
+157 
+	}
+}
+
+	@/usr/include/bits/sys_errlist.h
+
+19 #i‚de‡
+_STDIO_H
+
+
+25 #ifde‡ 
+__USE_MISC
+
+
+26 
+sys_√º
+;
+
+27 c⁄° *c⁄° 
+sys_îæi°
+[];
+
+29 #ifde‡ 
+__USE_GNU
+
+
+30 
+_sys_√º
+;
+
+31 c⁄° *c⁄° 
+_sys_îæi°
+[];
+
+	@/usr/include/bits/types.h
+
+23 #i‚def 
+_BITS_TYPES_H
+
+
+24 
+	#_BITS_TYPES_H
+ 1
+
+	)
+
+26 
+	~<„©uªs.h
+>
+
+27 
+	~<bôs/w‹dsize.h
+>
+
+30 
+	t__u_ch¨
+;
+
+31 
+	t__u_sh‹t
+;
+
+32 
+	t__u_öt
+;
+
+33 
+	t__u_l⁄g
+;
+
+36 sig√d 
+	t__öt8_t
+;
+
+37 
+	t__uöt8_t
+;
+
+38 sig√d 
+	t__öt16_t
+;
+
+39 
+	t__uöt16_t
+;
+
+40 sig√d 
+	t__öt32_t
+;
+
+41 
+	t__uöt32_t
+;
+
+42 #i‡
+__WORDSIZE
+ == 64
+
+43 sig√d 
+	t__öt64_t
+;
+
+44 
+	t__uöt64_t
+;
+
+46 
+__exãnsi⁄__
+ sig√d 
+	t__öt64_t
+;
+
+47 
+__exãnsi⁄__
+ 
+	t__uöt64_t
+;
+
+51 #i‡
+__WORDSIZE
+ == 64
+
+52 
+	t__quad_t
+;
+
+53 
+	t__u_quad_t
+;
+
+55 
+__exãnsi⁄__
+ 
+	t__quad_t
+;
+
+56 
+__exãnsi⁄__
+ 
+	t__u_quad_t
+;
+
+89 
+	#__S16_TYPE
+ 
+
+	)
+
+90 
+	#__U16_TYPE
+ 
+
+	)
+
+91 
+	#__S32_TYPE
+ 
+
+	)
+
+92 
+	#__U32_TYPE
+ 
+
+	)
+
+93 
+	#__SLONGWORD_TYPE
+ 
+
+	)
+
+94 
+	#__ULONGWORD_TYPE
+ 
+
+	)
+
+95 #i‡
+__WORDSIZE
+ == 32
+
+96 
+	#__SQUAD_TYPE
+ 
+__quad_t
+
+
+	)
+
+97 
+	#__UQUAD_TYPE
+ 
+__u_quad_t
+
+
+	)
+
+98 
+	#__SWORD_TYPE
+ 
+
+	)
+
+99 
+	#__UWORD_TYPE
+ 
+
+	)
+
+100 
+	#__SLONG32_TYPE
+ 
+
+	)
+
+101 
+	#__ULONG32_TYPE
+ 
+
+	)
+
+102 
+	#__S64_TYPE
+ 
+__quad_t
+
+
+	)
+
+103 
+	#__U64_TYPE
+ 
+__u_quad_t
+
+
+	)
+
+106 
+	#__STD_TYPE
+ 
+__exãnsi⁄__
+ 
+
+	)
+
+107 #ñi‡
+__WORDSIZE
+ == 64
+
+108 
+	t__SQUAD_TYPE
+ 
+
+	)
+
+109 
+	t__UQUAD_TYPE
+ 
+
+	)
+
+110 
+	t__SWORD_TYPE
+ 
+
+	)
+
+111 
+	t__UWORD_TYPE
+ 
+
+	)
+
+112 
+	t__SLONG32_TYPE
+ 
+
+	)
+
+113 
+	t__ULONG32_TYPE
+ 
+
+	)
+
+114 
+	t__S64_TYPE
+ 
+
+	)
+
+115 
+	t__U64_TYPE
+ 
+
+	)
+
+117 
+	t__STD_TYPE
+ 
+
+	)
+
+121 
+	~<bôs/ty≥sizes.h
+>
+
+124 
+__STD_TYPE
+ 
+	t__DEV_T_TYPE
+ 
+	t__dev_t
+;
+
+125 
+__STD_TYPE
+ 
+__UID_T_TYPE
+ 
+	g__uid_t
+;
+
+126 
+__STD_TYPE
+ 
+__GID_T_TYPE
+ 
+	g__gid_t
+;
+
+127 
+__STD_TYPE
+ 
+__INO_T_TYPE
+ 
+	g__öo_t
+;
+
+128 
+__STD_TYPE
+ 
+__INO64_T_TYPE
+ 
+	g__öo64_t
+;
+
+129 
+__STD_TYPE
+ 
+__MODE_T_TYPE
+ 
+	g__mode_t
+;
+
+130 
+__STD_TYPE
+ 
+__NLINK_T_TYPE
+ 
+	g__∆ök_t
+;
+
+131 
+__STD_TYPE
+ 
+__OFF_T_TYPE
+ 
+	g__off_t
+;
+
+132 
+__STD_TYPE
+ 
+__OFF64_T_TYPE
+ 
+	g__off64_t
+;
+
+133 
+__STD_TYPE
+ 
+__PID_T_TYPE
+ 
+	g__pid_t
+;
+
+134 
+__STD_TYPE
+ 
+__FSID_T_TYPE
+ 
+	g__fsid_t
+;
+
+135 
+__STD_TYPE
+ 
+__CLOCK_T_TYPE
+ 
+	g__˛ock_t
+;
+
+136 
+__STD_TYPE
+ 
+__RLIM_T_TYPE
+ 
+	g__æim_t
+;
+
+137 
+__STD_TYPE
+ 
+__RLIM64_T_TYPE
+ 
+	g__æim64_t
+;
+
+138 
+__STD_TYPE
+ 
+__ID_T_TYPE
+ 
+	g__id_t
+;
+
+139 
+__STD_TYPE
+ 
+__TIME_T_TYPE
+ 
+	g__time_t
+;
+
+140 
+__STD_TYPE
+ 
+__USECONDS_T_TYPE
+ 
+	g__u£c⁄ds_t
+;
+
+141 
+__STD_TYPE
+ 
+__SUSECONDS_T_TYPE
+ 
+	g__su£c⁄ds_t
+;
+
+143 
+__STD_TYPE
+ 
+__DADDR_T_TYPE
+ 
+	g__daddr_t
+;
+
+144 
+__STD_TYPE
+ 
+__KEY_T_TYPE
+ 
+	g__key_t
+;
+
+147 
+__STD_TYPE
+ 
+__CLOCKID_T_TYPE
+ 
+	g__˛ockid_t
+;
+
+150 
+__STD_TYPE
+ 
+__TIMER_T_TYPE
+ 
+	g__timî_t
+;
+
+153 
+__STD_TYPE
+ 
+__BLKSIZE_T_TYPE
+ 
+	g__blksize_t
+;
+
+158 
+__STD_TYPE
+ 
+__BLKCNT_T_TYPE
+ 
+	g__blk˙t_t
+;
+
+159 
+__STD_TYPE
+ 
+__BLKCNT64_T_TYPE
+ 
+	g__blk˙t64_t
+;
+
+162 
+__STD_TYPE
+ 
+__FSBLKCNT_T_TYPE
+ 
+	g__fsblk˙t_t
+;
+
+163 
+__STD_TYPE
+ 
+__FSBLKCNT64_T_TYPE
+ 
+	g__fsblk˙t64_t
+;
+
+166 
+__STD_TYPE
+ 
+__FSFILCNT_T_TYPE
+ 
+	g__fsfû˙t_t
+;
+
+167 
+__STD_TYPE
+ 
+__FSFILCNT64_T_TYPE
+ 
+	g__fsfû˙t64_t
+;
+
+170 
+__STD_TYPE
+ 
+__FSWORD_T_TYPE
+ 
+	g__fsw‹d_t
+;
+
+172 
+__STD_TYPE
+ 
+__SSIZE_T_TYPE
+ 
+	g__ssize_t
+;
+
+175 
+__STD_TYPE
+ 
+__SYSCALL_SLONG_TYPE
+ 
+	g__sysˇŒ_¶⁄g_t
+;
+
+177 
+__STD_TYPE
+ 
+__SYSCALL_ULONG_TYPE
+ 
+	g__sysˇŒ_ul⁄g_t
+;
+
+181 
+__off64_t
+ 
+	t__loff_t
+;
+
+182 
+__quad_t
+ *
+	t__qaddr_t
+;
+
+183 *
+	t__ˇddr_t
+;
+
+186 
+__STD_TYPE
+ 
+__SWORD_TYPE
+ 
+	g__öçå_t
+;
+
+189 
+__STD_TYPE
+ 
+__U32_TYPE
+ 
+	g__sockÀn_t
+;
+
+192 #unde‡
+__STD_TYPE
+
+
+	@/usr/include/features.h
+
+18 #i‚def 
+_FEATURES_H
+
+
+19 
+	#_FEATURES_H
+ 1
+
+	)
+
+97 #unde‡
+__USE_ISOC11
+
+
+98 #unde‡
+__USE_ISOC99
+
+
+99 #unde‡
+__USE_ISOC95
+
+
+100 #unde‡
+__USE_ISOCXX11
+
+
+101 #unde‡
+__USE_POSIX
+
+
+102 #unde‡
+__USE_POSIX2
+
+
+103 #unde‡
+__USE_POSIX199309
+
+
+104 #unde‡
+__USE_POSIX199506
+
+
+105 #unde‡
+__USE_XOPEN
+
+
+106 #unde‡
+__USE_XOPEN_EXTENDED
+
+
+107 #unde‡
+__USE_UNIX98
+
+
+108 #unde‡
+__USE_XOPEN2K
+
+
+109 #unde‡
+__USE_XOPEN2KXSI
+
+
+110 #unde‡
+__USE_XOPEN2K8
+
+
+111 #unde‡
+__USE_XOPEN2K8XSI
+
+
+112 #unde‡
+__USE_LARGEFILE
+
+
+113 #unde‡
+__USE_LARGEFILE64
+
+
+114 #unde‡
+__USE_FILE_OFFSET64
+
+
+115 #unde‡
+__USE_MISC
+
+
+116 #unde‡
+__USE_ATFILE
+
+
+117 #unde‡
+__USE_GNU
+
+
+118 #unde‡
+__USE_REENTRANT
+
+
+119 #unde‡
+__USE_FORTIFY_LEVEL
+
+
+120 #unde‡
+__KERNEL_STRICT_NAMES
+
+
+124 #i‚de‡
+_LOOSE_KERNEL_NAMES
+
+
+125 
+	#__KERNEL_STRICT_NAMES
+
+
+	)
+
+135 #i‡
+deföed
+ 
+__GNUC__
+ && deföed 
+__GNUC_MINOR__
+
+
+136 
+	#__GNUC_PREREQ
+(
+maj
+, 
+mö
+) \
+
+137 ((
+__GNUC__
+ << 16Ë+ 
+__GNUC_MINOR__
+ >((
+maj
+Ë<< 16Ë+ (
+mö
+))
+
+	)
+
+139 
+	#__GNUC_PREREQ
+(
+maj
+, 
+mö
+Ë0
+
+	)
+
+146 #i‡(
+deföed
+ 
+_BSD_SOURCE
+ || deföed 
+_SVID_SOURCE
+) \
+
+147 && !
+deföed
+ 
+	g_DEFAULT_SOURCE
+
+
+152 #unde‡
+_DEFAULT_SOURCE
+
+
+153 
+	#_DEFAULT_SOURCE
+ 1
+
+	)
+
+157 #ifde‡
+_GNU_SOURCE
+
+
+158 #unde‡
+_ISOC95_SOURCE
+
+
+159 
+	#_ISOC95_SOURCE
+ 1
+
+	)
+
+160 #unde‡
+_ISOC99_SOURCE
+
+
+161 
+	#_ISOC99_SOURCE
+ 1
+
+	)
+
+162 #unde‡
+_ISOC11_SOURCE
+
+
+163 
+	#_ISOC11_SOURCE
+ 1
+
+	)
+
+164 #unde‡
+_POSIX_SOURCE
+
+
+165 
+	#_POSIX_SOURCE
+ 1
+
+	)
+
+166 #unde‡
+_POSIX_C_SOURCE
+
+
+167 
+	#_POSIX_C_SOURCE
+ 200809L
+
+	)
+
+168 #unde‡
+_XOPEN_SOURCE
+
+
+169 
+	#_XOPEN_SOURCE
+ 700
+
+	)
+
+170 #unde‡
+_XOPEN_SOURCE_EXTENDED
+
+
+171 
+	#_XOPEN_SOURCE_EXTENDED
+ 1
+
+	)
+
+172 #unde‡
+_LARGEFILE64_SOURCE
+
+
+173 
+	#_LARGEFILE64_SOURCE
+ 1
+
+	)
+
+174 #unde‡
+_DEFAULT_SOURCE
+
+
+175 
+	#_DEFAULT_SOURCE
+ 1
+
+	)
+
+176 #unde‡
+_ATFILE_SOURCE
+
+
+177 
+	#_ATFILE_SOURCE
+ 1
+
+	)
+
+182 #i‡(
+deföed
+ 
+_DEFAULT_SOURCE
+ \
+
+183 || (!
+deföed
+ 
+	g__STRICT_ANSI__
+ \
+
+184 && !
+deföed
+ 
+	g_ISOC99_SOURCE
+ \
+
+185 && !
+deföed
+ 
+	g_POSIX_SOURCE
+ && !deföed 
+	g_POSIX_C_SOURCE
+ \
+
+186 && !
+deföed
+ 
+	g_XOPEN_SOURCE
+))
+
+187 #unde‡
+_DEFAULT_SOURCE
+
+
+188 
+	#_DEFAULT_SOURCE
+ 1
+
+	)
+
+192 #i‡(
+deföed
+ 
+_ISOC11_SOURCE
+ \
+
+193 || (
+deföed
+ 
+	g__STDC_VERSION__
+ && __STDC_VERSION__ >= 201112L))
+
+194 
+	#__USE_ISOC11
+ 1
+
+	)
+
+198 #i‡(
+deföed
+ 
+_ISOC99_SOURCE
+ || deföed 
+_ISOC11_SOURCE
+ \
+
+199 || (
+deföed
+ 
+__STDC_VERSION__
+ && __STDC_VERSION__ >= 199901L))
+
+200 
+	#__USE_ISOC99
+ 1
+
+	)
+
+204 #i‡(
+deföed
+ 
+_ISOC99_SOURCE
+ || deföed 
+_ISOC11_SOURCE
+ \
+
+205 || (
+deföed
+ 
+__STDC_VERSION__
+ && __STDC_VERSION__ >= 199409L))
+
+206 
+	#__USE_ISOC95
+ 1
+
+	)
+
+213 #i‡((
+deföed
+ 
+__˝lu•lus
+ && __cplusplus >= 201103L) \
+
+214 || 
+deföed
+ 
+__GXX_EXPERIMENTAL_CXX0X__
+)
+
+215 
+	#__USE_ISOCXX11
+ 1
+
+	)
+
+221 #ifde‡
+_DEFAULT_SOURCE
+
+
+222 #i‡!
+deföed
+ 
+_POSIX_SOURCE
+ && !deföed 
+_POSIX_C_SOURCE
+
+
+223 
+	#__USE_POSIX_IMPLICITLY
+ 1
+
+	)
+
+225 #unde‡
+_POSIX_SOURCE
+
+
+226 
+	#_POSIX_SOURCE
+ 1
+
+	)
+
+227 #unde‡
+_POSIX_C_SOURCE
+
+
+228 
+	#_POSIX_C_SOURCE
+ 200809L
+
+	)
+
+230 #i‡((!
+deföed
+ 
+__STRICT_ANSI__
+ \
+
+231 || (
+deföed
+ 
+_XOPEN_SOURCE
+ && (_XOPEN_SOURCE - 0) >= 500)) \
+
+232 && !
+deföed
+ 
+_POSIX_SOURCE
+ && !deföed 
+_POSIX_C_SOURCE
+)
+
+233 
+	#_POSIX_SOURCE
+ 1
+
+	)
+
+234 #i‡
+deföed
+ 
+_XOPEN_SOURCE
+ && (_XOPEN_SOURCE - 0) < 500
+
+235 
+	#_POSIX_C_SOURCE
+ 2
+
+	)
+
+236 #ñi‡
+deföed
+ 
+_XOPEN_SOURCE
+ && (_XOPEN_SOURCE - 0) < 600
+
+237 
+	#_POSIX_C_SOURCE
+ 199506L
+
+	)
+
+238 #ñi‡
+deföed
+ 
+_XOPEN_SOURCE
+ && (_XOPEN_SOURCE - 0) < 700
+
+239 
+	#_POSIX_C_SOURCE
+ 200112L
+
+	)
+
+241 
+	#_POSIX_C_SOURCE
+ 200809L
+
+	)
+
+243 
+	#__USE_POSIX_IMPLICITLY
+ 1
+
+	)
+
+246 #i‡(
+deföed
+ 
+_POSIX_SOURCE
+ \
+
+247 || (
+deföed
+ 
+_POSIX_C_SOURCE
+ && _POSIX_C_SOURCE >= 1) \
+
+248 || 
+deföed
+ 
+_XOPEN_SOURCE
+)
+
+249 
+	#__USE_POSIX
+ 1
+
+	)
+
+252 #i‡
+deföed
+ 
+_POSIX_C_SOURCE
+ && _POSIX_C_SOURCE >2 || deföed 
+_XOPEN_SOURCE
+
+
+253 
+	#__USE_POSIX2
+ 1
+
+	)
+
+256 #i‡
+deföed
+ 
+_POSIX_C_SOURCE
+ && (_POSIX_C_SOURCE - 0) >= 199309L
+
+257 
+	#__USE_POSIX199309
+ 1
+
+	)
+
+260 #i‡
+deföed
+ 
+_POSIX_C_SOURCE
+ && (_POSIX_C_SOURCE - 0) >= 199506L
+
+261 
+	#__USE_POSIX199506
+ 1
+
+	)
+
+264 #i‡
+deföed
+ 
+_POSIX_C_SOURCE
+ && (_POSIX_C_SOURCE - 0) >= 200112L
+
+265 
+	#__USE_XOPEN2K
+ 1
+
+	)
+
+266 #unde‡
+__USE_ISOC95
+
+
+267 
+	#__USE_ISOC95
+ 1
+
+	)
+
+268 #unde‡
+__USE_ISOC99
+
+
+269 
+	#__USE_ISOC99
+ 1
+
+	)
+
+272 #i‡
+deföed
+ 
+_POSIX_C_SOURCE
+ && (_POSIX_C_SOURCE - 0) >= 200809L
+
+273 
+	#__USE_XOPEN2K8
+ 1
+
+	)
+
+274 #unde‡
+_ATFILE_SOURCE
+
+
+275 
+	#_ATFILE_SOURCE
+ 1
+
+	)
+
+278 #ifdef 
+_XOPEN_SOURCE
+
+
+279 
+	#__USE_XOPEN
+ 1
+
+	)
+
+280 #i‡(
+_XOPEN_SOURCE
+ - 0) >= 500
+
+281 
+	#__USE_XOPEN_EXTENDED
+ 1
+
+	)
+
+282 
+	#__USE_UNIX98
+ 1
+
+	)
+
+283 #unde‡
+_LARGEFILE_SOURCE
+
+
+284 
+	#_LARGEFILE_SOURCE
+ 1
+
+	)
+
+285 #i‡(
+_XOPEN_SOURCE
+ - 0) >= 600
+
+286 #i‡(
+_XOPEN_SOURCE
+ - 0) >= 700
+
+287 
+	#__USE_XOPEN2K8
+ 1
+
+	)
+
+288 
+	#__USE_XOPEN2K8XSI
+ 1
+
+	)
+
+290 
+	#__USE_XOPEN2K
+ 1
+
+	)
+
+291 
+	#__USE_XOPEN2KXSI
+ 1
+
+	)
+
+292 #unde‡
+__USE_ISOC95
+
+
+293 
+	#__USE_ISOC95
+ 1
+
+	)
+
+294 #unde‡
+__USE_ISOC99
+
+
+295 
+	#__USE_ISOC99
+ 1
+
+	)
+
+298 #ifde‡
+_XOPEN_SOURCE_EXTENDED
+
+
+299 
+	#__USE_XOPEN_EXTENDED
+ 1
+
+	)
+
+304 #ifde‡
+_LARGEFILE_SOURCE
+
+
+305 
+	#__USE_LARGEFILE
+ 1
+
+	)
+
+308 #ifde‡
+_LARGEFILE64_SOURCE
+
+
+309 
+	#__USE_LARGEFILE64
+ 1
+
+	)
+
+312 #i‡
+deföed
+ 
+_FILE_OFFSET_BITS
+ && _FILE_OFFSET_BITS == 64
+
+313 
+	#__USE_FILE_OFFSET64
+ 1
+
+	)
+
+316 #i‡
+deföed
+ 
+_DEFAULT_SOURCE
+
+
+317 
+	#__USE_MISC
+ 1
+
+	)
+
+320 #ifdef 
+_ATFILE_SOURCE
+
+
+321 
+	#__USE_ATFILE
+ 1
+
+	)
+
+324 #ifdef 
+_GNU_SOURCE
+
+
+325 
+	#__USE_GNU
+ 1
+
+	)
+
+328 #i‡
+deföed
+ 
+_REENTRANT
+ || deföed 
+_THREAD_SAFE
+
+
+329 
+	#__USE_REENTRANT
+ 1
+
+	)
+
+332 #i‡
+deföed
+ 
+_FORTIFY_SOURCE
+ && _FORTIFY_SOURCE > 0 \
+
+333 && 
+__GNUC_PREREQ
+ (4, 1Ë&& 
+deföed
+ 
+	g__OPTIMIZE__
+ && __OPTIMIZE__ > 0
+
+334 #i‡
+_FORTIFY_SOURCE
+ > 1
+
+335 
+	#__USE_FORTIFY_LEVEL
+ 2
+
+	)
+
+337 
+	#__USE_FORTIFY_LEVEL
+ 1
+
+	)
+
+340 
+	#__USE_FORTIFY_LEVEL
+ 0
+
+	)
+
+345 
+	~<°dc-¥edef.h
+>
+
+353 #unde‡
+__GNU_LIBRARY__
+
+
+354 
+	#__GNU_LIBRARY__
+ 6
+
+	)
+
+358 
+	#__GLIBC__
+ 2
+
+	)
+
+359 
+	#__GLIBC_MINOR__
+ 23
+
+	)
+
+361 
+	#__GLIBC_PREREQ
+(
+maj
+, 
+mö
+) \
+
+362 ((
+__GLIBC__
+ << 16Ë+ 
+__GLIBC_MINOR__
+ >((
+maj
+Ë<< 16Ë+ (
+mö
+))
+
+	)
+
+365 #i‚de‡
+__ASSEMBLER__
+
+
+366 #i‚de‡
+_SYS_CDEFS_H
+
+
+367 
+	~<sys/cdefs.h
+>
+
+372 #i‡
+deföed
+ 
+__USE_FILE_OFFSET64
+ && !deföed 
+__REDIRECT
+
+
+373 
+	#__USE_LARGEFILE
+ 1
+
+	)
+
+374 
+	#__USE_LARGEFILE64
+ 1
+
+	)
+
+380 #i‡
+__GNUC_PREREQ
+ (2, 7Ë&& 
+deföed
+ 
+__OPTIMIZE__
+ \
+
+381 && !
+deföed
+ 
+	g__OPTIMIZE_SIZE__
+ && !deföed 
+	g__NO_INLINE__
+ \
+
+382 && 
+deföed
+ 
+	g__exã∫_ölöe
+
+
+383 
+	#__USE_EXTERN_INLINES
+ 1
+
+	)
+
+391 
+	~<gnu/°ubs.h
+>
+
+	@/usr/include/getopt.h
+
+19 #i‚de‡
+_GETOPT_H
+
+
+21 #i‚de‡
+__√ed_gë›t
+
+
+22 
+	#_GETOPT_H
+ 1
+
+	)
+
+32 #i‡!
+deföed
+ 
+__GNU_LIBRARY__
+
+
+33 
+	~<˘y≥.h
+>
+
+36 #i‚de‡
+__THROW
+
+
+37 #i‚de‡
+__GNUC_PREREQ
+
+
+38 
+	#__GNUC_PREREQ
+(
+maj
+, 
+mö
+Ë(0)
+
+	)
+
+40 #i‡
+deföed
+ 
+__˝lu•lus
+ && 
+__GNUC_PREREQ
+ (2,8)
+
+41 
+	#__THROW
+ 
+	`throw
+ ()
+
+	)
+
+43 
+	#__THROW
+
+
+	)
+
+47 #ifdef 
+__˝lu•lus
+
+
+57 *
+›èrg
+;
+
+71 
+›töd
+;
+
+76 
+›ãº
+;
+
+80 
+›t›t
+;
+
+82 #i‚de‡
+__√ed_gë›t
+
+
+104 
+	s›ti⁄
+
+
+106 c⁄° *
+	g«me
+;
+
+109 
+	ghas_¨g
+;
+
+110 *
+	gÊag
+;
+
+111 
+	gvÆ
+;
+
+116 
+	#no_¨gumít
+ 0
+
+	)
+
+117 
+	#ªquúed_¨gumít
+ 1
+
+	)
+
+118 
+	#›ti⁄Æ_¨gumít
+ 2
+
+	)
+
+146 #ifde‡
+__GNU_LIBRARY__
+
+
+150 
+gë›t
+ (
+___¨gc
+, *c⁄° *
+___¨gv
+, c⁄° *
+__sh‹t›ts
+)
+
+151 
+__THROW
+;
+
+153 #i‡
+deföed
+ 
+__√ed_gë›t
+ && deföed 
+__USE_POSIX2
+ \
+
+154 && !
+deföed
+ 
+	g__USE_POSIX_IMPLICITLY
+ && !deföed 
+	g__USE_GNU
+
+
+158 #ifde‡
+__REDIRECT
+
+
+159 
+__REDIRECT_NTH
+ (
+gë›t
+, (
+___¨gc
+, *c⁄° *
+___¨gv
+,
+
+160 c⁄° *
+__sh‹t›ts
+),
+
+161 
+__posix_gë›t
+);
+
+163 
+__posix_gë›t
+ (
+___¨gc
+, *c⁄° *
+___¨gv
+,
+
+164 c⁄° *
+__sh‹t›ts
+Ë
+__THROW
+;
+
+165 
+	#gë›t
+ 
+__posix_gë›t
+
+
+	)
+
+169 
+gë›t
+ ();
+
+172 #i‚de‡
+__√ed_gë›t
+
+
+173 
+gë›t_l⁄g
+ (
+___¨gc
+, *c⁄° *
+___¨gv
+,
+
+174 c⁄° *
+__sh‹t›ts
+,
+
+175 c⁄° 
+›ti⁄
+ *
+__l⁄g›ts
+, *
+__l⁄göd
+)
+
+176 
+__THROW
+;
+
+177 
+gë›t_l⁄g_⁄ly
+ (
+___¨gc
+, *c⁄° *
+___¨gv
+,
+
+178 c⁄° *
+__sh‹t›ts
+,
+
+179 c⁄° 
+›ti⁄
+ *
+__l⁄g›ts
+, *
+__l⁄göd
+)
+
+180 
+__THROW
+;
+
+184 #ifdef 
+__˝lu•lus
+
+
+189 #unde‡
+__√ed_gë›t
+
+
+	@/usr/include/libio.h
+
+28 #i‚de‡
+_IO_STDIO_H
+
+
+29 
+	#_IO_STDIO_H
+
+
+	)
+
+31 
+	~<_G_c⁄fig.h
+>
+
+33 
+	#_IO_Âos_t
+ 
+_G_Âos_t
+
+
+	)
+
+34 
+	#_IO_Âos64_t
+ 
+_G_Âos64_t
+
+
+	)
+
+35 
+	#_IO_size_t
+ 
+size_t
+
+
+	)
+
+36 
+	#_IO_ssize_t
+ 
+__ssize_t
+
+
+	)
+
+37 
+	#_IO_off_t
+ 
+__off_t
+
+
+	)
+
+38 
+	#_IO_off64_t
+ 
+__off64_t
+
+
+	)
+
+39 
+	#_IO_pid_t
+ 
+__pid_t
+
+
+	)
+
+40 
+	#_IO_uid_t
+ 
+__uid_t
+
+
+	)
+
+41 
+	#_IO_ic⁄v_t
+ 
+_G_ic⁄v_t
+
+
+	)
+
+42 
+	#_IO_HAVE_ST_BLKSIZE
+ 
+_G_HAVE_ST_BLKSIZE
+
+
+	)
+
+43 
+	#_IO_BUFSIZ
+ 
+_G_BUFSIZ
+
+
+	)
+
+44 
+	#_IO_va_li°
+ 
+_G_va_li°
+
+
+	)
+
+45 
+	#_IO_wöt_t
+ 
+wöt_t
+
+
+	)
+
+48 
+	#__√ed___va_li°
+
+
+	)
+
+49 
+	~<°d¨g.h
+>
+
+50 #ifde‡
+__GNUC_VA_LIST
+
+
+51 #unde‡
+_IO_va_li°
+
+
+52 
+	#_IO_va_li°
+ 
+__gnuc_va_li°
+
+
+	)
+
+55 #i‚de‡
+__P
+
+
+56 
+	~<sys/cdefs.h
+>
+
+59 
+	#_IO_UNIFIED_JUMPTABLES
+ 1
+
+	)
+
+61 #i‚de‡
+EOF
+
+
+62 
+	#EOF
+ (-1)
+
+	)
+
+64 #i‚de‡
+NULL
+
+
+65 #i‡
+deföed
+ 
+__GNUG__
+ && \
+
+66 (
+	g__GNUC__
+ > 2 || (__GNUC__ =2 && 
+__GNUC_MINOR__
+ >= 8))
+
+67 
+	#NULL
+ (
+__nuŒ
+)
+
+	)
+
+69 #i‡!
+deföed
+(
+__˝lu•lus
+)
+
+70 
+	#NULL
+ ((*)0)
+
+	)
+
+72 
+	#NULL
+ (0)
+
+	)
+
+77 
+	#_IOS_INPUT
+ 1
+
+	)
+
+78 
+	#_IOS_OUTPUT
+ 2
+
+	)
+
+79 
+	#_IOS_ATEND
+ 4
+
+	)
+
+80 
+	#_IOS_APPEND
+ 8
+
+	)
+
+81 
+	#_IOS_TRUNC
+ 16
+
+	)
+
+82 
+	#_IOS_NOCREATE
+ 32
+
+	)
+
+83 
+	#_IOS_NOREPLACE
+ 64
+
+	)
+
+84 
+	#_IOS_BIN
+ 128
+
+	)
+
+92 
+	#_IO_MAGIC
+ 0xFBAD0000
+
+	)
+
+93 
+	#_OLD_STDIO_MAGIC
+ 0xFABC0000
+
+	)
+
+94 
+	#_IO_MAGIC_MASK
+ 0xFFFF0000
+
+	)
+
+95 
+	#_IO_USER_BUF
+ 1
+
+	)
+
+96 
+	#_IO_UNBUFFERED
+ 2
+
+	)
+
+97 
+	#_IO_NO_READS
+ 4
+
+	)
+
+98 
+	#_IO_NO_WRITES
+ 8
+
+	)
+
+99 
+	#_IO_EOF_SEEN
+ 0x10
+
+	)
+
+100 
+	#_IO_ERR_SEEN
+ 0x20
+
+	)
+
+101 
+	#_IO_DELETE_DONT_CLOSE
+ 0x40
+
+	)
+
+102 
+	#_IO_LINKED
+ 0x80
+
+	)
+
+103 
+	#_IO_IN_BACKUP
+ 0x100
+
+	)
+
+104 
+	#_IO_LINE_BUF
+ 0x200
+
+	)
+
+105 
+	#_IO_TIED_PUT_GET
+ 0x400
+
+	)
+
+106 
+	#_IO_CURRENTLY_PUTTING
+ 0x800
+
+	)
+
+107 
+	#_IO_IS_APPENDING
+ 0x1000
+
+	)
+
+108 
+	#_IO_IS_FILEBUF
+ 0x2000
+
+	)
+
+109 
+	#_IO_BAD_SEEN
+ 0x4000
+
+	)
+
+110 
+	#_IO_USER_LOCK
+ 0x8000
+
+	)
+
+112 
+	#_IO_FLAGS2_MMAP
+ 1
+
+	)
+
+113 
+	#_IO_FLAGS2_NOTCANCEL
+ 2
+
+	)
+
+114 #ifde‡
+_LIBC
+
+
+115 
+	#_IO_FLAGS2_FORTIFY
+ 4
+
+	)
+
+117 
+	#_IO_FLAGS2_USER_WBUF
+ 8
+
+	)
+
+118 #ifde‡
+_LIBC
+
+
+119 
+	#_IO_FLAGS2_SCANF_STD
+ 16
+
+	)
+
+120 
+	#_IO_FLAGS2_NOCLOSE
+ 32
+
+	)
+
+121 
+	#_IO_FLAGS2_CLOEXEC
+ 64
+
+	)
+
+125 
+	#_IO_SKIPWS
+ 01
+
+	)
+
+126 
+	#_IO_LEFT
+ 02
+
+	)
+
+127 
+	#_IO_RIGHT
+ 04
+
+	)
+
+128 
+	#_IO_INTERNAL
+ 010
+
+	)
+
+129 
+	#_IO_DEC
+ 020
+
+	)
+
+130 
+	#_IO_OCT
+ 040
+
+	)
+
+131 
+	#_IO_HEX
+ 0100
+
+	)
+
+132 
+	#_IO_SHOWBASE
+ 0200
+
+	)
+
+133 
+	#_IO_SHOWPOINT
+ 0400
+
+	)
+
+134 
+	#_IO_UPPERCASE
+ 01000
+
+	)
+
+135 
+	#_IO_SHOWPOS
+ 02000
+
+	)
+
+136 
+	#_IO_SCIENTIFIC
+ 04000
+
+	)
+
+137 
+	#_IO_FIXED
+ 010000
+
+	)
+
+138 
+	#_IO_UNITBUF
+ 020000
+
+	)
+
+139 
+	#_IO_STDIO
+ 040000
+
+	)
+
+140 
+	#_IO_DONT_CLOSE
+ 0100000
+
+	)
+
+141 
+	#_IO_BOOLALPHA
+ 0200000
+
+	)
+
+144 
+_IO_jump_t
+; 
+	g_IO_FILE
+;
+
+147 #ifde‡
+_IO_MTSAFE_IO
+
+
+150 
+	t_IO_lock_t
+;
+
+156 
+	s_IO_m¨kî
+ {
+
+157 
+_IO_m¨kî
+ *
+	m_√xt
+;
+
+158 
+_IO_FILE
+ *
+	m_sbuf
+;
+
+162 
+	m_pos
+;
+
+164 
+£t_°ªampos
+(
+°ªampos
+ 
+•
+Ë{ 
+	m_•os
+ = sp; }
+
+165 
+£t_off£t
+(
+off£t
+Ë{ 
+	m_pos
+ = off£t; 
+	m_•os
+ = (
+°ªampos
+)(-2); }
+
+166 
+	mpublic
+:
+
+167 
+°ªamm¨kî
+(
+°ªambuf
+ *
+sb
+);
+
+168 ~
+°ªamm¨kî
+();
+
+169 
+ßvög
+(Ë{  
+	m_•os
+ == -2; }
+
+170 
+dñè
+(
+°ªamm¨kî
+&);
+
+171 
+dñè
+();
+
+176 
+	e__codecvt_ªsu…
+
+
+178 
+	m__codecvt_ok
+,
+
+179 
+	m__codecvt_∑πül
+,
+
+180 
+	m__codecvt_îr‹
+,
+
+181 
+	m__codecvt_noc⁄v
+
+
+184 #i‡
+deföed
+ 
+_LIBC
+ || deföed 
+_GLIBCPP_USE_WCHAR_T
+
+
+187 
+	s_IO_codecvt
+
+
+189 (*
+	m__codecvt_de°r
+Ë(
+	m_IO_codecvt
+ *);
+
+190 
+__codecvt_ªsu…
+ (*
+__codecvt_do_out
+Ë(
+	m_IO_codecvt
+ *,
+
+191 
+	m__mb°©e_t
+ *,
+
+192 c⁄° 
+	mwch¨_t
+ *,
+
+193 c⁄° 
+	mwch¨_t
+ *,
+
+194 c⁄° 
+	mwch¨_t
+ **, *,
+
+196 
+__codecvt_ªsu…
+ (*
+__codecvt_do_unshi·
+Ë(
+	m_IO_codecvt
+ *,
+
+197 
+	m__mb°©e_t
+ *, *,
+
+199 
+__codecvt_ªsu…
+ (*
+__codecvt_do_ö
+Ë(
+	m_IO_codecvt
+ *,
+
+200 
+	m__mb°©e_t
+ *,
+
+202 c⁄° **, 
+	mwch¨_t
+ *,
+
+203 
+	mwch¨_t
+ *, wchar_t **);
+
+204 (*
+	m__codecvt_do_ícodög
+Ë(
+	m_IO_codecvt
+ *);
+
+205 (*
+	m__codecvt_do_Æways_noc⁄v
+Ë(
+	m_IO_codecvt
+ *);
+
+206 (*
+	m__codecvt_do_Àngth
+Ë(
+	m_IO_codecvt
+ *, 
+	m__mb°©e_t
+ *,
+
+207 c⁄° *, c⁄° *, 
+	m_IO_size_t
+);
+
+208 (*
+	m__codecvt_do_max_Àngth
+Ë(
+	m_IO_codecvt
+ *);
+
+210 
+_IO_ic⁄v_t
+ 
+	m__cd_ö
+;
+
+211 
+_IO_ic⁄v_t
+ 
+	m__cd_out
+;
+
+215 
+	s_IO_wide_d©a
+
+
+217 
+wch¨_t
+ *
+	m_IO_ªad_±r
+;
+
+218 
+wch¨_t
+ *
+	m_IO_ªad_íd
+;
+
+219 
+wch¨_t
+ *
+	m_IO_ªad_ba£
+;
+
+220 
+wch¨_t
+ *
+	m_IO_wrôe_ba£
+;
+
+221 
+wch¨_t
+ *
+	m_IO_wrôe_±r
+;
+
+222 
+wch¨_t
+ *
+	m_IO_wrôe_íd
+;
+
+223 
+wch¨_t
+ *
+	m_IO_buf_ba£
+;
+
+224 
+wch¨_t
+ *
+	m_IO_buf_íd
+;
+
+226 
+wch¨_t
+ *
+	m_IO_ßve_ba£
+;
+
+227 
+wch¨_t
+ *
+	m_IO_backup_ba£
+;
+
+229 
+wch¨_t
+ *
+	m_IO_ßve_íd
+;
+
+231 
+__mb°©e_t
+ 
+	m_IO_°©e
+;
+
+232 
+__mb°©e_t
+ 
+	m_IO_œ°_°©e
+;
+
+233 
+_IO_codecvt
+ 
+	m_codecvt
+;
+
+235 
+wch¨_t
+ 
+	m_sh‹tbuf
+[1];
+
+237 c⁄° 
+_IO_jump_t
+ *
+	m_wide_vèbÀ
+;
+
+241 
+	s_IO_FILE
+ {
+
+242 
+	m_Êags
+;
+
+243 
+	#_IO_fûe_Êags
+ 
+_Êags
+
+
+	)
+
+247 * 
+	m_IO_ªad_±r
+;
+
+248 * 
+	m_IO_ªad_íd
+;
+
+249 * 
+	m_IO_ªad_ba£
+;
+
+250 * 
+	m_IO_wrôe_ba£
+;
+
+251 * 
+	m_IO_wrôe_±r
+;
+
+252 * 
+	m_IO_wrôe_íd
+;
+
+253 * 
+	m_IO_buf_ba£
+;
+
+254 * 
+	m_IO_buf_íd
+;
+
+256 *
+	m_IO_ßve_ba£
+;
+
+257 *
+	m_IO_backup_ba£
+;
+
+258 *
+	m_IO_ßve_íd
+;
+
+260 
+_IO_m¨kî
+ *
+	m_m¨kîs
+;
+
+262 
+_IO_FILE
+ *
+	m_chaö
+;
+
+264 
+	m_fûío
+;
+
+266 
+	m_blksize
+;
+
+268 
+	m_Êags2
+;
+
+270 
+_IO_off_t
+ 
+	m_ﬁd_off£t
+;
+
+272 
+	#__HAVE_COLUMN
+
+
+	)
+
+274 
+	m_cur_cﬁumn
+;
+
+275 sig√d 
+	m_vèbÀ_off£t
+;
+
+276 
+	m_sh‹tbuf
+[1];
+
+280 
+_IO_lock_t
+ *
+	m_lock
+;
+
+281 #ifde‡
+_IO_USE_OLD_IO_FILE
+
+
+284 
+	s_IO_FILE_com∂ëe
+
+
+286 
+_IO_FILE
+ 
+	m_fûe
+;
+
+288 #i‡
+deföed
+ 
+_G_IO_IO_FILE_VERSION
+ && _G_IO_IO_FILE_VERSION == 0x20001
+
+289 
+_IO_off64_t
+ 
+	m_off£t
+;
+
+290 #i‡
+deföed
+ 
+_LIBC
+ || deföed 
+_GLIBCPP_USE_WCHAR_T
+
+
+292 
+_IO_codecvt
+ *
+	m_codecvt
+;
+
+293 
+_IO_wide_d©a
+ *
+	m_wide_d©a
+;
+
+294 
+_IO_FILE
+ *
+	m_‰ìªs_li°
+;
+
+295 *
+	m_‰ìªs_buf
+;
+
+297 *
+	m__∑d1
+;
+
+298 *
+	m__∑d2
+;
+
+299 *
+	m__∑d3
+;
+
+300 *
+	m__∑d4
+;
+
+302 
+size_t
+ 
+	m__∑d5
+;
+
+303 
+	m_mode
+;
+
+305 
+	m_unu£d2
+[15 *  (Ë- 4 *  (*Ë-  (
+size_t
+)];
+
+309 #i‚de‡
+__˝lu•lus
+
+
+310 
+_IO_FILE
+ 
+	t_IO_FILE
+;
+
+313 
+	g_IO_FILE_∂us
+;
+
+315 
+_IO_FILE_∂us
+ 
+_IO_2_1_°dö_
+;
+
+316 
+_IO_FILE_∂us
+ 
+_IO_2_1_°dout_
+;
+
+317 
+_IO_FILE_∂us
+ 
+_IO_2_1_°dîr_
+;
+
+318 #i‚de‡
+_LIBC
+
+
+319 
+	#_IO_°dö
+ ((
+_IO_FILE
+*)(&
+_IO_2_1_°dö_
+))
+
+	)
+
+320 
+	#_IO_°dout
+ ((
+_IO_FILE
+*)(&
+_IO_2_1_°dout_
+))
+
+	)
+
+321 
+	#_IO_°dîr
+ ((
+_IO_FILE
+*)(&
+_IO_2_1_°dîr_
+))
+
+	)
+
+323 
+_IO_FILE
+ *
+_IO_°dö
+ 
+©åibuã_hiddí
+;
+
+324 
+_IO_FILE
+ *
+_IO_°dout
+ 
+©åibuã_hiddí
+;
+
+325 
+_IO_FILE
+ *
+_IO_°dîr
+ 
+©åibuã_hiddí
+;
+
+333 
+__ssize_t
+ 
+	t__io_ªad_‚
+ (*
+	t__cookõ
+, *
+	t__buf
+, 
+	tsize_t
+ 
+	t__nbyãs
+);
+
+341 
+__ssize_t
+ 
+	t__io_wrôe_‚
+ (*
+	t__cookõ
+, c⁄° *
+	t__buf
+,
+
+342 
+	tsize_t
+ 
+	t__n
+);
+
+350 
+	t__io_£ek_‚
+ (*
+	t__cookõ
+, 
+	t_IO_off64_t
+ *
+	t__pos
+, 
+	t__w
+);
+
+353 
+	t__io_˛o£_‚
+ (*
+	t__cookõ
+);
+
+356 #ifde‡
+_GNU_SOURCE
+
+
+358 
+__io_ªad_‚
+ 
+	tcookõ_ªad_fun˘i⁄_t
+;
+
+359 
+__io_wrôe_‚
+ 
+	tcookõ_wrôe_fun˘i⁄_t
+;
+
+360 
+__io_£ek_‚
+ 
+	tcookõ_£ek_fun˘i⁄_t
+;
+
+361 
+__io_˛o£_‚
+ 
+	tcookõ_˛o£_fun˘i⁄_t
+;
+
+366 
+__io_ªad_‚
+ *
+	mªad
+;
+
+367 
+__io_wrôe_‚
+ *
+	mwrôe
+;
+
+368 
+__io_£ek_‚
+ *
+	m£ek
+;
+
+369 
+__io_˛o£_‚
+ *
+	m˛o£
+;
+
+370 } 
+	t_IO_cookõ_io_fun˘i⁄s_t
+;
+
+371 
+_IO_cookõ_io_fun˘i⁄s_t
+ 
+	tcookõ_io_fun˘i⁄s_t
+;
+
+373 
+	g_IO_cookõ_fûe
+;
+
+376 
+_IO_cookõ_öô
+ (
+_IO_cookõ_fûe
+ *
+__cfûe
+, 
+__ªad_wrôe
+,
+
+377 *
+__cookõ
+, 
+_IO_cookõ_io_fun˘i⁄s_t
+ 
+__‚s
+);
+
+381 #ifde‡
+__˝lu•lus
+
+
+385 
+__undîÊow
+ (
+_IO_FILE
+ *);
+
+386 
+__uÊow
+ (
+_IO_FILE
+ *);
+
+387 
+__ovîÊow
+ (
+_IO_FILE
+ *, );
+
+388 #i‡
+deföed
+ 
+_LIBC
+ || deföed 
+_GLIBCPP_USE_WCHAR_T
+
+
+389 
+_IO_wöt_t
+ 
+__wundîÊow
+ (
+_IO_FILE
+ *);
+
+390 
+_IO_wöt_t
+ 
+__wuÊow
+ (
+_IO_FILE
+ *);
+
+391 
+_IO_wöt_t
+ 
+__wovîÊow
+ (
+_IO_FILE
+ *, _IO_wint_t);
+
+394 #i‡ 
+__GNUC__
+ >= 3
+
+395 
+	#_IO_BE
+(
+ex¥
+, 
+ªs
+Ë
+	`__buûtö_ex≥˘
+ (”x¥),Ñes)
+
+	)
+
+397 
+	#_IO_BE
+(
+ex¥
+, 
+ªs
+Ë”x¥)
+
+	)
+
+400 
+	#_IO_gëc_u∆ocked
+(
+_Â
+) \
+
+401 (
+	`_IO_BE
+ ((
+_Â
+)->
+_IO_ªad_±r
+ >(_Â)->
+_IO_ªad_íd
+, 0) \
+
+402 ? 
+	`__uÊow
+ (
+_Â
+Ë: *(*Ë(_Â)->
+_IO_ªad_±r
+++)
+
+	)
+
+403 
+	#_IO_≥ekc_u∆ocked
+(
+_Â
+) \
+
+404 (
+	`_IO_BE
+ ((
+_Â
+)->
+_IO_ªad_±r
+ >(_Â)->
+_IO_ªad_íd
+, 0) \
+
+405 && 
+	`__undîÊow
+ (
+_Â
+Ë=
+EOF
+ ? EOF \
+
+406 : *(*Ë(
+_Â
+)->
+_IO_ªad_±r
+)
+
+	)
+
+407 
+	#_IO_putc_u∆ocked
+(
+_ch
+, 
+_Â
+) \
+
+408 (
+	`_IO_BE
+ ((
+_Â
+)->
+_IO_wrôe_±r
+ >(_Â)->
+_IO_wrôe_íd
+, 0) \
+
+409 ? 
+	`__ovîÊow
+ (
+_Â
+, (Ë(
+_ch
+)) \
+
+410 : (Ë(*(
+_Â
+)->
+_IO_wrôe_±r
+++ = (
+_ch
+)))
+
+	)
+
+412 #i‡
+deföed
+ 
+_LIBC
+ || deföed 
+_GLIBCPP_USE_WCHAR_T
+
+
+413 
+	#_IO_gëwc_u∆ocked
+(
+_Â
+) \
+
+414 (
+	`_IO_BE
+ ((
+_Â
+)->
+_wide_d©a
+ =
+NULL
+ \
+
+415 || ((
+_Â
+)->
+_wide_d©a
+->
+_IO_ªad_±r
+ \
+
+416 >(
+_Â
+)->
+_wide_d©a
+->
+_IO_ªad_íd
+), 0) \
+
+417 ? 
+	`__wuÊow
+ (
+_Â
+Ë: (
+_IO_wöt_t
+Ë*(_Â)->
+_wide_d©a
+->
+_IO_ªad_±r
+++)
+
+	)
+
+418 
+	#_IO_putwc_u∆ocked
+(
+_wch
+, 
+_Â
+) \
+
+419 (
+	`_IO_BE
+ ((
+_Â
+)->
+_wide_d©a
+ =
+NULL
+ \
+
+420 || ((
+_Â
+)->
+_wide_d©a
+->
+_IO_wrôe_±r
+ \
+
+421 >(
+_Â
+)->
+_wide_d©a
+->
+_IO_wrôe_íd
+), 0) \
+
+422 ? 
+	`__wovîÊow
+ (
+_Â
+, 
+_wch
+) \
+
+423 : (
+_IO_wöt_t
+Ë(*(
+_Â
+)->
+_wide_d©a
+->
+_IO_wrôe_±r
+++ = (
+_wch
+)))
+
+	)
+
+426 
+	#_IO_„of_u∆ocked
+(
+__Â
+Ë(((__Â)->
+_Êags
+ & 
+_IO_EOF_SEEN
+Ë!0)
+
+	)
+
+427 
+	#_IO_„º‹_u∆ocked
+(
+__Â
+Ë(((__Â)->
+_Êags
+ & 
+_IO_ERR_SEEN
+Ë!0)
+
+	)
+
+429 
+_IO_gëc
+ (
+_IO_FILE
+ *
+__Â
+);
+
+430 
+_IO_putc
+ (
+__c
+, 
+_IO_FILE
+ *
+__Â
+);
+
+431 
+_IO_„of
+ (
+_IO_FILE
+ *
+__Â
+Ë
+__THROW
+;
+
+432 
+_IO_„º‹
+ (
+_IO_FILE
+ *
+__Â
+Ë
+__THROW
+;
+
+434 
+_IO_≥ekc_locked
+ (
+_IO_FILE
+ *
+__Â
+);
+
+437 
+	#_IO_PENDING_OUTPUT_COUNT
+(
+_Â
+) \
+
+438 ((
+_Â
+)->
+_IO_wrôe_±r
+ - (_Â)->
+_IO_wrôe_ba£
+)
+
+	)
+
+440 
+_IO_Êockfûe
+ (
+_IO_FILE
+ *Ë
+__THROW
+;
+
+441 
+_IO_fu∆ockfûe
+ (
+_IO_FILE
+ *Ë
+__THROW
+;
+
+442 
+_IO_·rylockfûe
+ (
+_IO_FILE
+ *Ë
+__THROW
+;
+
+444 #ifde‡
+_IO_MTSAFE_IO
+
+
+445 
+	#_IO_≥ekc
+(
+_Â
+Ë
+	`_IO_≥ekc_locked
+ (_Â)
+
+	)
+
+446 
+	#_IO_Êockfûe
+(
+_Â
+) \
+
+447 i‡(((
+_Â
+)->
+_Êags
+ & 
+_IO_USER_LOCK
+Ë=0Ë
+	`_IO_Êockfûe
+ (_Â)
+
+	)
+
+448 
+	#_IO_fu∆ockfûe
+(
+_Â
+) \
+
+449 i‡(((
+_Â
+)->
+_Êags
+ & 
+_IO_USER_LOCK
+Ë=0Ë
+	`_IO_fu∆ockfûe
+ (_Â)
+
+	)
+
+451 
+	#_IO_≥ekc
+(
+_Â
+Ë
+	`_IO_≥ekc_u∆ocked
+ (_Â)
+
+	)
+
+452 
+	#_IO_Êockfûe
+(
+_Â
+Ë
+
+	)
+
+453 
+	#_IO_fu∆ockfûe
+(
+_Â
+Ë
+
+	)
+
+454 
+	#_IO_·rylockfûe
+(
+_Â
+Ë
+
+	)
+
+455 
+	#_IO_˛ónup_ªgi⁄_°¨t
+(
+_f˘
+, 
+_Â
+Ë
+
+	)
+
+456 
+	#_IO_˛ónup_ªgi⁄_íd
+(
+_Doô
+Ë
+
+	)
+
+459 
+_IO_vfsˇnf
+ (
+_IO_FILE
+ * 
+__ª°ri˘
+, const * __restrict,
+
+460 
+_IO_va_li°
+, *
+__ª°ri˘
+);
+
+461 
+_IO_vÂrötf
+ (
+_IO_FILE
+ *
+__ª°ri˘
+, const *__restrict,
+
+462 
+_IO_va_li°
+);
+
+463 
+_IO_ssize_t
+ 
+_IO_∑dn
+ (
+_IO_FILE
+ *, , _IO_ssize_t);
+
+464 
+_IO_size_t
+ 
+_IO_sgën
+ (
+_IO_FILE
+ *, *, _IO_size_t);
+
+466 
+_IO_off64_t
+ 
+_IO_£ekoff
+ (
+_IO_FILE
+ *, _IO_off64_t, , );
+
+467 
+_IO_off64_t
+ 
+_IO_£ekpos
+ (
+_IO_FILE
+ *, _IO_off64_t, );
+
+469 
+_IO_‰ì_backup_¨ó
+ (
+_IO_FILE
+ *Ë
+__THROW
+;
+
+471 #i‡
+deföed
+ 
+_LIBC
+ || deföed 
+_GLIBCPP_USE_WCHAR_T
+
+
+472 
+_IO_wöt_t
+ 
+_IO_gëwc
+ (
+_IO_FILE
+ *
+__Â
+);
+
+473 
+_IO_wöt_t
+ 
+_IO_putwc
+ (
+wch¨_t
+ 
+__wc
+, 
+_IO_FILE
+ *
+__Â
+);
+
+474 
+_IO_fwide
+ (
+_IO_FILE
+ *
+__Â
+, 
+__mode
+Ë
+__THROW
+;
+
+475 #i‡
+__GNUC__
+ >= 2
+
+478 #i‡
+deföed
+ 
+_LIBC
+ && deföed 
+SHARED
+
+
+479 
+	~<shlib-com∑t.h
+>
+
+480 #i‡
+SHLIB_COMPAT
+ (
+libc
+, 
+GLIBC_2_0
+, 
+GLIBC_2_1
+)
+
+481 
+	#_IO_fwide_maybe_öcom∑tibÀ
+ \
+
+482 (
+	`__buûtö_ex≥˘
+ (&
+_IO_°dö_u£d
+ =
+NULL
+, 0))
+
+	)
+
+483 c⁄° 
+_IO_°dö_u£d
+;
+
+484 
+wók_exã∫
+ (
+_IO_°dö_u£d
+);
+
+487 #i‚de‡
+_IO_fwide_maybe_öcom∑tibÀ
+
+
+488 
+	#_IO_fwide_maybe_öcom∑tibÀ
+ (0)
+
+	)
+
+492 
+	#_IO_fwide
+(
+__Â
+, 
+__mode
+) \
+
+493 ({ 
+__ªsu…
+ = (
+__mode
+); \
+
+494 i‡(
+__ªsu…
+ < 0 && ! 
+_IO_fwide_maybe_öcom∑tibÀ
+) \
+
+496 i‡((
+__Â
+)->
+_mode
+ == 0) \
+
+498 (
+__Â
+)->
+_mode
+ = -1; \
+
+499 
+__ªsu…
+ = (
+__Â
+)->
+_mode
+; \
+
+501 i‡(
+	`__buûtö_c⁄°™t_p
+ (
+__mode
+) && (__mode) == 0) \
+
+502 
+__ªsu…
+ = 
+_IO_fwide_maybe_öcom∑tibÀ
+ ? -1 : (
+__Â
+)->
+_mode
+; \
+
+504 
+__ªsu…
+ = 
+	`_IO_fwide
+ (
+__Â
+, __result); \
+
+505 
+__ªsu…
+; })
+
+	)
+
+508 
+_IO_vfwsˇnf
+ (
+_IO_FILE
+ * 
+__ª°ri˘
+, c⁄° 
+wch¨_t
+ * __restrict,
+
+509 
+_IO_va_li°
+, *
+__ª°ri˘
+);
+
+510 
+_IO_vfw¥ötf
+ (
+_IO_FILE
+ *
+__ª°ri˘
+, c⁄° 
+wch¨_t
+ *__restrict,
+
+511 
+_IO_va_li°
+);
+
+512 
+_IO_ssize_t
+ 
+_IO_w∑dn
+ (
+_IO_FILE
+ *, 
+wöt_t
+, _IO_ssize_t);
+
+513 
+_IO_‰ì_wbackup_¨ó
+ (
+_IO_FILE
+ *Ë
+__THROW
+;
+
+516 #ifde‡
+__LDBL_COMPAT
+
+
+517 
+	~<bôs/libio-ldbl.h
+>
+
+520 #ifde‡
+__˝lu•lus
+
+
+	@/usr/include/stdint.h
+
+22 #i‚de‡
+_STDINT_H
+
+
+23 
+	#_STDINT_H
+ 1
+
+	)
+
+25 
+	~<„©uªs.h
+>
+
+26 
+	~<bôs/wch¨.h
+>
+
+27 
+	~<bôs/w‹dsize.h
+>
+
+34 #i‚de‡
+__öt8_t_deföed
+
+
+35 
+	#__öt8_t_deföed
+
+
+	)
+
+36 sig√d 
+	töt8_t
+;
+
+37 
+	töt16_t
+;
+
+38 
+	töt32_t
+;
+
+39 #i‡
+__WORDSIZE
+ == 64
+
+40 
+	töt64_t
+;
+
+42 
+__exãnsi⁄__
+
+
+43 
+	töt64_t
+;
+
+48 
+	tuöt8_t
+;
+
+49 
+	tuöt16_t
+;
+
+50 #i‚de‡
+__uöt32_t_deföed
+
+
+51 
+	tuöt32_t
+;
+
+52 
+	#__uöt32_t_deföed
+
+
+	)
+
+54 #i‡
+__WORDSIZE
+ == 64
+
+55 
+	tuöt64_t
+;
+
+57 
+__exãnsi⁄__
+
+
+58 
+	tuöt64_t
+;
+
+65 sig√d 
+	töt_Àa°8_t
+;
+
+66 
+	töt_Àa°16_t
+;
+
+67 
+	töt_Àa°32_t
+;
+
+68 #i‡
+__WORDSIZE
+ == 64
+
+69 
+	töt_Àa°64_t
+;
+
+71 
+__exãnsi⁄__
+
+
+72 
+	töt_Àa°64_t
+;
+
+76 
+	tuöt_Àa°8_t
+;
+
+77 
+	tuöt_Àa°16_t
+;
+
+78 
+	tuöt_Àa°32_t
+;
+
+79 #i‡
+__WORDSIZE
+ == 64
+
+80 
+	tuöt_Àa°64_t
+;
+
+82 
+__exãnsi⁄__
+
+
+83 
+	tuöt_Àa°64_t
+;
+
+90 sig√d 
+	töt_Á°8_t
+;
+
+91 #i‡
+__WORDSIZE
+ == 64
+
+92 
+	töt_Á°16_t
+;
+
+93 
+	töt_Á°32_t
+;
+
+94 
+	töt_Á°64_t
+;
+
+96 
+	töt_Á°16_t
+;
+
+97 
+	töt_Á°32_t
+;
+
+98 
+__exãnsi⁄__
+
+
+99 
+	töt_Á°64_t
+;
+
+103 
+	tuöt_Á°8_t
+;
+
+104 #i‡
+__WORDSIZE
+ == 64
+
+105 
+	tuöt_Á°16_t
+;
+
+106 
+	tuöt_Á°32_t
+;
+
+107 
+	tuöt_Á°64_t
+;
+
+109 
+	tuöt_Á°16_t
+;
+
+110 
+	tuöt_Á°32_t
+;
+
+111 
+__exãnsi⁄__
+
+
+112 
+	tuöt_Á°64_t
+;
+
+117 #i‡
+__WORDSIZE
+ == 64
+
+118 #i‚de‡
+__öçå_t_deföed
+
+
+119 
+	töçå_t
+;
+
+120 
+	#__öçå_t_deföed
+
+
+	)
+
+122 
+	tuöçå_t
+;
+
+124 #i‚de‡
+__öçå_t_deföed
+
+
+125 
+	töçå_t
+;
+
+126 
+	#__öçå_t_deföed
+
+
+	)
+
+128 
+	tuöçå_t
+;
+
+133 #i‡
+__WORDSIZE
+ == 64
+
+134 
+	tötmax_t
+;
+
+135 
+	tuötmax_t
+;
+
+137 
+__exãnsi⁄__
+
+
+138 
+	tötmax_t
+;
+
+139 
+__exãnsi⁄__
+
+
+140 
+	tuötmax_t
+;
+
+144 #i‡
+__WORDSIZE
+ == 64
+
+145 
+	#__INT64_C
+(
+c
+Ë¯## 
+L
+
+
+	)
+
+146 
+	#__UINT64_C
+(
+c
+Ë¯## 
+UL
+
+
+	)
+
+148 
+	#__INT64_C
+(
+c
+Ë¯## 
+LL
+
+
+	)
+
+149 
+	#__UINT64_C
+(
+c
+Ë¯## 
+ULL
+
+
+	)
+
+155 
+	#INT8_MIN
+ (-128)
+
+	)
+
+156 
+	#INT16_MIN
+ (-32767-1)
+
+	)
+
+157 
+	#INT32_MIN
+ (-2147483647-1)
+
+	)
+
+158 
+	#INT64_MIN
+ (-
+	`__INT64_C
+(9223372036854775807)-1)
+
+	)
+
+160 
+	#INT8_MAX
+ (127)
+
+	)
+
+161 
+	#INT16_MAX
+ (32767)
+
+	)
+
+162 
+	#INT32_MAX
+ (2147483647)
+
+	)
+
+163 
+	#INT64_MAX
+ (
+	`__INT64_C
+(9223372036854775807))
+
+	)
+
+166 
+	#UINT8_MAX
+ (255)
+
+	)
+
+167 
+	#UINT16_MAX
+ (65535)
+
+	)
+
+168 
+	#UINT32_MAX
+ (4294967295U)
+
+	)
+
+169 
+	#UINT64_MAX
+ (
+	`__UINT64_C
+(18446744073709551615))
+
+	)
+
+173 
+	#INT_LEAST8_MIN
+ (-128)
+
+	)
+
+174 
+	#INT_LEAST16_MIN
+ (-32767-1)
+
+	)
+
+175 
+	#INT_LEAST32_MIN
+ (-2147483647-1)
+
+	)
+
+176 
+	#INT_LEAST64_MIN
+ (-
+	`__INT64_C
+(9223372036854775807)-1)
+
+	)
+
+178 
+	#INT_LEAST8_MAX
+ (127)
+
+	)
+
+179 
+	#INT_LEAST16_MAX
+ (32767)
+
+	)
+
+180 
+	#INT_LEAST32_MAX
+ (2147483647)
+
+	)
+
+181 
+	#INT_LEAST64_MAX
+ (
+	`__INT64_C
+(9223372036854775807))
+
+	)
+
+184 
+	#UINT_LEAST8_MAX
+ (255)
+
+	)
+
+185 
+	#UINT_LEAST16_MAX
+ (65535)
+
+	)
+
+186 
+	#UINT_LEAST32_MAX
+ (4294967295U)
+
+	)
+
+187 
+	#UINT_LEAST64_MAX
+ (
+	`__UINT64_C
+(18446744073709551615))
+
+	)
+
+191 
+	#INT_FAST8_MIN
+ (-128)
+
+	)
+
+192 #i‡
+__WORDSIZE
+ == 64
+
+193 
+	#INT_FAST16_MIN
+ (-9223372036854775807L-1)
+
+	)
+
+194 
+	#INT_FAST32_MIN
+ (-9223372036854775807L-1)
+
+	)
+
+196 
+	#INT_FAST16_MIN
+ (-2147483647-1)
+
+	)
+
+197 
+	#INT_FAST32_MIN
+ (-2147483647-1)
+
+	)
+
+199 
+	#INT_FAST64_MIN
+ (-
+	`__INT64_C
+(9223372036854775807)-1)
+
+	)
+
+201 
+	#INT_FAST8_MAX
+ (127)
+
+	)
+
+202 #i‡
+__WORDSIZE
+ == 64
+
+203 
+	#INT_FAST16_MAX
+ (9223372036854775807L)
+
+	)
+
+204 
+	#INT_FAST32_MAX
+ (9223372036854775807L)
+
+	)
+
+206 
+	#INT_FAST16_MAX
+ (2147483647)
+
+	)
+
+207 
+	#INT_FAST32_MAX
+ (2147483647)
+
+	)
+
+209 
+	#INT_FAST64_MAX
+ (
+	`__INT64_C
+(9223372036854775807))
+
+	)
+
+212 
+	#UINT_FAST8_MAX
+ (255)
+
+	)
+
+213 #i‡
+__WORDSIZE
+ == 64
+
+214 
+	#UINT_FAST16_MAX
+ (18446744073709551615UL)
+
+	)
+
+215 
+	#UINT_FAST32_MAX
+ (18446744073709551615UL)
+
+	)
+
+217 
+	#UINT_FAST16_MAX
+ (4294967295U)
+
+	)
+
+218 
+	#UINT_FAST32_MAX
+ (4294967295U)
+
+	)
+
+220 
+	#UINT_FAST64_MAX
+ (
+	`__UINT64_C
+(18446744073709551615))
+
+	)
+
+224 #i‡
+__WORDSIZE
+ == 64
+
+225 
+	#INTPTR_MIN
+ (-9223372036854775807L-1)
+
+	)
+
+226 
+	#INTPTR_MAX
+ (9223372036854775807L)
+
+	)
+
+227 
+	#UINTPTR_MAX
+ (18446744073709551615UL)
+
+	)
+
+229 
+	#INTPTR_MIN
+ (-2147483647-1)
+
+	)
+
+230 
+	#INTPTR_MAX
+ (2147483647)
+
+	)
+
+231 
+	#UINTPTR_MAX
+ (4294967295U)
+
+	)
+
+236 
+	#INTMAX_MIN
+ (-
+	`__INT64_C
+(9223372036854775807)-1)
+
+	)
+
+238 
+	#INTMAX_MAX
+ (
+	`__INT64_C
+(9223372036854775807))
+
+	)
+
+241 
+	#UINTMAX_MAX
+ (
+	`__UINT64_C
+(18446744073709551615))
+
+	)
+
+247 #i‡
+__WORDSIZE
+ == 64
+
+248 
+	#PTRDIFF_MIN
+ (-9223372036854775807L-1)
+
+	)
+
+249 
+	#PTRDIFF_MAX
+ (9223372036854775807L)
+
+	)
+
+251 
+	#PTRDIFF_MIN
+ (-2147483647-1)
+
+	)
+
+252 
+	#PTRDIFF_MAX
+ (2147483647)
+
+	)
+
+256 
+	#SIG_ATOMIC_MIN
+ (-2147483647-1)
+
+	)
+
+257 
+	#SIG_ATOMIC_MAX
+ (2147483647)
+
+	)
+
+260 #i‡
+__WORDSIZE
+ == 64
+
+261 
+	#SIZE_MAX
+ (18446744073709551615UL)
+
+	)
+
+263 #ifde‡
+__WORDSIZE32_SIZE_ULONG
+
+
+264 
+	#SIZE_MAX
+ (4294967295UL)
+
+	)
+
+266 
+	#SIZE_MAX
+ (4294967295U)
+
+	)
+
+271 #i‚de‡
+WCHAR_MIN
+
+
+273 
+	#WCHAR_MIN
+ 
+__WCHAR_MIN
+
+
+	)
+
+274 
+	#WCHAR_MAX
+ 
+__WCHAR_MAX
+
+
+	)
+
+278 
+	#WINT_MIN
+ (0u)
+
+	)
+
+279 
+	#WINT_MAX
+ (4294967295u)
+
+	)
+
+282 
+	#INT8_C
+(
+c
+Ë
+	)
+c
+
+283 
+	#INT16_C
+(
+c
+Ë
+	)
+c
+
+284 
+	#INT32_C
+(
+c
+Ë
+	)
+c
+
+285 #i‡
+__WORDSIZE
+ == 64
+
+286 
+	#INT64_C
+(
+c
+Ë¯## 
+L
+
+
+	)
+
+288 
+	#INT64_C
+(
+c
+Ë¯## 
+LL
+
+
+	)
+
+292 
+	#UINT8_C
+(
+c
+Ë
+	)
+c
+
+293 
+	#UINT16_C
+(
+c
+Ë
+	)
+c
+
+294 
+	#UINT32_C
+(
+c
+Ë¯## 
+U
+
+
+	)
+
+295 #i‡
+__WORDSIZE
+ == 64
+
+296 
+	#UINT64_C
+(
+c
+Ë¯## 
+UL
+
+
+	)
+
+298 
+	#UINT64_C
+(
+c
+Ë¯## 
+ULL
+
+
+	)
+
+302 #i‡
+__WORDSIZE
+ == 64
+
+303 
+	#INTMAX_C
+(
+c
+Ë¯## 
+L
+
+
+	)
+
+304 
+	#UINTMAX_C
+(
+c
+Ë¯## 
+UL
+
+
+	)
+
+306 
+	#INTMAX_C
+(
+c
+Ë¯## 
+LL
+
+
+	)
+
+307 
+	#UINTMAX_C
+(
+c
+Ë¯## 
+ULL
+
+
+	)
+
+	@/usr/include/time.h
+
+22 #i‚def 
+_TIME_H
+
+
+24 #i‡(! 
+deföed
+ 
+__√ed_time_t
+ && !deföed 
+__√ed_˛ock_t
+ && \
+
+25 ! 
+deföed
+ 
+	g__√ed_time•ec
+)
+
+26 
+	#_TIME_H
+ 1
+
+	)
+
+27 
+	~<„©uªs.h
+>
+
+29 
+	g__BEGIN_DECLS
+
+
+33 #ifdef 
+_TIME_H
+
+
+35 
+	#__√ed_size_t
+
+
+	)
+
+36 
+	#__√ed_NULL
+
+
+	)
+
+37 
+	~<°ddef.h
+>
+
+41 
+	~<bôs/time.h
+>
+
+44 #i‡!
+deföed
+ 
+__STRICT_ANSI__
+ && !deföed 
+__USE_XOPEN2K
+
+
+45 #i‚de‡
+CLK_TCK
+
+
+46 
+	#CLK_TCK
+ 
+CLOCKS_PER_SEC
+
+
+	)
+
+52 #i‡!
+deföed
+ 
+__˛ock_t_deföed
+ && (deföed 
+_TIME_H
+ || deföed 
+__√ed_˛ock_t
+)
+
+53 
+	#__˛ock_t_deföed
+ 1
+
+	)
+
+55 
+	~<bôs/ty≥s.h
+>
+
+57 
+__BEGIN_NAMESPACE_STD
+
+
+59 
+__˛ock_t
+ 
+	t˛ock_t
+;
+
+60 
+	g__END_NAMESPACE_STD
+
+
+61 #i‡
+deföed
+ 
+__USE_XOPEN
+ || deföed 
+__USE_POSIX
+
+
+62 
+	$__USING_NAMESPACE_STD
+(
+˛ock_t
+)
+
+66 #unde‡
+__√ed_˛ock_t
+
+
+68 #i‡!
+deföed
+ 
+__time_t_deföed
+ && (deföed 
+_TIME_H
+ || deföed 
+__√ed_time_t
+)
+
+69 
+	#__time_t_deföed
+ 1
+
+	)
+
+71 
+	~<bôs/ty≥s.h
+>
+
+73 
+__BEGIN_NAMESPACE_STD
+
+
+75 
+__time_t
+ 
+	ttime_t
+;
+
+76 
+__END_NAMESPACE_STD
+
+
+77 #ifde‡
+__USE_POSIX
+
+
+78 
+	$__USING_NAMESPACE_STD
+(
+time_t
+)
+
+82 #unde‡
+__√ed_time_t
+
+
+84 #i‡!
+deföed
+ 
+__˛ockid_t_deföed
+ && \
+
+85 ((
+deföed
+ 
+_TIME_H
+ && deföed 
+__USE_POSIX199309
+Ë|| deföed 
+__√ed_˛ockid_t
+)
+
+86 
+	#__˛ockid_t_deföed
+ 1
+
+	)
+
+88 
+	~<bôs/ty≥s.h
+>
+
+91 
+__˛ockid_t
+ 
+	t˛ockid_t
+;
+
+94 #unde‡
+__˛ockid_time_t
+
+
+96 #i‡!
+deföed
+ 
+__timî_t_deföed
+ && \
+
+97 ((
+deföed
+ 
+_TIME_H
+ && deföed 
+__USE_POSIX199309
+Ë|| deföed 
+__√ed_timî_t
+)
+
+98 
+	#__timî_t_deföed
+ 1
+
+	)
+
+100 
+	~<bôs/ty≥s.h
+>
+
+103 
+__timî_t
+ 
+	ttimî_t
+;
+
+106 #unde‡
+__√ed_timî_t
+
+
+109 #i‡(!
+deföed
+ 
+__time•ec_deföed
+ \
+
+110 && ((
+deföed
+ 
+_TIME_H
+ \
+
+111 && (
+deföed
+ 
+__USE_POSIX199309
+ \
+
+112 || 
+deföed
+ 
+__USE_ISOC11
+)) \
+
+113 || 
+deföed
+ 
+__√ed_time•ec
+))
+
+114 
+	#__time•ec_deföed
+ 1
+
+	)
+
+116 
+	~<bôs/ty≥s.h
+>
+
+120 
+	stime•ec
+
+
+122 
+__time_t
+ 
+tv_£c
+;
+
+123 
+__sysˇŒ_¶⁄g_t
+ 
+tv_n£c
+;
+
+127 #unde‡
+__√ed_time•ec
+
+
+130 #ifdef 
+_TIME_H
+
+
+131 
+__BEGIN_NAMESPACE_STD
+
+
+133 
+	stm
+
+
+135 
+tm_£c
+;
+
+136 
+tm_mö
+;
+
+137 
+tm_hour
+;
+
+138 
+tm_mday
+;
+
+139 
+tm_m⁄
+;
+
+140 
+tm_yór
+;
+
+141 
+tm_wday
+;
+
+142 
+tm_yday
+;
+
+143 
+tm_isd°
+;
+
+145 #ifdef 
+__USE_MISC
+
+
+146 
+tm_gmtoff
+;
+
+147 c⁄° *
+tm_z⁄e
+;
+
+149 
+__tm_gmtoff
+;
+
+150 c⁄° *
+__tm_z⁄e
+;
+
+153 
+__END_NAMESPACE_STD
+
+
+154 #i‡
+deföed
+ 
+__USE_XOPEN
+ || deföed 
+__USE_POSIX
+
+
+155 
+	$__USING_NAMESPACE_STD
+(
+tm
+)
+
+159 #ifde‡
+__USE_POSIX199309
+
+
+161 
+	sôimî•ec
+
+
+163 
+time•ec
+ 
+ô_öãrvÆ
+;
+
+164 
+time•ec
+ 
+ô_vÆue
+;
+
+168 
+sigevít
+;
+
+172 #ifde‡
+__USE_XOPEN2K
+
+
+173 #i‚de‡
+__pid_t_deföed
+
+
+174 
+__pid_t
+ 
+	tpid_t
+;
+
+175 
+	#__pid_t_deföed
+
+
+	)
+
+180 #ifde‡
+__USE_ISOC11
+
+
+182 
+	#TIME_UTC
+ 1
+
+	)
+
+186 
+__BEGIN_NAMESPACE_STD
+
+
+189 
+˛ock_t
+ 
+	$˛ock
+ (Ë
+__THROW
+;
+
+192 
+time_t
+ 
+	$time
+ (
+time_t
+ *
+__timî
+Ë
+__THROW
+;
+
+195 
+	$dif·ime
+ (
+time_t
+ 
+__time1
+,Åime_à
+__time0
+)
+
+196 
+__THROW
+ 
+	`__©åibuã__
+ ((
+__c⁄°__
+));
+
+199 
+time_t
+ 
+	$mktime
+ (
+tm
+ *
+__ç
+Ë
+__THROW
+;
+
+205 
+size_t
+ 
+	$°r·ime
+ (*
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__maxsize
+,
+
+206 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+207 c⁄° 
+tm
+ *
+__ª°ri˘
+ 
+__ç
+Ë
+__THROW
+;
+
+208 
+__END_NAMESPACE_STD
+
+
+210 #ifde‡
+__USE_XOPEN
+
+
+213 *
+	$°Ωtime
+ (c⁄° *
+__ª°ri˘
+ 
+__s
+,
+
+214 c⁄° *
+__ª°ri˘
+ 
+__fmt
+, 
+tm
+ *
+__ç
+)
+
+215 
+__THROW
+;
+
+218 #ifde‡
+__USE_XOPEN2K8
+
+
+221 
+	~<xloˇÀ.h
+>
+
+223 
+size_t
+ 
+	$°r·ime_l
+ (*
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__maxsize
+,
+
+224 c⁄° *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+225 c⁄° 
+tm
+ *
+__ª°ri˘
+ 
+__ç
+,
+
+226 
+__loˇÀ_t
+ 
+__loc
+Ë
+__THROW
+;
+
+229 #ifde‡
+__USE_GNU
+
+
+230 *
+	$°Ωtime_l
+ (c⁄° *
+__ª°ri˘
+ 
+__s
+,
+
+231 c⁄° *
+__ª°ri˘
+ 
+__fmt
+, 
+tm
+ *
+__ç
+,
+
+232 
+__loˇÀ_t
+ 
+__loc
+Ë
+__THROW
+;
+
+236 
+__BEGIN_NAMESPACE_STD
+
+
+239 
+tm
+ *
+	$gmtime
+ (c⁄° 
+time_t
+ *
+__timî
+Ë
+__THROW
+;
+
+243 
+tm
+ *
+	$loˇ…ime
+ (c⁄° 
+time_t
+ *
+__timî
+Ë
+__THROW
+;
+
+244 
+__END_NAMESPACE_STD
+
+
+246 #ifde‡
+__USE_POSIX
+
+
+249 
+tm
+ *
+	$gmtime_r
+ (c⁄° 
+time_t
+ *
+__ª°ri˘
+ 
+__timî
+,
+
+250 
+tm
+ *
+__ª°ri˘
+ 
+__ç
+Ë
+__THROW
+;
+
+254 
+tm
+ *
+	$loˇ…ime_r
+ (c⁄° 
+time_t
+ *
+__ª°ri˘
+ 
+__timî
+,
+
+255 
+tm
+ *
+__ª°ri˘
+ 
+__ç
+Ë
+__THROW
+;
+
+258 
+__BEGIN_NAMESPACE_STD
+
+
+261 *
+	$as˘ime
+ (c⁄° 
+tm
+ *
+__ç
+Ë
+__THROW
+;
+
+264 *
+	$˘ime
+ (c⁄° 
+time_t
+ *
+__timî
+Ë
+__THROW
+;
+
+265 
+__END_NAMESPACE_STD
+
+
+267 #ifde‡
+__USE_POSIX
+
+
+272 *
+	$as˘ime_r
+ (c⁄° 
+tm
+ *
+__ª°ri˘
+ 
+__ç
+,
+
+273 *
+__ª°ri˘
+ 
+__buf
+Ë
+__THROW
+;
+
+276 *
+	$˘ime_r
+ (c⁄° 
+time_t
+ *
+__ª°ri˘
+ 
+__timî
+,
+
+277 *
+__ª°ri˘
+ 
+__buf
+Ë
+__THROW
+;
+
+282 *
+__tz«me
+[2];
+
+283 
+__daylight
+;
+
+284 
+__timez⁄e
+;
+
+287 #ifdef 
+__USE_POSIX
+
+
+289 *
+tz«me
+[2];
+
+293 
+	$tz£t
+ (Ë
+__THROW
+;
+
+296 #i‡
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_XOPEN
+
+
+297 
+daylight
+;
+
+298 
+timez⁄e
+;
+
+301 #ifde‡
+__USE_MISC
+
+
+304 
+	$°ime
+ (c⁄° 
+time_t
+ *
+__whí
+Ë
+__THROW
+;
+
+310 
+	#__i¶óp
+(
+yór
+) \
+
+311 ((
+yór
+Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))
+
+	)
+
+314 #ifde‡
+__USE_MISC
+
+
+319 
+time_t
+ 
+	$timegm
+ (
+tm
+ *
+__ç
+Ë
+__THROW
+;
+
+322 
+time_t
+ 
+	$timñoˇl
+ (
+tm
+ *
+__ç
+Ë
+__THROW
+;
+
+325 
+	$dysize
+ (
+__yór
+Ë
+__THROW
+ 
+	`__©åibuã__
+ ((
+__c⁄°__
+));
+
+329 #ifde‡
+__USE_POSIX199309
+
+
+334 
+	`«no¶ìp
+ (c⁄° 
+time•ec
+ *
+__ªque°ed_time
+,
+
+335 
+time•ec
+ *
+__ªmaöög
+);
+
+339 
+	$˛ock_gëªs
+ (
+˛ockid_t
+ 
+__˛ock_id
+, 
+time•ec
+ *
+__ªs
+Ë
+__THROW
+;
+
+342 
+	$˛ock_gëtime
+ (
+˛ockid_t
+ 
+__˛ock_id
+, 
+time•ec
+ *
+__ç
+Ë
+__THROW
+;
+
+345 
+	$˛ock_£âime
+ (
+˛ockid_t
+ 
+__˛ock_id
+, c⁄° 
+time•ec
+ *
+__ç
+)
+
+346 
+__THROW
+;
+
+348 #ifde‡
+__USE_XOPEN2K
+
+
+353 
+	`˛ock_«no¶ìp
+ (
+˛ockid_t
+ 
+__˛ock_id
+, 
+__Êags
+,
+
+354 c⁄° 
+time•ec
+ *
+__ªq
+,
+
+355 
+time•ec
+ *
+__ªm
+);
+
+358 
+	$˛ock_gë˝u˛ockid
+ (
+pid_t
+ 
+__pid
+, 
+˛ockid_t
+ *
+__˛ock_id
+Ë
+__THROW
+;
+
+363 
+	$timî_¸óã
+ (
+˛ockid_t
+ 
+__˛ock_id
+,
+
+364 
+sigevít
+ *
+__ª°ri˘
+ 
+__evp
+,
+
+365 
+timî_t
+ *
+__ª°ri˘
+ 
+__timîid
+Ë
+__THROW
+;
+
+368 
+	$timî_dñëe
+ (
+timî_t
+ 
+__timîid
+Ë
+__THROW
+;
+
+371 
+	$timî_£âime
+ (
+timî_t
+ 
+__timîid
+, 
+__Êags
+,
+
+372 c⁄° 
+ôimî•ec
+ *
+__ª°ri˘
+ 
+__vÆue
+,
+
+373 
+ôimî•ec
+ *
+__ª°ri˘
+ 
+__ovÆue
+Ë
+__THROW
+;
+
+376 
+	$timî_gëtime
+ (
+timî_t
+ 
+__timîid
+, 
+ôimî•ec
+ *
+__vÆue
+)
+
+377 
+__THROW
+;
+
+380 
+	$timî_gëovîrun
+ (
+timî_t
+ 
+__timîid
+Ë
+__THROW
+;
+
+384 #ifde‡
+__USE_ISOC11
+
+
+386 
+	$time•ec_gë
+ (
+time•ec
+ *
+__ts
+, 
+__ba£
+)
+
+387 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+391 #ifde‡
+__USE_XOPEN_EXTENDED
+
+
+403 
+gëd©e_îr
+;
+
+412 
+tm
+ *
+	`gëd©e
+ (c⁄° *
+__°rög
+);
+
+415 #ifde‡
+__USE_GNU
+
+
+426 
+	`gëd©e_r
+ (c⁄° *
+__ª°ri˘
+ 
+__°rög
+,
+
+427 
+tm
+ *
+__ª°ri˘
+ 
+__ªsbuÂ
+);
+
+430 
+__END_DECLS
+
+
+	@/usr/include/xlocale.h
+
+20 #i‚de‡
+_XLOCALE_H
+
+
+21 
+	#_XLOCALE_H
+ 1
+
+	)
+
+27 
+	s__loˇÀ_°ru˘
+
+
+30 
+__loˇÀ_d©a
+ *
+	m__loˇÀs
+[13];
+
+33 c⁄° *
+	m__˘y≥_b
+;
+
+34 c⁄° *
+	m__˘y≥_tﬁowî
+;
+
+35 c⁄° *
+	m__˘y≥_touµî
+;
+
+38 c⁄° *
+	m__«mes
+[13];
+
+39 } *
+	t__loˇÀ_t
+;
+
+42 
+__loˇÀ_t
+ 
+	tloˇÀ_t
+;
+
+	@/usr/include/_G_config.h
+
+4 #i‚de‡
+_G_c⁄fig_h
+
+
+5 
+	#_G_c⁄fig_h
+ 1
+
+	)
+
+9 
+	~<bôs/ty≥s.h
+>
+
+10 
+	#__√ed_size_t
+
+
+	)
+
+11 #i‡
+deföed
+ 
+_LIBC
+ || deföed 
+_GLIBCPP_USE_WCHAR_T
+
+
+12 
+	#__√ed_wch¨_t
+
+
+	)
+
+14 
+	#__√ed_NULL
+
+
+	)
+
+15 
+	~<°ddef.h
+>
+
+16 
+	#__√ed_mb°©e_t
+
+
+	)
+
+17 #i‡
+deföed
+ 
+_LIBC
+ || deföed 
+_GLIBCPP_USE_WCHAR_T
+
+
+18 
+	#__√ed_wöt_t
+
+
+	)
+
+20 
+	~<wch¨.h
+>
+
+23 
+__off_t
+ 
+	m__pos
+;
+
+24 
+__mb°©e_t
+ 
+	m__°©e
+;
+
+25 } 
+	t_G_Âos_t
+;
+
+28 
+__off64_t
+ 
+	m__pos
+;
+
+29 
+__mb°©e_t
+ 
+	m__°©e
+;
+
+30 } 
+	t_G_Âos64_t
+;
+
+31 #i‡
+deföed
+ 
+_LIBC
+ || deföed 
+_GLIBCPP_USE_WCHAR_T
+
+
+32 
+	~<gc⁄v.h
+>
+
+35 
+__gc⁄v_öfo
+ 
+	m__cd
+;
+
+38 
+__gc⁄v_öfo
+ 
+	m__cd
+;
+
+39 
+__gc⁄v_°ï_d©a
+ 
+	m__d©a
+;
+
+40 } 
+	m__comböed
+;
+
+41 } 
+	t_G_ic⁄v_t
+;
+
+46 
+	#_G_va_li°
+ 
+__gnuc_va_li°
+
+
+	)
+
+48 
+	#_G_HAVE_MMAP
+ 1
+
+	)
+
+49 
+	#_G_HAVE_MREMAP
+ 1
+
+	)
+
+51 
+	#_G_IO_IO_FILE_VERSION
+ 0x20001
+
+	)
+
+54 
+	#_G_HAVE_ST_BLKSIZE
+ 
+	`deföed
+ (
+_STATBUF_ST_BLKSIZE
+)
+
+	)
+
+56 
+	#_G_BUFSIZ
+ 8192
+
+	)
+
+	@/usr/include/bits/libio-ldbl.h
+
+19 #i‚de‡
+_IO_STDIO_H
+
+
+23 
+	$__LDBL_REDIR_DECL
+ (
+_IO_vfsˇnf
+)
+
+24 
+	`__LDBL_REDIR_DECL
+ (
+_IO_vÂrötf
+)
+
+	@/usr/include/bits/time.h
+
+23 #i‡
+deföed
+ 
+__√ed_timevÆ
+ || deföed 
+__USE_GNU
+
+
+24 #i‚de‡
+_STRUCT_TIMEVAL
+
+
+25 
+	#_STRUCT_TIMEVAL
+ 1
+
+	)
+
+26 
+	~<bôs/ty≥s.h
+>
+
+30 
+	stimevÆ
+
+
+32 
+__time_t
+ 
+	mtv_£c
+;
+
+33 
+__su£c⁄ds_t
+ 
+	mtv_u£c
+;
+
+38 #i‚de‡
+__√ed_timevÆ
+
+
+39 #i‚de‡
+_BITS_TIME_H
+
+
+40 
+	#_BITS_TIME_H
+ 1
+
+	)
+
+48 
+	#CLOCKS_PER_SEC
+ ((
+˛ock_t
+Ë1000000)
+
+	)
+
+50 #i‡(!
+deföed
+ 
+__STRICT_ANSI__
+ || deföed 
+__USE_POSIX
+) \
+
+51 && !
+deföed
+ 
+	g__USE_XOPEN2K
+
+
+54 
+	~<bôs/ty≥s.h
+>
+
+55 
+__sysc⁄f
+ ();
+
+56 
+	#CLK_TCK
+ ((
+__˛ock_t
+Ë
+	`__sysc⁄f
+ (2)Ë
+
+	)
+
+59 #ifde‡
+__USE_POSIX199309
+
+
+61 
+	#CLOCK_REALTIME
+ 0
+
+	)
+
+63 
+	#CLOCK_MONOTONIC
+ 1
+
+	)
+
+65 
+	#CLOCK_PROCESS_CPUTIME_ID
+ 2
+
+	)
+
+67 
+	#CLOCK_THREAD_CPUTIME_ID
+ 3
+
+	)
+
+69 
+	#CLOCK_MONOTONIC_RAW
+ 4
+
+	)
+
+71 
+	#CLOCK_REALTIME_COARSE
+ 5
+
+	)
+
+73 
+	#CLOCK_MONOTONIC_COARSE
+ 6
+
+	)
+
+75 
+	#CLOCK_BOOTTIME
+ 7
+
+	)
+
+77 
+	#CLOCK_REALTIME_ALARM
+ 8
+
+	)
+
+79 
+	#CLOCK_BOOTTIME_ALARM
+ 9
+
+	)
+
+81 
+	#CLOCK_TAI
+ 11
+
+	)
+
+84 
+	#TIMER_ABSTIME
+ 1
+
+	)
+
+87 #ifde‡
+__USE_GNU
+
+
+88 
+	~<bôs/timex.h
+>
+
+90 
+__BEGIN_DECLS
+
+
+93 
+	$˛ock_adjtime
+ (
+__˛ockid_t
+ 
+__˛ock_id
+, 
+timex
+ *
+__utx
+Ë
+__THROW
+;
+
+95 
+__END_DECLS
+
+
+101 #unde‡
+__√ed_timevÆ
+
+
+	@/usr/include/bits/typesizes.h
+
+19 #i‚de‡
+_BITS_TYPES_H
+
+
+23 #i‚def 
+_BITS_TYPESIZES_H
+
+
+24 
+	#_BITS_TYPESIZES_H
+ 1
+
+	)
+
+30 #i‡
+deföed
+ 
+__x86_64__
+ && deföed 
+__ILP32__
+
+
+31 
+	#__SYSCALL_SLONG_TYPE
+ 
+__SQUAD_TYPE
+
+
+	)
+
+32 
+	#__SYSCALL_ULONG_TYPE
+ 
+__UQUAD_TYPE
+
+
+	)
+
+34 
+	#__SYSCALL_SLONG_TYPE
+ 
+__SLONGWORD_TYPE
+
+
+	)
+
+35 
+	#__SYSCALL_ULONG_TYPE
+ 
+__ULONGWORD_TYPE
+
+
+	)
+
+38 
+	#__DEV_T_TYPE
+ 
+__UQUAD_TYPE
+
+
+	)
+
+39 
+	#__UID_T_TYPE
+ 
+__U32_TYPE
+
+
+	)
+
+40 
+	#__GID_T_TYPE
+ 
+__U32_TYPE
+
+
+	)
+
+41 
+	#__INO_T_TYPE
+ 
+__SYSCALL_ULONG_TYPE
+
+
+	)
+
+42 
+	#__INO64_T_TYPE
+ 
+__UQUAD_TYPE
+
+
+	)
+
+43 
+	#__MODE_T_TYPE
+ 
+__U32_TYPE
+
+
+	)
+
+44 #ifde‡
+__x86_64__
+
+
+45 
+	#__NLINK_T_TYPE
+ 
+__SYSCALL_ULONG_TYPE
+
+
+	)
+
+46 
+	#__FSWORD_T_TYPE
+ 
+__SYSCALL_SLONG_TYPE
+
+
+	)
+
+48 
+	#__NLINK_T_TYPE
+ 
+__UWORD_TYPE
+
+
+	)
+
+49 
+	#__FSWORD_T_TYPE
+ 
+__SWORD_TYPE
+
+
+	)
+
+51 
+	#__OFF_T_TYPE
+ 
+__SYSCALL_SLONG_TYPE
+
+
+	)
+
+52 
+	#__OFF64_T_TYPE
+ 
+__SQUAD_TYPE
+
+
+	)
+
+53 
+	#__PID_T_TYPE
+ 
+__S32_TYPE
+
+
+	)
+
+54 
+	#__RLIM_T_TYPE
+ 
+__SYSCALL_ULONG_TYPE
+
+
+	)
+
+55 
+	#__RLIM64_T_TYPE
+ 
+__UQUAD_TYPE
+
+
+	)
+
+56 
+	#__BLKCNT_T_TYPE
+ 
+__SYSCALL_SLONG_TYPE
+
+
+	)
+
+57 
+	#__BLKCNT64_T_TYPE
+ 
+__SQUAD_TYPE
+
+
+	)
+
+58 
+	#__FSBLKCNT_T_TYPE
+ 
+__SYSCALL_ULONG_TYPE
+
+
+	)
+
+59 
+	#__FSBLKCNT64_T_TYPE
+ 
+__UQUAD_TYPE
+
+
+	)
+
+60 
+	#__FSFILCNT_T_TYPE
+ 
+__SYSCALL_ULONG_TYPE
+
+
+	)
+
+61 
+	#__FSFILCNT64_T_TYPE
+ 
+__UQUAD_TYPE
+
+
+	)
+
+62 
+	#__ID_T_TYPE
+ 
+__U32_TYPE
+
+
+	)
+
+63 
+	#__CLOCK_T_TYPE
+ 
+__SYSCALL_SLONG_TYPE
+
+
+	)
+
+64 
+	#__TIME_T_TYPE
+ 
+__SYSCALL_SLONG_TYPE
+
+
+	)
+
+65 
+	#__USECONDS_T_TYPE
+ 
+__U32_TYPE
+
+
+	)
+
+66 
+	#__SUSECONDS_T_TYPE
+ 
+__SYSCALL_SLONG_TYPE
+
+
+	)
+
+67 
+	#__DADDR_T_TYPE
+ 
+__S32_TYPE
+
+
+	)
+
+68 
+	#__KEY_T_TYPE
+ 
+__S32_TYPE
+
+
+	)
+
+69 
+	#__CLOCKID_T_TYPE
+ 
+__S32_TYPE
+
+
+	)
+
+70 
+	#__TIMER_T_TYPE
+ *
+
+	)
+
+71 
+	#__BLKSIZE_T_TYPE
+ 
+__SYSCALL_SLONG_TYPE
+
+
+	)
+
+72 
+	#__FSID_T_TYPE
+ såu˘ { 
+__vÆ
+[2]; }
+
+	)
+
+73 
+	#__SSIZE_T_TYPE
+ 
+__SWORD_TYPE
+
+
+	)
+
+74 
+	#__CPU_MASK_TYPE
+ 
+__SYSCALL_ULONG_TYPE
+
+
+	)
+
+76 #ifde‡
+__x86_64__
+
+
+80 
+	#__OFF_T_MATCHES_OFF64_T
+ 1
+
+	)
+
+83 
+	#__INO_T_MATCHES_INO64_T
+ 1
+
+	)
+
+87 
+	#__FD_SETSIZE
+ 1024
+
+	)
+
+	@/usr/include/bits/wchar.h
+
+19 #i‚de‡
+_BITS_WCHAR_H
+
+
+20 
+	#_BITS_WCHAR_H
+ 1
+
+	)
+
+33 #ifde‡
+__WCHAR_MAX__
+
+
+34 
+	#__WCHAR_MAX
+ 
+__WCHAR_MAX__
+
+
+	)
+
+35 #ñi‡
+L
+'\0' - 1 > 0
+
+36 
+	#__WCHAR_MAX
+ (0xffffffffu + 
+L
+'\0')
+
+	)
+
+38 
+	#__WCHAR_MAX
+ (0x7ffffff‡+ 
+L
+'\0')
+
+	)
+
+41 #ifde‡
+__WCHAR_MIN__
+
+
+42 
+	#__WCHAR_MIN
+ 
+__WCHAR_MIN__
+
+
+	)
+
+43 #ñi‡
+L
+'\0' - 1 > 0
+
+44 
+	#__WCHAR_MIN
+ (
+L
+'\0' + 0)
+
+	)
+
+46 
+	#__WCHAR_MIN
+ (-
+__WCHAR_MAX
+ - 1)
+
+	)
+
+	@/usr/include/bits/wordsize.h
+
+3 #i‡
+deföed
+ 
+__x86_64__
+ && !deföed 
+__ILP32__
+
+
+4 
+	#__WORDSIZE
+ 64
+
+	)
+
+6 
+	#__WORDSIZE
+ 32
+
+	)
+
+9 #ifde‡
+__x86_64__
+
+
+10 
+	#__WORDSIZE_TIME64_COMPAT32
+ 1
+
+	)
+
+12 
+	#__SYSCALL_WORDSIZE
+ 64
+
+	)
+
+	@/usr/include/ctype.h
+
+22 #i‚def 
+_CTYPE_H
+
+
+23 
+	#_CTYPE_H
+ 1
+
+	)
+
+25 
+	~<„©uªs.h
+>
+
+26 
+	~<bôs/ty≥s.h
+>
+
+28 
+	g__BEGIN_DECLS
+
+
+30 #i‚de‡
+_ISbô
+
+
+39 
+	~<ídün.h
+>
+
+40 #i‡
+__BYTE_ORDER
+ =
+__BIG_ENDIAN
+
+
+41 
+	#_ISbô
+(
+bô
+Ë(1 << (bô))
+
+	)
+
+43 
+	#_ISbô
+(
+bô
+Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))
+
+	)
+
+48 
+	m_ISuµî
+ = 
+_ISbô
+ (0),
+
+49 
+	m_ISlowî
+ = 
+_ISbô
+ (1),
+
+50 
+	m_ISÆpha
+ = 
+_ISbô
+ (2),
+
+51 
+	m_ISdigô
+ = 
+_ISbô
+ (3),
+
+52 
+	m_ISxdigô
+ = 
+_ISbô
+ (4),
+
+53 
+	m_IS•a˚
+ = 
+_ISbô
+ (5),
+
+54 
+	m_IS¥öt
+ = 
+_ISbô
+ (6),
+
+55 
+	m_ISgøph
+ = 
+_ISbô
+ (7),
+
+56 
+	m_ISbœnk
+ = 
+_ISbô
+ (8),
+
+57 
+	m_IS˙ål
+ = 
+_ISbô
+ (9),
+
+58 
+	m_ISpun˘
+ = 
+_ISbô
+ (10),
+
+59 
+	m_ISÆnum
+ = 
+_ISbô
+ (11)
+
+79 c⁄° **
+	$__˘y≥_b_loc
+ ()
+
+80 
+__THROW
+ 
+	`__©åibuã__
+ ((
+__c⁄°__
+));
+
+81 c⁄° 
+__öt32_t
+ **
+	$__˘y≥_tﬁowî_loc
+ ()
+
+82 
+__THROW
+ 
+	`__©åibuã__
+ ((
+__c⁄°__
+));
+
+83 c⁄° 
+__öt32_t
+ **
+	$__˘y≥_touµî_loc
+ ()
+
+84 
+__THROW
+ 
+	`__©åibuã__
+ ((
+__c⁄°__
+));
+
+87 #i‚de‡
+__˝lu•lus
+
+
+88 
+	#__is˘y≥
+(
+c
+, 
+ty≥
+) \
+
+89 ((*
+	`__˘y≥_b_loc
+ ())[(Ë(
+c
+)] & (Ë
+ty≥
+)
+
+	)
+
+90 #ñi‡
+deföed
+ 
+__USE_EXTERN_INLINES
+
+
+91 
+	#__is˘y≥_f
+(
+ty≥
+) \
+
+92 
+__exã∫_ölöe
+ \
+
+93 
+is
+##
+	`ty≥
+ (
+__c
+Ë
+__THROW
+ \
+
+95  (*
+	`__˘y≥_b_loc
+ ())[(Ë(
+__c
+)] & (Ë
+_IS
+##
+ty≥
+; \
+
+96 
+	}
+
+	)
+}
+
+99 
+	#__ißscii
+(
+c
+Ë(((cË& ~0x7fË=0Ë
+
+	)
+
+100 
+	#__tﬂscii
+(
+c
+Ë((cË& 0x7fË
+
+	)
+
+102 
+	#__ex˘y≥
+(
+«me
+Ë
+	`«me
+ (Ë
+__THROW
+
+
+	)
+
+104 
+__BEGIN_NAMESPACE_STD
+
+
+110 
+__ex˘y≥
+ (
+iß um
+);
+
+111 
+__ex˘y≥
+ (
+ißÕha
+);
+
+112 
+__ex˘y≥
+ (
+is˙ål
+);
+
+113 
+__ex˘y≥
+ (
+isdigô
+);
+
+114 
+__ex˘y≥
+ (
+i¶owî
+);
+
+115 
+__ex˘y≥
+ (
+isgøph
+);
+
+116 
+__ex˘y≥
+ (
+i•röt
+);
+
+117 
+__ex˘y≥
+ (
+i•un˘
+);
+
+118 
+__ex˘y≥
+ (
+is•a˚
+);
+
+119 
+__ex˘y≥
+ (
+isuµî
+);
+
+120 
+__ex˘y≥
+ (
+isxdigô
+);
+
+124 
+	$tﬁowî
+ (
+__c
+Ë
+__THROW
+;
+
+127 
+	$touµî
+ (
+__c
+Ë
+__THROW
+;
+
+129 
+__END_NAMESPACE_STD
+
+
+133 #ifdef 
+__USE_ISOC99
+
+
+134 
+__BEGIN_NAMESPACE_C99
+
+
+136 
+	`__ex˘y≥
+ (
+isbœnk
+);
+
+138 
+__END_NAMESPACE_C99
+
+
+141 #ifde‡
+__USE_GNU
+
+
+143 
+	$is˘y≥
+ (
+__c
+, 
+__mask
+Ë
+__THROW
+;
+
+146 #i‡
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_XOPEN
+
+
+150 
+	$ißscii
+ (
+__c
+Ë
+__THROW
+;
+
+154 
+	$tﬂscii
+ (
+__c
+Ë
+__THROW
+;
+
+158 
+	`__ex˘y≥
+ (
+_touµî
+);
+
+159 
+	`__ex˘y≥
+ (
+_tﬁowî
+);
+
+163 
+	#__tobody
+(
+c
+, 
+f
+, 
+a
+, 
+¨gs
+) \
+
+164 (
+__exãnsi⁄__
+ \
+
+165 ({ 
+__ªs
+; \
+
+166 i‡( (
+c
+) > 1) \
+
+168 i‡(
+	`__buûtö_c⁄°™t_p
+ (
+c
+)) \
+
+170 
+__c
+ = (
+c
+); \
+
+171 
+__ªs
+ = 
+__c
+ < -128 || __¯> 255 ? __¯: (
+a
+)[__c]; \
+
+174 
+__ªs
+ = 
+f
+ 
+¨gs
+; \
+
+177 
+__ªs
+ = (
+a
+)[(Ë(
+c
+)]; \
+
+178 
+__ªs
+; 
+	}
+}))
+
+	)
+
+180 #i‡!
+deföed
+ 
+__NO_CTYPE
+
+
+181 #ifde‡
+__is˘y≥_f
+
+
+182 
+	$__is˘y≥_f
+ (
+Ænum
+)
+
+183 
+	$__is˘y≥_f
+ (
+Æpha
+)
+
+184 
+	$__is˘y≥_f
+ (
+˙ål
+)
+
+185 
+	$__is˘y≥_f
+ (
+digô
+)
+
+186 
+	$__is˘y≥_f
+ (
+lowî
+)
+
+187 
+	$__is˘y≥_f
+ (
+gøph
+)
+
+188 
+	$__is˘y≥_f
+ (
+¥öt
+)
+
+189 
+	$__is˘y≥_f
+ (
+pun˘
+)
+
+190 
+	$__is˘y≥_f
+ (
+•a˚
+)
+
+191 
+	$__is˘y≥_f
+ (
+uµî
+)
+
+192 
+	$__is˘y≥_f
+ (
+xdigô
+)
+
+193 #ifde‡
+__USE_ISOC99
+
+
+194 
+	$__is˘y≥_f
+ (
+bœnk
+)
+
+196 #ñi‡
+deföed
+ 
+__is˘y≥
+
+
+197 
+	#iß um
+(
+c
+Ë
+	`__is˘y≥
+((c), 
+_ISÆnum
+)
+
+	)
+
+198 
+	#ißÕha
+(
+c
+Ë
+	`__is˘y≥
+((c), 
+_ISÆpha
+)
+
+	)
+
+199 
+	#is˙ål
+(
+c
+Ë
+	`__is˘y≥
+((c), 
+_IS˙ål
+)
+
+	)
+
+200 
+	#isdigô
+(
+c
+Ë
+	`__is˘y≥
+((c), 
+_ISdigô
+)
+
+	)
+
+201 
+	#i¶owî
+(
+c
+Ë
+	`__is˘y≥
+((c), 
+_ISlowî
+)
+
+	)
+
+202 
+	#isgøph
+(
+c
+Ë
+	`__is˘y≥
+((c), 
+_ISgøph
+)
+
+	)
+
+203 
+	#i•röt
+(
+c
+Ë
+	`__is˘y≥
+((c), 
+_IS¥öt
+)
+
+	)
+
+204 
+	#i•un˘
+(
+c
+Ë
+	`__is˘y≥
+((c), 
+_ISpun˘
+)
+
+	)
+
+205 
+	#is•a˚
+(
+c
+Ë
+	`__is˘y≥
+((c), 
+_IS•a˚
+)
+
+	)
+
+206 
+	#isuµî
+(
+c
+Ë
+	`__is˘y≥
+((c), 
+_ISuµî
+)
+
+	)
+
+207 
+	#isxdigô
+(
+c
+Ë
+	`__is˘y≥
+((c), 
+_ISxdigô
+)
+
+	)
+
+208 #ifde‡
+__USE_ISOC99
+
+
+209 
+	#isbœnk
+(
+c
+Ë
+	`__is˘y≥
+((c), 
+_ISbœnk
+)
+
+	)
+
+213 #ifde‡
+__USE_EXTERN_INLINES
+
+
+214 
+__exã∫_ölöe
+ 
+
+215 
+	`__NTH
+ (
+	$tﬁowî
+ (
+__c
+))
+
+217  
+__c
+ >-128 && __¯< 256 ? (*
+	`__˘y≥_tﬁowî_loc
+ ())[__c] : __c;
+
+218 
+	}
+}
+
+220 
+__exã∫_ölöe
+ 
+
+221 
+__NTH
+ (
+	$touµî
+ (
+__c
+))
+
+223  
+__c
+ >-128 && __¯< 256 ? (*
+	`__˘y≥_touµî_loc
+ ())[__c] : __c;
+
+224 
+	}
+}
+
+227 #i‡
+__GNUC__
+ >2 && 
+deföed
+ 
+__OPTIMIZE__
+ && !deföed 
+__˝lu•lus
+
+
+228 
+	#tﬁowî
+(
+c
+Ë
+	`__tobody
+ (c, 
+tﬁowî
+, *
+	`__˘y≥_tﬁowî_loc
+ (), (c))
+
+	)
+
+229 
+	#touµî
+(
+c
+Ë
+	`__tobody
+ (c, 
+touµî
+, *
+	`__˘y≥_touµî_loc
+ (), (c))
+
+	)
+
+232 #i‡
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_XOPEN
+
+
+233 
+	#ißscii
+(
+c
+Ë
+	`__ißscii
+ (c)
+
+	)
+
+234 
+	#tﬂscii
+(
+c
+Ë
+	`__tﬂscii
+ (c)
+
+	)
+
+236 
+	#_tﬁowî
+(
+c
+Ë((Ë(*
+	`__˘y≥_tﬁowî_loc
+ ())[(Ë(c)])
+
+	)
+
+237 
+	#_touµî
+(
+c
+Ë((Ë(*
+	`__˘y≥_touµî_loc
+ ())[(Ë(c)])
+
+	)
+
+243 #ifde‡
+__USE_XOPEN2K8
+
+
+257 
+	~<xloˇÀ.h
+>
+
+261 
+	#__is˘y≥_l
+(
+c
+, 
+ty≥
+, 
+loˇÀ
+) \
+
+262 ((
+loˇÀ
+)->
+__˘y≥_b
+[(Ë(
+c
+)] & (Ë
+ty≥
+)
+
+	)
+
+264 
+	#__ex˘y≥_l
+(
+«me
+) \
+
+265 
+	`«me
+ (, 
+__loˇÀ_t
+Ë
+__THROW
+
+
+	)
+
+271 
+__ex˘y≥_l
+ (
+iß um_l
+);
+
+272 
+__ex˘y≥_l
+ (
+ißÕha_l
+);
+
+273 
+__ex˘y≥_l
+ (
+is˙ål_l
+);
+
+274 
+__ex˘y≥_l
+ (
+isdigô_l
+);
+
+275 
+__ex˘y≥_l
+ (
+i¶owî_l
+);
+
+276 
+__ex˘y≥_l
+ (
+isgøph_l
+);
+
+277 
+__ex˘y≥_l
+ (
+i•röt_l
+);
+
+278 
+__ex˘y≥_l
+ (
+i•un˘_l
+);
+
+279 
+__ex˘y≥_l
+ (
+is•a˚_l
+);
+
+280 
+__ex˘y≥_l
+ (
+isuµî_l
+);
+
+281 
+__ex˘y≥_l
+ (
+isxdigô_l
+);
+
+283 
+__ex˘y≥_l
+ (
+isbœnk_l
+);
+
+287 
+	$__tﬁowî_l
+ (
+__c
+, 
+__loˇÀ_t
+ 
+__l
+Ë
+__THROW
+;
+
+288 
+	$tﬁowî_l
+ (
+__c
+, 
+__loˇÀ_t
+ 
+__l
+Ë
+__THROW
+;
+
+291 
+	$__touµî_l
+ (
+__c
+, 
+__loˇÀ_t
+ 
+__l
+Ë
+__THROW
+;
+
+292 
+	$touµî_l
+ (
+__c
+, 
+__loˇÀ_t
+ 
+__l
+Ë
+__THROW
+;
+
+294 #i‡
+__GNUC__
+ >2 && 
+deföed
+ 
+__OPTIMIZE__
+ && !deföed 
+__˝lu•lus
+
+
+295 
+	#__tﬁowî_l
+(
+c
+, 
+loˇÀ
+) \
+
+296 
+	`__tobody
+ (
+c
+, 
+__tﬁowî_l
+, (
+loˇÀ
+)->
+__˘y≥_tﬁowî
+, (c,ÜoˇÀ))
+
+	)
+
+297 
+	#__touµî_l
+(
+c
+, 
+loˇÀ
+) \
+
+298 
+	`__tobody
+ (
+c
+, 
+__touµî_l
+, (
+loˇÀ
+)->
+__˘y≥_touµî
+, (c,ÜoˇÀ))
+
+	)
+
+299 
+	#tﬁowî_l
+(
+c
+, 
+loˇÀ
+Ë
+	`__tﬁowî_l
+ ((c), (loˇÀ))
+
+	)
+
+300 
+	#touµî_l
+(
+c
+, 
+loˇÀ
+Ë
+	`__touµî_l
+ ((c), (loˇÀ))
+
+	)
+
+304 #i‚de‡
+__NO_CTYPE
+
+
+305 
+	#__iß um_l
+(
+c
+,
+l
+Ë
+	`__is˘y≥_l
+((c), 
+_ISÆnum
+, (l))
+
+	)
+
+306 
+	#__ißÕha_l
+(
+c
+,
+l
+Ë
+	`__is˘y≥_l
+((c), 
+_ISÆpha
+, (l))
+
+	)
+
+307 
+	#__is˙ål_l
+(
+c
+,
+l
+Ë
+	`__is˘y≥_l
+((c), 
+_IS˙ål
+, (l))
+
+	)
+
+308 
+	#__isdigô_l
+(
+c
+,
+l
+Ë
+	`__is˘y≥_l
+((c), 
+_ISdigô
+, (l))
+
+	)
+
+309 
+	#__i¶owî_l
+(
+c
+,
+l
+Ë
+	`__is˘y≥_l
+((c), 
+_ISlowî
+, (l))
+
+	)
+
+310 
+	#__isgøph_l
+(
+c
+,
+l
+Ë
+	`__is˘y≥_l
+((c), 
+_ISgøph
+, (l))
+
+	)
+
+311 
+	#__i•röt_l
+(
+c
+,
+l
+Ë
+	`__is˘y≥_l
+((c), 
+_IS¥öt
+, (l))
+
+	)
+
+312 
+	#__i•un˘_l
+(
+c
+,
+l
+Ë
+	`__is˘y≥_l
+((c), 
+_ISpun˘
+, (l))
+
+	)
+
+313 
+	#__is•a˚_l
+(
+c
+,
+l
+Ë
+	`__is˘y≥_l
+((c), 
+_IS•a˚
+, (l))
+
+	)
+
+314 
+	#__isuµî_l
+(
+c
+,
+l
+Ë
+	`__is˘y≥_l
+((c), 
+_ISuµî
+, (l))
+
+	)
+
+315 
+	#__isxdigô_l
+(
+c
+,
+l
+Ë
+	`__is˘y≥_l
+((c), 
+_ISxdigô
+, (l))
+
+	)
+
+317 
+	#__isbœnk_l
+(
+c
+,
+l
+Ë
+	`__is˘y≥_l
+((c), 
+_ISbœnk
+, (l))
+
+	)
+
+319 #ifde‡
+__USE_MISC
+
+
+320 
+	#__ißscii_l
+(
+c
+,
+l
+Ë(÷), 
+	`__ißscii
+ (c))
+
+	)
+
+321 
+	#__tﬂscii_l
+(
+c
+,
+l
+Ë(÷), 
+	`__tﬂscii
+ (c))
+
+	)
+
+324 
+	#iß um_l
+(
+c
+,
+l
+Ë
+	`__iß um_l
+ ((c), (l))
+
+	)
+
+325 
+	#ißÕha_l
+(
+c
+,
+l
+Ë
+	`__ißÕha_l
+ ((c), (l))
+
+	)
+
+326 
+	#is˙ål_l
+(
+c
+,
+l
+Ë
+	`__is˙ål_l
+ ((c), (l))
+
+	)
+
+327 
+	#isdigô_l
+(
+c
+,
+l
+Ë
+	`__isdigô_l
+ ((c), (l))
+
+	)
+
+328 
+	#i¶owî_l
+(
+c
+,
+l
+Ë
+	`__i¶owî_l
+ ((c), (l))
+
+	)
+
+329 
+	#isgøph_l
+(
+c
+,
+l
+Ë
+	`__isgøph_l
+ ((c), (l))
+
+	)
+
+330 
+	#i•röt_l
+(
+c
+,
+l
+Ë
+	`__i•röt_l
+ ((c), (l))
+
+	)
+
+331 
+	#i•un˘_l
+(
+c
+,
+l
+Ë
+	`__i•un˘_l
+ ((c), (l))
+
+	)
+
+332 
+	#is•a˚_l
+(
+c
+,
+l
+Ë
+	`__is•a˚_l
+ ((c), (l))
+
+	)
+
+333 
+	#isuµî_l
+(
+c
+,
+l
+Ë
+	`__isuµî_l
+ ((c), (l))
+
+	)
+
+334 
+	#isxdigô_l
+(
+c
+,
+l
+Ë
+	`__isxdigô_l
+ ((c), (l))
+
+	)
+
+336 
+	#isbœnk_l
+(
+c
+,
+l
+Ë
+	`__isbœnk_l
+ ((c), (l))
+
+	)
+
+338 #ifde‡
+__USE_MISC
+
+
+339 
+	#ißscii_l
+(
+c
+,
+l
+Ë
+	`__ißscii_l
+ ((c), (l))
+
+	)
+
+340 
+	#tﬂscii_l
+(
+c
+,
+l
+Ë
+	`__tﬂscii_l
+ ((c), (l))
+
+	)
+
+347 
+__END_DECLS
+
+
+	@/usr/include/endian.h
+
+18 #i‚def 
+_ENDIAN_H
+
+
+19 
+	#_ENDIAN_H
+ 1
+
+	)
+
+21 
+	~<„©uªs.h
+>
+
+31 
+	#__LITTLE_ENDIAN
+ 1234
+
+	)
+
+32 
+	#__BIG_ENDIAN
+ 4321
+
+	)
+
+33 
+	#__PDP_ENDIAN
+ 3412
+
+	)
+
+36 
+	~<bôs/ídün.h
+>
+
+40 #i‚de‡
+__FLOAT_WORD_ORDER
+
+
+41 
+	#__FLOAT_WORD_ORDER
+ 
+__BYTE_ORDER
+
+
+	)
+
+44 #ifdef 
+__USE_MISC
+
+
+45 
+	#LITTLE_ENDIAN
+ 
+__LITTLE_ENDIAN
+
+
+	)
+
+46 
+	#BIG_ENDIAN
+ 
+__BIG_ENDIAN
+
+
+	)
+
+47 
+	#PDP_ENDIAN
+ 
+__PDP_ENDIAN
+
+
+	)
+
+48 
+	#BYTE_ORDER
+ 
+__BYTE_ORDER
+
+
+	)
+
+51 #i‡
+__BYTE_ORDER
+ =
+__LITTLE_ENDIAN
+
+
+52 
+	#__LONG_LONG_PAIR
+(
+HI
+, 
+LO
+ËLO, 
+	)
+HI
+
+53 #ñi‡
+__BYTE_ORDER
+ =
+__BIG_ENDIAN
+
+
+54 
+	#__LONG_LONG_PAIR
+(
+HI
+, 
+LO
+ËHI, 
+	)
+LO
+
+58 #i‡
+deföed
+ 
+__USE_MISC
+ && !deföed 
+__ASSEMBLER__
+
+
+60 
+	~<bôs/byãsw≠.h
+>
+
+62 #i‡
+__BYTE_ORDER
+ =
+__LITTLE_ENDIAN
+
+
+63 
+	#htobe16
+(
+x
+Ë
+	`__bsw≠_16
+ (x)
+
+	)
+
+64 
+	#htﬁe16
+(
+x
+Ë(x)
+
+	)
+
+65 
+	#be16toh
+(
+x
+Ë
+	`__bsw≠_16
+ (x)
+
+	)
+
+66 
+	#À16toh
+(
+x
+Ë(x)
+
+	)
+
+68 
+	#htobe32
+(
+x
+Ë
+	`__bsw≠_32
+ (x)
+
+	)
+
+69 
+	#htﬁe32
+(
+x
+Ë(x)
+
+	)
+
+70 
+	#be32toh
+(
+x
+Ë
+	`__bsw≠_32
+ (x)
+
+	)
+
+71 
+	#À32toh
+(
+x
+Ë(x)
+
+	)
+
+73 
+	#htobe64
+(
+x
+Ë
+	`__bsw≠_64
+ (x)
+
+	)
+
+74 
+	#htﬁe64
+(
+x
+Ë(x)
+
+	)
+
+75 
+	#be64toh
+(
+x
+Ë
+	`__bsw≠_64
+ (x)
+
+	)
+
+76 
+	#À64toh
+(
+x
+Ë(x)
+
+	)
+
+79 
+	#htobe16
+(
+x
+Ë(x)
+
+	)
+
+80 
+	#htﬁe16
+(
+x
+Ë
+	`__bsw≠_16
+ (x)
+
+	)
+
+81 
+	#be16toh
+(
+x
+Ë(x)
+
+	)
+
+82 
+	#À16toh
+(
+x
+Ë
+	`__bsw≠_16
+ (x)
+
+	)
+
+84 
+	#htobe32
+(
+x
+Ë(x)
+
+	)
+
+85 
+	#htﬁe32
+(
+x
+Ë
+	`__bsw≠_32
+ (x)
+
+	)
+
+86 
+	#be32toh
+(
+x
+Ë(x)
+
+	)
+
+87 
+	#À32toh
+(
+x
+Ë
+	`__bsw≠_32
+ (x)
+
+	)
+
+89 
+	#htobe64
+(
+x
+Ë(x)
+
+	)
+
+90 
+	#htﬁe64
+(
+x
+Ë
+	`__bsw≠_64
+ (x)
+
+	)
+
+91 
+	#be64toh
+(
+x
+Ë(x)
+
+	)
+
+92 
+	#À64toh
+(
+x
+Ë
+	`__bsw≠_64
+ (x)
+
+	)
+
+	@/usr/include/gnu/stubs.h
+
+6 #i‡!
+deföed
+ 
+__x86_64__
+
+
+7 
+	~<gnu/°ubs-32.h
+>
+
+9 #i‡
+deföed
+ 
+__x86_64__
+ && deföed 
+__LP64__
+
+
+10 
+	~<gnu/°ubs-64.h
+>
+
+12 #i‡
+deföed
+ 
+__x86_64__
+ && deföed 
+__ILP32__
+
+
+13 
+	~<gnu/°ubs-x32.h
+>
+
+	@/usr/include/linux/errno.h
+
+1 
+	~<asm/î∫o.h
+>
+
+	@/usr/include/stdc-predef.h
+
+18 #i‚def 
+_STDC_PREDEF_H
+
+
+19 
+	#_STDC_PREDEF_H
+ 1
+
+	)
+
+36 #ifde‡
+__GCC_IEC_559
+
+
+37 #i‡
+__GCC_IEC_559
+ > 0
+
+38 
+	#__STDC_IEC_559__
+ 1
+
+	)
+
+41 
+	#__STDC_IEC_559__
+ 1
+
+	)
+
+44 #ifde‡
+__GCC_IEC_559_COMPLEX
+
+
+45 #i‡
+__GCC_IEC_559_COMPLEX
+ > 0
+
+46 
+	#__STDC_IEC_559_COMPLEX__
+ 1
+
+	)
+
+49 
+	#__STDC_IEC_559_COMPLEX__
+ 1
+
+	)
+
+55 
+	#__STDC_ISO_10646__
+ 201505L
+
+	)
+
+58 
+	#__STDC_NO_THREADS__
+ 1
+
+	)
+
+	@/usr/include/stdlib.h
+
+22 #i‚def 
+_STDLIB_H
+
+
+24 
+	~<„©uªs.h
+>
+
+27 
+	#__√ed_size_t
+
+
+	)
+
+28 #i‚de‡
+__√ed_mÆloc_™d_ˇŒoc
+
+
+29 
+	#__√ed_wch¨_t
+
+
+	)
+
+30 
+	#__√ed_NULL
+
+
+	)
+
+32 
+	~<°ddef.h
+>
+
+34 
+	g__BEGIN_DECLS
+
+
+36 #i‚de‡
+__√ed_mÆloc_™d_ˇŒoc
+
+
+37 
+	#_STDLIB_H
+ 1
+
+	)
+
+39 #i‡(
+deföed
+ 
+__USE_XOPEN
+ || deföed 
+__USE_XOPEN2K8
+Ë&& !deföed 
+_SYS_WAIT_H
+
+
+41 
+	~<bôs/waôÊags.h
+>
+
+42 
+	~<bôs/waô°©us.h
+>
+
+44 #ifde‡
+__USE_MISC
+
+
+49 #i‡
+deföed
+ 
+__GNUC__
+ && !deföed 
+__˝lu•lus
+
+
+50 
+	#__WAIT_INT
+(
+°©us
+) \
+
+51 (
+	`__exãnsi⁄__
+ (((uni⁄ { 
+	`__ty≥of
+(
+°©us
+Ë
+__ö
+; 
+__i
+; }) \
+
+52 { .
+__ö
+ = (
+°©us
+Ë}).
+__i
+))
+
+	)
+
+54 
+	#__WAIT_INT
+(
+°©us
+Ë(*(*Ë&(°©us))
+
+	)
+
+62 #i‡!
+deföed
+ 
+__GNUC__
+ || __GNUC__ < 2 || deföed 
+__˝lu•lus
+
+
+63 
+	#__WAIT_STATUS
+ *
+
+	)
+
+64 
+	#__WAIT_STATUS_DEFN
+ *
+
+	)
+
+69 
+waô
+ *
+	m__u±r
+;
+
+70 *
+	m__ùå
+;
+
+71 } 
+	t__WAIT_STATUS
+ 
+	t__©åibuã__
+ ((
+	t__å™•¨ít_uni⁄__
+));
+
+72 
+	#__WAIT_STATUS_DEFN
+ *
+
+	)
+
+77 
+	#__WAIT_INT
+(
+°©us
+Ë(°©us)
+
+	)
+
+78 
+	#__WAIT_STATUS
+ *
+
+	)
+
+79 
+	#__WAIT_STATUS_DEFN
+ *
+
+	)
+
+84 
+	#WEXITSTATUS
+(
+°©us
+Ë
+	`__WEXITSTATUS
+ (
+	`__WAIT_INT
+ (°©us))
+
+	)
+
+85 
+	#WTERMSIG
+(
+°©us
+Ë
+	`__WTERMSIG
+ (
+	`__WAIT_INT
+ (°©us))
+
+	)
+
+86 
+	#WSTOPSIG
+(
+°©us
+Ë
+	`__WSTOPSIG
+ (
+	`__WAIT_INT
+ (°©us))
+
+	)
+
+87 
+	#WIFEXITED
+(
+°©us
+Ë
+	`__WIFEXITED
+ (
+	`__WAIT_INT
+ (°©us))
+
+	)
+
+88 
+	#WIFSIGNALED
+(
+°©us
+Ë
+	`__WIFSIGNALED
+ (
+	`__WAIT_INT
+ (°©us))
+
+	)
+
+89 
+	#WIFSTOPPED
+(
+°©us
+Ë
+	`__WIFSTOPPED
+ (
+	`__WAIT_INT
+ (°©us))
+
+	)
+
+90 #ifde‡
+__WIFCONTINUED
+
+
+91 
+	#WIFCONTINUED
+(
+°©us
+Ë
+	`__WIFCONTINUED
+ (
+	`__WAIT_INT
+ (°©us))
+
+	)
+
+95 
+__BEGIN_NAMESPACE_STD
+
+
+99 
+	mquŸ
+;
+
+100 
+	mªm
+;
+
+101 } 
+	tdiv_t
+;
+
+104 #i‚de‡
+__ldiv_t_deföed
+
+
+107 
+	mquŸ
+;
+
+108 
+	mªm
+;
+
+109 } 
+	tldiv_t
+;
+
+110 
+	#__ldiv_t_deföed
+ 1
+
+	)
+
+112 
+	g__END_NAMESPACE_STD
+
+
+114 #i‡
+deföed
+ 
+__USE_ISOC99
+ && !deföed 
+__Œdiv_t_deföed
+
+
+115 
+__BEGIN_NAMESPACE_C99
+
+
+117 
+__exãnsi⁄__
+ struct
+
+119 
+	mquŸ
+;
+
+120 
+	mªm
+;
+
+121 } 
+	tŒdiv_t
+;
+
+122 
+	#__Œdiv_t_deföed
+ 1
+
+	)
+
+123 
+	g__END_NAMESPACE_C99
+
+
+128 
+	#RAND_MAX
+ 2147483647
+
+	)
+
+133 
+	#EXIT_FAILURE
+ 1
+
+	)
+
+134 
+	#EXIT_SUCCESS
+ 0
+
+	)
+
+138 
+	#MB_CUR_MAX
+ (
+	`__˘y≥_gë_mb_cur_max
+ ())
+
+	)
+
+139 
+size_t
+ 
+	$__˘y≥_gë_mb_cur_max
+ (Ë
+__THROW
+ 
+__wur
+;
+
+142 
+__BEGIN_NAMESPACE_STD
+
+
+144 
+	$©of
+ (c⁄° *
+__≈å
+)
+
+145 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+147 
+	$©oi
+ (c⁄° *
+__≈å
+)
+
+148 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+150 
+	$©ﬁ
+ (c⁄° *
+__≈å
+)
+
+151 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+152 
+__END_NAMESPACE_STD
+
+
+154 #ifde‡
+__USE_ISOC99
+
+
+155 
+__BEGIN_NAMESPACE_C99
+
+
+157 
+__exãnsi⁄__
+ 
+	$©ﬁl
+ (c⁄° *
+__≈å
+)
+
+158 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+159 
+__END_NAMESPACE_C99
+
+
+162 
+__BEGIN_NAMESPACE_STD
+
+
+164 
+	$°πod
+ (c⁄° *
+__ª°ri˘
+ 
+__≈å
+,
+
+165 **
+__ª°ri˘
+ 
+__íd±r
+)
+
+166 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+167 
+__END_NAMESPACE_STD
+
+
+169 #ifdef 
+__USE_ISOC99
+
+
+170 
+__BEGIN_NAMESPACE_C99
+
+
+172 
+	$°πof
+ (c⁄° *
+__ª°ri˘
+ 
+__≈å
+,
+
+173 **
+__ª°ri˘
+ 
+__íd±r
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+175 
+	$°πﬁd
+ (c⁄° *
+__ª°ri˘
+ 
+__≈å
+,
+
+176 **
+__ª°ri˘
+ 
+__íd±r
+)
+
+177 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+178 
+__END_NAMESPACE_C99
+
+
+181 
+__BEGIN_NAMESPACE_STD
+
+
+183 
+	$°πﬁ
+ (c⁄° *
+__ª°ri˘
+ 
+__≈å
+,
+
+184 **
+__ª°ri˘
+ 
+__íd±r
+, 
+__ba£
+)
+
+185 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+187 
+	$°πoul
+ (c⁄° *
+__ª°ri˘
+ 
+__≈å
+,
+
+188 **
+__ª°ri˘
+ 
+__íd±r
+, 
+__ba£
+)
+
+189 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+190 
+__END_NAMESPACE_STD
+
+
+192 #ifde‡
+__USE_MISC
+
+
+194 
+__exãnsi⁄__
+
+
+195 
+	$°πoq
+ (c⁄° *
+__ª°ri˘
+ 
+__≈å
+,
+
+196 **
+__ª°ri˘
+ 
+__íd±r
+, 
+__ba£
+)
+
+197 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+199 
+__exãnsi⁄__
+
+
+200 
+	$°πouq
+ (c⁄° *
+__ª°ri˘
+ 
+__≈å
+,
+
+201 **
+__ª°ri˘
+ 
+__íd±r
+, 
+__ba£
+)
+
+202 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+205 #ifde‡
+__USE_ISOC99
+
+
+206 
+__BEGIN_NAMESPACE_C99
+
+
+208 
+__exãnsi⁄__
+
+
+209 
+	$°πﬁl
+ (c⁄° *
+__ª°ri˘
+ 
+__≈å
+,
+
+210 **
+__ª°ri˘
+ 
+__íd±r
+, 
+__ba£
+)
+
+211 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+213 
+__exãnsi⁄__
+
+
+214 
+	$°πouŒ
+ (c⁄° *
+__ª°ri˘
+ 
+__≈å
+,
+
+215 **
+__ª°ri˘
+ 
+__íd±r
+, 
+__ba£
+)
+
+216 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+217 
+__END_NAMESPACE_C99
+
+
+221 #ifde‡
+__USE_GNU
+
+
+235 
+	~<xloˇÀ.h
+>
+
+239 
+	$°πﬁ_l
+ (c⁄° *
+__ª°ri˘
+ 
+__≈å
+,
+
+240 **
+__ª°ri˘
+ 
+__íd±r
+, 
+__ba£
+,
+
+241 
+__loˇÀ_t
+ 
+__loc
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 4));
+
+243 
+	$°πoul_l
+ (c⁄° *
+__ª°ri˘
+ 
+__≈å
+,
+
+244 **
+__ª°ri˘
+ 
+__íd±r
+,
+
+245 
+__ba£
+, 
+__loˇÀ_t
+ 
+__loc
+)
+
+246 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 4));
+
+248 
+__exãnsi⁄__
+
+
+249 
+	$°πﬁl_l
+ (c⁄° *
+__ª°ri˘
+ 
+__≈å
+,
+
+250 **
+__ª°ri˘
+ 
+__íd±r
+, 
+__ba£
+,
+
+251 
+__loˇÀ_t
+ 
+__loc
+)
+
+252 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 4));
+
+254 
+__exãnsi⁄__
+
+
+255 
+	$°πouŒ_l
+ (c⁄° *
+__ª°ri˘
+ 
+__≈å
+,
+
+256 **
+__ª°ri˘
+ 
+__íd±r
+,
+
+257 
+__ba£
+, 
+__loˇÀ_t
+ 
+__loc
+)
+
+258 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 4));
+
+260 
+	$°πod_l
+ (c⁄° *
+__ª°ri˘
+ 
+__≈å
+,
+
+261 **
+__ª°ri˘
+ 
+__íd±r
+, 
+__loˇÀ_t
+ 
+__loc
+)
+
+262 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 3));
+
+264 
+	$°πof_l
+ (c⁄° *
+__ª°ri˘
+ 
+__≈å
+,
+
+265 **
+__ª°ri˘
+ 
+__íd±r
+, 
+__loˇÀ_t
+ 
+__loc
+)
+
+266 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 3));
+
+268 
+	$°πﬁd_l
+ (c⁄° *
+__ª°ri˘
+ 
+__≈å
+,
+
+269 **
+__ª°ri˘
+ 
+__íd±r
+,
+
+270 
+__loˇÀ_t
+ 
+__loc
+)
+
+271 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 3));
+
+275 #ifde‡
+__USE_EXTERN_INLINES
+
+
+276 
+__BEGIN_NAMESPACE_STD
+
+
+277 
+__exã∫_ölöe
+ 
+
+278 
+	`__NTH
+ (
+	$©oi
+ (c⁄° *
+__≈å
+))
+
+280  (Ë
+	`°πﬁ
+ (
+__≈å
+, (**Ë
+NULL
+, 10);
+
+281 
+	}
+}
+
+282 
+__exã∫_ölöe
+ 
+
+283 
+__NTH
+ (
+	$©ﬁ
+ (c⁄° *
+__≈å
+))
+
+285  
+	`°πﬁ
+ (
+__≈å
+, (**Ë
+NULL
+, 10);
+
+286 
+	}
+}
+
+287 
+	g__END_NAMESPACE_STD
+
+
+289 #ifde‡
+__USE_ISOC99
+
+
+290 
+__BEGIN_NAMESPACE_C99
+
+
+291 
+__exãnsi⁄__
+ 
+__exã∫_ölöe
+ 
+
+292 
+__NTH
+ (
+	$©ﬁl
+ (c⁄° *
+__≈å
+))
+
+294  
+	`°πﬁl
+ (
+__≈å
+, (**Ë
+NULL
+, 10);
+
+295 
+	}
+}
+
+296 
+	g__END_NAMESPACE_C99
+
+
+301 #i‡
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_XOPEN_EXTENDED
+
+
+305 *
+	$l64a
+ (
+__n
+Ë
+__THROW
+ 
+__wur
+;
+
+308 
+	$a64l
+ (c⁄° *
+__s
+)
+
+309 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+313 #i‡
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_XOPEN_EXTENDED
+
+
+314 
+	~<sys/ty≥s.h
+>
+
+321 
+	$øndom
+ (Ë
+__THROW
+;
+
+324 
+	$§™dom
+ (
+__£ed
+Ë
+__THROW
+;
+
+330 *
+	$öô°©e
+ (
+__£ed
+, *
+__°©ebuf
+,
+
+331 
+size_t
+ 
+__°©ñí
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2));
+
+335 *
+	$£t°©e
+ (*
+__°©ebuf
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+338 #ifde‡
+__USE_MISC
+
+
+343 
+	søndom_d©a
+
+
+345 
+öt32_t
+ *
+Âå
+;
+
+346 
+öt32_t
+ *
+Ωå
+;
+
+347 
+öt32_t
+ *
+°©e
+;
+
+348 
+ønd_ty≥
+;
+
+349 
+ønd_deg
+;
+
+350 
+ønd_£p
+;
+
+351 
+öt32_t
+ *
+íd_±r
+;
+
+354 
+	$øndom_r
+ (
+øndom_d©a
+ *
+__ª°ri˘
+ 
+__buf
+,
+
+355 
+öt32_t
+ *
+__ª°ri˘
+ 
+__ªsu…
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+357 
+	$§™dom_r
+ (
+__£ed
+, 
+øndom_d©a
+ *
+__buf
+)
+
+358 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2));
+
+360 
+	$öô°©e_r
+ (
+__£ed
+, *
+__ª°ri˘
+ 
+__°©ebuf
+,
+
+361 
+size_t
+ 
+__°©ñí
+,
+
+362 
+øndom_d©a
+ *
+__ª°ri˘
+ 
+__buf
+)
+
+363 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2, 4));
+
+365 
+	$£t°©e_r
+ (*
+__ª°ri˘
+ 
+__°©ebuf
+,
+
+366 
+øndom_d©a
+ *
+__ª°ri˘
+ 
+__buf
+)
+
+367 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+372 
+__BEGIN_NAMESPACE_STD
+
+
+374 
+	$ønd
+ (Ë
+__THROW
+;
+
+376 
+	$§™d
+ (
+__£ed
+Ë
+__THROW
+;
+
+377 
+__END_NAMESPACE_STD
+
+
+379 #ifde‡
+__USE_POSIX
+
+
+381 
+	$ønd_r
+ (*
+__£ed
+Ë
+__THROW
+;
+
+385 #i‡
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_XOPEN
+
+
+389 
+	$dønd48
+ (Ë
+__THROW
+;
+
+390 
+	$î™d48
+ (
+__xsubi
+[3]Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+393 
+	$Ã™d48
+ (Ë
+__THROW
+;
+
+394 
+	$ƒ™d48
+ (
+__xsubi
+[3])
+
+395 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+398 
+	$mønd48
+ (Ë
+__THROW
+;
+
+399 
+	$jønd48
+ (
+__xsubi
+[3])
+
+400 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+403 
+	$§™d48
+ (
+__£edvÆ
+Ë
+__THROW
+;
+
+404 *
+	$£ed48
+ (
+__£ed16v
+[3])
+
+405 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+406 
+	$lc⁄g48
+ (
+__∑øm
+[7]Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+408 #ifde‡
+__USE_MISC
+
+
+412 
+	sdønd48_d©a
+
+
+414 
+__x
+[3];
+
+415 
+__ﬁd_x
+[3];
+
+416 
+__c
+;
+
+417 
+__öô
+;
+
+418 
+__exãnsi⁄__
+ 
+__a
+;
+
+423 
+	$dønd48_r
+ (
+dønd48_d©a
+ *
+__ª°ri˘
+ 
+__buf„r
+,
+
+424 *
+__ª°ri˘
+ 
+__ªsu…
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+425 
+	$î™d48_r
+ (
+__xsubi
+[3],
+
+426 
+dønd48_d©a
+ *
+__ª°ri˘
+ 
+__buf„r
+,
+
+427 *
+__ª°ri˘
+ 
+__ªsu…
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+430 
+	$Ã™d48_r
+ (
+dønd48_d©a
+ *
+__ª°ri˘
+ 
+__buf„r
+,
+
+431 *
+__ª°ri˘
+ 
+__ªsu…
+)
+
+432 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+433 
+	$ƒ™d48_r
+ (
+__xsubi
+[3],
+
+434 
+dønd48_d©a
+ *
+__ª°ri˘
+ 
+__buf„r
+,
+
+435 *
+__ª°ri˘
+ 
+__ªsu…
+)
+
+436 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+439 
+	$mønd48_r
+ (
+dønd48_d©a
+ *
+__ª°ri˘
+ 
+__buf„r
+,
+
+440 *
+__ª°ri˘
+ 
+__ªsu…
+)
+
+441 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+442 
+	$jønd48_r
+ (
+__xsubi
+[3],
+
+443 
+dønd48_d©a
+ *
+__ª°ri˘
+ 
+__buf„r
+,
+
+444 *
+__ª°ri˘
+ 
+__ªsu…
+)
+
+445 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+448 
+	$§™d48_r
+ (
+__£edvÆ
+, 
+dønd48_d©a
+ *
+__buf„r
+)
+
+449 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2));
+
+451 
+	$£ed48_r
+ (
+__£ed16v
+[3],
+
+452 
+dønd48_d©a
+ *
+__buf„r
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+454 
+	$lc⁄g48_r
+ (
+__∑øm
+[7],
+
+455 
+dønd48_d©a
+ *
+__buf„r
+)
+
+456 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+462 #i‚de‡
+__mÆloc_™d_ˇŒoc_deföed
+
+
+463 
+	#__mÆloc_™d_ˇŒoc_deföed
+
+
+	)
+
+464 
+__BEGIN_NAMESPACE_STD
+
+
+466 *
+	$mÆloc
+ (
+size_t
+ 
+__size
+Ë
+__THROW
+ 
+__©åibuã_mÆloc__
+ 
+__wur
+;
+
+468 *
+	$ˇŒoc
+ (
+size_t
+ 
+__nmemb
+, size_à
+__size
+)
+
+469 
+__THROW
+ 
+__©åibuã_mÆloc__
+ 
+__wur
+;
+
+470 
+__END_NAMESPACE_STD
+
+
+473 #i‚de‡
+__√ed_mÆloc_™d_ˇŒoc
+
+
+474 
+__BEGIN_NAMESPACE_STD
+
+
+480 *
+	$ªÆloc
+ (*
+__±r
+, 
+size_t
+ 
+__size
+)
+
+481 
+__THROW
+ 
+__©åibuã_w¨n_unu£d_ªsu…__
+;
+
+483 
+	$‰ì
+ (*
+__±r
+Ë
+__THROW
+;
+
+484 
+__END_NAMESPACE_STD
+
+
+486 #ifdef 
+__USE_MISC
+
+
+488 
+	$c‰ì
+ (*
+__±r
+Ë
+__THROW
+;
+
+491 #ifde‡
+__USE_MISC
+
+
+492 
+	~<Æloˇ.h
+>
+
+495 #i‡(
+deföed
+ 
+__USE_XOPEN_EXTENDED
+ && !deföed 
+__USE_XOPEN2K
+) \
+
+496 || 
+deföed
+ 
+__USE_MISC
+
+
+498 *
+	$vÆloc
+ (
+size_t
+ 
+__size
+Ë
+__THROW
+ 
+__©åibuã_mÆloc__
+ 
+__wur
+;
+
+501 #ifde‡
+__USE_XOPEN2K
+
+
+503 
+	$posix_memÆign
+ (**
+__mem±r
+, 
+size_t
+ 
+__Æignmít
+, size_à
+__size
+)
+
+504 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+507 #ifde‡
+__USE_ISOC11
+
+
+509 *
+	$Æig√d_Æloc
+ (
+size_t
+ 
+__Æignmít
+, size_à
+__size
+)
+
+510 
+__THROW
+ 
+__©åibuã_mÆloc__
+ 
+	`__©åibuã_Æloc_size__
+ ((2)Ë
+__wur
+;
+
+513 
+__BEGIN_NAMESPACE_STD
+
+
+515 
+	$ab‹t
+ (Ë
+__THROW
+ 
+	`__©åibuã__
+ ((
+__n‹ëu∫__
+));
+
+519 
+	$©exô
+ ((*
+__func
+Ë()Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+521 #i‡
+deföed
+ 
+__USE_ISOC11
+ || deföed 
+__USE_ISOCXX11
+
+
+523 #ifde‡
+__˝lu•lus
+
+
+524 "C++" 
+	$©_quick_exô
+ ((*
+__func
+) ())
+
+525 
+__THROW
+ 
+	`__asm
+ ("©_quick_exô"Ë
+	`__n⁄nuŒ
+ ((1));
+
+527 
+	$©_quick_exô
+ ((*
+__func
+Ë()Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+530 
+__END_NAMESPACE_STD
+
+
+532 #ifdef 
+__USE_MISC
+
+
+535 
+	$⁄_exô
+ ((*
+__func
+Ë(
+__°©us
+, *
+__¨g
+), *__arg)
+
+536 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+539 
+__BEGIN_NAMESPACE_STD
+
+
+543 
+	$exô
+ (
+__°©us
+Ë
+__THROW
+ 
+	`__©åibuã__
+ ((
+__n‹ëu∫__
+));
+
+545 #i‡
+deföed
+ 
+__USE_ISOC11
+ || deföed 
+__USE_ISOCXX11
+
+
+549 
+	$quick_exô
+ (
+__°©us
+Ë
+__THROW
+ 
+	`__©åibuã__
+ ((
+__n‹ëu∫__
+));
+
+551 
+__END_NAMESPACE_STD
+
+
+553 #ifde‡
+__USE_ISOC99
+
+
+554 
+__BEGIN_NAMESPACE_C99
+
+
+557 
+	$_Exô
+ (
+__°©us
+Ë
+__THROW
+ 
+	`__©åibuã__
+ ((
+__n‹ëu∫__
+));
+
+558 
+__END_NAMESPACE_C99
+
+
+562 
+__BEGIN_NAMESPACE_STD
+
+
+564 *
+	$gëív
+ (c⁄° *
+__«me
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+565 
+__END_NAMESPACE_STD
+
+
+567 #ifde‡
+__USE_GNU
+
+
+570 *
+	$£cuª_gëív
+ (c⁄° *
+__«me
+)
+
+571 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+574 #i‡
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_XOPEN
+
+
+578 
+	$puãnv
+ (*
+__°rög
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+581 #ifde‡
+__USE_XOPEN2K
+
+
+584 
+	$£ãnv
+ (c⁄° *
+__«me
+, c⁄° *
+__vÆue
+, 
+__ª∂a˚
+)
+
+585 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2));
+
+588 
+	$un£ãnv
+ (c⁄° *
+__«me
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+591 #ifdef 
+__USE_MISC
+
+
+595 
+	$˛óªnv
+ (Ë
+__THROW
+;
+
+599 #i‡
+deföed
+ 
+__USE_MISC
+ \
+
+600 || (
+deföed
+ 
+__USE_XOPEN_EXTENDED
+ && !deföed 
+__USE_XOPEN2K8
+)
+
+606 *
+	$mkãmp
+ (*
+__ãm∂©e
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+609 #i‡
+deföed
+ 
+__USE_XOPEN_EXTENDED
+ || deföed 
+__USE_XOPEN2K8
+
+
+618 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+619 
+	$mk°emp
+ (*
+__ãm∂©e
+Ë
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+621 #ifde‡
+__REDIRECT
+
+
+622 
+	`__REDIRECT
+ (
+mk°emp
+, (*
+__ãm∂©e
+), 
+mk°emp64
+)
+
+623 
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+625 
+	#mk°emp
+ 
+mk°emp64
+
+
+	)
+
+628 #ifde‡
+__USE_LARGEFILE64
+
+
+629 
+	$mk°emp64
+ (*
+__ãm∂©e
+Ë
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+633 #ifde‡
+__USE_MISC
+
+
+640 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+641 
+	$mk°emps
+ (*
+__ãm∂©e
+, 
+__suffixÀn
+Ë
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+643 #ifde‡
+__REDIRECT
+
+
+644 
+	`__REDIRECT
+ (
+mk°emps
+, (*
+__ãm∂©e
+, 
+__suffixÀn
+),
+
+645 
+mk°emps64
+Ë
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+647 
+	#mk°emps
+ 
+mk°emps64
+
+
+	)
+
+650 #ifde‡
+__USE_LARGEFILE64
+
+
+651 
+	$mk°emps64
+ (*
+__ãm∂©e
+, 
+__suffixÀn
+)
+
+652 
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+656 #ifde‡
+__USE_XOPEN2K8
+
+
+662 *
+	$mkdãmp
+ (*
+__ãm∂©e
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+665 #ifde‡
+__USE_GNU
+
+
+672 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+673 
+	$mko°emp
+ (*
+__ãm∂©e
+, 
+__Êags
+Ë
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+675 #ifde‡
+__REDIRECT
+
+
+676 
+	`__REDIRECT
+ (
+mko°emp
+, (*
+__ãm∂©e
+, 
+__Êags
+), 
+mko°emp64
+)
+
+677 
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+679 
+	#mko°emp
+ 
+mko°emp64
+
+
+	)
+
+682 #ifde‡
+__USE_LARGEFILE64
+
+
+683 
+	$mko°emp64
+ (*
+__ãm∂©e
+, 
+__Êags
+Ë
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+692 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+693 
+	$mko°emps
+ (*
+__ãm∂©e
+, 
+__suffixÀn
+, 
+__Êags
+)
+
+694 
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+696 #ifde‡
+__REDIRECT
+
+
+697 
+	`__REDIRECT
+ (
+mko°emps
+, (*
+__ãm∂©e
+, 
+__suffixÀn
+,
+
+698 
+__Êags
+), 
+mko°emps64
+)
+
+699 
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+701 
+	#mko°emps
+ 
+mko°emps64
+
+
+	)
+
+704 #ifde‡
+__USE_LARGEFILE64
+
+
+705 
+	$mko°emps64
+ (*
+__ãm∂©e
+, 
+__suffixÀn
+, 
+__Êags
+)
+
+706 
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+711 
+__BEGIN_NAMESPACE_STD
+
+
+716 
+	$sy°em
+ (c⁄° *
+__comm™d
+Ë
+__wur
+;
+
+717 
+__END_NAMESPACE_STD
+
+
+720 #ifdef 
+__USE_GNU
+
+
+723 *
+	$ˇn⁄iˇlize_fûe_«me
+ (c⁄° *
+__«me
+)
+
+724 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+727 #i‡
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_XOPEN_EXTENDED
+
+
+733 *
+	$ªÆ∑th
+ (c⁄° *
+__ª°ri˘
+ 
+__«me
+,
+
+734 *
+__ª°ri˘
+ 
+__ªsﬁved
+Ë
+__THROW
+ 
+__wur
+;
+
+739 #i‚de‡
+__COMPAR_FN_T
+
+
+740 
+	#__COMPAR_FN_T
+
+
+	)
+
+741 (*
+	t__com∑r_‚_t
+) (const *, const *);
+
+743 #ifdef 
+__USE_GNU
+
+
+744 
+__com∑r_‚_t
+ 
+	tcom∑ris⁄_‚_t
+;
+
+747 #ifde‡
+__USE_GNU
+
+
+748 (*
+	t__com∑r_d_‚_t
+) (const *, const *, *);
+
+751 
+__BEGIN_NAMESPACE_STD
+
+
+754 *
+	$b£¨ch
+ (c⁄° *
+__key
+, c⁄° *
+__ba£
+,
+
+755 
+size_t
+ 
+__nmemb
+, size_à
+__size
+, 
+__com∑r_‚_t
+ 
+__com∑r
+)
+
+756 
+	`__n⁄nuŒ
+ ((1, 2, 5)Ë
+__wur
+;
+
+758 #ifde‡
+__USE_EXTERN_INLINES
+
+
+759 
+	~<bôs/°dlib-b£¨ch.h
+>
+
+764 
+	$qs‹t
+ (*
+__ba£
+, 
+size_t
+ 
+__nmemb
+, size_à
+__size
+,
+
+765 
+__com∑r_‚_t
+ 
+__com∑r
+Ë
+	`__n⁄nuŒ
+ ((1, 4));
+
+766 #ifde‡
+__USE_GNU
+
+
+767 
+	$qs‹t_r
+ (*
+__ba£
+, 
+size_t
+ 
+__nmemb
+, size_à
+__size
+,
+
+768 
+__com∑r_d_‚_t
+ 
+__com∑r
+, *
+__¨g
+)
+
+769 
+	`__n⁄nuŒ
+ ((1, 4));
+
+774 
+	$abs
+ (
+__x
+Ë
+__THROW
+ 
+	`__©åibuã__
+ ((
+__c⁄°__
+)Ë
+__wur
+;
+
+775 
+	$œbs
+ (
+__x
+Ë
+__THROW
+ 
+	`__©åibuã__
+ ((
+__c⁄°__
+)Ë
+__wur
+;
+
+776 
+__END_NAMESPACE_STD
+
+
+778 #ifde‡
+__USE_ISOC99
+
+
+779 
+__exãnsi⁄__
+ 
+	$Œabs
+ (
+__x
+)
+
+780 
+__THROW
+ 
+	`__©åibuã__
+ ((
+__c⁄°__
+)Ë
+__wur
+;
+
+784 
+__BEGIN_NAMESPACE_STD
+
+
+788 
+div_t
+ 
+	$div
+ (
+__numî
+, 
+__díom
+)
+
+789 
+__THROW
+ 
+	`__©åibuã__
+ ((
+__c⁄°__
+)Ë
+__wur
+;
+
+790 
+ldiv_t
+ 
+	$ldiv
+ (
+__numî
+, 
+__díom
+)
+
+791 
+__THROW
+ 
+	`__©åibuã__
+ ((
+__c⁄°__
+)Ë
+__wur
+;
+
+792 
+__END_NAMESPACE_STD
+
+
+794 #ifde‡
+__USE_ISOC99
+
+
+795 
+__BEGIN_NAMESPACE_C99
+
+
+796 
+__exãnsi⁄__
+ 
+Œdiv_t
+ 
+	$Œdiv
+ (
+__numî
+,
+
+797 
+__díom
+)
+
+798 
+__THROW
+ 
+	`__©åibuã__
+ ((
+__c⁄°__
+)Ë
+__wur
+;
+
+799 
+__END_NAMESPACE_C99
+
+
+803 #i‡(
+deföed
+ 
+__USE_XOPEN_EXTENDED
+ && !deföed 
+__USE_XOPEN2K8
+) \
+
+804 || 
+deföed
+ 
+__USE_MISC
+
+
+811 *
+	$ecvt
+ (
+__vÆue
+, 
+__ndigô
+, *
+__ª°ri˘
+ 
+__de˝t
+,
+
+812 *
+__ª°ri˘
+ 
+__sign
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((3, 4)Ë
+__wur
+;
+
+817 *
+	$fcvt
+ (
+__vÆue
+, 
+__ndigô
+, *
+__ª°ri˘
+ 
+__de˝t
+,
+
+818 *
+__ª°ri˘
+ 
+__sign
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((3, 4)Ë
+__wur
+;
+
+823 *
+	$gcvt
+ (
+__vÆue
+, 
+__ndigô
+, *
+__buf
+)
+
+824 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((3)Ë
+__wur
+;
+
+827 #ifde‡
+__USE_MISC
+
+
+829 *
+	$qecvt
+ (
+__vÆue
+, 
+__ndigô
+,
+
+830 *
+__ª°ri˘
+ 
+__de˝t
+, *__ª°ri˘ 
+__sign
+)
+
+831 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((3, 4)Ë
+__wur
+;
+
+832 *
+	$qfcvt
+ (
+__vÆue
+, 
+__ndigô
+,
+
+833 *
+__ª°ri˘
+ 
+__de˝t
+, *__ª°ri˘ 
+__sign
+)
+
+834 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((3, 4)Ë
+__wur
+;
+
+835 *
+	$qgcvt
+ (
+__vÆue
+, 
+__ndigô
+, *
+__buf
+)
+
+836 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((3)Ë
+__wur
+;
+
+841 
+	$ecvt_r
+ (
+__vÆue
+, 
+__ndigô
+, *
+__ª°ri˘
+ 
+__de˝t
+,
+
+842 *
+__ª°ri˘
+ 
+__sign
+, *__ª°ri˘ 
+__buf
+,
+
+843 
+size_t
+ 
+__Àn
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((3, 4, 5));
+
+844 
+	$fcvt_r
+ (
+__vÆue
+, 
+__ndigô
+, *
+__ª°ri˘
+ 
+__de˝t
+,
+
+845 *
+__ª°ri˘
+ 
+__sign
+, *__ª°ri˘ 
+__buf
+,
+
+846 
+size_t
+ 
+__Àn
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((3, 4, 5));
+
+848 
+	$qecvt_r
+ (
+__vÆue
+, 
+__ndigô
+,
+
+849 *
+__ª°ri˘
+ 
+__de˝t
+, *__ª°ri˘ 
+__sign
+,
+
+850 *
+__ª°ri˘
+ 
+__buf
+, 
+size_t
+ 
+__Àn
+)
+
+851 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((3, 4, 5));
+
+852 
+	$qfcvt_r
+ (
+__vÆue
+, 
+__ndigô
+,
+
+853 *
+__ª°ri˘
+ 
+__de˝t
+, *__ª°ri˘ 
+__sign
+,
+
+854 *
+__ª°ri˘
+ 
+__buf
+, 
+size_t
+ 
+__Àn
+)
+
+855 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((3, 4, 5));
+
+859 
+__BEGIN_NAMESPACE_STD
+
+
+862 
+	$mbÀn
+ (c⁄° *
+__s
+, 
+size_t
+ 
+__n
+Ë
+__THROW
+;
+
+865 
+	$mbtowc
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__pwc
+,
+
+866 c⁄° *
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__n
+Ë
+__THROW
+;
+
+869 
+	$w˘omb
+ (*
+__s
+, 
+wch¨_t
+ 
+__wch¨
+Ë
+__THROW
+;
+
+873 
+size_t
+ 
+	$mb°owcs
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__pwcs
+,
+
+874 c⁄° *
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__n
+Ë
+__THROW
+;
+
+876 
+size_t
+ 
+	$wc°ombs
+ (*
+__ª°ri˘
+ 
+__s
+,
+
+877 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__pwcs
+, 
+size_t
+ 
+__n
+)
+
+878 
+__THROW
+;
+
+879 
+__END_NAMESPACE_STD
+
+
+882 #ifde‡
+__USE_MISC
+
+
+887 
+	$Ωm©ch
+ (c⁄° *
+__ª•⁄£
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1)Ë
+__wur
+;
+
+891 #i‡
+deföed
+ 
+__USE_XOPEN_EXTENDED
+ || deföed 
+__USE_XOPEN2K8
+
+
+898 
+	$gësub›t
+ (**
+__ª°ri˘
+ 
+__›ti⁄p
+,
+
+899 *c⁄° *
+__ª°ri˘
+ 
+__tokís
+,
+
+900 **
+__ª°ri˘
+ 
+__vÆuï
+)
+
+901 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2, 3)Ë
+__wur
+;
+
+905 #ifde‡
+__USE_XOPEN
+
+
+907 
+	$£tkey
+ (c⁄° *
+__key
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+913 #ifde‡
+__USE_XOPEN2KXSI
+
+
+915 
+	$posix_›í±
+ (
+__oÊag
+Ë
+__wur
+;
+
+918 #ifde‡
+__USE_XOPEN
+
+
+923 
+	$gø¡±
+ (
+__fd
+Ë
+__THROW
+;
+
+927 
+	$u∆ock±
+ (
+__fd
+Ë
+__THROW
+;
+
+932 *
+	$±¢ame
+ (
+__fd
+Ë
+__THROW
+ 
+__wur
+;
+
+935 #ifde‡
+__USE_GNU
+
+
+939 
+	$±¢ame_r
+ (
+__fd
+, *
+__buf
+, 
+size_t
+ 
+__buÊí
+)
+
+940 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2));
+
+943 
+	`gë±
+ ();
+
+946 #ifde‡
+__USE_MISC
+
+
+950 
+	$gëlﬂdavg
+ (
+__lﬂdavg
+[], 
+__√Àm
+)
+
+951 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1));
+
+954 
+	~<bôs/°dlib-Êﬂt.h
+>
+
+957 #i‡
+__USE_FORTIFY_LEVEL
+ > 0 && 
+deföed
+ 
+__f‹tify_fun˘i⁄
+
+
+958 
+	~<bôs/°dlib.h
+>
+
+960 #ifde‡
+__LDBL_COMPAT
+
+
+961 
+	~<bôs/°dlib-ldbl.h
+>
+
+965 #unde‡
+__√ed_mÆloc_™d_ˇŒoc
+
+
+967 
+__END_DECLS
+
+
+	@/usr/include/sys/cdefs.h
+
+18 #i‚def 
+_SYS_CDEFS_H
+
+
+19 
+	#_SYS_CDEFS_H
+ 1
+
+	)
+
+22 #i‚de‡
+_FEATURES_H
+
+
+23 
+	~<„©uªs.h
+>
+
+29 #i‡
+deföed
+ 
+__GNUC__
+ && !deföed 
+__STDC__
+
+
+34 #unde‡
+__P
+
+
+35 #unde‡
+__PMT
+
+
+37 #ifde‡
+__GNUC__
+
+
+41 #i‡
+__GNUC_PREREQ
+ (4, 6Ë&& !
+deföed
+ 
+_LIBC
+
+
+42 
+	#__LEAF
+ , 
+__Àaf__
+
+
+	)
+
+43 
+	#__LEAF_ATTR
+ 
+	`__©åibuã__
+ ((
+__Àaf__
+))
+
+	)
+
+45 
+	#__LEAF
+
+
+	)
+
+46 
+	#__LEAF_ATTR
+
+
+	)
+
+54 #i‡!
+deföed
+ 
+__˝lu•lus
+ && 
+__GNUC_PREREQ
+ (3, 3)
+
+55 
+	#__THROW
+ 
+	`__©åibuã__
+ ((
+__nŸhrow__
+ 
+__LEAF
+))
+
+	)
+
+56 
+	#__THROWNL
+ 
+	`__©åibuã__
+ ((
+__nŸhrow__
+))
+
+	)
+
+57 
+	#__NTH
+(
+f˘
+Ë
+	`__©åibuã__
+ ((
+__nŸhrow__
+ 
+__LEAF
+)Ë
+	)
+fct
+
+59 #i‡
+deföed
+ 
+__˝lu•lus
+ && 
+__GNUC_PREREQ
+ (2,8)
+
+60 
+	#__THROW
+ 
+	`throw
+ ()
+
+	)
+
+61 
+	#__THROWNL
+ 
+	`throw
+ ()
+
+	)
+
+62 
+	#__NTH
+(
+f˘
+Ë
+__LEAF_ATTR
+ f˘ 
+	`throw
+ ()
+
+	)
+
+64 
+	#__THROW
+
+
+	)
+
+65 
+	#__THROWNL
+
+
+	)
+
+66 
+	#__NTH
+(
+f˘
+Ë
+	)
+fct
+
+72 
+	#__ölöe
+
+
+	)
+
+74 
+	#__THROW
+
+
+	)
+
+75 
+	#__THROWNL
+
+
+	)
+
+76 
+	#__NTH
+(
+f˘
+Ë
+	)
+fct
+
+82 
+	#__P
+(
+¨gs
+Ë
+	)
+args
+
+83 
+	#__PMT
+(
+¨gs
+Ë
+	)
+args
+
+88 
+	#__CONCAT
+(
+x
+,
+y
+Ëx ## 
+	)
+y
+
+89 
+	#__STRING
+(
+x
+Ë#x
+
+	)
+
+92 
+	#__±r_t
+ *
+
+	)
+
+93 
+	#__l⁄g_doubÀ_t
+ 
+
+	)
+
+97 #ifdef 
+__˝lu•lus
+
+
+98 
+	#__BEGIN_DECLS
+ "C" {
+
+	)
+
+99 
+	#__END_DECLS
+ }
+
+	)
+
+101 
+	#__BEGIN_DECLS
+
+
+	)
+
+102 
+	#__END_DECLS
+
+
+	)
+
+111 #i‡
+deföed
+ 
+__˝lu•lus
+ && deföed 
+_GLIBCPP_USE_NAMESPACES
+
+
+112 
+	#__BEGIN_NAMESPACE_STD
+ 
+«me•a˚
+ 
+°d
+ {
+
+	)
+
+113 
+	#__END_NAMESPACE_STD
+ }
+
+	)
+
+114 
+	#__USING_NAMESPACE_STD
+(
+«me
+Ë
+usög
+ 
+°d
+::«me;
+
+	)
+
+115 
+	#__BEGIN_NAMESPACE_C99
+ 
+«me•a˚
+ 
+__c99
+ {
+
+	)
+
+116 
+	#__END_NAMESPACE_C99
+ }
+
+	)
+
+117 
+	#__USING_NAMESPACE_C99
+(
+«me
+Ë
+usög
+ 
+__c99
+::«me;
+
+	)
+
+122 
+	#__BEGIN_NAMESPACE_STD
+
+
+	)
+
+123 
+	#__END_NAMESPACE_STD
+
+
+	)
+
+124 
+	#__USING_NAMESPACE_STD
+(
+«me
+)
+
+	)
+
+125 
+	#__BEGIN_NAMESPACE_C99
+
+
+	)
+
+126 
+	#__END_NAMESPACE_C99
+
+
+	)
+
+127 
+	#__USING_NAMESPACE_C99
+(
+«me
+)
+
+	)
+
+132 
+	#__bos
+(
+±r
+Ë
+	`__buûtö_obje˘_size
+ (±r, 
+__USE_FORTIFY_LEVEL
+ > 1)
+
+	)
+
+133 
+	#__bos0
+(
+±r
+Ë
+	`__buûtö_obje˘_size
+ (±r, 0)
+
+	)
+
+135 #i‡
+__GNUC_PREREQ
+ (4,3)
+
+136 
+	#__w¨nde˛
+(
+«me
+, 
+msg
+) \
+
+137 
+	`«me
+ (Ë
+	`__©åibuã__
+((
+	`__w¨nög__
+ (
+msg
+)))
+
+	)
+
+138 
+	#__w¨«âr
+(
+msg
+Ë
+	`__©åibuã__
+((
+	`__w¨nög__
+ (msg)))
+
+	)
+
+139 
+	#__îr‹de˛
+(
+«me
+, 
+msg
+) \
+
+140 
+	`«me
+ (Ë
+	`__©åibuã__
+((
+	`__îr‹__
+ (
+msg
+)))
+
+	)
+
+142 
+	#__w¨nde˛
+(
+«me
+, 
+msg
+Ë
+	`«me
+ ()
+
+	)
+
+143 
+	#__w¨«âr
+(
+msg
+)
+
+	)
+
+144 
+	#__îr‹de˛
+(
+«me
+, 
+msg
+Ë
+	`«me
+ ()
+
+	)
+
+148 #i‡
+__GNUC_PREREQ
+ (2,97)
+
+150 
+	#__Êex¨r
+ []
+
+	)
+
+152 #ifde‡
+__GNUC__
+
+
+153 
+	#__Êex¨r
+ [0]
+
+	)
+
+155 #i‡
+deföed
+ 
+__STDC_VERSION__
+ && __STDC_VERSION__ >= 199901L
+
+156 
+	#__Êex¨r
+ []
+
+	)
+
+159 
+	#__Êex¨r
+ [1]
+
+	)
+
+175 #i‡
+deföed
+ 
+__GNUC__
+ && __GNUC__ >= 2
+
+177 
+	#__REDIRECT
+(
+«me
+, 
+¥Ÿo
+, 
+Æüs
+Ë«mê¥Ÿÿ
+	`__asm__
+ (
+	`__ASMNAME
+ (#Æüs))
+
+	)
+
+178 #ifde‡
+__˝lu•lus
+
+
+179 
+	#__REDIRECT_NTH
+(
+«me
+, 
+¥Ÿo
+, 
+Æüs
+) \
+
+180 
+«me
+ 
+¥Ÿo
+ 
+__THROW
+ 
+	`__asm__
+ (
+	`__ASMNAME
+ (#Æüs))
+
+	)
+
+181 
+	#__REDIRECT_NTHNL
+(
+«me
+, 
+¥Ÿo
+, 
+Æüs
+) \
+
+182 
+«me
+ 
+¥Ÿo
+ 
+__THROWNL
+ 
+	`__asm__
+ (
+	`__ASMNAME
+ (#Æüs))
+
+	)
+
+184 
+	#__REDIRECT_NTH
+(
+«me
+, 
+¥Ÿo
+, 
+Æüs
+) \
+
+185 
+«me
+ 
+¥Ÿo
+ 
+	`__asm__
+ (
+	`__ASMNAME
+ (#Æüs)Ë
+__THROW
+
+
+	)
+
+186 
+	#__REDIRECT_NTHNL
+(
+«me
+, 
+¥Ÿo
+, 
+Æüs
+) \
+
+187 
+«me
+ 
+¥Ÿo
+ 
+	`__asm__
+ (
+	`__ASMNAME
+ (#Æüs)Ë
+__THROWNL
+
+
+	)
+
+189 
+	#__ASMNAME
+(
+˙ame
+Ë
+	`__ASMNAME2
+ (
+__USER_LABEL_PREFIX__
+, c«me)
+
+	)
+
+190 
+	#__ASMNAME2
+(
+¥efix
+, 
+˙ame
+Ë
+	`__STRING
+ (¥efixË
+	)
+cname
+
+203 #i‡!
+deföed
+ 
+__GNUC__
+ || __GNUC__ < 2
+
+204 
+	#__©åibuã__
+(
+xyz
+Ë
+
+	)
+
+210 #i‡
+__GNUC_PREREQ
+ (2,96)
+
+211 
+	#__©åibuã_mÆloc__
+ 
+	`__©åibuã__
+ ((
+__mÆloc__
+))
+
+	)
+
+213 
+	#__©åibuã_mÆloc__
+
+
+	)
+
+218 #i‡
+__GNUC_PREREQ
+ (4, 3)
+
+219 
+	#__©åibuã_Æloc_size__
+(
+∑øms
+) \
+
+220 
+	`__©åibuã__
+ ((
+__Æloc_size__
+ 
+∑øms
+))
+
+	)
+
+222 
+	#__©åibuã_Æloc_size__
+(
+∑øms
+Ë
+
+	)
+
+228 #i‡
+__GNUC_PREREQ
+ (2,96)
+
+229 
+	#__©åibuã_puª__
+ 
+	`__©åibuã__
+ ((
+__puª__
+))
+
+	)
+
+231 
+	#__©åibuã_puª__
+
+
+	)
+
+235 #i‡
+__GNUC_PREREQ
+ (2,5)
+
+236 
+	#__©åibuã_c⁄°__
+ 
+	`__©åibuã__
+ ((
+__c⁄°__
+))
+
+	)
+
+238 
+	#__©åibuã_c⁄°__
+
+
+	)
+
+244 #i‡
+__GNUC_PREREQ
+ (3,1)
+
+245 
+	#__©åibuã_u£d__
+ 
+	`__©åibuã__
+ ((
+__u£d__
+))
+
+	)
+
+246 
+	#__©åibuã_noölöe__
+ 
+	`__©åibuã__
+ ((
+__noölöe__
+))
+
+	)
+
+248 
+	#__©åibuã_u£d__
+ 
+	`__©åibuã__
+ ((
+__unu£d__
+))
+
+	)
+
+249 
+	#__©åibuã_noölöe__
+
+
+	)
+
+253 #i‡
+__GNUC_PREREQ
+ (3,2)
+
+254 
+	#__©åibuã_dïªˇãd__
+ 
+	`__©åibuã__
+ ((
+__dïªˇãd__
+))
+
+	)
+
+256 
+	#__©åibuã_dïªˇãd__
+
+
+	)
+
+265 #i‡
+__GNUC_PREREQ
+ (2,8)
+
+266 
+	#__©åibuã_f‹m©_¨g__
+(
+x
+Ë
+	`__©åibuã__
+ ((
+	`__f‹m©_¨g__
+ (x)))
+
+	)
+
+268 
+	#__©åibuã_f‹m©_¨g__
+(
+x
+Ë
+
+	)
+
+275 #i‡
+__GNUC_PREREQ
+ (2,97)
+
+276 
+	#__©åibuã_f‹m©_°rfm⁄__
+(
+a
+,
+b
+) \
+
+277 
+	`__©åibuã__
+ ((
+	`__f‹m©__
+ (
+__°rfm⁄__
+, 
+a
+, 
+b
+)))
+
+	)
+
+279 
+	#__©åibuã_f‹m©_°rfm⁄__
+(
+a
+,
+b
+Ë
+
+	)
+
+284 #i‡
+__GNUC_PREREQ
+ (3,3)
+
+285 
+	#__n⁄nuŒ
+(
+∑øms
+Ë
+	`__©åibuã__
+ ((
+__n⁄nuŒ__
+Ö¨ams))
+
+	)
+
+287 
+	#__n⁄nuŒ
+(
+∑øms
+)
+
+	)
+
+292 #i‡
+__GNUC_PREREQ
+ (3,4)
+
+293 
+	#__©åibuã_w¨n_unu£d_ªsu…__
+ \
+
+294 
+	`__©åibuã__
+ ((
+__w¨n_unu£d_ªsu…__
+))
+
+	)
+
+295 #i‡
+__USE_FORTIFY_LEVEL
+ > 0
+
+296 
+	#__wur
+ 
+__©åibuã_w¨n_unu£d_ªsu…__
+
+
+	)
+
+299 
+	#__©åibuã_w¨n_unu£d_ªsu…__
+
+
+	)
+
+301 #i‚de‡
+__wur
+
+
+302 
+	#__wur
+
+
+	)
+
+306 #i‡
+__GNUC_PREREQ
+ (3,2)
+
+307 
+	#__Æways_ölöe
+ 
+__ölöe
+ 
+	`__©åibuã__
+ ((
+__Æways_ölöe__
+))
+
+	)
+
+309 
+	#__Æways_ölöe
+ 
+__ölöe
+
+
+	)
+
+314 #i‡
+__GNUC_PREREQ
+ (4,3)
+
+315 
+	#__©åibuã_¨tificül__
+ 
+	`__©åibuã__
+ ((
+__¨tificül__
+))
+
+	)
+
+317 
+	#__©åibuã_¨tificül__
+
+
+	)
+
+329 #i‡(!
+deföed
+ 
+__˝lu•lus
+ || 
+__GNUC_PREREQ
+ (4,3) \
+
+330 || (
+deföed
+ 
+__˛™g__
+ && (deföed 
+__GNUC_STDC_INLINE__
+ \
+
+331 || 
+deföed
+ 
+__GNUC_GNU_INLINE__
+)))
+
+332 #i‡
+deföed
+ 
+__GNUC_STDC_INLINE__
+ || deföed 
+__˝lu•lus
+
+
+333 
+	#__exã∫_ölöe
+ 
+__ölöe
+ 
+	`__©åibuã__
+ ((
+__gnu_ölöe__
+))
+
+	)
+
+334 
+	#__exã∫_Æways_ölöe
+ \
+
+335 
+__Æways_ölöe
+ 
+	`__©åibuã__
+ ((
+__gnu_ölöe__
+))
+
+	)
+
+337 
+	#__exã∫_ölöe
+ 
+__ölöe
+
+
+	)
+
+338 
+	#__exã∫_Æways_ölöe
+ 
+__Æways_ölöe
+
+
+	)
+
+342 #ifde‡
+__exã∫_Æways_ölöe
+
+
+343 
+	#__f‹tify_fun˘i⁄
+ 
+__exã∫_Æways_ölöe
+ 
+__©åibuã_¨tificül__
+
+
+	)
+
+348 #i‡
+__GNUC_PREREQ
+ (4,3)
+
+349 
+	#__va_¨g_∑ck
+(Ë
+	`__buûtö_va_¨g_∑ck
+ ()
+
+	)
+
+350 
+	#__va_¨g_∑ck_Àn
+(Ë
+	`__buûtö_va_¨g_∑ck_Àn
+ ()
+
+	)
+
+357 #i‡!
+__GNUC_PREREQ
+ (2,8)
+
+358 
+	#__exãnsi⁄__
+
+
+	)
+
+362 #i‡!
+__GNUC_PREREQ
+ (2,92)
+
+363 
+	#__ª°ri˘
+
+
+	)
+
+369 #i‡
+__GNUC_PREREQ
+ (3,1Ë&& !
+deföed
+ 
+__GNUG__
+
+
+370 
+	#__ª°ri˘_¨r
+ 
+__ª°ri˘
+
+
+	)
+
+372 #ifde‡
+__GNUC__
+
+
+373 
+	#__ª°ri˘_¨r
+
+
+	)
+
+375 #i‡
+deföed
+ 
+__STDC_VERSION__
+ && __STDC_VERSION__ >= 199901L
+
+376 
+	#__ª°ri˘_¨r
+ 
+ª°ri˘
+
+
+	)
+
+379 
+	#__ª°ri˘_¨r
+
+
+	)
+
+384 #i‡
+__GNUC__
+ >= 3
+
+385 
+	#__glibc_u∆ikñy
+(
+c⁄d
+Ë
+	`__buûtö_ex≥˘
+ ((c⁄d), 0)
+
+	)
+
+386 
+	#__glibc_likñy
+(
+c⁄d
+Ë
+	`__buûtö_ex≥˘
+ ((c⁄d), 1)
+
+	)
+
+388 
+	#__glibc_u∆ikñy
+(
+c⁄d
+Ë(c⁄d)
+
+	)
+
+389 
+	#__glibc_likñy
+(
+c⁄d
+Ë(c⁄d)
+
+	)
+
+392 #i‡(!
+deföed
+ 
+_N‹ëu∫
+ \
+
+393 && (
+deföed
+ 
+__STDC_VERSION__
+ ? __STDC_VERSION__ : 0) < 201112 \
+
+394 && !
+	$__GNUC_PREREQ
+ (4,7))
+
+395 #i‡
+	`__GNUC_PREREQ
+ (2,8)
+
+396 
+	#_N‹ëu∫
+ 
+	`__©åibuã__
+ ((
+__n‹ëu∫__
+))
+
+	)
+
+398 
+	#_N‹ëu∫
+
+
+	)
+
+402 #i‡(!
+deföed
+ 
+_Sètic_as£π
+ && !deföed 
+__˝lu•lus
+ \
+
+403 && (
+deföed
+ 
+__STDC_VERSION__
+ ? __STDC_VERSION__ : 0) < 201112 \
+
+404 && (!
+	`__GNUC_PREREQ
+ (4, 6Ë|| 
+deföed
+ 
+__STRICT_ANSI__
+))
+
+405 
+	#_Sètic_as£π
+(
+ex¥
+, 
+dügno°ic
+) \
+
+406 (*
+	`__Sètic_as£π_fun˘i⁄
+ ()) \
+
+407 [!! (°ru˘ { 
+__îr‹_if_√g©ive
+: (
+ex¥
+Ë? 2 : -1; })]
+
+	)
+
+410 
+	~<bôs/w‹dsize.h
+>
+
+412 #i‡
+deföed
+ 
+__LONG_DOUBLE_MATH_OPTIONAL
+ && deföed 
+__NO_LONG_DOUBLE_MATH
+
+
+413 
+	#__LDBL_COMPAT
+ 1
+
+	)
+
+414 #ifde‡
+__REDIRECT
+
+
+415 
+	#__LDBL_REDIR1
+(
+«me
+, 
+¥Ÿo
+, 
+Æüs
+Ë
+	`__REDIRECT
+ («me,ÖrŸo,álüs)
+
+	)
+
+416 
+	#__LDBL_REDIR
+(
+«me
+, 
+¥Ÿo
+) \
+
+417 
+	`__LDBL_REDIR1
+ (
+«me
+, 
+¥Ÿo
+, 
+__∆dbl_
+##«me)
+
+	)
+
+418 
+	#__LDBL_REDIR1_NTH
+(
+«me
+, 
+¥Ÿo
+, 
+Æüs
+Ë
+	`__REDIRECT_NTH
+ («me,ÖrŸo,álüs)
+
+	)
+
+419 
+	#__LDBL_REDIR_NTH
+(
+«me
+, 
+¥Ÿo
+) \
+
+420 
+	`__LDBL_REDIR1_NTH
+ (
+«me
+, 
+¥Ÿo
+, 
+__∆dbl_
+##«me)
+
+	)
+
+421 
+	#__LDBL_REDIR1_DECL
+(
+«me
+, 
+Æüs
+) \
+
+422 
+	`__ty≥of
+ (
+«me
+Ë«mê
+	`__asm
+ (
+	`__ASMNAME
+ (#Æüs));
+
+	)
+
+423 
+	#__LDBL_REDIR_DECL
+(
+«me
+) \
+
+424 
+	`__ty≥of
+ (
+«me
+Ë«mê
+	`__asm
+ (
+	`__ASMNAME
+ ("__∆dbl_" #«me));
+
+	)
+
+425 
+	#__REDIRECT_LDBL
+(
+«me
+, 
+¥Ÿo
+, 
+Æüs
+) \
+
+426 
+	`__LDBL_REDIR1
+ (
+«me
+, 
+¥Ÿo
+, 
+__∆dbl_
+##
+Æüs
+)
+
+	)
+
+427 
+	#__REDIRECT_NTH_LDBL
+(
+«me
+, 
+¥Ÿo
+, 
+Æüs
+) \
+
+428 
+	`__LDBL_REDIR1_NTH
+ (
+«me
+, 
+¥Ÿo
+, 
+__∆dbl_
+##
+Æüs
+)
+
+	)
+
+431 #i‡!
+deföed
+ 
+__LDBL_COMPAT
+ || !deföed 
+__REDIRECT
+
+
+432 
+	#__LDBL_REDIR1
+(
+«me
+, 
+¥Ÿo
+, 
+Æüs
+Ë«mê
+	)
+proto
+
+433 
+	#__LDBL_REDIR
+(
+«me
+, 
+¥Ÿo
+Ë«mê
+	)
+proto
+
+434 
+	#__LDBL_REDIR1_NTH
+(
+«me
+, 
+¥Ÿo
+, 
+Æüs
+Ë«mê¥Ÿÿ
+__THROW
+
+
+	)
+
+435 
+	#__LDBL_REDIR_NTH
+(
+«me
+, 
+¥Ÿo
+Ë«mê¥Ÿÿ
+__THROW
+
+
+	)
+
+436 
+	#__LDBL_REDIR_DECL
+(
+«me
+)
+
+	)
+
+437 #ifde‡
+__REDIRECT
+
+
+438 
+	#__REDIRECT_LDBL
+(
+«me
+, 
+¥Ÿo
+, 
+Æüs
+Ë
+	`__REDIRECT
+ («me,ÖrŸo,álüs)
+
+	)
+
+439 
+	#__REDIRECT_NTH_LDBL
+(
+«me
+, 
+¥Ÿo
+, 
+Æüs
+) \
+
+440 
+	`__REDIRECT_NTH
+ (
+«me
+, 
+¥Ÿo
+, 
+Æüs
+)
+
+	)
+
+	@/usr/include/alloca.h
+
+18 #i‚def 
+_ALLOCA_H
+
+
+19 
+	#_ALLOCA_H
+ 1
+
+	)
+
+21 
+	~<„©uªs.h
+>
+
+23 
+	#__√ed_size_t
+
+
+	)
+
+24 
+	~<°ddef.h
+>
+
+26 
+	g__BEGIN_DECLS
+
+
+29 #unde‡
+Æloˇ
+
+
+32 *
+	$Æloˇ
+ (
+size_t
+ 
+__size
+Ë
+__THROW
+;
+
+34 #ifdef 
+__GNUC__
+
+
+35 
+	#Æloˇ
+(
+size
+Ë
+	`__buûtö_Æloˇ
+ (size)
+
+	)
+
+38 
+__END_DECLS
+
+
+	@/usr/include/asm/errno.h
+
+1 
+	~<asm-gíîic/î∫o.h
+>
+
+	@/usr/include/bits/byteswap.h
+
+19 #i‡!
+deföed
+ 
+_BYTESWAP_H
+ && !deföed 
+_NETINET_IN_H
+ && !deföed 
+_ENDIAN_H
+
+
+23 #i‚de‡
+_BITS_BYTESWAP_H
+
+
+24 
+	#_BITS_BYTESWAP_H
+ 1
+
+	)
+
+26 
+	~<„©uªs.h
+>
+
+27 
+	~<bôs/ty≥s.h
+>
+
+28 
+	~<bôs/w‹dsize.h
+>
+
+31 
+	#__bsw≠_c⁄°™t_16
+(
+x
+) \
+
+32 ((Ë((((
+x
+Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))
+
+	)
+
+35 
+	~<bôs/byãsw≠-16.h
+>
+
+38 
+	#__bsw≠_c⁄°™t_32
+(
+x
+) \
+
+39 ((((
+x
+) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \
+
+40 (((
+x
+Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))
+
+	)
+
+42 #ifde‡
+__GNUC__
+
+
+43 #i‡
+__GNUC_PREREQ
+ (4, 3)
+
+44 
+__ölöe
+ 
+
+45 
+	$__bsw≠_32
+ (
+__bsx
+)
+
+47  
+	`__buûtö_bsw≠32
+ (
+__bsx
+);
+
+48 
+	}
+}
+
+49 #ñi‡
+__GNUC__
+ >= 2
+
+50 #i‡
+__WORDSIZE
+ =64 || (
+deföed
+ 
+__i486__
+ || deföed 
+__≥¡ium__
+ \
+
+51 || 
+deföed
+ 
+	g__≥¡ium¥o__
+ || deföed 
+	g__≥¡ium4__
+ \
+
+52 || 
+deföed
+ 
+	g__k8__
+ || deföed 
+	g__©hl⁄__
+ \
+
+53 || 
+deföed
+ 
+	g__k6__
+ || deföed 
+	g__noc⁄a__
+ \
+
+54 || 
+deföed
+ 
+	g__c‹e2__
+ || deföed 
+	g__geode__
+ \
+
+55 || 
+deföed
+ 
+	g__amdÁm10__
+)
+
+58 
+	#__bsw≠_32
+(
+x
+) \
+
+59 (
+__exãnsi⁄__
+ \
+
+60 ({ 
+__v
+, 
+__x
+ = (
+x
+); \
+
+61 i‡(
+	`__buûtö_c⁄°™t_p
+ (
+__x
+)) \
+
+62 
+__v
+ = 
+	`__bsw≠_c⁄°™t_32
+ (
+__x
+); \
+
+64 
+	`__asm__
+ ("bsw≠ %0" : "Ù" (
+__v
+Ë: "0" (
+__x
+)); \
+
+65 
+__v
+; }))
+
+	)
+
+67 
+	#__bsw≠_32
+(
+x
+) \
+
+68 (
+__exãnsi⁄__
+ \
+
+69 ({ 
+__v
+, 
+__x
+ = (
+x
+); \
+
+70 i‡(
+	`__buûtö_c⁄°™t_p
+ (
+__x
+)) \
+
+71 
+__v
+ = 
+	`__bsw≠_c⁄°™t_32
+ (
+__x
+); \
+
+73 
+	`__asm__
+ ("rorw $8, %w0;" \
+
+76 : "Ù" (
+__v
+) \
+
+77 : "0" (
+__x
+) \
+
+79 
+__v
+; }))
+
+	)
+
+82 
+	#__bsw≠_32
+(
+x
+) \
+
+83 (
+__exãnsi⁄__
+ \
+
+84 ({ 
+__x
+ = (
+x
+); 
+	`__bsw≠_c⁄°™t_32
+ (__x); }))
+
+	)
+
+87 
+__ölöe
+ 
+
+88 
+	$__bsw≠_32
+ (
+__bsx
+)
+
+90  
+	`__bsw≠_c⁄°™t_32
+ (
+__bsx
+);
+
+91 
+	}
+}
+
+95 #i‡
+__GNUC_PREREQ
+ (2, 0)
+
+97 
+	#__bsw≠_c⁄°™t_64
+(
+x
+) \
+
+98 (
+	`__exãnsi⁄__
+ ((((
+x
+) & 0xff00000000000000ull) >> 56) \
+
+99 | (((
+x
+) & 0x00ff000000000000ull) >> 40) \
+
+100 | (((
+x
+) & 0x0000ff0000000000ull) >> 24) \
+
+101 | (((
+x
+) & 0x000000ff00000000ull) >> 8) \
+
+102 | (((
+x
+) & 0x00000000ff000000ull) << 8) \
+
+103 | (((
+x
+) & 0x0000000000ff0000ull) << 24) \
+
+104 | (((
+x
+) & 0x000000000000ff00ull) << 40) \
+
+105 | (((
+x
+Ë& 0x00000000000000ffuŒË<< 56)))
+
+	)
+
+107 #i‡
+__GNUC_PREREQ
+ (4, 3)
+
+108 
+__ölöe
+ 
+__uöt64_t
+
+
+109 
+	$__bsw≠_64
+ (
+__uöt64_t
+ 
+__bsx
+)
+
+111  
+	`__buûtö_bsw≠64
+ (
+__bsx
+);
+
+112 
+	}
+}
+
+113 #ñi‡
+__WORDSIZE
+ == 64
+
+114 
+	#__bsw≠_64
+(
+x
+) \
+
+115 (
+__exãnsi⁄__
+ \
+
+116 ({ 
+__uöt64_t
+ 
+__v
+, 
+__x
+ = (
+x
+); \
+
+117 i‡(
+	`__buûtö_c⁄°™t_p
+ (
+__x
+)) \
+
+118 
+__v
+ = 
+	`__bsw≠_c⁄°™t_64
+ (
+__x
+); \
+
+120 
+	`__asm__
+ ("bsw≠ %q0" : "Ù" (
+__v
+Ë: "0" (
+__x
+)); \
+
+121 
+__v
+; }))
+
+	)
+
+123 
+	#__bsw≠_64
+(
+x
+) \
+
+124 (
+__exãnsi⁄__
+ \
+
+125 ({ uni⁄ { 
+__exãnsi⁄__
+ 
+__uöt64_t
+ 
+__Œ
+; \
+
+126 
+__l
+[2]; } 
+__w
+, 
+__r
+; \
+
+127 i‡(
+	`__buûtö_c⁄°™t_p
+ (
+x
+)) \
+
+128 
+__r
+.
+__Œ
+ = 
+	`__bsw≠_c⁄°™t_64
+ (
+x
+); \
+
+131 
+__w
+.
+__Œ
+ = (
+x
+); \
+
+132 
+__r
+.
+__l
+[0] = 
+	`__bsw≠_32
+ (
+__w
+.__l[1]); \
+
+133 
+__r
+.
+__l
+[1] = 
+	`__bsw≠_32
+ (
+__w
+.__l[0]); \
+
+135 
+__r
+.
+__Œ
+; }))
+
+	)
+
+138 
+	#__bsw≠_c⁄°™t_64
+(
+x
+) \
+
+139 ((((
+x
+) & 0xff00000000000000ull) >> 56) \
+
+140 | (((
+x
+) & 0x00ff000000000000ull) >> 40) \
+
+141 | (((
+x
+) & 0x0000ff0000000000ull) >> 24) \
+
+142 | (((
+x
+) & 0x000000ff00000000ull) >> 8) \
+
+143 | (((
+x
+) & 0x00000000ff000000ull) << 8) \
+
+144 | (((
+x
+) & 0x0000000000ff0000ull) << 24) \
+
+145 | (((
+x
+) & 0x000000000000ff00ull) << 40) \
+
+146 | (((
+x
+Ë& 0x00000000000000ffuŒË<< 56))
+
+	)
+
+148 
+__ölöe
+ 
+__uöt64_t
+
+
+149 
+	$__bsw≠_64
+ (
+__uöt64_t
+ 
+__bsx
+)
+
+151  
+	`__bsw≠_c⁄°™t_64
+ (
+__bsx
+);
+
+152 
+	}
+}
+
+	@/usr/include/bits/endian.h
+
+3 #i‚de‡
+_ENDIAN_H
+
+
+7 
+	#__BYTE_ORDER
+ 
+__LITTLE_ENDIAN
+
+
+	)
+
+	@/usr/include/bits/stdlib-bsearch.h
+
+19 
+__exã∫_ölöe
+ *
+
+20 
+	$b£¨ch
+ (c⁄° *
+__key
+, c⁄° *
+__ba£
+, 
+size_t
+ 
+__nmemb
+, size_à
+__size
+,
+
+21 
+__com∑r_‚_t
+ 
+__com∑r
+)
+
+23 
+size_t
+ 
+__l
+, 
+__u
+, 
+__idx
+;
+
+24 c⁄° *
+__p
+;
+
+25 
+__com∑ris⁄
+;
+
+27 
+__l
+ = 0;
+
+28 
+__u
+ = 
+__nmemb
+;
+
+29 
+__l
+ < 
+__u
+)
+
+31 
+__idx
+ = (
+__l
+ + 
+__u
+) / 2;
+
+32 
+__p
+ = (*Ë(((c⁄° *Ë
+__ba£
+Ë+ (
+__idx
+ * 
+__size
+));
+
+33 
+__com∑ris⁄
+ = (*
+__com∑r
+Ë(
+__key
+, 
+__p
+);
+
+34 i‡(
+__com∑ris⁄
+ < 0)
+
+35 
+__u
+ = 
+__idx
+;
+
+36 i‡(
+__com∑ris⁄
+ > 0)
+
+37 
+__l
+ = 
+__idx
+ + 1;
+
+39  (*Ë
+__p
+;
+
+42  
+NULL
+;
+
+43 
+	}
+}
+
+	@/usr/include/bits/stdlib-float.h
+
+19 #i‚de‡
+_STDLIB_H
+
+
+23 #ifde‡
+__USE_EXTERN_INLINES
+
+
+24 
+__BEGIN_NAMESPACE_STD
+
+
+25 
+__exã∫_ölöe
+ 
+
+26 
+__NTH
+ (
+	$©of
+ (c⁄° *
+__≈å
+))
+
+28  
+	`°πod
+ (
+__≈å
+, (**Ë
+NULL
+);
+
+29 
+	}
+}
+
+30 
+	g__END_NAMESPACE_STD
+
+
+	@/usr/include/bits/stdlib-ldbl.h
+
+19 #i‚de‡
+_STDLIB_H
+
+
+23 #ifdef 
+__USE_ISOC99
+
+
+24 
+__BEGIN_NAMESPACE_C99
+
+
+25 
+	$__LDBL_REDIR1_DECL
+ (
+°πﬁd
+, 
+°πod
+)
+
+26 
+__END_NAMESPACE_C99
+
+
+29 #ifde‡
+__USE_GNU
+
+
+30 
+	$__LDBL_REDIR1_DECL
+ (
+°πﬁd_l
+, 
+°πod_l
+)
+
+33 #ifde‡
+__USE_MISC
+
+
+34 
+	$__LDBL_REDIR1_DECL
+ (
+qecvt
+, 
+ecvt
+)
+
+35 
+	$__LDBL_REDIR1_DECL
+ (
+qfcvt
+, 
+fcvt
+)
+
+36 
+	$__LDBL_REDIR1_DECL
+ (
+qgcvt
+, 
+gcvt
+)
+
+37 
+	$__LDBL_REDIR1_DECL
+ (
+qecvt_r
+, 
+ecvt_r
+)
+
+38 
+	$__LDBL_REDIR1_DECL
+ (
+qfcvt_r
+, 
+fcvt_r
+)
+
+	@/usr/include/bits/stdlib.h
+
+19 #i‚de‡
+_STDLIB_H
+
+
+23 *
+	$__ªÆ∑th_chk
+ (c⁄° *
+__ª°ri˘
+ 
+__«me
+,
+
+24 *
+__ª°ri˘
+ 
+__ªsﬁved
+,
+
+25 
+size_t
+ 
+__ªsﬁvedÀn
+Ë
+__THROW
+ 
+__wur
+;
+
+26 *
+	`__REDIRECT_NTH
+ (
+__ªÆ∑th_Æüs
+,
+
+27 (c⁄° *
+__ª°ri˘
+ 
+__«me
+,
+
+28 *
+__ª°ri˘
+ 
+__ªsﬁved
+), 
+ªÆ∑th
+Ë
+__wur
+;
+
+29 *
+	`__REDIRECT_NTH
+ (
+__ªÆ∑th_chk_w¨n
+,
+
+30 (c⁄° *
+__ª°ri˘
+ 
+__«me
+,
+
+31 *
+__ª°ri˘
+ 
+__ªsﬁved
+,
+
+32 
+size_t
+ 
+__ªsﬁvedÀn
+), 
+__ªÆ∑th_chk
+Ë
+__wur
+
+
+33 
+	`__w¨«âr
+ ("secondárgument ofÑealpath must beÉither NULL orát "
+
+36 
+__f‹tify_fun˘i⁄
+ 
+__wur
+ *
+
+37 
+	`__NTH
+ (
+	$ªÆ∑th
+ (c⁄° *
+__ª°ri˘
+ 
+__«me
+, *__ª°ri˘ 
+__ªsﬁved
+))
+
+39 i‡(
+	`__bos
+ (
+__ªsﬁved
+Ë!(
+size_t
+) -1)
+
+41 #i‡
+deföed
+ 
+_LIBC_LIMITS_H_
+ && deföed 
+PATH_MAX
+
+
+42 i‡(
+	`__bos
+ (
+__ªsﬁved
+Ë< 
+PATH_MAX
+)
+
+43  
+	`__ªÆ∑th_chk_w¨n
+ (
+__«me
+, 
+__ªsﬁved
+, 
+	`__bos
+ (__resolved));
+
+45  
+	`__ªÆ∑th_chk
+ (
+__«me
+, 
+__ªsﬁved
+, 
+	`__bos
+ (__resolved));
+
+48  
+	`__ªÆ∑th_Æüs
+ (
+__«me
+, 
+__ªsﬁved
+);
+
+49 
+	}
+}
+
+52 
+	$__±¢ame_r_chk
+ (
+__fd
+, *
+__buf
+, 
+size_t
+ 
+__buÊí
+,
+
+53 
+size_t
+ 
+__ƒól
+Ë
+__THROW
+ 
+	`__n⁄nuŒ
+ ((2));
+
+54 
+	`__REDIRECT_NTH
+ (
+__±¢ame_r_Æüs
+, (
+__fd
+, *
+__buf
+,
+
+55 
+size_t
+ 
+__buÊí
+), 
+±¢ame_r
+)
+
+56 
+	`__n⁄nuŒ
+ ((2));
+
+57 
+	`__REDIRECT_NTH
+ (
+__±¢ame_r_chk_w¨n
+,
+
+58 (
+__fd
+, *
+__buf
+, 
+size_t
+ 
+__buÊí
+,
+
+59 
+size_t
+ 
+__ƒól
+), 
+__±¢ame_r_chk
+)
+
+60 
+	`__n⁄nuŒ
+ ((2)Ë
+	`__w¨«âr
+ ("ptsname_r called with buflen biggerÅhan "
+
+63 
+__f‹tify_fun˘i⁄
+ 
+
+64 
+	`__NTH
+ (
+	$±¢ame_r
+ (
+__fd
+, *
+__buf
+, 
+size_t
+ 
+__buÊí
+))
+
+66 i‡(
+	`__bos
+ (
+__buf
+Ë!(
+size_t
+) -1)
+
+68 i‡(!
+	`__buûtö_c⁄°™t_p
+ (
+__buÊí
+))
+
+69  
+	`__±¢ame_r_chk
+ (
+__fd
+, 
+__buf
+, 
+__buÊí
+, 
+	`__bos
+ (__buf));
+
+70 i‡(
+__buÊí
+ > 
+	`__bos
+ (
+__buf
+))
+
+71  
+	`__±¢ame_r_chk_w¨n
+ (
+__fd
+, 
+__buf
+, 
+__buÊí
+, 
+	`__bos
+ (__buf));
+
+73  
+	`__±¢ame_r_Æüs
+ (
+__fd
+, 
+__buf
+, 
+__buÊí
+);
+
+74 
+	}
+}
+
+77 
+	$__w˘omb_chk
+ (*
+__s
+, 
+wch¨_t
+ 
+__wch¨
+, 
+size_t
+ 
+__buÊí
+)
+
+78 
+__THROW
+ 
+__wur
+;
+
+79 
+	`__REDIRECT_NTH
+ (
+__w˘omb_Æüs
+, (*
+__s
+, 
+wch¨_t
+ 
+__wch¨
+),
+
+80 
+w˘omb
+Ë
+__wur
+;
+
+82 
+__f‹tify_fun˘i⁄
+ 
+__wur
+ 
+
+83 
+	`__NTH
+ (
+	$w˘omb
+ (*
+__s
+, 
+wch¨_t
+ 
+__wch¨
+))
+
+88 
+	#__STDLIB_MB_LEN_MAX
+ 16
+
+	)
+
+89 #i‡
+deföed
+ 
+MB_LEN_MAX
+ && MB_LEN_MAX !
+__STDLIB_MB_LEN_MAX
+
+
+92 i‡(
+	`__bos
+ (
+__s
+Ë!(
+size_t
+Ë-1 && 
+__STDLIB_MB_LEN_MAX
+ > __bos (__s))
+
+93  
+	`__w˘omb_chk
+ (
+__s
+, 
+__wch¨
+, 
+	`__bos
+ (__s));
+
+94  
+	`__w˘omb_Æüs
+ (
+__s
+, 
+__wch¨
+);
+
+95 
+	}
+}
+
+98 
+size_t
+ 
+	$__mb°owcs_chk
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__d°
+,
+
+99 c⁄° *
+__ª°ri˘
+ 
+__§c
+,
+
+100 
+size_t
+ 
+__Àn
+, size_à
+__d°Àn
+Ë
+__THROW
+;
+
+101 
+size_t
+ 
+	`__REDIRECT_NTH
+ (
+__mb°owcs_Æüs
+,
+
+102 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__d°
+,
+
+103 c⁄° *
+__ª°ri˘
+ 
+__§c
+,
+
+104 
+size_t
+ 
+__Àn
+), 
+mb°owcs
+);
+
+105 
+size_t
+ 
+	`__REDIRECT_NTH
+ (
+__mb°owcs_chk_w¨n
+,
+
+106 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__d°
+,
+
+107 c⁄° *
+__ª°ri˘
+ 
+__§c
+,
+
+108 
+size_t
+ 
+__Àn
+, size_à
+__d°Àn
+), 
+__mb°owcs_chk
+)
+
+109 
+	`__w¨«âr
+ ("mbstowcs called with dst buffer smallerÅhanÜen "
+
+112 
+__f‹tify_fun˘i⁄
+ 
+size_t
+
+
+113 
+	`__NTH
+ (
+	$mb°owcs
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__d°
+, c⁄° *__ª°ri˘ 
+__§c
+,
+
+114 
+size_t
+ 
+__Àn
+))
+
+116 i‡(
+	`__bos
+ (
+__d°
+Ë!(
+size_t
+) -1)
+
+118 i‡(!
+	`__buûtö_c⁄°™t_p
+ (
+__Àn
+))
+
+119  
+	`__mb°owcs_chk
+ (
+__d°
+, 
+__§c
+, 
+__Àn
+,
+
+120 
+	`__bos
+ (
+__d°
+Ë/  (
+wch¨_t
+));
+
+122 i‡(
+__Àn
+ > 
+	`__bos
+ (
+__d°
+Ë/  (
+wch¨_t
+))
+
+123  
+	`__mb°owcs_chk_w¨n
+ (
+__d°
+, 
+__§c
+, 
+__Àn
+,
+
+124 
+	`__bos
+ (
+__d°
+Ë/  (
+wch¨_t
+));
+
+126  
+	`__mb°owcs_Æüs
+ (
+__d°
+, 
+__§c
+, 
+__Àn
+);
+
+127 
+	}
+}
+
+130 
+size_t
+ 
+	$__wc°ombs_chk
+ (*
+__ª°ri˘
+ 
+__d°
+,
+
+131 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+,
+
+132 
+size_t
+ 
+__Àn
+, size_à
+__d°Àn
+Ë
+__THROW
+;
+
+133 
+size_t
+ 
+	`__REDIRECT_NTH
+ (
+__wc°ombs_Æüs
+,
+
+134 (*
+__ª°ri˘
+ 
+__d°
+,
+
+135 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+,
+
+136 
+size_t
+ 
+__Àn
+), 
+wc°ombs
+);
+
+137 
+size_t
+ 
+	`__REDIRECT_NTH
+ (
+__wc°ombs_chk_w¨n
+,
+
+138 (*
+__ª°ri˘
+ 
+__d°
+,
+
+139 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+,
+
+140 
+size_t
+ 
+__Àn
+, size_à
+__d°Àn
+), 
+__wc°ombs_chk
+)
+
+141 
+	`__w¨«âr
+ ("wcstombs called with dst buffer smallerÅhanÜen");
+
+143 
+__f‹tify_fun˘i⁄
+ 
+size_t
+
+
+144 
+	`__NTH
+ (
+	$wc°ombs
+ (*
+__ª°ri˘
+ 
+__d°
+, c⁄° 
+wch¨_t
+ *__ª°ri˘ 
+__§c
+,
+
+145 
+size_t
+ 
+__Àn
+))
+
+147 i‡(
+	`__bos
+ (
+__d°
+Ë!(
+size_t
+) -1)
+
+149 i‡(!
+	`__buûtö_c⁄°™t_p
+ (
+__Àn
+))
+
+150  
+	`__wc°ombs_chk
+ (
+__d°
+, 
+__§c
+, 
+__Àn
+, 
+	`__bos
+ (__dst));
+
+151 i‡(
+__Àn
+ > 
+	`__bos
+ (
+__d°
+))
+
+152  
+	`__wc°ombs_chk_w¨n
+ (
+__d°
+, 
+__§c
+, 
+__Àn
+, 
+	`__bos
+ (__dst));
+
+154  
+	`__wc°ombs_Æüs
+ (
+__d°
+, 
+__§c
+, 
+__Àn
+);
+
+155 
+	}
+}
+
+	@/usr/include/bits/timex.h
+
+18 #i‚def 
+_BITS_TIMEX_H
+
+
+19 
+	#_BITS_TIMEX_H
+ 1
+
+	)
+
+21 
+	~<bôs/ty≥s.h
+>
+
+25 
+	stimex
+
+
+27 
+	mmodes
+;
+
+28 
+__sysˇŒ_¶⁄g_t
+ 
+	moff£t
+;
+
+29 
+__sysˇŒ_¶⁄g_t
+ 
+	m‰eq
+;
+
+30 
+__sysˇŒ_¶⁄g_t
+ 
+	mmaxîr‹
+;
+
+31 
+__sysˇŒ_¶⁄g_t
+ 
+	me°îr‹
+;
+
+32 
+	m°©us
+;
+
+33 
+__sysˇŒ_¶⁄g_t
+ 
+	mc⁄°™t
+;
+
+34 
+__sysˇŒ_¶⁄g_t
+ 
+	m¥ecisi⁄
+;
+
+35 
+__sysˇŒ_¶⁄g_t
+ 
+	mtﬁî™˚
+;
+
+36 
+timevÆ
+ 
+	mtime
+;
+
+37 
+__sysˇŒ_¶⁄g_t
+ 
+	mtick
+;
+
+38 
+__sysˇŒ_¶⁄g_t
+ 
+	mµs‰eq
+;
+
+39 
+__sysˇŒ_¶⁄g_t
+ 
+	mjôãr
+;
+
+40 
+	mshi·
+;
+
+41 
+__sysˇŒ_¶⁄g_t
+ 
+	m°abû
+;
+
+42 
+__sysˇŒ_¶⁄g_t
+ 
+	mjô˙t
+;
+
+43 
+__sysˇŒ_¶⁄g_t
+ 
+	mˇl˙t
+;
+
+44 
+__sysˇŒ_¶⁄g_t
+ 
+	mîr˙t
+;
+
+45 
+__sysˇŒ_¶⁄g_t
+ 
+	m°b˙t
+;
+
+47 
+	mèi
+;
+
+56 
+	#ADJ_OFFSET
+ 0x0001
+
+	)
+
+57 
+	#ADJ_FREQUENCY
+ 0x0002
+
+	)
+
+58 
+	#ADJ_MAXERROR
+ 0x0004
+
+	)
+
+59 
+	#ADJ_ESTERROR
+ 0x0008
+
+	)
+
+60 
+	#ADJ_STATUS
+ 0x0010
+
+	)
+
+61 
+	#ADJ_TIMECONST
+ 0x0020
+
+	)
+
+62 
+	#ADJ_TAI
+ 0x0080
+
+	)
+
+63 
+	#ADJ_SETOFFSET
+ 0x0100
+
+	)
+
+64 
+	#ADJ_MICRO
+ 0x1000
+
+	)
+
+65 
+	#ADJ_NANO
+ 0x2000
+
+	)
+
+66 
+	#ADJ_TICK
+ 0x4000
+
+	)
+
+67 
+	#ADJ_OFFSET_SINGLESHOT
+ 0x8001
+
+	)
+
+68 
+	#ADJ_OFFSET_SS_READ
+ 0xa001
+
+	)
+
+71 
+	#MOD_OFFSET
+ 
+ADJ_OFFSET
+
+
+	)
+
+72 
+	#MOD_FREQUENCY
+ 
+ADJ_FREQUENCY
+
+
+	)
+
+73 
+	#MOD_MAXERROR
+ 
+ADJ_MAXERROR
+
+
+	)
+
+74 
+	#MOD_ESTERROR
+ 
+ADJ_ESTERROR
+
+
+	)
+
+75 
+	#MOD_STATUS
+ 
+ADJ_STATUS
+
+
+	)
+
+76 
+	#MOD_TIMECONST
+ 
+ADJ_TIMECONST
+
+
+	)
+
+77 
+	#MOD_CLKB
+ 
+ADJ_TICK
+
+
+	)
+
+78 
+	#MOD_CLKA
+ 
+ADJ_OFFSET_SINGLESHOT
+
+
+	)
+
+79 
+	#MOD_TAI
+ 
+ADJ_TAI
+
+
+	)
+
+80 
+	#MOD_MICRO
+ 
+ADJ_MICRO
+
+
+	)
+
+81 
+	#MOD_NANO
+ 
+ADJ_NANO
+
+
+	)
+
+85 
+	#STA_PLL
+ 0x0001
+
+	)
+
+86 
+	#STA_PPSFREQ
+ 0x0002
+
+	)
+
+87 
+	#STA_PPSTIME
+ 0x0004
+
+	)
+
+88 
+	#STA_FLL
+ 0x0008
+
+	)
+
+90 
+	#STA_INS
+ 0x0010
+
+	)
+
+91 
+	#STA_DEL
+ 0x0020
+
+	)
+
+92 
+	#STA_UNSYNC
+ 0x0040
+
+	)
+
+93 
+	#STA_FREQHOLD
+ 0x0080
+
+	)
+
+95 
+	#STA_PPSSIGNAL
+ 0x0100
+
+	)
+
+96 
+	#STA_PPSJITTER
+ 0x0200
+
+	)
+
+97 
+	#STA_PPSWANDER
+ 0x0400
+
+	)
+
+98 
+	#STA_PPSERROR
+ 0x0800
+
+	)
+
+100 
+	#STA_CLOCKERR
+ 0x1000
+
+	)
+
+101 
+	#STA_NANO
+ 0x2000
+
+	)
+
+102 
+	#STA_MODE
+ 0x4000
+
+	)
+
+103 
+	#STA_CLK
+ 0x8000
+
+	)
+
+106 
+	#STA_RONLY
+ (
+STA_PPSSIGNAL
+ | 
+STA_PPSJITTER
+ | 
+STA_PPSWANDER
+ | \
+
+107 
+STA_PPSERROR
+ | 
+STA_CLOCKERR
+ | 
+STA_NANO
+ | 
+STA_MODE
+ | 
+STA_CLK
+)
+
+	)
+
+	@/usr/include/bits/waitflags.h
+
+19 #i‡!
+deföed
+ 
+_SYS_WAIT_H
+ && !deföed 
+_STDLIB_H
+
+
+25 
+	#WNOHANG
+ 1
+
+	)
+
+26 
+	#WUNTRACED
+ 2
+
+	)
+
+29 
+	#WSTOPPED
+ 2
+
+	)
+
+30 
+	#WEXITED
+ 4
+
+	)
+
+31 
+	#WCONTINUED
+ 8
+
+	)
+
+32 
+	#WNOWAIT
+ 0x01000000
+
+	)
+
+34 
+	#__WNOTHREAD
+ 0x20000000
+
+	)
+
+36 
+	#__WALL
+ 0x40000000
+
+	)
+
+37 
+	#__WCLONE
+ 0x80000000
+
+	)
+
+40 #i‡
+deföed
+ 
+__USE_XOPEN
+ || deföed 
+__USE_XOPEN2K8
+
+
+41 #i‚de‡
+__ENUM_IDTYPE_T
+
+
+42 
+	#__ENUM_IDTYPE_T
+ 1
+
+	)
+
+46 #unde‡
+P_ALL
+
+
+47 #unde‡
+P_PID
+
+
+48 #unde‡
+P_PGID
+
+
+52 
+	mP_ALL
+,
+
+53 
+	mP_PID
+,
+
+54 
+	mP_PGID
+
+
+55 } 
+	tidty≥_t
+;
+
+	@/usr/include/bits/waitstatus.h
+
+19 #i‡!
+deföed
+ 
+_SYS_WAIT_H
+ && !deföed 
+_STDLIB_H
+
+
+28 
+	#__WEXITSTATUS
+(
+°©us
+Ë(((°©usË& 0xff00Ë>> 8)
+
+	)
+
+31 
+	#__WTERMSIG
+(
+°©us
+Ë((°©usË& 0x7f)
+
+	)
+
+34 
+	#__WSTOPSIG
+(
+°©us
+Ë
+	`__WEXITSTATUS
+(°©us)
+
+	)
+
+37 
+	#__WIFEXITED
+(
+°©us
+Ë(
+	`__WTERMSIG
+(°©usË=0)
+
+	)
+
+40 
+	#__WIFSIGNALED
+(
+°©us
+) \
+
+41 (((sig√d Ë(((
+°©us
+Ë& 0x7fË+ 1Ë>> 1Ë> 0)
+
+	)
+
+44 
+	#__WIFSTOPPED
+(
+°©us
+Ë(((°©usË& 0xffË=0x7f)
+
+	)
+
+48 #ifde‡
+WCONTINUED
+
+
+49 
+	#__WIFCONTINUED
+(
+°©us
+Ë((°©usË=
+__W_CONTINUED
+)
+
+	)
+
+53 
+	#__WCOREDUMP
+(
+°©us
+Ë((°©usË& 
+__WCOREFLAG
+)
+
+	)
+
+56 
+	#__W_EXITCODE
+(
+ªt
+, 
+sig
+Ë(‘ëË<< 8 | (sig))
+
+	)
+
+57 
+	#__W_STOPCODE
+(
+sig
+Ë((sigË<< 8 | 0x7f)
+
+	)
+
+58 
+	#__W_CONTINUED
+ 0xffff
+
+	)
+
+59 
+	#__WCOREFLAG
+ 0x80
+
+	)
+
+62 #ifdef 
+__USE_MISC
+
+
+64 
+	~<ídün.h
+>
+
+66 
+	uwaô
+
+
+68 
+	mw_°©us
+;
+
+71 #if 
+__BYTE_ORDER
+ =
+__LITTLE_ENDIAN
+
+
+72 
+	m__w_ãrmsig
+:7;
+
+73 
+	m__w_c‹edump
+:1;
+
+74 
+	m__w_ªtcode
+:8;
+
+77 #if 
+__BYTE_ORDER
+ =
+__BIG_ENDIAN
+
+
+79 
+	m__w_ªtcode
+:8;
+
+80 
+	m__w_c‹edump
+:1;
+
+81 
+	m__w_ãrmsig
+:7;
+
+83 } 
+	m__waô_ãrmö©ed
+;
+
+86 #if 
+__BYTE_ORDER
+ =
+__LITTLE_ENDIAN
+
+
+87 
+	m__w_°›vÆ
+:8;
+
+88 
+	m__w_°›sig
+:8;
+
+91 #if 
+__BYTE_ORDER
+ =
+__BIG_ENDIAN
+
+
+93 
+	m__w_°›sig
+:8;
+
+94 
+	m__w_°›vÆ
+:8;
+
+96 } 
+	m__waô_°›≥d
+;
+
+99 
+	#w_ãrmsig
+ 
+__waô_ãrmö©ed
+.
+__w_ãrmsig
+
+
+	)
+
+100 
+	#w_c‹edump
+ 
+__waô_ãrmö©ed
+.
+__w_c‹edump
+
+
+	)
+
+101 
+	#w_ªtcode
+ 
+__waô_ãrmö©ed
+.
+__w_ªtcode
+
+
+	)
+
+102 
+	#w_°›sig
+ 
+__waô_°›≥d
+.
+__w_°›sig
+
+
+	)
+
+103 
+	#w_°›vÆ
+ 
+__waô_°›≥d
+.
+__w_°›vÆ
+
+
+	)
+
+	@/usr/include/gconv.h
+
+22 #i‚de‡
+_GCONV_H
+
+
+23 
+	#_GCONV_H
+ 1
+
+	)
+
+25 
+	~<„©uªs.h
+>
+
+26 
+	#__√ed_mb°©e_t
+
+
+	)
+
+27 
+	#__√ed_wöt_t
+
+
+	)
+
+28 
+	~<wch¨.h
+>
+
+29 
+	#__√ed_size_t
+
+
+	)
+
+30 
+	#__√ed_wch¨_t
+
+
+	)
+
+31 
+	~<°ddef.h
+>
+
+34 
+	#__UNKNOWN_10646_CHAR
+ ((
+wch¨_t
+Ë0xfffd)
+
+	)
+
+39 
+	m__GCONV_OK
+ = 0,
+
+40 
+	m__GCONV_NOCONV
+,
+
+41 
+	m__GCONV_NODB
+,
+
+42 
+	m__GCONV_NOMEM
+,
+
+44 
+	m__GCONV_EMPTY_INPUT
+,
+
+45 
+	m__GCONV_FULL_OUTPUT
+,
+
+46 
+	m__GCONV_ILLEGAL_INPUT
+,
+
+47 
+	m__GCONV_INCOMPLETE_INPUT
+,
+
+49 
+	m__GCONV_ILLEGAL_DESCRIPTOR
+,
+
+50 
+	m__GCONV_INTERNAL_ERROR
+
+
+57 
+	m__GCONV_IS_LAST
+ = 0x0001,
+
+58 
+	m__GCONV_IGNORE_ERRORS
+ = 0x0002,
+
+59 
+	m__GCONV_SWAP
+ = 0x0004,
+
+60 
+	m__GCONV_TRANSLIT
+ = 0x0008
+
+65 
+	g__gc⁄v_°ï
+;
+
+66 
+	g__gc⁄v_°ï_d©a
+;
+
+67 
+	g__gc⁄v_lﬂded_obje˘
+;
+
+71 (*
+	t__gc⁄v_f˘
+Ë(
+	t__gc⁄v_°ï
+ *, 
+	t__gc⁄v_°ï_d©a
+ *,
+
+73 **, 
+	tsize_t
+ *, , );
+
+76 
+	$wöt_t
+ (*
+	t__gc⁄v_btowc_f˘
+Ë(
+	t__gc⁄v_°ï
+ *, );
+
+79 (*
+	t__gc⁄v_öô_f˘
+Ë(
+	t__gc⁄v_°ï
+ *);
+
+80 (*
+	t__gc⁄v_íd_f˘
+Ë(
+	t__gc⁄v_°ï
+ *);
+
+84 
+	s__gc⁄v_°ï
+
+
+86 
+__gc⁄v_lﬂded_obje˘
+ *
+__shlib_h™dÀ
+;
+
+87 c⁄° *
+__mod«me
+;
+
+89 
+__cou¡î
+;
+
+91 *
+__‰om_«me
+;
+
+92 *
+__to_«me
+;
+
+94 
+__gc⁄v_f˘
+ 
+__f˘
+;
+
+95 
+__gc⁄v_btowc_f˘
+ 
+__btowc_f˘
+;
+
+96 
+__gc⁄v_öô_f˘
+ 
+__öô_f˘
+;
+
+97 
+__gc⁄v_íd_f˘
+ 
+__íd_f˘
+;
+
+101 
+__mö_√eded_‰om
+;
+
+102 
+__max_√eded_‰om
+;
+
+103 
+__mö_√eded_to
+;
+
+104 
+__max_√eded_to
+;
+
+107 
+__°©eful
+;
+
+109 *
+__d©a
+;
+
+114 
+	s__gc⁄v_°ï_d©a
+
+
+116 *
+__outbuf
+;
+
+117 *
+__outbu„nd
+;
+
+121 
+__Êags
+;
+
+125 
+__övoˇti⁄_cou¡î
+;
+
+129 
+__öã∫Æ_u£
+;
+
+131 
+__mb°©e_t
+ *
+__°©ï
+;
+
+132 
+__mb°©e_t
+ 
+__°©e
+;
+
+138 
+	s__gc⁄v_öfo
+
+
+140 
+size_t
+ 
+__n°ïs
+;
+
+141 
+__gc⁄v_°ï
+ *
+__°ïs
+;
+
+142 
+__exãnsi⁄__
+ 
+__gc⁄v_°ï_d©a
+ 
+__d©a
+ 
+__Êex¨r
+;
+
+143 } *
+	t__gc⁄v_t
+;
+
+146 
+	`__gc⁄v_å™¶ôî©e
+ (
+__gc⁄v_°ï
+ *
+°ï
+,
+
+147 
+__gc⁄v_°ï_d©a
+ *
+°ï_d©a
+,
+
+148 c⁄° *
+öbuf°¨t
+,
+
+149 c⁄° **
+öbuÂ
+,
+
+150 c⁄° *
+öbu„nd
+,
+
+151 **
+outbuf°¨t
+,
+
+152 
+size_t
+ *
+úªvîsibÀ
+);
+
+	@/usr/include/gnu/stubs-32.h
+
+6 #ifde‡
+_LIBC
+
+
+7 #îr‹ 
+Aµliˇti⁄s
+ 
+may
+ 
+nŸ
+ 
+deföe
+ 
+the
+ 
+ma¸o
+ 
+_LIBC
+
+
+10 
+	#__°ub_chÊags
+
+
+	)
+
+11 
+	#__°ub_Áâach
+
+
+	)
+
+12 
+	#__°ub_fchÊags
+
+
+	)
+
+13 
+	#__°ub_fdëach
+
+
+	)
+
+14 
+	#__°ub_gây
+
+
+	)
+
+15 
+	#__°ub_lchmod
+
+
+	)
+
+16 
+	#__°ub_ªvoke
+
+
+	)
+
+17 
+	#__°ub_£éogö
+
+
+	)
+
+18 
+	#__°ub_sigªtu∫
+
+
+	)
+
+19 
+	#__°ub_s°k
+
+
+	)
+
+20 
+	#__°ub_°ty
+
+
+	)
+
+	@/usr/include/gnu/stubs-64.h
+
+6 #ifde‡
+_LIBC
+
+
+7 #îr‹ 
+Aµliˇti⁄s
+ 
+may
+ 
+nŸ
+ 
+deföe
+ 
+the
+ 
+ma¸o
+ 
+_LIBC
+
+
+10 
+	#__°ub___com∑t_bdÊush
+
+
+	)
+
+11 
+	#__°ub_chÊags
+
+
+	)
+
+12 
+	#__°ub_Áâach
+
+
+	)
+
+13 
+	#__°ub_fchÊags
+
+
+	)
+
+14 
+	#__°ub_fdëach
+
+
+	)
+
+15 
+	#__°ub_gëmsg
+
+
+	)
+
+16 
+	#__°ub_gây
+
+
+	)
+
+17 
+	#__°ub_lchmod
+
+
+	)
+
+18 
+	#__°ub_putmsg
+
+
+	)
+
+19 
+	#__°ub_ªvoke
+
+
+	)
+
+20 
+	#__°ub_£éogö
+
+
+	)
+
+21 
+	#__°ub_sigªtu∫
+
+
+	)
+
+22 
+	#__°ub_s°k
+
+
+	)
+
+23 
+	#__°ub_°ty
+
+
+	)
+
+	@/usr/include/gnu/stubs-x32.h
+
+6 #ifde‡
+_LIBC
+
+
+7 #îr‹ 
+Aµliˇti⁄s
+ 
+may
+ 
+nŸ
+ 
+deföe
+ 
+the
+ 
+ma¸o
+ 
+_LIBC
+
+
+10 
+	#__°ub___com∑t_bdÊush
+
+
+	)
+
+11 
+	#__°ub___com∑t_¸óã_moduÀ
+
+
+	)
+
+12 
+	#__°ub___com∑t_gë_kî√l_syms
+
+
+	)
+
+13 
+	#__°ub___com∑t_quîy_moduÀ
+
+
+	)
+
+14 
+	#__°ub___com∑t_u£lib
+
+
+	)
+
+15 
+	#__°ub_chÊags
+
+
+	)
+
+16 
+	#__°ub_Áâach
+
+
+	)
+
+17 
+	#__°ub_fchÊags
+
+
+	)
+
+18 
+	#__°ub_fdëach
+
+
+	)
+
+19 
+	#__°ub_gëmsg
+
+
+	)
+
+20 
+	#__°ub_gây
+
+
+	)
+
+21 
+	#__°ub_lchmod
+
+
+	)
+
+22 
+	#__°ub_nfs£rv˘l
+
+
+	)
+
+23 
+	#__°ub_putmsg
+
+
+	)
+
+24 
+	#__°ub_ªvoke
+
+
+	)
+
+25 
+	#__°ub_£éogö
+
+
+	)
+
+26 
+	#__°ub_sigªtu∫
+
+
+	)
+
+27 
+	#__°ub_s°k
+
+
+	)
+
+28 
+	#__°ub_°ty
+
+
+	)
+
+	@/usr/include/sys/types.h
+
+22 #i‚def 
+_SYS_TYPES_H
+
+
+23 
+	#_SYS_TYPES_H
+ 1
+
+	)
+
+25 
+	~<„©uªs.h
+>
+
+27 
+	g__BEGIN_DECLS
+
+
+29 
+	~<bôs/ty≥s.h
+>
+
+31 #ifdef 
+__USE_MISC
+
+
+32 #i‚de‡
+__u_ch¨_deföed
+
+
+33 
+__u_ch¨
+ 
+	tu_ch¨
+;
+
+34 
+__u_sh‹t
+ 
+	tu_sh‹t
+;
+
+35 
+__u_öt
+ 
+	tu_öt
+;
+
+36 
+__u_l⁄g
+ 
+	tu_l⁄g
+;
+
+37 
+__quad_t
+ 
+	tquad_t
+;
+
+38 
+__u_quad_t
+ 
+	tu_quad_t
+;
+
+39 
+__fsid_t
+ 
+	tfsid_t
+;
+
+40 
+	#__u_ch¨_deföed
+
+
+	)
+
+44 
+__loff_t
+ 
+	tloff_t
+;
+
+46 #i‚de‡
+__öo_t_deföed
+
+
+47 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+48 
+__öo_t
+ 
+	töo_t
+;
+
+50 
+__öo64_t
+ 
+	töo_t
+;
+
+52 
+	#__öo_t_deföed
+
+
+	)
+
+54 #i‡
+deföed
+ 
+__USE_LARGEFILE64
+ && !deföed 
+__öo64_t_deföed
+
+
+55 
+__öo64_t
+ 
+	töo64_t
+;
+
+56 
+	#__öo64_t_deföed
+
+
+	)
+
+59 #i‚de‡
+__dev_t_deföed
+
+
+60 
+__dev_t
+ 
+	tdev_t
+;
+
+61 
+	#__dev_t_deföed
+
+
+	)
+
+64 #i‚de‡
+__gid_t_deföed
+
+
+65 
+__gid_t
+ 
+	tgid_t
+;
+
+66 
+	#__gid_t_deföed
+
+
+	)
+
+69 #i‚de‡
+__mode_t_deföed
+
+
+70 
+__mode_t
+ 
+	tmode_t
+;
+
+71 
+	#__mode_t_deföed
+
+
+	)
+
+74 #i‚de‡
+__∆ök_t_deföed
+
+
+75 
+__∆ök_t
+ 
+	t∆ök_t
+;
+
+76 
+	#__∆ök_t_deföed
+
+
+	)
+
+79 #i‚de‡
+__uid_t_deföed
+
+
+80 
+__uid_t
+ 
+	tuid_t
+;
+
+81 
+	#__uid_t_deföed
+
+
+	)
+
+84 #i‚de‡
+__off_t_deföed
+
+
+85 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+86 
+__off_t
+ 
+	toff_t
+;
+
+88 
+__off64_t
+ 
+	toff_t
+;
+
+90 
+	#__off_t_deföed
+
+
+	)
+
+92 #i‡
+deföed
+ 
+__USE_LARGEFILE64
+ && !deföed 
+__off64_t_deföed
+
+
+93 
+__off64_t
+ 
+	toff64_t
+;
+
+94 
+	#__off64_t_deföed
+
+
+	)
+
+97 #i‚de‡
+__pid_t_deföed
+
+
+98 
+__pid_t
+ 
+	tpid_t
+;
+
+99 
+	#__pid_t_deföed
+
+
+	)
+
+102 #i‡(
+deföed
+ 
+__USE_XOPEN
+ || deföed 
+__USE_XOPEN2K8
+) \
+
+103 && !
+deföed
+ 
+__id_t_deföed
+
+
+104 
+__id_t
+ 
+	tid_t
+;
+
+105 
+	#__id_t_deföed
+
+
+	)
+
+108 #i‚de‡
+__ssize_t_deföed
+
+
+109 
+__ssize_t
+ 
+	tssize_t
+;
+
+110 
+	#__ssize_t_deföed
+
+
+	)
+
+113 #ifdef 
+__USE_MISC
+
+
+114 #i‚de‡
+__daddr_t_deföed
+
+
+115 
+__daddr_t
+ 
+	tdaddr_t
+;
+
+116 
+__ˇddr_t
+ 
+	tˇddr_t
+;
+
+117 
+	#__daddr_t_deföed
+
+
+	)
+
+121 #i‡(
+deföed
+ 
+__USE_MISC
+ || deföed 
+__USE_XOPEN
+Ë&& !deföed 
+__key_t_deföed
+
+
+122 
+__key_t
+ 
+	tkey_t
+;
+
+123 
+	#__key_t_deföed
+
+
+	)
+
+126 #i‡
+deföed
+ 
+__USE_XOPEN
+ || deföed 
+__USE_XOPEN2K8
+
+
+127 
+	#__√ed_˛ock_t
+
+
+	)
+
+129 
+	#__√ed_time_t
+
+
+	)
+
+130 
+	#__√ed_timî_t
+
+
+	)
+
+131 
+	#__√ed_˛ockid_t
+
+
+	)
+
+132 
+	~<time.h
+>
+
+134 #ifde‡
+__USE_XOPEN
+
+
+135 #i‚de‡
+__u£c⁄ds_t_deföed
+
+
+136 
+__u£c⁄ds_t
+ 
+	tu£c⁄ds_t
+;
+
+137 
+	#__u£c⁄ds_t_deföed
+
+
+	)
+
+139 #i‚de‡
+__su£c⁄ds_t_deföed
+
+
+140 
+__su£c⁄ds_t
+ 
+	tsu£c⁄ds_t
+;
+
+141 
+	#__su£c⁄ds_t_deföed
+
+
+	)
+
+145 
+	#__√ed_size_t
+
+
+	)
+
+146 
+	~<°ddef.h
+>
+
+148 #ifde‡
+__USE_MISC
+
+
+150 
+	tul⁄g
+;
+
+151 
+	tush‹t
+;
+
+152 
+	tuöt
+;
+
+157 #i‡!
+__GNUC_PREREQ
+ (2, 7)
+
+160 #i‚de‡
+__öt8_t_deföed
+
+
+161 
+	#__öt8_t_deföed
+
+
+	)
+
+162 
+	töt8_t
+;
+
+163 
+	töt16_t
+;
+
+164 
+	töt32_t
+;
+
+165 #i‡
+__WORDSIZE
+ == 64
+
+166 
+	töt64_t
+;
+
+168 
+__exãnsi⁄__
+ 
+	töt64_t
+;
+
+173 
+	tu_öt8_t
+;
+
+174 
+	tu_öt16_t
+;
+
+175 
+	tu_öt32_t
+;
+
+176 #i‡
+__WORDSIZE
+ == 64
+
+177 
+	tu_öt64_t
+;
+
+179 
+__exãnsi⁄__
+ 
+	tu_öt64_t
+;
+
+182 
+	tªgi°î_t
+;
+
+187 
+	#__ötN_t
+(
+N
+, 
+MODE
+) \
+
+188 ##
+	tN
+##
+	t_t
+ 
+	t__©åibuã__
+ ((
+	t__mode__
+ (
+	tMODE
+)))
+
+	)
+
+189 
+	t__u_ötN_t
+(
+	tN
+, 
+	tMODE
+) \
+
+190 
+	tu_öt
+##
+	tN
+##
+	t_t
+ 
+	t__©åibuã__
+ ((
+	t__mode__
+ (
+	tMODE
+)))
+
+	)
+
+192 #i‚de‡
+	t__öt8_t_deföed
+
+
+193 
+	t__öt8_t_deföed
+
+
+	)
+
+194 
+	t__ötN_t
+ (8, 
+	t__QI__
+);
+
+195 
+__ötN_t
+ (16, 
+__HI__
+);
+
+196 
+__ötN_t
+ (32, 
+__SI__
+);
+
+197 
+__ötN_t
+ (64, 
+__DI__
+);
+
+200 
+__u_ötN_t
+ (8, 
+__QI__
+);
+
+201 
+__u_ötN_t
+ (16, 
+__HI__
+);
+
+202 
+__u_ötN_t
+ (32, 
+__SI__
+);
+
+203 
+__u_ötN_t
+ (64, 
+__DI__
+);
+
+205 
+	tªgi°î_t
+ 
+	t__©åibuã__
+ ((
+	t__mode__
+ (
+	t__w‹d__
+)));
+
+211 
+	#__BIT_TYPES_DEFINED__
+ 1
+
+	)
+
+214 #ifdef 
+__USE_MISC
+
+
+216 
+	~<ídün.h
+>
+
+219 
+	~<sys/£À˘.h
+>
+
+222 
+	~<sys/sysma¸os.h
+>
+
+226 #i‡(
+deföed
+ 
+__USE_UNIX98
+ || deföed 
+__USE_XOPEN2K8
+) \
+
+227 && !
+deföed
+ 
+__blksize_t_deföed
+
+
+228 
+__blksize_t
+ 
+	tblksize_t
+;
+
+229 
+	#__blksize_t_deföed
+
+
+	)
+
+233 #i‚de‡
+__USE_FILE_OFFSET64
+
+
+234 #i‚de‡
+__blk˙t_t_deföed
+
+
+235 
+__blk˙t_t
+ 
+	tblk˙t_t
+;
+
+236 
+	#__blk˙t_t_deföed
+
+
+	)
+
+238 #i‚de‡
+__fsblk˙t_t_deföed
+
+
+239 
+__fsblk˙t_t
+ 
+	tfsblk˙t_t
+;
+
+240 
+	#__fsblk˙t_t_deföed
+
+
+	)
+
+242 #i‚de‡
+__fsfû˙t_t_deföed
+
+
+243 
+__fsfû˙t_t
+ 
+	tfsfû˙t_t
+;
+
+244 
+	#__fsfû˙t_t_deföed
+
+
+	)
+
+247 #i‚de‡
+__blk˙t_t_deföed
+
+
+248 
+__blk˙t64_t
+ 
+	tblk˙t_t
+;
+
+249 
+	#__blk˙t_t_deföed
+
+
+	)
+
+251 #i‚de‡
+__fsblk˙t_t_deföed
+
+
+252 
+__fsblk˙t64_t
+ 
+	tfsblk˙t_t
+;
+
+253 
+	#__fsblk˙t_t_deföed
+
+
+	)
+
+255 #i‚de‡
+__fsfû˙t_t_deföed
+
+
+256 
+__fsfû˙t64_t
+ 
+	tfsfû˙t_t
+;
+
+257 
+	#__fsfû˙t_t_deföed
+
+
+	)
+
+261 #ifde‡
+__USE_LARGEFILE64
+
+
+262 
+__blk˙t64_t
+ 
+	tblk˙t64_t
+;
+
+263 
+__fsblk˙t64_t
+ 
+	tfsblk˙t64_t
+;
+
+264 
+__fsfû˙t64_t
+ 
+	tfsfû˙t64_t
+;
+
+269 #i‡
+deföed
+ 
+__USE_POSIX199506
+ || deföed 
+__USE_UNIX98
+
+
+270 
+	~<bôs/±hªadty≥s.h
+>
+
+273 
+	g__END_DECLS
+
+
+	@/usr/include/wchar.h
+
+23 #i‚de‡
+_WCHAR_H
+
+
+25 #i‡!
+deföed
+ 
+__√ed_mb°©e_t
+ && !deföed 
+__√ed_wöt_t
+
+
+26 
+	#_WCHAR_H
+ 1
+
+	)
+
+27 
+	~<„©uªs.h
+>
+
+30 #ifde‡
+_WCHAR_H
+
+
+32 
+	#__√ed___FILE
+
+
+	)
+
+33 #i‡
+deföed
+ 
+__USE_UNIX98
+ || deföed 
+__USE_XOPEN2K
+
+
+34 
+	#__√ed_FILE
+
+
+	)
+
+36 
+	~<°dio.h
+>
+
+38 
+	#__√ed___va_li°
+
+
+	)
+
+39 
+	~<°d¨g.h
+>
+
+41 
+	~<bôs/wch¨.h
+>
+
+44 
+	#__√ed_size_t
+
+
+	)
+
+45 
+	#__√ed_wch¨_t
+
+
+	)
+
+46 
+	#__√ed_NULL
+
+
+	)
+
+48 #i‡
+deföed
+ 
+_WCHAR_H
+ || deföed 
+__√ed_wöt_t
+ || !deföed 
+__WINT_TYPE__
+
+
+49 #unde‡
+__√ed_wöt_t
+
+
+50 
+	#__√ed_wöt_t
+
+
+	)
+
+51 
+	~<°ddef.h
+>
+
+55 #i‚de‡
+_WINT_T
+
+
+60 
+	#_WINT_T
+
+
+	)
+
+61 
+	twöt_t
+;
+
+65 #i‡
+deföed
+ 
+__˝lu•lus
+ && deföed 
+_GLIBCPP_USE_NAMESPACES
+ \
+
+66 && 
+deföed
+ 
+__WINT_TYPE__
+
+
+67 
+__BEGIN_NAMESPACE_STD
+
+
+68 
+__WINT_TYPE__
+ 
+	twöt_t
+;
+
+69 
+	g__END_NAMESPACE_STD
+
+
+74 #i‡
+deföed
+ 
+__˝lu•lus
+ && 
+__GNUC_PREREQ
+ (4, 4)
+
+75 
+	#__CORRECT_ISO_CPP_WCHAR_H_PROTO
+
+
+	)
+
+79 #i‡(
+deföed
+ 
+_WCHAR_H
+ || deföed 
+__√ed_mb°©e_t
+Ë&& !deföed 
+____mb°©e_t_deföed
+
+
+80 
+	#____mb°©e_t_deföed
+ 1
+
+	)
+
+84 
+	m__cou¡
+;
+
+87 #ifde‡
+__WINT_TYPE__
+
+
+88 
+__WINT_TYPE__
+ 
+	m__wch
+;
+
+90 
+wöt_t
+ 
+	m__wch
+;
+
+92 
+	m__wchb
+[4];
+
+93 } 
+	m__vÆue
+;
+
+94 } 
+	t__mb°©e_t
+;
+
+96 #unde‡
+__√ed_mb°©e_t
+
+
+101 #ifde‡
+_WCHAR_H
+
+
+103 #i‚de‡
+__mb°©e_t_deföed
+
+
+104 
+__BEGIN_NAMESPACE_C99
+
+
+106 
+__mb°©e_t
+ 
+	tmb°©e_t
+;
+
+107 
+	g__END_NAMESPACE_C99
+
+
+108 
+	#__mb°©e_t_deföed
+ 1
+
+	)
+
+111 #ifde‡
+__USE_GNU
+
+
+112 
+	$__USING_NAMESPACE_C99
+(
+mb°©e_t
+)
+
+115 #i‚de‡
+WCHAR_MIN
+
+
+117 
+	#WCHAR_MIN
+ 
+__WCHAR_MIN
+
+
+	)
+
+118 
+	#WCHAR_MAX
+ 
+__WCHAR_MAX
+
+
+	)
+
+121 #i‚de‡
+WEOF
+
+
+122 
+	#WEOF
+ (0xffffffffu)
+
+	)
+
+127 #i‡
+deföed
+ 
+__USE_XOPEN
+ && !deföed 
+__USE_UNIX98
+
+
+128 
+	~<w˘y≥.h
+>
+
+132 
+__BEGIN_DECLS
+
+
+134 
+__BEGIN_NAMESPACE_STD
+
+
+137 
+tm
+;
+
+138 
+__END_NAMESPACE_STD
+
+
+142 
+	$__USING_NAMESPACE_STD
+(
+tm
+)
+
+145 
+__BEGIN_NAMESPACE_STD
+
+
+147 
+wch¨_t
+ *
+	$wcs˝y
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+,
+
+148 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+)
+
+149 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+152 
+wch¨_t
+ *
+	$wc¢˝y
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+,
+
+153 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+, 
+size_t
+ 
+__n
+)
+
+154 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+157 
+wch¨_t
+ *
+	$wcsˇt
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+,
+
+158 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+)
+
+159 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+161 
+wch¨_t
+ *
+	$wc¢ˇt
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+,
+
+162 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+, 
+size_t
+ 
+__n
+)
+
+163 
+__THROW
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+166 
+	$wcscmp
+ (c⁄° 
+wch¨_t
+ *
+__s1
+, c⁄° wch¨_à*
+__s2
+)
+
+167 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+169 
+	$wc¢cmp
+ (c⁄° 
+wch¨_t
+ *
+__s1
+, c⁄° wch¨_à*
+__s2
+, 
+size_t
+ 
+__n
+)
+
+170 
+__THROW
+ 
+__©åibuã_puª__
+ 
+	`__n⁄nuŒ
+ ((1, 2));
+
+171 
+__END_NAMESPACE_STD
+
+
+173 #ifde‡
+__USE_XOPEN2K8
+
+
+175 
+	$wcsˇ£cmp
+ (c⁄° 
+wch¨_t
+ *
+__s1
+, c⁄° wch¨_à*
+__s2
+Ë
+__THROW
+;
+
+178 
+	$wc¢ˇ£cmp
+ (c⁄° 
+wch¨_t
+ *
+__s1
+, c⁄° wch¨_à*
+__s2
+,
+
+179 
+size_t
+ 
+__n
+Ë
+__THROW
+;
+
+183 
+	~<xloˇÀ.h
+>
+
+185 
+	$wcsˇ£cmp_l
+ (c⁄° 
+wch¨_t
+ *
+__s1
+, c⁄° wch¨_à*
+__s2
+,
+
+186 
+__loˇÀ_t
+ 
+__loc
+Ë
+__THROW
+;
+
+188 
+	$wc¢ˇ£cmp_l
+ (c⁄° 
+wch¨_t
+ *
+__s1
+, c⁄° wch¨_à*
+__s2
+,
+
+189 
+size_t
+ 
+__n
+, 
+__loˇÀ_t
+ 
+__loc
+Ë
+__THROW
+;
+
+192 
+__BEGIN_NAMESPACE_STD
+
+
+195 
+	$wcscﬁl
+ (c⁄° 
+wch¨_t
+ *
+__s1
+, c⁄° wch¨_à*
+__s2
+Ë
+__THROW
+;
+
+199 
+size_t
+ 
+	$wcsx‰m
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s1
+,
+
+200 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s2
+, 
+size_t
+ 
+__n
+Ë
+__THROW
+;
+
+201 
+__END_NAMESPACE_STD
+
+
+203 #ifde‡
+__USE_XOPEN2K8
+
+
+209 
+	$wcscﬁl_l
+ (c⁄° 
+wch¨_t
+ *
+__s1
+, c⁄° wch¨_à*
+__s2
+,
+
+210 
+__loˇÀ_t
+ 
+__loc
+Ë
+__THROW
+;
+
+215 
+size_t
+ 
+	$wcsx‰m_l
+ (
+wch¨_t
+ *
+__s1
+, c⁄° wch¨_à*
+__s2
+,
+
+216 
+size_t
+ 
+__n
+, 
+__loˇÀ_t
+ 
+__loc
+Ë
+__THROW
+;
+
+219 
+wch¨_t
+ *
+	$wcsdup
+ (c⁄° 
+wch¨_t
+ *
+__s
+Ë
+__THROW
+ 
+__©åibuã_mÆloc__
+;
+
+222 
+__BEGIN_NAMESPACE_STD
+
+
+224 #ifde‡
+__CORRECT_ISO_CPP_WCHAR_H_PROTO
+
+
+225 "C++" 
+wch¨_t
+ *
+	$wcschr
+ (
+wch¨_t
+ *
+__wcs
+, wch¨_à
+__wc
+)
+
+226 
+__THROW
+ 
+	`__asm
+ ("wcschr"Ë
+__©åibuã_puª__
+;
+
+227 "C++" c⁄° 
+wch¨_t
+ *
+	$wcschr
+ (c⁄° 
+wch¨_t
+ *
+__wcs
+, wch¨_à
+__wc
+)
+
+228 
+__THROW
+ 
+	`__asm
+ ("wcschr"Ë
+__©åibuã_puª__
+;
+
+230 
+wch¨_t
+ *
+	$wcschr
+ (c⁄° 
+wch¨_t
+ *
+__wcs
+, wch¨_à
+__wc
+)
+
+231 
+__THROW
+ 
+__©åibuã_puª__
+;
+
+234 #ifde‡
+__CORRECT_ISO_CPP_WCHAR_H_PROTO
+
+
+235 "C++" 
+wch¨_t
+ *
+	$wc§chr
+ (
+wch¨_t
+ *
+__wcs
+, wch¨_à
+__wc
+)
+
+236 
+__THROW
+ 
+	`__asm
+ ("wc§chr"Ë
+__©åibuã_puª__
+;
+
+237 "C++" c⁄° 
+wch¨_t
+ *
+	$wc§chr
+ (c⁄° 
+wch¨_t
+ *
+__wcs
+, wch¨_à
+__wc
+)
+
+238 
+__THROW
+ 
+	`__asm
+ ("wc§chr"Ë
+__©åibuã_puª__
+;
+
+240 
+wch¨_t
+ *
+	$wc§chr
+ (c⁄° 
+wch¨_t
+ *
+__wcs
+, wch¨_à
+__wc
+)
+
+241 
+__THROW
+ 
+__©åibuã_puª__
+;
+
+243 
+__END_NAMESPACE_STD
+
+
+245 #ifde‡
+__USE_GNU
+
+
+248 
+wch¨_t
+ *
+	$wcsch∫ul
+ (c⁄° 
+wch¨_t
+ *
+__s
+, wch¨_à
+__wc
+)
+
+249 
+__THROW
+ 
+__©åibuã_puª__
+;
+
+252 
+__BEGIN_NAMESPACE_STD
+
+
+255 
+size_t
+ 
+	$wcsc•n
+ (c⁄° 
+wch¨_t
+ *
+__wcs
+, c⁄° wch¨_à*
+__ªje˘
+)
+
+256 
+__THROW
+ 
+__©åibuã_puª__
+;
+
+259 
+size_t
+ 
+	$wcs•n
+ (c⁄° 
+wch¨_t
+ *
+__wcs
+, c⁄° wch¨_à*
+__ac˚±
+)
+
+260 
+__THROW
+ 
+__©åibuã_puª__
+;
+
+262 #ifde‡
+__CORRECT_ISO_CPP_WCHAR_H_PROTO
+
+
+263 "C++" 
+wch¨_t
+ *
+	$wc•brk
+ (
+wch¨_t
+ *
+__wcs
+, c⁄° wch¨_à*
+__ac˚±
+)
+
+264 
+__THROW
+ 
+	`__asm
+ ("wc•brk"Ë
+__©åibuã_puª__
+;
+
+265 "C++" c⁄° 
+wch¨_t
+ *
+	$wc•brk
+ (c⁄° 
+wch¨_t
+ *
+__wcs
+,
+
+266 c⁄° 
+wch¨_t
+ *
+__ac˚±
+)
+
+267 
+__THROW
+ 
+	`__asm
+ ("wc•brk"Ë
+__©åibuã_puª__
+;
+
+269 
+wch¨_t
+ *
+	$wc•brk
+ (c⁄° 
+wch¨_t
+ *
+__wcs
+, c⁄° wch¨_à*
+__ac˚±
+)
+
+270 
+__THROW
+ 
+__©åibuã_puª__
+;
+
+273 #ifde‡
+__CORRECT_ISO_CPP_WCHAR_H_PROTO
+
+
+274 "C++" 
+wch¨_t
+ *
+	$wcs°r
+ (
+wch¨_t
+ *
+__hay°ack
+, c⁄° wch¨_à*
+__√edÀ
+)
+
+275 
+__THROW
+ 
+	`__asm
+ ("wcs°r"Ë
+__©åibuã_puª__
+;
+
+276 "C++" c⁄° 
+wch¨_t
+ *
+	$wcs°r
+ (c⁄° 
+wch¨_t
+ *
+__hay°ack
+,
+
+277 c⁄° 
+wch¨_t
+ *
+__√edÀ
+)
+
+278 
+__THROW
+ 
+	`__asm
+ ("wcs°r"Ë
+__©åibuã_puª__
+;
+
+280 
+wch¨_t
+ *
+	$wcs°r
+ (c⁄° 
+wch¨_t
+ *
+__hay°ack
+, c⁄° wch¨_à*
+__√edÀ
+)
+
+281 
+__THROW
+ 
+__©åibuã_puª__
+;
+
+285 
+wch¨_t
+ *
+	$wc°ok
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+,
+
+286 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__dñim
+,
+
+287 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__±r
+Ë
+__THROW
+;
+
+290 
+size_t
+ 
+	$wc¶í
+ (c⁄° 
+wch¨_t
+ *
+__s
+Ë
+__THROW
+ 
+__©åibuã_puª__
+;
+
+291 
+__END_NAMESPACE_STD
+
+
+293 #ifde‡
+__USE_XOPEN
+
+
+295 #ifde‡
+__CORRECT_ISO_CPP_WCHAR_H_PROTO
+
+
+296 "C++" 
+wch¨_t
+ *
+	$wcswcs
+ (
+wch¨_t
+ *
+__hay°ack
+, c⁄° wch¨_à*
+__√edÀ
+)
+
+297 
+__THROW
+ 
+	`__asm
+ ("wcswcs"Ë
+__©åibuã_puª__
+;
+
+298 "C++" c⁄° 
+wch¨_t
+ *
+	$wcswcs
+ (c⁄° 
+wch¨_t
+ *
+__hay°ack
+,
+
+299 c⁄° 
+wch¨_t
+ *
+__√edÀ
+)
+
+300 
+__THROW
+ 
+	`__asm
+ ("wcswcs"Ë
+__©åibuã_puª__
+;
+
+302 
+wch¨_t
+ *
+	$wcswcs
+ (c⁄° 
+wch¨_t
+ *
+__hay°ack
+, c⁄° wch¨_à*
+__√edÀ
+)
+
+303 
+__THROW
+ 
+__©åibuã_puª__
+;
+
+307 #ifde‡
+__USE_XOPEN2K8
+
+
+309 
+size_t
+ 
+	$wc¢Àn
+ (c⁄° 
+wch¨_t
+ *
+__s
+, 
+size_t
+ 
+__maxÀn
+)
+
+310 
+__THROW
+ 
+__©åibuã_puª__
+;
+
+314 
+__BEGIN_NAMESPACE_STD
+
+
+316 #ifde‡
+__CORRECT_ISO_CPP_WCHAR_H_PROTO
+
+
+317 "C++" 
+wch¨_t
+ *
+	$wmemchr
+ (
+wch¨_t
+ *
+__s
+, wch¨_à
+__c
+, 
+size_t
+ 
+__n
+)
+
+318 
+__THROW
+ 
+	`__asm
+ ("wmemchr"Ë
+__©åibuã_puª__
+;
+
+319 "C++" c⁄° 
+wch¨_t
+ *
+	$wmemchr
+ (c⁄° 
+wch¨_t
+ *
+__s
+, wch¨_à
+__c
+,
+
+320 
+size_t
+ 
+__n
+)
+
+321 
+__THROW
+ 
+	`__asm
+ ("wmemchr"Ë
+__©åibuã_puª__
+;
+
+323 
+wch¨_t
+ *
+	$wmemchr
+ (c⁄° 
+wch¨_t
+ *
+__s
+, wch¨_à
+__c
+, 
+size_t
+ 
+__n
+)
+
+324 
+__THROW
+ 
+__©åibuã_puª__
+;
+
+328 
+	$wmemcmp
+ (c⁄° 
+wch¨_t
+ *
+__s1
+, c⁄° wch¨_à*
+__s2
+, 
+size_t
+ 
+__n
+)
+
+329 
+__THROW
+ 
+__©åibuã_puª__
+;
+
+332 
+wch¨_t
+ *
+	$wmem˝y
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s1
+,
+
+333 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s2
+, 
+size_t
+ 
+__n
+Ë
+__THROW
+;
+
+337 
+wch¨_t
+ *
+	$wmemmove
+ (
+wch¨_t
+ *
+__s1
+, c⁄° wch¨_à*
+__s2
+, 
+size_t
+ 
+__n
+)
+
+338 
+__THROW
+;
+
+341 
+wch¨_t
+ *
+	$wmem£t
+ (
+wch¨_t
+ *
+__s
+, wch¨_à
+__c
+, 
+size_t
+ 
+__n
+Ë
+__THROW
+;
+
+342 
+__END_NAMESPACE_STD
+
+
+344 #ifde‡
+__USE_GNU
+
+
+347 
+wch¨_t
+ *
+	$wmemp˝y
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s1
+,
+
+348 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s2
+, 
+size_t
+ 
+__n
+)
+
+349 
+__THROW
+;
+
+353 
+__BEGIN_NAMESPACE_STD
+
+
+356 
+wöt_t
+ 
+	$btowc
+ (
+__c
+Ë
+__THROW
+;
+
+360 
+	$w˘ob
+ (
+wöt_t
+ 
+__c
+Ë
+__THROW
+;
+
+364 
+	$mbsöô
+ (c⁄° 
+mb°©e_t
+ *
+__ps
+Ë
+__THROW
+ 
+__©åibuã_puª__
+;
+
+368 
+size_t
+ 
+	$mbπowc
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__pwc
+,
+
+369 c⁄° *
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__n
+,
+
+370 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__p
+Ë
+__THROW
+;
+
+373 
+size_t
+ 
+	$w¸tomb
+ (*
+__ª°ri˘
+ 
+__s
+, 
+wch¨_t
+ 
+__wc
+,
+
+374 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+Ë
+__THROW
+;
+
+377 
+size_t
+ 
+	$__mbæí
+ (c⁄° *
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__n
+,
+
+378 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+Ë
+__THROW
+;
+
+379 
+size_t
+ 
+	$mbæí
+ (c⁄° *
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__n
+,
+
+380 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+Ë
+__THROW
+;
+
+381 
+__END_NAMESPACE_STD
+
+
+383 #ifde‡
+__USE_EXTERN_INLINES
+
+
+389 
+wöt_t
+ 
+	$__btowc_Æüs
+ (
+__c
+Ë
+	`__asm
+ ("btowc");
+
+390 
+__exã∫_ölöe
+ 
+wöt_t
+
+
+391 
+	`__NTH
+ (
+	$btowc
+ (
+__c
+))
+
+392 {  (
+	`__buûtö_c⁄°™t_p
+ (
+__c
+) && __c >= '\0' && __c <= '\x7f'
+
+393 ? (
+wöt_t
+Ë
+__c
+ : 
+	`__btowc_Æüs
+ (__c)); 
+	}
+}
+
+395 
+	$__w˘ob_Æüs
+ (
+wöt_t
+ 
+__c
+Ë
+	`__asm
+ ("wctob");
+
+396 
+__exã∫_ölöe
+ 
+
+397 
+	`__NTH
+ (
+	$w˘ob
+ (
+wöt_t
+ 
+__wc
+))
+
+398 {  (
+	`__buûtö_c⁄°™t_p
+ (
+__wc
+Ë&& __w¯>
+L
+'\0' && __wc <= L'\x7f'
+
+399 ? (Ë
+__wc
+ : 
+	`__w˘ob_Æüs
+ (__wc)); 
+	}
+}
+
+401 
+__exã∫_ölöe
+ 
+size_t
+
+
+402 
+__NTH
+ (
+	$mbæí
+ (c⁄° *
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__n
+,
+
+403 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+))
+
+404 {  (
+__ps
+ !
+NULL
+
+
+405 ? 
+	`mbπowc
+ (
+NULL
+, 
+__s
+, 
+__n
+, 
+__ps
+Ë: 
+	`__mbæí
+ (__s, __n, NULL)); 
+	}
+}
+
+408 
+__BEGIN_NAMESPACE_STD
+
+
+411 
+size_t
+ 
+	$mb§towcs
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__d°
+,
+
+412 c⁄° **
+__ª°ri˘
+ 
+__§c
+, 
+size_t
+ 
+__Àn
+,
+
+413 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+Ë
+__THROW
+;
+
+417 
+size_t
+ 
+	$wc§tombs
+ (*
+__ª°ri˘
+ 
+__d°
+,
+
+418 c⁄° 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__§c
+, 
+size_t
+ 
+__Àn
+,
+
+419 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+Ë
+__THROW
+;
+
+420 
+__END_NAMESPACE_STD
+
+
+423 #ifdef 
+__USE_XOPEN2K8
+
+
+426 
+size_t
+ 
+	$mb¢πowcs
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__d°
+,
+
+427 c⁄° **
+__ª°ri˘
+ 
+__§c
+, 
+size_t
+ 
+__nmc
+,
+
+428 
+size_t
+ 
+__Àn
+, 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+Ë
+__THROW
+;
+
+432 
+size_t
+ 
+	$wc¢πombs
+ (*
+__ª°ri˘
+ 
+__d°
+,
+
+433 c⁄° 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__§c
+,
+
+434 
+size_t
+ 
+__nwc
+, size_à
+__Àn
+,
+
+435 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+Ë
+__THROW
+;
+
+440 #ifde‡
+__USE_XOPEN
+
+
+442 
+	$wcwidth
+ (
+wch¨_t
+ 
+__c
+Ë
+__THROW
+;
+
+446 
+	$wcswidth
+ (c⁄° 
+wch¨_t
+ *
+__s
+, 
+size_t
+ 
+__n
+Ë
+__THROW
+;
+
+450 
+__BEGIN_NAMESPACE_STD
+
+
+453 
+	$wc°od
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__≈å
+,
+
+454 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__íd±r
+Ë
+__THROW
+;
+
+455 
+__END_NAMESPACE_STD
+
+
+457 #ifde‡
+__USE_ISOC99
+
+
+458 
+__BEGIN_NAMESPACE_C99
+
+
+460 
+	$wc°of
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__≈å
+,
+
+461 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__íd±r
+Ë
+__THROW
+;
+
+462 
+	$wc°ﬁd
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__≈å
+,
+
+463 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__íd±r
+Ë
+__THROW
+;
+
+464 
+__END_NAMESPACE_C99
+
+
+468 
+__BEGIN_NAMESPACE_STD
+
+
+471 
+	$wc°ﬁ
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__≈å
+,
+
+472 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__íd±r
+, 
+__ba£
+Ë
+__THROW
+;
+
+476 
+	$wc°oul
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__≈å
+,
+
+477 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__íd±r
+, 
+__ba£
+)
+
+478 
+__THROW
+;
+
+479 
+__END_NAMESPACE_STD
+
+
+481 #ifde‡
+__USE_ISOC99
+
+
+482 
+__BEGIN_NAMESPACE_C99
+
+
+485 
+__exãnsi⁄__
+
+
+486 
+	$wc°ﬁl
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__≈å
+,
+
+487 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__íd±r
+, 
+__ba£
+)
+
+488 
+__THROW
+;
+
+492 
+__exãnsi⁄__
+
+
+493 
+	$wc°ouŒ
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__≈å
+,
+
+494 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__íd±r
+,
+
+495 
+__ba£
+Ë
+__THROW
+;
+
+496 
+__END_NAMESPACE_C99
+
+
+499 #ifde‡
+__USE_GNU
+
+
+502 
+__exãnsi⁄__
+
+
+503 
+	$wc°oq
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__≈å
+,
+
+504 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__íd±r
+, 
+__ba£
+)
+
+505 
+__THROW
+;
+
+509 
+__exãnsi⁄__
+
+
+510 
+	$wc°ouq
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__≈å
+,
+
+511 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__íd±r
+,
+
+512 
+__ba£
+Ë
+__THROW
+;
+
+515 #ifde‡
+__USE_GNU
+
+
+529 
+	~<xloˇÀ.h
+>
+
+533 
+	$wc°ﬁ_l
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__≈å
+,
+
+534 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__íd±r
+, 
+__ba£
+,
+
+535 
+__loˇÀ_t
+ 
+__loc
+Ë
+__THROW
+;
+
+537 
+	$wc°oul_l
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__≈å
+,
+
+538 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__íd±r
+,
+
+539 
+__ba£
+, 
+__loˇÀ_t
+ 
+__loc
+Ë
+__THROW
+;
+
+541 
+__exãnsi⁄__
+
+
+542 
+	$wc°ﬁl_l
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__≈å
+,
+
+543 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__íd±r
+,
+
+544 
+__ba£
+, 
+__loˇÀ_t
+ 
+__loc
+Ë
+__THROW
+;
+
+546 
+__exãnsi⁄__
+
+
+547 
+	$wc°ouŒ_l
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__≈å
+,
+
+548 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__íd±r
+,
+
+549 
+__ba£
+, 
+__loˇÀ_t
+ 
+__loc
+)
+
+550 
+__THROW
+;
+
+552 
+	$wc°od_l
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__≈å
+,
+
+553 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__íd±r
+, 
+__loˇÀ_t
+ 
+__loc
+)
+
+554 
+__THROW
+;
+
+556 
+	$wc°of_l
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__≈å
+,
+
+557 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__íd±r
+, 
+__loˇÀ_t
+ 
+__loc
+)
+
+558 
+__THROW
+;
+
+560 
+	$wc°ﬁd_l
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__≈å
+,
+
+561 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__íd±r
+,
+
+562 
+__loˇÀ_t
+ 
+__loc
+Ë
+__THROW
+;
+
+566 #ifde‡
+__USE_XOPEN2K8
+
+
+569 
+wch¨_t
+ *
+	$w˝˝y
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+,
+
+570 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+Ë
+__THROW
+;
+
+574 
+wch¨_t
+ *
+	$w˝n˝y
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+,
+
+575 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+, 
+size_t
+ 
+__n
+)
+
+576 
+__THROW
+;
+
+583 
+__FILE
+ *
+	$›í_wmem°ªam
+ (
+wch¨_t
+ **
+__buÊoc
+, 
+size_t
+ *
+__sizñoc
+Ë
+__THROW
+;
+
+586 #i‡
+deföed
+ 
+__USE_ISOC95
+ || deföed 
+__USE_UNIX98
+
+
+587 
+__BEGIN_NAMESPACE_STD
+
+
+590 
+	$fwide
+ (
+__FILE
+ *
+__Â
+, 
+__mode
+Ë
+__THROW
+;
+
+597 
+	`fw¥ötf
+ (
+__FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+,
+
+598 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+, ...)
+
+604 
+	`w¥ötf
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+, ...)
+
+607 
+	$sw¥ötf
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__n
+,
+
+608 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+, ...)
+
+609 
+__THROW
+ ;
+
+615 
+	`vfw¥ötf
+ (
+__FILE
+ *
+__ª°ri˘
+ 
+__s
+,
+
+616 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+617 
+__gnuc_va_li°
+ 
+__¨g
+)
+
+623 
+	`vw¥ötf
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+624 
+__gnuc_va_li°
+ 
+__¨g
+)
+
+628 
+	$vsw¥ötf
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__n
+,
+
+629 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+630 
+__gnuc_va_li°
+ 
+__¨g
+)
+
+631 
+__THROW
+ ;
+
+638 
+	`fwsˇnf
+ (
+__FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+,
+
+639 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+, ...)
+
+645 
+	`wsˇnf
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+, ...)
+
+648 
+	$swsˇnf
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+,
+
+649 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+, ...)
+
+650 
+__THROW
+ ;
+
+652 #i‡
+deföed
+ 
+__USE_ISOC99
+ && !deföed 
+__USE_GNU
+ \
+
+653 && (!
+deföed
+ 
+__LDBL_COMPAT
+ || !deföed 
+__REDIRECT
+) \
+
+654 && (
+deföed
+ 
+__STRICT_ANSI__
+ || deföed 
+__USE_XOPEN2K
+)
+
+655 #ifde‡
+__REDIRECT
+
+
+659 
+	`__REDIRECT
+ (
+fwsˇnf
+, (
+__FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+,
+
+660 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+, ...),
+
+661 
+__isoc99_fwsˇnf
+)
+
+663 
+	`__REDIRECT
+ (
+wsˇnf
+, (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+, ...),
+
+664 
+__isoc99_wsˇnf
+)
+
+666 
+	`__REDIRECT_NTH
+ (
+swsˇnf
+, (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+,
+
+667 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+668 ...), 
+__isoc99_swsˇnf
+)
+
+671 
+	`__isoc99_fwsˇnf
+ (
+__FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+,
+
+672 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+, ...);
+
+673 
+	`__isoc99_wsˇnf
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+, ...);
+
+674 
+	$__isoc99_swsˇnf
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+,
+
+675 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+, ...)
+
+676 
+__THROW
+;
+
+677 
+	#fwsˇnf
+ 
+__isoc99_fwsˇnf
+
+
+	)
+
+678 
+	#wsˇnf
+ 
+__isoc99_wsˇnf
+
+
+	)
+
+679 
+	#swsˇnf
+ 
+__isoc99_swsˇnf
+
+
+	)
+
+683 
+__END_NAMESPACE_STD
+
+
+686 #ifde‡
+__USE_ISOC99
+
+
+687 
+__BEGIN_NAMESPACE_C99
+
+
+692 
+	`vfwsˇnf
+ (
+__FILE
+ *
+__ª°ri˘
+ 
+__s
+,
+
+693 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+694 
+__gnuc_va_li°
+ 
+__¨g
+)
+
+700 
+	`vwsˇnf
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+701 
+__gnuc_va_li°
+ 
+__¨g
+)
+
+704 
+	$vswsˇnf
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+,
+
+705 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+706 
+__gnuc_va_li°
+ 
+__¨g
+)
+
+707 
+__THROW
+ ;
+
+709 #i‡!
+deföed
+ 
+__USE_GNU
+ \
+
+710 && (!
+deföed
+ 
+__LDBL_COMPAT
+ || !deföed 
+__REDIRECT
+) \
+
+711 && (
+deföed
+ 
+__STRICT_ANSI__
+ || deföed 
+__USE_XOPEN2K
+)
+
+712 #ifde‡
+__REDIRECT
+
+
+713 
+	`__REDIRECT
+ (
+vfwsˇnf
+, (
+__FILE
+ *
+__ª°ri˘
+ 
+__s
+,
+
+714 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+715 
+__gnuc_va_li°
+ 
+__¨g
+), 
+__isoc99_vfwsˇnf
+)
+
+717 
+	`__REDIRECT
+ (
+vwsˇnf
+, (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+718 
+__gnuc_va_li°
+ 
+__¨g
+), 
+__isoc99_vwsˇnf
+)
+
+720 
+	`__REDIRECT_NTH
+ (
+vswsˇnf
+, (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+,
+
+721 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+722 
+__gnuc_va_li°
+ 
+__¨g
+), 
+__isoc99_vswsˇnf
+)
+
+725 
+	`__isoc99_vfwsˇnf
+ (
+__FILE
+ *
+__ª°ri˘
+ 
+__s
+,
+
+726 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+727 
+__gnuc_va_li°
+ 
+__¨g
+);
+
+728 
+	`__isoc99_vwsˇnf
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+729 
+__gnuc_va_li°
+ 
+__¨g
+);
+
+730 
+	$__isoc99_vswsˇnf
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+,
+
+731 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+732 
+__gnuc_va_li°
+ 
+__¨g
+Ë
+__THROW
+;
+
+733 
+	#vfwsˇnf
+ 
+__isoc99_vfwsˇnf
+
+
+	)
+
+734 
+	#vwsˇnf
+ 
+__isoc99_vwsˇnf
+
+
+	)
+
+735 
+	#vswsˇnf
+ 
+__isoc99_vswsˇnf
+
+
+	)
+
+739 
+__END_NAMESPACE_C99
+
+
+743 
+__BEGIN_NAMESPACE_STD
+
+
+748 
+wöt_t
+ 
+	`fgëwc
+ (
+__FILE
+ *
+__°ªam
+);
+
+749 
+wöt_t
+ 
+	`gëwc
+ (
+__FILE
+ *
+__°ªam
+);
+
+755 
+wöt_t
+ 
+	`gëwch¨
+ ();
+
+762 
+wöt_t
+ 
+	`Âutwc
+ (
+wch¨_t
+ 
+__wc
+, 
+__FILE
+ *
+__°ªam
+);
+
+763 
+wöt_t
+ 
+	`putwc
+ (
+wch¨_t
+ 
+__wc
+, 
+__FILE
+ *
+__°ªam
+);
+
+769 
+wöt_t
+ 
+	`putwch¨
+ (
+wch¨_t
+ 
+__wc
+);
+
+777 
+wch¨_t
+ *
+	`fgëws
+ (wch¨_à*
+__ª°ri˘
+ 
+__ws
+, 
+__n
+,
+
+778 
+__FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+);
+
+784 
+	`Âutws
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__ws
+,
+
+785 
+__FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+);
+
+792 
+wöt_t
+ 
+	`ungëwc
+ (wöt_à
+__wc
+, 
+__FILE
+ *
+__°ªam
+);
+
+793 
+__END_NAMESPACE_STD
+
+
+796 #ifde‡
+__USE_GNU
+
+
+804 
+wöt_t
+ 
+	`gëwc_u∆ocked
+ (
+__FILE
+ *
+__°ªam
+);
+
+805 
+wöt_t
+ 
+	`gëwch¨_u∆ocked
+ ();
+
+813 
+wöt_t
+ 
+	`fgëwc_u∆ocked
+ (
+__FILE
+ *
+__°ªam
+);
+
+821 
+wöt_t
+ 
+	`Âutwc_u∆ocked
+ (
+wch¨_t
+ 
+__wc
+, 
+__FILE
+ *
+__°ªam
+);
+
+830 
+wöt_t
+ 
+	`putwc_u∆ocked
+ (
+wch¨_t
+ 
+__wc
+, 
+__FILE
+ *
+__°ªam
+);
+
+831 
+wöt_t
+ 
+	`putwch¨_u∆ocked
+ (
+wch¨_t
+ 
+__wc
+);
+
+840 
+wch¨_t
+ *
+	`fgëws_u∆ocked
+ (wch¨_à*
+__ª°ri˘
+ 
+__ws
+, 
+__n
+,
+
+841 
+__FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+);
+
+849 
+	`Âutws_u∆ocked
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__ws
+,
+
+850 
+__FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+);
+
+854 
+__BEGIN_NAMESPACE_C99
+
+
+858 
+size_t
+ 
+	$wcs·ime
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__maxsize
+,
+
+859 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+860 c⁄° 
+tm
+ *
+__ª°ri˘
+ 
+__ç
+Ë
+__THROW
+;
+
+861 
+__END_NAMESPACE_C99
+
+
+863 #ifde‡
+__USE_GNU
+
+
+864 
+	~<xloˇÀ.h
+>
+
+868 
+size_t
+ 
+	$wcs·ime_l
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__maxsize
+,
+
+869 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+870 c⁄° 
+tm
+ *
+__ª°ri˘
+ 
+__ç
+,
+
+871 
+__loˇÀ_t
+ 
+__loc
+Ë
+__THROW
+;
+
+880 #i‡
+deföed
+ 
+__USE_UNIX98
+ && !deföed 
+__USE_GNU
+
+
+881 
+	#__√ed_iswxxx
+
+
+	)
+
+882 
+	~<w˘y≥.h
+>
+
+886 #i‡
+__USE_FORTIFY_LEVEL
+ > 0 && 
+deföed
+ 
+__f‹tify_fun˘i⁄
+
+
+887 
+	~<bôs/wch¨2.h
+>
+
+890 #ifde‡
+__LDBL_COMPAT
+
+
+891 
+	~<bôs/wch¨-ldbl.h
+>
+
+894 
+__END_DECLS
+
+
+902 #unde‡
+__√ed_mb°©e_t
+
+
+903 #unde‡
+__√ed_wöt_t
+
+
+	@/usr/include/asm-generic/errno.h
+
+1 #i‚de‡
+_ASM_GENERIC_ERRNO_H
+
+
+2 
+	#_ASM_GENERIC_ERRNO_H
+
+
+	)
+
+4 
+	~<asm-gíîic/î∫o-ba£.h
+>
+
+6 
+	#EDEADLK
+ 35
+
+	)
+
+7 
+	#ENAMETOOLONG
+ 36
+
+	)
+
+8 
+	#ENOLCK
+ 37
+
+	)
+
+17 
+	#ENOSYS
+ 38
+
+	)
+
+19 
+	#ENOTEMPTY
+ 39
+
+	)
+
+20 
+	#ELOOP
+ 40
+
+	)
+
+21 
+	#EWOULDBLOCK
+ 
+EAGAIN
+
+
+	)
+
+22 
+	#ENOMSG
+ 42
+
+	)
+
+23 
+	#EIDRM
+ 43
+
+	)
+
+24 
+	#ECHRNG
+ 44
+
+	)
+
+25 
+	#EL2NSYNC
+ 45
+
+	)
+
+26 
+	#EL3HLT
+ 46
+
+	)
+
+27 
+	#EL3RST
+ 47
+
+	)
+
+28 
+	#ELNRNG
+ 48
+
+	)
+
+29 
+	#EUNATCH
+ 49
+
+	)
+
+30 
+	#ENOCSI
+ 50
+
+	)
+
+31 
+	#EL2HLT
+ 51
+
+	)
+
+32 
+	#EBADE
+ 52
+
+	)
+
+33 
+	#EBADR
+ 53
+
+	)
+
+34 
+	#EXFULL
+ 54
+
+	)
+
+35 
+	#ENOANO
+ 55
+
+	)
+
+36 
+	#EBADRQC
+ 56
+
+	)
+
+37 
+	#EBADSLT
+ 57
+
+	)
+
+39 
+	#EDEADLOCK
+ 
+EDEADLK
+
+
+	)
+
+41 
+	#EBFONT
+ 59
+
+	)
+
+42 
+	#ENOSTR
+ 60
+
+	)
+
+43 
+	#ENODATA
+ 61
+
+	)
+
+44 
+	#ETIME
+ 62
+
+	)
+
+45 
+	#ENOSR
+ 63
+
+	)
+
+46 
+	#ENONET
+ 64
+
+	)
+
+47 
+	#ENOPKG
+ 65
+
+	)
+
+48 
+	#EREMOTE
+ 66
+
+	)
+
+49 
+	#ENOLINK
+ 67
+
+	)
+
+50 
+	#EADV
+ 68
+
+	)
+
+51 
+	#ESRMNT
+ 69
+
+	)
+
+52 
+	#ECOMM
+ 70
+
+	)
+
+53 
+	#EPROTO
+ 71
+
+	)
+
+54 
+	#EMULTIHOP
+ 72
+
+	)
+
+55 
+	#EDOTDOT
+ 73
+
+	)
+
+56 
+	#EBADMSG
+ 74
+
+	)
+
+57 
+	#EOVERFLOW
+ 75
+
+	)
+
+58 
+	#ENOTUNIQ
+ 76
+
+	)
+
+59 
+	#EBADFD
+ 77
+
+	)
+
+60 
+	#EREMCHG
+ 78
+
+	)
+
+61 
+	#ELIBACC
+ 79
+
+	)
+
+62 
+	#ELIBBAD
+ 80
+
+	)
+
+63 
+	#ELIBSCN
+ 81
+
+	)
+
+64 
+	#ELIBMAX
+ 82
+
+	)
+
+65 
+	#ELIBEXEC
+ 83
+
+	)
+
+66 
+	#EILSEQ
+ 84
+
+	)
+
+67 
+	#ERESTART
+ 85
+
+	)
+
+68 
+	#ESTRPIPE
+ 86
+
+	)
+
+69 
+	#EUSERS
+ 87
+
+	)
+
+70 
+	#ENOTSOCK
+ 88
+
+	)
+
+71 
+	#EDESTADDRREQ
+ 89
+
+	)
+
+72 
+	#EMSGSIZE
+ 90
+
+	)
+
+73 
+	#EPROTOTYPE
+ 91
+
+	)
+
+74 
+	#ENOPROTOOPT
+ 92
+
+	)
+
+75 
+	#EPROTONOSUPPORT
+ 93
+
+	)
+
+76 
+	#ESOCKTNOSUPPORT
+ 94
+
+	)
+
+77 
+	#EOPNOTSUPP
+ 95
+
+	)
+
+78 
+	#EPFNOSUPPORT
+ 96
+
+	)
+
+79 
+	#EAFNOSUPPORT
+ 97
+
+	)
+
+80 
+	#EADDRINUSE
+ 98
+
+	)
+
+81 
+	#EADDRNOTAVAIL
+ 99
+
+	)
+
+82 
+	#ENETDOWN
+ 100
+
+	)
+
+83 
+	#ENETUNREACH
+ 101
+
+	)
+
+84 
+	#ENETRESET
+ 102
+
+	)
+
+85 
+	#ECONNABORTED
+ 103
+
+	)
+
+86 
+	#ECONNRESET
+ 104
+
+	)
+
+87 
+	#ENOBUFS
+ 105
+
+	)
+
+88 
+	#EISCONN
+ 106
+
+	)
+
+89 
+	#ENOTCONN
+ 107
+
+	)
+
+90 
+	#ESHUTDOWN
+ 108
+
+	)
+
+91 
+	#ETOOMANYREFS
+ 109
+
+	)
+
+92 
+	#ETIMEDOUT
+ 110
+
+	)
+
+93 
+	#ECONNREFUSED
+ 111
+
+	)
+
+94 
+	#EHOSTDOWN
+ 112
+
+	)
+
+95 
+	#EHOSTUNREACH
+ 113
+
+	)
+
+96 
+	#EALREADY
+ 114
+
+	)
+
+97 
+	#EINPROGRESS
+ 115
+
+	)
+
+98 
+	#ESTALE
+ 116
+
+	)
+
+99 
+	#EUCLEAN
+ 117
+
+	)
+
+100 
+	#ENOTNAM
+ 118
+
+	)
+
+101 
+	#ENAVAIL
+ 119
+
+	)
+
+102 
+	#EISNAM
+ 120
+
+	)
+
+103 
+	#EREMOTEIO
+ 121
+
+	)
+
+104 
+	#EDQUOT
+ 122
+
+	)
+
+106 
+	#ENOMEDIUM
+ 123
+
+	)
+
+107 
+	#EMEDIUMTYPE
+ 124
+
+	)
+
+108 
+	#ECANCELED
+ 125
+
+	)
+
+109 
+	#ENOKEY
+ 126
+
+	)
+
+110 
+	#EKEYEXPIRED
+ 127
+
+	)
+
+111 
+	#EKEYREVOKED
+ 128
+
+	)
+
+112 
+	#EKEYREJECTED
+ 129
+
+	)
+
+115 
+	#EOWNERDEAD
+ 130
+
+	)
+
+116 
+	#ENOTRECOVERABLE
+ 131
+
+	)
+
+118 
+	#ERFKILL
+ 132
+
+	)
+
+120 
+	#EHWPOISON
+ 133
+
+	)
+
+	@/usr/include/bits/byteswap-16.h
+
+19 #i‚de‡
+_BITS_BYTESWAP_H
+
+
+23 #ifde‡
+__GNUC__
+
+
+24 #i‡
+__GNUC__
+ >= 2
+
+25 
+	#__bsw≠_16
+(
+x
+) \
+
+26 (
+__exãnsi⁄__
+ \
+
+27 ({ 
+__v
+, 
+__x
+ = (Ë(
+x
+); \
+
+28 i‡(
+	`__buûtö_c⁄°™t_p
+ (
+__x
+)) \
+
+29 
+__v
+ = 
+	`__bsw≠_c⁄°™t_16
+ (
+__x
+); \
+
+31 
+	`__asm__
+ ("rorw $8, %w0" \
+
+32 : "Ù" (
+__v
+) \
+
+33 : "0" (
+__x
+) \
+
+35 
+__v
+; }))
+
+	)
+
+38 
+	#__bsw≠_16
+(
+x
+) \
+
+39 (
+__exãnsi⁄__
+ \
+
+40 ({ 
+__x
+ = (Ë(
+x
+); \
+
+41 
+	`__bsw≠_c⁄°™t_16
+ (
+__x
+); }))
+
+	)
+
+44 
+__ölöe
+ 
+
+45 
+	$__bsw≠_16
+ (
+__bsx
+)
+
+47  
+	`__bsw≠_c⁄°™t_16
+ (
+__bsx
+);
+
+48 
+	}
+}
+
+	@/usr/include/bits/pthreadtypes.h
+
+18 #i‚de‡
+_BITS_PTHREADTYPES_H
+
+
+19 
+	#_BITS_PTHREADTYPES_H
+ 1
+
+	)
+
+21 
+	~<bôs/w‹dsize.h
+>
+
+23 #ifde‡
+__x86_64__
+
+
+24 #i‡
+__WORDSIZE
+ == 64
+
+25 
+	#__SIZEOF_PTHREAD_ATTR_T
+ 56
+
+	)
+
+26 
+	#__SIZEOF_PTHREAD_MUTEX_T
+ 40
+
+	)
+
+27 
+	#__SIZEOF_PTHREAD_MUTEXATTR_T
+ 4
+
+	)
+
+28 
+	#__SIZEOF_PTHREAD_COND_T
+ 48
+
+	)
+
+29 
+	#__SIZEOF_PTHREAD_CONDATTR_T
+ 4
+
+	)
+
+30 
+	#__SIZEOF_PTHREAD_RWLOCK_T
+ 56
+
+	)
+
+31 
+	#__SIZEOF_PTHREAD_RWLOCKATTR_T
+ 8
+
+	)
+
+32 
+	#__SIZEOF_PTHREAD_BARRIER_T
+ 32
+
+	)
+
+33 
+	#__SIZEOF_PTHREAD_BARRIERATTR_T
+ 4
+
+	)
+
+35 
+	#__SIZEOF_PTHREAD_ATTR_T
+ 32
+
+	)
+
+36 
+	#__SIZEOF_PTHREAD_MUTEX_T
+ 32
+
+	)
+
+37 
+	#__SIZEOF_PTHREAD_MUTEXATTR_T
+ 4
+
+	)
+
+38 
+	#__SIZEOF_PTHREAD_COND_T
+ 48
+
+	)
+
+39 
+	#__SIZEOF_PTHREAD_CONDATTR_T
+ 4
+
+	)
+
+40 
+	#__SIZEOF_PTHREAD_RWLOCK_T
+ 44
+
+	)
+
+41 
+	#__SIZEOF_PTHREAD_RWLOCKATTR_T
+ 8
+
+	)
+
+42 
+	#__SIZEOF_PTHREAD_BARRIER_T
+ 20
+
+	)
+
+43 
+	#__SIZEOF_PTHREAD_BARRIERATTR_T
+ 4
+
+	)
+
+46 
+	#__SIZEOF_PTHREAD_ATTR_T
+ 36
+
+	)
+
+47 
+	#__SIZEOF_PTHREAD_MUTEX_T
+ 24
+
+	)
+
+48 
+	#__SIZEOF_PTHREAD_MUTEXATTR_T
+ 4
+
+	)
+
+49 
+	#__SIZEOF_PTHREAD_COND_T
+ 48
+
+	)
+
+50 
+	#__SIZEOF_PTHREAD_CONDATTR_T
+ 4
+
+	)
+
+51 
+	#__SIZEOF_PTHREAD_RWLOCK_T
+ 32
+
+	)
+
+52 
+	#__SIZEOF_PTHREAD_RWLOCKATTR_T
+ 8
+
+	)
+
+53 
+	#__SIZEOF_PTHREAD_BARRIER_T
+ 20
+
+	)
+
+54 
+	#__SIZEOF_PTHREAD_BARRIERATTR_T
+ 4
+
+	)
+
+60 
+	t±hªad_t
+;
+
+63 
+	u±hªad_©å_t
+
+
+65 
+	m__size
+[
+__SIZEOF_PTHREAD_ATTR_T
+];
+
+66 
+	m__Æign
+;
+
+68 #i‚de‡
+__have_±hªad_©å_t
+
+
+69 
+±hªad_©å_t
+ 
+	t±hªad_©å_t
+;
+
+70 
+	#__have_±hªad_©å_t
+ 1
+
+	)
+
+74 #ifde‡
+__x86_64__
+
+
+75 
+	s__±hªad_öã∫Æ_li°
+
+
+77 
+__±hªad_öã∫Æ_li°
+ *
+	m__¥ev
+;
+
+78 
+__±hªad_öã∫Æ_li°
+ *
+	m__√xt
+;
+
+79 } 
+	t__±hªad_li°_t
+;
+
+81 
+	s__±hªad_öã∫Æ_¶i°
+
+
+83 
+__±hªad_öã∫Æ_¶i°
+ *
+	m__√xt
+;
+
+84 } 
+	t__±hªad_¶i°_t
+;
+
+92 
+	s__±hªad_muãx_s
+
+
+94 
+	m__lock
+;
+
+95 
+	m__cou¡
+;
+
+96 
+	m__ow√r
+;
+
+97 #ifde‡
+__x86_64__
+
+
+98 
+	m__nu£rs
+;
+
+102 
+	m__köd
+;
+
+103 #ifde‡
+__x86_64__
+
+
+104 
+	m__•ös
+;
+
+105 
+	m__ñisi⁄
+;
+
+106 
+__±hªad_li°_t
+ 
+	m__li°
+;
+
+107 
+	#__PTHREAD_MUTEX_HAVE_PREV
+ 1
+
+	)
+
+109 
+	#__PTHREAD_SPINS
+ 0, 0
+
+	)
+
+111 
+	m__nu£rs
+;
+
+112 
+__exãnsi⁄__
+ union
+
+116 
+	m__e•ös
+;
+
+117 
+	m__ñisi⁄
+;
+
+118 
+	#__•ös
+ 
+__ñisi⁄_d©a
+.
+__e•ös
+
+
+	)
+
+119 
+	#__ñisi⁄
+ 
+__ñisi⁄_d©a
+.
+__ñisi⁄
+
+
+	)
+
+120 
+	#__PTHREAD_SPINS
+ { 0, 0 }
+
+	)
+
+121 } 
+	m__ñisi⁄_d©a
+;
+
+122 
+__±hªad_¶i°_t
+ 
+	m__li°
+;
+
+125 } 
+	m__d©a
+;
+
+126 
+	m__size
+[
+__SIZEOF_PTHREAD_MUTEX_T
+];
+
+127 
+	m__Æign
+;
+
+128 } 
+	t±hªad_muãx_t
+;
+
+132 
+	m__size
+[
+__SIZEOF_PTHREAD_MUTEXATTR_T
+];
+
+133 
+	m__Æign
+;
+
+134 } 
+	t±hªad_muãx©å_t
+;
+
+143 
+	m__lock
+;
+
+144 
+	m__fuãx
+;
+
+145 
+__exãnsi⁄__
+ 
+	m__tŸÆ_£q
+;
+
+146 
+__exãnsi⁄__
+ 
+	m__wakeup_£q
+;
+
+147 
+__exãnsi⁄__
+ 
+	m__wokí_£q
+;
+
+148 *
+	m__muãx
+;
+
+149 
+	m__nwaôîs
+;
+
+150 
+	m__brﬂdˇ°_£q
+;
+
+151 } 
+	m__d©a
+;
+
+152 
+	m__size
+[
+__SIZEOF_PTHREAD_COND_T
+];
+
+153 
+__exãnsi⁄__
+ 
+	m__Æign
+;
+
+154 } 
+	t±hªad_c⁄d_t
+;
+
+158 
+	m__size
+[
+__SIZEOF_PTHREAD_CONDATTR_T
+];
+
+159 
+	m__Æign
+;
+
+160 } 
+	t±hªad_c⁄d©å_t
+;
+
+164 
+	t±hªad_key_t
+;
+
+168 
+	t±hªad_⁄˚_t
+;
+
+171 #i‡
+deföed
+ 
+__USE_UNIX98
+ || deföed 
+__USE_XOPEN2K
+
+
+176 #ifde‡
+__x86_64__
+
+
+179 
+	m__lock
+;
+
+180 
+	m__ƒ_ªadîs
+;
+
+181 
+	m__ªadîs_wakeup
+;
+
+182 
+	m__wrôî_wakeup
+;
+
+183 
+	m__ƒ_ªadîs_queued
+;
+
+184 
+	m__ƒ_wrôîs_queued
+;
+
+185 
+	m__wrôî
+;
+
+186 
+	m__sh¨ed
+;
+
+187 sig√d 
+	m__rwñisi⁄
+;
+
+188 #ifde‡ 
+__ILP32__
+
+
+189 
+	m__∑d1
+[3];
+
+190 
+	#__PTHREAD_RWLOCK_ELISION_EXTRA
+ 0, { 0, 0, 0 }
+
+	)
+
+192 
+	m__∑d1
+[7];
+
+193 
+	#__PTHREAD_RWLOCK_ELISION_EXTRA
+ 0, { 0, 0, 0, 0, 0, 0, 0 }
+
+	)
+
+195 
+	m__∑d2
+;
+
+198 
+	m__Êags
+;
+
+199 
+	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
+ 1
+
+	)
+
+200 } 
+	m__d©a
+;
+
+204 
+	m__lock
+;
+
+205 
+	m__ƒ_ªadîs
+;
+
+206 
+	m__ªadîs_wakeup
+;
+
+207 
+	m__wrôî_wakeup
+;
+
+208 
+	m__ƒ_ªadîs_queued
+;
+
+209 
+	m__ƒ_wrôîs_queued
+;
+
+212 
+	m__Êags
+;
+
+213 
+	m__sh¨ed
+;
+
+214 sig√d 
+	m__rwñisi⁄
+;
+
+215 
+	#__PTHREAD_RWLOCK_ELISION_EXTRA
+ 0
+
+	)
+
+216 
+	m__∑d2
+;
+
+217 
+	m__wrôî
+;
+
+218 } 
+	m__d©a
+;
+
+220 
+	m__size
+[
+__SIZEOF_PTHREAD_RWLOCK_T
+];
+
+221 
+	m__Æign
+;
+
+222 } 
+	t±hªad_rwlock_t
+;
+
+226 
+	m__size
+[
+__SIZEOF_PTHREAD_RWLOCKATTR_T
+];
+
+227 
+	m__Æign
+;
+
+228 } 
+	t±hªad_rwlock©å_t
+;
+
+232 #ifde‡
+__USE_XOPEN2K
+
+
+234 vﬁ©ûê
+	t±hªad_•ölock_t
+;
+
+241 
+	m__size
+[
+__SIZEOF_PTHREAD_BARRIER_T
+];
+
+242 
+	m__Æign
+;
+
+243 } 
+	t±hªad_b¨rõr_t
+;
+
+247 
+	m__size
+[
+__SIZEOF_PTHREAD_BARRIERATTR_T
+];
+
+248 
+	m__Æign
+;
+
+249 } 
+	t±hªad_b¨rõøâr_t
+;
+
+253 #i‚de‡
+__x86_64__
+
+
+255 
+	#__˛ónup_f˘_©åibuã
+ 
+	`__©åibuã__
+ ((
+	`__ªg∑rm__
+ (1)))
+
+	)
+
+	@/usr/include/bits/wchar-ldbl.h
+
+19 #i‚de‡
+_WCHAR_H
+
+
+23 #i‡
+deföed
+ 
+__USE_ISOC95
+ || deföed 
+__USE_UNIX98
+
+
+24 
+__BEGIN_NAMESPACE_C99
+
+
+25 
+__LDBL_REDIR_DECL
+ (
+fw¥ötf
+);
+
+26 
+__LDBL_REDIR_DECL
+ (
+w¥ötf
+);
+
+27 
+__LDBL_REDIR_DECL
+ (
+sw¥ötf
+);
+
+28 
+__LDBL_REDIR_DECL
+ (
+vfw¥ötf
+);
+
+29 
+__LDBL_REDIR_DECL
+ (
+vw¥ötf
+);
+
+30 
+__LDBL_REDIR_DECL
+ (
+vsw¥ötf
+);
+
+31 #i‡
+deföed
+ 
+__USE_ISOC99
+ && !deföed 
+__USE_GNU
+ \
+
+32 && !
+deföed
+ 
+	g__REDIRECT
+ \
+
+33 && (
+deföed
+ 
+	g__STRICT_ANSI__
+ || deföed 
+	g__USE_XOPEN2K
+)
+
+34 
+	$__LDBL_REDIR1_DECL
+ (
+fwsˇnf
+, 
+__∆dbl___isoc99_fwsˇnf
+)
+
+35 
+	$__LDBL_REDIR1_DECL
+ (
+wsˇnf
+, 
+__∆dbl___isoc99_wsˇnf
+)
+
+36 
+	$__LDBL_REDIR1_DECL
+ (
+swsˇnf
+, 
+__∆dbl___isoc99_swsˇnf
+)
+
+38 
+	`__LDBL_REDIR_DECL
+ (
+fwsˇnf
+);
+
+39 
+	`__LDBL_REDIR_DECL
+ (
+wsˇnf
+);
+
+40 
+	`__LDBL_REDIR_DECL
+ (
+swsˇnf
+);
+
+42 
+__END_NAMESPACE_C99
+
+
+45 #ifde‡
+__USE_ISOC99
+
+
+46 
+__BEGIN_NAMESPACE_C99
+
+
+47 
+	`__LDBL_REDIR1_DECL
+ (
+wc°ﬁd
+, 
+wc°od
+);
+
+48 #i‡!
+deföed
+ 
+__USE_GNU
+ && !deföed 
+__REDIRECT
+ \
+
+49 && (
+deföed
+ 
+__STRICT_ANSI__
+ || deföed 
+__USE_XOPEN2K
+)
+
+50 
+	$__LDBL_REDIR1_DECL
+ (
+vfwsˇnf
+, 
+__∆dbl___isoc99_vfwsˇnf
+)
+
+51 
+	$__LDBL_REDIR1_DECL
+ (
+vwsˇnf
+, 
+__∆dbl___isoc99_vwsˇnf
+)
+
+52 
+	$__LDBL_REDIR1_DECL
+ (
+vswsˇnf
+, 
+__∆dbl___isoc99_vswsˇnf
+)
+
+54 
+	`__LDBL_REDIR_DECL
+ (
+vfwsˇnf
+);
+
+55 
+	`__LDBL_REDIR_DECL
+ (
+vwsˇnf
+);
+
+56 
+	`__LDBL_REDIR_DECL
+ (
+vswsˇnf
+);
+
+58 
+__END_NAMESPACE_C99
+
+
+61 #ifde‡
+__USE_GNU
+
+
+62 
+	`__LDBL_REDIR1_DECL
+ (
+wc°ﬁd_l
+, 
+wc°od_l
+);
+
+65 #i‡
+__USE_FORTIFY_LEVEL
+ > 0 && 
+deföed
+ 
+__f‹tify_fun˘i⁄
+
+
+66 
+	$__LDBL_REDIR_DECL
+ (
+__sw¥ötf_chk
+)
+
+67 
+	$__LDBL_REDIR_DECL
+ (
+__vsw¥ötf_chk
+)
+
+68 #i‡
+__USE_FORTIFY_LEVEL
+ > 1
+
+69 
+	$__LDBL_REDIR_DECL
+ (
+__fw¥ötf_chk
+)
+
+70 
+	$__LDBL_REDIR_DECL
+ (
+__w¥ötf_chk
+)
+
+71 
+	$__LDBL_REDIR_DECL
+ (
+__vfw¥ötf_chk
+)
+
+72 
+	$__LDBL_REDIR_DECL
+ (
+__vw¥ötf_chk
+)
+
+	@/usr/include/bits/wchar2.h
+
+19 #i‚de‡
+_WCHAR_H
+
+
+24 
+wch¨_t
+ *
+	$__wmem˝y_chk
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s1
+,
+
+25 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s2
+, 
+size_t
+ 
+__n
+,
+
+26 
+size_t
+ 
+__ns1
+Ë
+__THROW
+;
+
+27 
+wch¨_t
+ *
+	`__REDIRECT_NTH
+ (
+__wmem˝y_Æüs
+,
+
+28 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s1
+,
+
+29 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s2
+, 
+size_t
+ 
+__n
+),
+
+30 
+wmem˝y
+);
+
+31 
+wch¨_t
+ *
+	`__REDIRECT_NTH
+ (
+__wmem˝y_chk_w¨n
+,
+
+32 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s1
+,
+
+33 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s2
+, 
+size_t
+ 
+__n
+,
+
+34 
+size_t
+ 
+__ns1
+), 
+__wmem˝y_chk
+)
+
+35 
+	`__w¨«âr
+ ("wmemcpy called withÜength biggerÅhan size of destination "
+
+38 
+__f‹tify_fun˘i⁄
+ 
+wch¨_t
+ *
+
+39 
+	`__NTH
+ (
+	$wmem˝y
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s1
+, c⁄° wch¨_à*__ª°ri˘ 
+__s2
+,
+
+40 
+size_t
+ 
+__n
+))
+
+42 i‡(
+	`__bos0
+ (
+__s1
+Ë!(
+size_t
+) -1)
+
+44 i‡(!
+	`__buûtö_c⁄°™t_p
+ (
+__n
+))
+
+45  
+	`__wmem˝y_chk
+ (
+__s1
+, 
+__s2
+, 
+__n
+,
+
+46 
+	`__bos0
+ (
+__s1
+Ë/  (
+wch¨_t
+));
+
+48 i‡(
+__n
+ > 
+	`__bos0
+ (
+__s1
+Ë/  (
+wch¨_t
+))
+
+49  
+	`__wmem˝y_chk_w¨n
+ (
+__s1
+, 
+__s2
+, 
+__n
+,
+
+50 
+	`__bos0
+ (
+__s1
+Ë/  (
+wch¨_t
+));
+
+52  
+	`__wmem˝y_Æüs
+ (
+__s1
+, 
+__s2
+, 
+__n
+);
+
+53 
+	}
+}
+
+56 
+wch¨_t
+ *
+	$__wmemmove_chk
+ (
+wch¨_t
+ *
+__s1
+, c⁄° wch¨_à*
+__s2
+,
+
+57 
+size_t
+ 
+__n
+, size_à
+__ns1
+Ë
+__THROW
+;
+
+58 
+wch¨_t
+ *
+	`__REDIRECT_NTH
+ (
+__wmemmove_Æüs
+, (wch¨_à*
+__s1
+,
+
+59 c⁄° 
+wch¨_t
+ *
+__s2
+,
+
+60 
+size_t
+ 
+__n
+), 
+wmemmove
+);
+
+61 
+wch¨_t
+ *
+	`__REDIRECT_NTH
+ (
+__wmemmove_chk_w¨n
+,
+
+62 (
+wch¨_t
+ *
+__s1
+, c⁄° wch¨_à*
+__s2
+,
+
+63 
+size_t
+ 
+__n
+, size_à
+__ns1
+), 
+__wmemmove_chk
+)
+
+64 
+	`__w¨«âr
+ ("wmemmove called withÜength biggerÅhan size of destination "
+
+67 
+__f‹tify_fun˘i⁄
+ 
+wch¨_t
+ *
+
+68 
+	`__NTH
+ (
+	$wmemmove
+ (
+wch¨_t
+ *
+__s1
+, c⁄° wch¨_à*
+__s2
+, 
+size_t
+ 
+__n
+))
+
+70 i‡(
+	`__bos0
+ (
+__s1
+Ë!(
+size_t
+) -1)
+
+72 i‡(!
+	`__buûtö_c⁄°™t_p
+ (
+__n
+))
+
+73  
+	`__wmemmove_chk
+ (
+__s1
+, 
+__s2
+, 
+__n
+,
+
+74 
+	`__bos0
+ (
+__s1
+Ë/  (
+wch¨_t
+));
+
+76 i‡(
+__n
+ > 
+	`__bos0
+ (
+__s1
+Ë/  (
+wch¨_t
+))
+
+77  
+	`__wmemmove_chk_w¨n
+ (
+__s1
+, 
+__s2
+, 
+__n
+,
+
+78 
+	`__bos0
+ (
+__s1
+Ë/  (
+wch¨_t
+));
+
+80  
+	`__wmemmove_Æüs
+ (
+__s1
+, 
+__s2
+, 
+__n
+);
+
+81 
+	}
+}
+
+84 #ifde‡
+__USE_GNU
+
+
+85 
+wch¨_t
+ *
+	$__wmemp˝y_chk
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s1
+,
+
+86 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s2
+, 
+size_t
+ 
+__n
+,
+
+87 
+size_t
+ 
+__ns1
+Ë
+__THROW
+;
+
+88 
+wch¨_t
+ *
+	`__REDIRECT_NTH
+ (
+__wmemp˝y_Æüs
+,
+
+89 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s1
+,
+
+90 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s2
+,
+
+91 
+size_t
+ 
+__n
+), 
+wmemp˝y
+);
+
+92 
+wch¨_t
+ *
+	`__REDIRECT_NTH
+ (
+__wmemp˝y_chk_w¨n
+,
+
+93 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s1
+,
+
+94 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s2
+, 
+size_t
+ 
+__n
+,
+
+95 
+size_t
+ 
+__ns1
+), 
+__wmemp˝y_chk
+)
+
+96 
+	`__w¨«âr
+ ("wmempcpy called withÜength biggerÅhan size of destination "
+
+99 
+__f‹tify_fun˘i⁄
+ 
+wch¨_t
+ *
+
+100 
+	`__NTH
+ (
+	$wmemp˝y
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s1
+, c⁄° wch¨_à*__ª°ri˘ 
+__s2
+,
+
+101 
+size_t
+ 
+__n
+))
+
+103 i‡(
+	`__bos0
+ (
+__s1
+Ë!(
+size_t
+) -1)
+
+105 i‡(!
+	`__buûtö_c⁄°™t_p
+ (
+__n
+))
+
+106  
+	`__wmemp˝y_chk
+ (
+__s1
+, 
+__s2
+, 
+__n
+,
+
+107 
+	`__bos0
+ (
+__s1
+Ë/  (
+wch¨_t
+));
+
+109 i‡(
+__n
+ > 
+	`__bos0
+ (
+__s1
+Ë/  (
+wch¨_t
+))
+
+110  
+	`__wmemp˝y_chk_w¨n
+ (
+__s1
+, 
+__s2
+, 
+__n
+,
+
+111 
+	`__bos0
+ (
+__s1
+Ë/  (
+wch¨_t
+));
+
+113  
+	`__wmemp˝y_Æüs
+ (
+__s1
+, 
+__s2
+, 
+__n
+);
+
+114 
+	}
+}
+
+118 
+wch¨_t
+ *
+	$__wmem£t_chk
+ (
+wch¨_t
+ *
+__s
+, wch¨_à
+__c
+, 
+size_t
+ 
+__n
+,
+
+119 
+size_t
+ 
+__ns
+Ë
+__THROW
+;
+
+120 
+wch¨_t
+ *
+	`__REDIRECT_NTH
+ (
+__wmem£t_Æüs
+, (wch¨_à*
+__s
+, wch¨_à
+__c
+,
+
+121 
+size_t
+ 
+__n
+), 
+wmem£t
+);
+
+122 
+wch¨_t
+ *
+	`__REDIRECT_NTH
+ (
+__wmem£t_chk_w¨n
+,
+
+123 (
+wch¨_t
+ *
+__s
+, wch¨_à
+__c
+, 
+size_t
+ 
+__n
+,
+
+124 
+size_t
+ 
+__ns
+), 
+__wmem£t_chk
+)
+
+125 
+	`__w¨«âr
+ ("wmemset called withÜength biggerÅhan size of destination "
+
+128 
+__f‹tify_fun˘i⁄
+ 
+wch¨_t
+ *
+
+129 
+	`__NTH
+ (
+	$wmem£t
+ (
+wch¨_t
+ *
+__s
+, wch¨_à
+__c
+, 
+size_t
+ 
+__n
+))
+
+131 i‡(
+	`__bos0
+ (
+__s
+Ë!(
+size_t
+) -1)
+
+133 i‡(!
+	`__buûtö_c⁄°™t_p
+ (
+__n
+))
+
+134  
+	`__wmem£t_chk
+ (
+__s
+, 
+__c
+, 
+__n
+, 
+	`__bos0
+ (__sË/  (
+wch¨_t
+));
+
+136 i‡(
+__n
+ > 
+	`__bos0
+ (
+__s
+Ë/  (
+wch¨_t
+))
+
+137  
+	`__wmem£t_chk_w¨n
+ (
+__s
+, 
+__c
+, 
+__n
+,
+
+138 
+	`__bos0
+ (
+__s
+Ë/  (
+wch¨_t
+));
+
+140  
+	`__wmem£t_Æüs
+ (
+__s
+, 
+__c
+, 
+__n
+);
+
+141 
+	}
+}
+
+144 
+wch¨_t
+ *
+	$__wcs˝y_chk
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+,
+
+145 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+,
+
+146 
+size_t
+ 
+__n
+Ë
+__THROW
+;
+
+147 
+wch¨_t
+ *
+	`__REDIRECT_NTH
+ (
+__wcs˝y_Æüs
+,
+
+148 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+,
+
+149 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+), 
+wcs˝y
+);
+
+151 
+__f‹tify_fun˘i⁄
+ 
+wch¨_t
+ *
+
+152 
+	`__NTH
+ (
+	$wcs˝y
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+, c⁄° wch¨_à*__ª°ri˘ 
+__§c
+))
+
+154 i‡(
+	`__bos
+ (
+__de°
+Ë!(
+size_t
+) -1)
+
+155  
+	`__wcs˝y_chk
+ (
+__de°
+, 
+__§c
+, 
+	`__bos
+ (__de°Ë/  (
+wch¨_t
+));
+
+156  
+	`__wcs˝y_Æüs
+ (
+__de°
+, 
+__§c
+);
+
+157 
+	}
+}
+
+160 
+wch¨_t
+ *
+	$__w˝˝y_chk
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+,
+
+161 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+,
+
+162 
+size_t
+ 
+__de°Àn
+Ë
+__THROW
+;
+
+163 
+wch¨_t
+ *
+	`__REDIRECT_NTH
+ (
+__w˝˝y_Æüs
+,
+
+164 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+,
+
+165 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+), 
+w˝˝y
+);
+
+167 
+__f‹tify_fun˘i⁄
+ 
+wch¨_t
+ *
+
+168 
+	`__NTH
+ (
+	$w˝˝y
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+, c⁄° wch¨_à*__ª°ri˘ 
+__§c
+))
+
+170 i‡(
+	`__bos
+ (
+__de°
+Ë!(
+size_t
+) -1)
+
+171  
+	`__w˝˝y_chk
+ (
+__de°
+, 
+__§c
+, 
+	`__bos
+ (__de°Ë/  (
+wch¨_t
+));
+
+172  
+	`__w˝˝y_Æüs
+ (
+__de°
+, 
+__§c
+);
+
+173 
+	}
+}
+
+176 
+wch¨_t
+ *
+	$__wc¢˝y_chk
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+,
+
+177 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+, 
+size_t
+ 
+__n
+,
+
+178 
+size_t
+ 
+__de°Àn
+Ë
+__THROW
+;
+
+179 
+wch¨_t
+ *
+	`__REDIRECT_NTH
+ (
+__wc¢˝y_Æüs
+,
+
+180 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+,
+
+181 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+,
+
+182 
+size_t
+ 
+__n
+), 
+wc¢˝y
+);
+
+183 
+wch¨_t
+ *
+	`__REDIRECT_NTH
+ (
+__wc¢˝y_chk_w¨n
+,
+
+184 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+,
+
+185 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+,
+
+186 
+size_t
+ 
+__n
+, size_à
+__de°Àn
+), 
+__wc¢˝y_chk
+)
+
+187 
+	`__w¨«âr
+ ("wcsncpy called withÜength biggerÅhan size of destination "
+
+190 
+__f‹tify_fun˘i⁄
+ 
+wch¨_t
+ *
+
+191 
+	`__NTH
+ (
+	$wc¢˝y
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+, c⁄° wch¨_à*__ª°ri˘ 
+__§c
+,
+
+192 
+size_t
+ 
+__n
+))
+
+194 i‡(
+	`__bos
+ (
+__de°
+Ë!(
+size_t
+) -1)
+
+196 i‡(!
+	`__buûtö_c⁄°™t_p
+ (
+__n
+))
+
+197  
+	`__wc¢˝y_chk
+ (
+__de°
+, 
+__§c
+, 
+__n
+,
+
+198 
+	`__bos
+ (
+__de°
+Ë/  (
+wch¨_t
+));
+
+199 i‡(
+__n
+ > 
+	`__bos
+ (
+__de°
+Ë/  (
+wch¨_t
+))
+
+200  
+	`__wc¢˝y_chk_w¨n
+ (
+__de°
+, 
+__§c
+, 
+__n
+,
+
+201 
+	`__bos
+ (
+__de°
+Ë/  (
+wch¨_t
+));
+
+203  
+	`__wc¢˝y_Æüs
+ (
+__de°
+, 
+__§c
+, 
+__n
+);
+
+204 
+	}
+}
+
+207 
+wch¨_t
+ *
+	$__w˝n˝y_chk
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+,
+
+208 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+, 
+size_t
+ 
+__n
+,
+
+209 
+size_t
+ 
+__de°Àn
+Ë
+__THROW
+;
+
+210 
+wch¨_t
+ *
+	`__REDIRECT_NTH
+ (
+__w˝n˝y_Æüs
+,
+
+211 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+,
+
+212 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+,
+
+213 
+size_t
+ 
+__n
+), 
+w˝n˝y
+);
+
+214 
+wch¨_t
+ *
+	`__REDIRECT_NTH
+ (
+__w˝n˝y_chk_w¨n
+,
+
+215 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+,
+
+216 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+,
+
+217 
+size_t
+ 
+__n
+, size_à
+__de°Àn
+), 
+__w˝n˝y_chk
+)
+
+218 
+	`__w¨«âr
+ ("wcpncpy called withÜength biggerÅhan size of destination "
+
+221 
+__f‹tify_fun˘i⁄
+ 
+wch¨_t
+ *
+
+222 
+	`__NTH
+ (
+	$w˝n˝y
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+, c⁄° wch¨_à*__ª°ri˘ 
+__§c
+,
+
+223 
+size_t
+ 
+__n
+))
+
+225 i‡(
+	`__bos
+ (
+__de°
+Ë!(
+size_t
+) -1)
+
+227 i‡(!
+	`__buûtö_c⁄°™t_p
+ (
+__n
+))
+
+228  
+	`__w˝n˝y_chk
+ (
+__de°
+, 
+__§c
+, 
+__n
+,
+
+229 
+	`__bos
+ (
+__de°
+Ë/  (
+wch¨_t
+));
+
+230 i‡(
+__n
+ > 
+	`__bos
+ (
+__de°
+Ë/  (
+wch¨_t
+))
+
+231  
+	`__w˝n˝y_chk_w¨n
+ (
+__de°
+, 
+__§c
+, 
+__n
+,
+
+232 
+	`__bos
+ (
+__de°
+Ë/  (
+wch¨_t
+));
+
+234  
+	`__w˝n˝y_Æüs
+ (
+__de°
+, 
+__§c
+, 
+__n
+);
+
+235 
+	}
+}
+
+238 
+wch¨_t
+ *
+	$__wcsˇt_chk
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+,
+
+239 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+,
+
+240 
+size_t
+ 
+__de°Àn
+Ë
+__THROW
+;
+
+241 
+wch¨_t
+ *
+	`__REDIRECT_NTH
+ (
+__wcsˇt_Æüs
+,
+
+242 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+,
+
+243 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+), 
+wcsˇt
+);
+
+245 
+__f‹tify_fun˘i⁄
+ 
+wch¨_t
+ *
+
+246 
+	`__NTH
+ (
+	$wcsˇt
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+, c⁄° wch¨_à*__ª°ri˘ 
+__§c
+))
+
+248 i‡(
+	`__bos
+ (
+__de°
+Ë!(
+size_t
+) -1)
+
+249  
+	`__wcsˇt_chk
+ (
+__de°
+, 
+__§c
+, 
+	`__bos
+ (__de°Ë/  (
+wch¨_t
+));
+
+250  
+	`__wcsˇt_Æüs
+ (
+__de°
+, 
+__§c
+);
+
+251 
+	}
+}
+
+254 
+wch¨_t
+ *
+	$__wc¢ˇt_chk
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+,
+
+255 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+,
+
+256 
+size_t
+ 
+__n
+, size_à
+__de°Àn
+Ë
+__THROW
+;
+
+257 
+wch¨_t
+ *
+	`__REDIRECT_NTH
+ (
+__wc¢ˇt_Æüs
+,
+
+258 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+,
+
+259 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__§c
+,
+
+260 
+size_t
+ 
+__n
+), 
+wc¢ˇt
+);
+
+262 
+__f‹tify_fun˘i⁄
+ 
+wch¨_t
+ *
+
+263 
+	`__NTH
+ (
+	$wc¢ˇt
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__de°
+, c⁄° wch¨_à*__ª°ri˘ 
+__§c
+,
+
+264 
+size_t
+ 
+__n
+))
+
+266 i‡(
+	`__bos
+ (
+__de°
+Ë!(
+size_t
+) -1)
+
+267  
+	`__wc¢ˇt_chk
+ (
+__de°
+, 
+__§c
+, 
+__n
+,
+
+268 
+	`__bos
+ (
+__de°
+Ë/  (
+wch¨_t
+));
+
+269  
+	`__wc¢ˇt_Æüs
+ (
+__de°
+, 
+__§c
+, 
+__n
+);
+
+270 
+	}
+}
+
+273 
+	$__sw¥ötf_chk
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__n
+,
+
+274 
+__Êag
+, 
+size_t
+ 
+__s_Àn
+,
+
+275 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+, ...)
+
+276 
+__THROW
+ ;
+
+278 
+	`__REDIRECT_NTH_LDBL
+ (
+__sw¥ötf_Æüs
+,
+
+279 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__n
+,
+
+280 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__fmt
+, ...),
+
+281 
+sw¥ötf
+);
+
+283 #ifde‡
+__va_¨g_∑ck
+
+
+284 
+__f‹tify_fun˘i⁄
+ 
+
+285 
+	`__NTH
+ (
+	$sw¥ötf
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__n
+,
+
+286 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__fmt
+, ...))
+
+288 i‡(
+	`__bos
+ (
+__s
+Ë!(
+size_t
+Ë-1 || 
+__USE_FORTIFY_LEVEL
+ > 1)
+
+289  
+	`__sw¥ötf_chk
+ (
+__s
+, 
+__n
+, 
+__USE_FORTIFY_LEVEL
+ - 1,
+
+290 
+	`__bos
+ (
+__s
+Ë/  (
+wch¨_t
+),
+
+291 
+__fmt
+, 
+	`__va_¨g_∑ck
+ ());
+
+292  
+	`__sw¥ötf_Æüs
+ (
+__s
+, 
+__n
+, 
+__fmt
+, 
+	`__va_¨g_∑ck
+ ());
+
+293 
+	}
+}
+
+294 #ñi‡!
+deföed
+ 
+__˝lu•lus
+
+
+296 
+	#sw¥ötf
+(
+s
+, 
+n
+, ...) \
+
+297 (
+	`__bos
+ (
+s
+Ë!(
+size_t
+Ë-1 || 
+__USE_FORTIFY_LEVEL
+ > 1 \
+
+298 ? 
+	`__sw¥ötf_chk
+ (
+s
+, 
+n
+, 
+__USE_FORTIFY_LEVEL
+ - 1, \
+
+299 
+	`__bos
+ (
+s
+Ë/  (
+wch¨_t
+), 
+__VA_ARGS__
+) \
+
+300 : 
+	`sw¥ötf
+ (
+s
+, 
+n
+, 
+__VA_ARGS__
+))
+
+	)
+
+303 
+	$__vsw¥ötf_chk
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__n
+,
+
+304 
+__Êag
+, 
+size_t
+ 
+__s_Àn
+,
+
+305 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+306 
+__gnuc_va_li°
+ 
+__¨g
+)
+
+307 
+__THROW
+ ;
+
+309 
+	`__REDIRECT_NTH_LDBL
+ (
+__vsw¥ötf_Æüs
+,
+
+310 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__n
+,
+
+311 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__fmt
+,
+
+312 
+__gnuc_va_li°
+ 
+__≠
+), 
+vsw¥ötf
+);
+
+314 
+__f‹tify_fun˘i⁄
+ 
+
+315 
+	`__NTH
+ (
+	$vsw¥ötf
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__n
+,
+
+316 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__fmt
+, 
+__gnuc_va_li°
+ 
+__≠
+))
+
+318 i‡(
+	`__bos
+ (
+__s
+Ë!(
+size_t
+Ë-1 || 
+__USE_FORTIFY_LEVEL
+ > 1)
+
+319  
+	`__vsw¥ötf_chk
+ (
+__s
+, 
+__n
+, 
+__USE_FORTIFY_LEVEL
+ - 1,
+
+320 
+	`__bos
+ (
+__s
+Ë/  (
+wch¨_t
+), 
+__fmt
+, 
+__≠
+);
+
+321  
+	`__vsw¥ötf_Æüs
+ (
+__s
+, 
+__n
+, 
+__fmt
+, 
+__≠
+);
+
+322 
+	}
+}
+
+325 #i‡
+__USE_FORTIFY_LEVEL
+ > 1
+
+327 
+__fw¥ötf_chk
+ (
+__FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+, 
+__Êag
+,
+
+328 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+, ...);
+
+329 
+__w¥ötf_chk
+ (
+__Êag
+, c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+331 
+__vfw¥ötf_chk
+ (
+__FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+, 
+__Êag
+,
+
+332 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+333 
+__gnuc_va_li°
+ 
+__≠
+);
+
+334 
+__vw¥ötf_chk
+ (
+__Êag
+, c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__f‹m©
+,
+
+335 
+__gnuc_va_li°
+ 
+__≠
+);
+
+337 #ifde‡
+__va_¨g_∑ck
+
+
+338 
+__f‹tify_fun˘i⁄
+ 
+
+339 
+	$w¥ötf
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__fmt
+, ...)
+
+341  
+	`__w¥ötf_chk
+ (
+__USE_FORTIFY_LEVEL
+ - 1, 
+__fmt
+, 
+	`__va_¨g_∑ck
+ ());
+
+342 
+	}
+}
+
+344 
+__f‹tify_fun˘i⁄
+ 
+
+345 
+	$fw¥ötf
+ (
+__FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+, c⁄° 
+wch¨_t
+ *__ª°ri˘ 
+__fmt
+, ...)
+
+347  
+	`__fw¥ötf_chk
+ (
+__°ªam
+, 
+__USE_FORTIFY_LEVEL
+ - 1, 
+__fmt
+,
+
+348 
+	`__va_¨g_∑ck
+ ());
+
+349 
+	}
+}
+
+350 #ñi‡!
+deföed
+ 
+__˝lu•lus
+
+
+351 
+	#w¥ötf
+(...) \
+
+352 
+	`__w¥ötf_chk
+ (
+__USE_FORTIFY_LEVEL
+ - 1, 
+__VA_ARGS__
+)
+
+	)
+
+353 
+	#fw¥ötf
+(
+°ªam
+, ...) \
+
+354 
+	`__fw¥ötf_chk
+ (
+°ªam
+, 
+__USE_FORTIFY_LEVEL
+ - 1, 
+__VA_ARGS__
+)
+
+	)
+
+357 
+__f‹tify_fun˘i⁄
+ 
+
+358 
+	$vw¥ötf
+ (c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__fmt
+, 
+__gnuc_va_li°
+ 
+__≠
+)
+
+360  
+	`__vw¥ötf_chk
+ (
+__USE_FORTIFY_LEVEL
+ - 1, 
+__fmt
+, 
+__≠
+);
+
+361 
+	}
+}
+
+363 
+__f‹tify_fun˘i⁄
+ 
+
+364 
+	$vfw¥ötf
+ (
+__FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+,
+
+365 c⁄° 
+wch¨_t
+ *
+__ª°ri˘
+ 
+__fmt
+, 
+__gnuc_va_li°
+ 
+__≠
+)
+
+367  
+	`__vfw¥ötf_chk
+ (
+__°ªam
+, 
+__USE_FORTIFY_LEVEL
+ - 1, 
+__fmt
+, 
+__≠
+);
+
+368 
+	}
+}
+
+372 
+wch¨_t
+ *
+	$__fgëws_chk
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__size
+, 
+__n
+,
+
+373 
+__FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+Ë
+__wur
+;
+
+374 
+wch¨_t
+ *
+	`__REDIRECT
+ (
+__fgëws_Æüs
+,
+
+375 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+, 
+__n
+,
+
+376 
+__FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+), 
+fgëws
+Ë
+__wur
+;
+
+377 
+wch¨_t
+ *
+	`__REDIRECT
+ (
+__fgëws_chk_w¨n
+,
+
+378 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__size
+, 
+__n
+,
+
+379 
+__FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+), 
+__fgëws_chk
+)
+
+380 
+__wur
+ 
+	`__w¨«âr
+ ("fgetws called with bigger sizeÅhanÜength "
+
+383 
+__f‹tify_fun˘i⁄
+ 
+__wur
+ 
+wch¨_t
+ *
+
+384 
+	$fgëws
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+, 
+__n
+, 
+__FILE
+ *__ª°ri˘ 
+__°ªam
+)
+
+386 i‡(
+	`__bos
+ (
+__s
+Ë!(
+size_t
+) -1)
+
+388 i‡(!
+	`__buûtö_c⁄°™t_p
+ (
+__n
+) || __n <= 0)
+
+389  
+	`__fgëws_chk
+ (
+__s
+, 
+	`__bos
+ (__sË/  (
+wch¨_t
+),
+
+390 
+__n
+, 
+__°ªam
+);
+
+392 i‡((
+size_t
+Ë
+__n
+ > 
+	`__bos
+ (
+__s
+Ë/  (
+wch¨_t
+))
+
+393  
+	`__fgëws_chk_w¨n
+ (
+__s
+, 
+	`__bos
+ (__sË/  (
+wch¨_t
+),
+
+394 
+__n
+, 
+__°ªam
+);
+
+396  
+	`__fgëws_Æüs
+ (
+__s
+, 
+__n
+, 
+__°ªam
+);
+
+397 
+	}
+}
+
+399 #ifde‡
+__USE_GNU
+
+
+400 
+wch¨_t
+ *
+	$__fgëws_u∆ocked_chk
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__size
+,
+
+401 
+__n
+, 
+__FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+)
+
+402 
+__wur
+;
+
+403 
+wch¨_t
+ *
+	`__REDIRECT
+ (
+__fgëws_u∆ocked_Æüs
+,
+
+404 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+, 
+__n
+,
+
+405 
+__FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+), 
+fgëws_u∆ocked
+)
+
+406 
+__wur
+;
+
+407 
+wch¨_t
+ *
+	`__REDIRECT
+ (
+__fgëws_u∆ocked_chk_w¨n
+,
+
+408 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+, 
+size_t
+ 
+__size
+, 
+__n
+,
+
+409 
+__FILE
+ *
+__ª°ri˘
+ 
+__°ªam
+),
+
+410 
+__fgëws_u∆ocked_chk
+)
+
+411 
+__wur
+ 
+	`__w¨«âr
+ ("fgetws_unlocked called with bigger sizeÅhanÜength "
+
+414 
+__f‹tify_fun˘i⁄
+ 
+__wur
+ 
+wch¨_t
+ *
+
+415 
+	$fgëws_u∆ocked
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__s
+, 
+__n
+, 
+__FILE
+ *__ª°ri˘ 
+__°ªam
+)
+
+417 i‡(
+	`__bos
+ (
+__s
+Ë!(
+size_t
+) -1)
+
+419 i‡(!
+	`__buûtö_c⁄°™t_p
+ (
+__n
+) || __n <= 0)
+
+420  
+	`__fgëws_u∆ocked_chk
+ (
+__s
+, 
+	`__bos
+ (__sË/  (
+wch¨_t
+),
+
+421 
+__n
+, 
+__°ªam
+);
+
+423 i‡((
+size_t
+Ë
+__n
+ > 
+	`__bos
+ (
+__s
+Ë/  (
+wch¨_t
+))
+
+424  
+	`__fgëws_u∆ocked_chk_w¨n
+ (
+__s
+, 
+	`__bos
+ (__sË/  (
+wch¨_t
+),
+
+425 
+__n
+, 
+__°ªam
+);
+
+427  
+	`__fgëws_u∆ocked_Æüs
+ (
+__s
+, 
+__n
+, 
+__°ªam
+);
+
+428 
+	}
+}
+
+432 
+size_t
+ 
+	$__w¸tomb_chk
+ (*
+__ª°ri˘
+ 
+__s
+, 
+wch¨_t
+ 
+__wch¨
+,
+
+433 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__p
+,
+
+434 
+size_t
+ 
+__buÊí
+Ë
+__THROW
+ 
+__wur
+;
+
+435 
+size_t
+ 
+	`__REDIRECT_NTH
+ (
+__w¸tomb_Æüs
+,
+
+436 (*
+__ª°ri˘
+ 
+__s
+, 
+wch¨_t
+ 
+__wch¨
+,
+
+437 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+), 
+w¸tomb
+Ë
+__wur
+;
+
+439 
+__f‹tify_fun˘i⁄
+ 
+__wur
+ 
+size_t
+
+
+440 
+	`__NTH
+ (
+	$w¸tomb
+ (*
+__ª°ri˘
+ 
+__s
+, 
+wch¨_t
+ 
+__wch¨
+,
+
+441 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+))
+
+446 
+	#__WCHAR_MB_LEN_MAX
+ 16
+
+	)
+
+447 #i‡
+deföed
+ 
+MB_LEN_MAX
+ && MB_LEN_MAX !
+__WCHAR_MB_LEN_MAX
+
+
+450 i‡(
+	`__bos
+ (
+__s
+Ë!(
+size_t
+Ë-1 && 
+__WCHAR_MB_LEN_MAX
+ > __bos (__s))
+
+451  
+	`__w¸tomb_chk
+ (
+__s
+, 
+__wch¨
+, 
+__ps
+, 
+	`__bos
+ (__s));
+
+452  
+	`__w¸tomb_Æüs
+ (
+__s
+, 
+__wch¨
+, 
+__ps
+);
+
+453 
+	}
+}
+
+456 
+size_t
+ 
+	$__mb§towcs_chk
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__d°
+,
+
+457 c⁄° **
+__ª°ri˘
+ 
+__§c
+,
+
+458 
+size_t
+ 
+__Àn
+, 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+,
+
+459 
+size_t
+ 
+__d°Àn
+Ë
+__THROW
+;
+
+460 
+size_t
+ 
+	`__REDIRECT_NTH
+ (
+__mb§towcs_Æüs
+,
+
+461 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__d°
+,
+
+462 c⁄° **
+__ª°ri˘
+ 
+__§c
+,
+
+463 
+size_t
+ 
+__Àn
+, 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+),
+
+464 
+mb§towcs
+);
+
+465 
+size_t
+ 
+	`__REDIRECT_NTH
+ (
+__mb§towcs_chk_w¨n
+,
+
+466 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__d°
+,
+
+467 c⁄° **
+__ª°ri˘
+ 
+__§c
+,
+
+468 
+size_t
+ 
+__Àn
+, 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+,
+
+469 
+size_t
+ 
+__d°Àn
+), 
+__mb§towcs_chk
+)
+
+470 
+	`__w¨«âr
+ ("mbsrtowcs called with dst buffer smallerÅhanÜen "
+
+473 
+__f‹tify_fun˘i⁄
+ 
+size_t
+
+
+474 
+	`__NTH
+ (
+	$mb§towcs
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__d°
+, c⁄° **__ª°ri˘ 
+__§c
+,
+
+475 
+size_t
+ 
+__Àn
+, 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+))
+
+477 i‡(
+	`__bos
+ (
+__d°
+Ë!(
+size_t
+) -1)
+
+479 i‡(!
+	`__buûtö_c⁄°™t_p
+ (
+__Àn
+))
+
+480  
+	`__mb§towcs_chk
+ (
+__d°
+, 
+__§c
+, 
+__Àn
+, 
+__ps
+,
+
+481 
+	`__bos
+ (
+__d°
+Ë/  (
+wch¨_t
+));
+
+483 i‡(
+__Àn
+ > 
+	`__bos
+ (
+__d°
+Ë/  (
+wch¨_t
+))
+
+484  
+	`__mb§towcs_chk_w¨n
+ (
+__d°
+, 
+__§c
+, 
+__Àn
+, 
+__ps
+,
+
+485 
+	`__bos
+ (
+__d°
+Ë/  (
+wch¨_t
+));
+
+487  
+	`__mb§towcs_Æüs
+ (
+__d°
+, 
+__§c
+, 
+__Àn
+, 
+__ps
+);
+
+488 
+	}
+}
+
+491 
+size_t
+ 
+	$__wc§tombs_chk
+ (*
+__ª°ri˘
+ 
+__d°
+,
+
+492 c⁄° 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__§c
+,
+
+493 
+size_t
+ 
+__Àn
+, 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+,
+
+494 
+size_t
+ 
+__d°Àn
+Ë
+__THROW
+;
+
+495 
+size_t
+ 
+	`__REDIRECT_NTH
+ (
+__wc§tombs_Æüs
+,
+
+496 (*
+__ª°ri˘
+ 
+__d°
+,
+
+497 c⁄° 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__§c
+,
+
+498 
+size_t
+ 
+__Àn
+, 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+),
+
+499 
+wc§tombs
+);
+
+500 
+size_t
+ 
+	`__REDIRECT_NTH
+ (
+__wc§tombs_chk_w¨n
+,
+
+501 (*
+__ª°ri˘
+ 
+__d°
+,
+
+502 c⁄° 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__§c
+,
+
+503 
+size_t
+ 
+__Àn
+, 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+,
+
+504 
+size_t
+ 
+__d°Àn
+), 
+__wc§tombs_chk
+)
+
+505 
+	`__w¨«âr
+ ("wcsrtombs called with dst buffer smallerÅhanÜen");
+
+507 
+__f‹tify_fun˘i⁄
+ 
+size_t
+
+
+508 
+	`__NTH
+ (
+	$wc§tombs
+ (*
+__ª°ri˘
+ 
+__d°
+, c⁄° 
+wch¨_t
+ **__ª°ri˘ 
+__§c
+,
+
+509 
+size_t
+ 
+__Àn
+, 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+))
+
+511 i‡(
+	`__bos
+ (
+__d°
+Ë!(
+size_t
+) -1)
+
+513 i‡(!
+	`__buûtö_c⁄°™t_p
+ (
+__Àn
+))
+
+514  
+	`__wc§tombs_chk
+ (
+__d°
+, 
+__§c
+, 
+__Àn
+, 
+__ps
+, 
+	`__bos
+ (__dst));
+
+516 i‡(
+__Àn
+ > 
+	`__bos
+ (
+__d°
+))
+
+517  
+	`__wc§tombs_chk_w¨n
+ (
+__d°
+, 
+__§c
+, 
+__Àn
+, 
+__ps
+, 
+	`__bos
+ (__dst));
+
+519  
+	`__wc§tombs_Æüs
+ (
+__d°
+, 
+__§c
+, 
+__Àn
+, 
+__ps
+);
+
+520 
+	}
+}
+
+523 #ifde‡
+__USE_GNU
+
+
+524 
+size_t
+ 
+	$__mb¢πowcs_chk
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__d°
+,
+
+525 c⁄° **
+__ª°ri˘
+ 
+__§c
+, 
+size_t
+ 
+__nmc
+,
+
+526 
+size_t
+ 
+__Àn
+, 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+,
+
+527 
+size_t
+ 
+__d°Àn
+Ë
+__THROW
+;
+
+528 
+size_t
+ 
+	`__REDIRECT_NTH
+ (
+__mb¢πowcs_Æüs
+,
+
+529 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__d°
+,
+
+530 c⁄° **
+__ª°ri˘
+ 
+__§c
+, 
+size_t
+ 
+__nmc
+,
+
+531 
+size_t
+ 
+__Àn
+, 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+),
+
+532 
+mb¢πowcs
+);
+
+533 
+size_t
+ 
+	`__REDIRECT_NTH
+ (
+__mb¢πowcs_chk_w¨n
+,
+
+534 (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__d°
+,
+
+535 c⁄° **
+__ª°ri˘
+ 
+__§c
+, 
+size_t
+ 
+__nmc
+,
+
+536 
+size_t
+ 
+__Àn
+, 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+,
+
+537 
+size_t
+ 
+__d°Àn
+), 
+__mb¢πowcs_chk
+)
+
+538 
+	`__w¨«âr
+ ("mbsnrtowcs called with dst buffer smallerÅhanÜen "
+
+541 
+__f‹tify_fun˘i⁄
+ 
+size_t
+
+
+542 
+	`__NTH
+ (
+	$mb¢πowcs
+ (
+wch¨_t
+ *
+__ª°ri˘
+ 
+__d°
+, c⁄° **__ª°ri˘ 
+__§c
+,
+
+543 
+size_t
+ 
+__nmc
+, size_à
+__Àn
+, 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+))
+
+545 i‡(
+	`__bos
+ (
+__d°
+Ë!(
+size_t
+) -1)
+
+547 i‡(!
+	`__buûtö_c⁄°™t_p
+ (
+__Àn
+))
+
+548  
+	`__mb¢πowcs_chk
+ (
+__d°
+, 
+__§c
+, 
+__nmc
+, 
+__Àn
+, 
+__ps
+,
+
+549 
+	`__bos
+ (
+__d°
+Ë/  (
+wch¨_t
+));
+
+551 i‡(
+__Àn
+ > 
+	`__bos
+ (
+__d°
+Ë/  (
+wch¨_t
+))
+
+552  
+	`__mb¢πowcs_chk_w¨n
+ (
+__d°
+, 
+__§c
+, 
+__nmc
+, 
+__Àn
+, 
+__ps
+,
+
+553 
+	`__bos
+ (
+__d°
+Ë/  (
+wch¨_t
+));
+
+555  
+	`__mb¢πowcs_Æüs
+ (
+__d°
+, 
+__§c
+, 
+__nmc
+, 
+__Àn
+, 
+__ps
+);
+
+556 
+	}
+}
+
+559 
+size_t
+ 
+	$__wc¢πombs_chk
+ (*
+__ª°ri˘
+ 
+__d°
+,
+
+560 c⁄° 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__§c
+,
+
+561 
+size_t
+ 
+__nwc
+, size_à
+__Àn
+,
+
+562 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+, 
+size_t
+ 
+__d°Àn
+)
+
+563 
+__THROW
+;
+
+564 
+size_t
+ 
+	`__REDIRECT_NTH
+ (
+__wc¢πombs_Æüs
+,
+
+565 (*
+__ª°ri˘
+ 
+__d°
+,
+
+566 c⁄° 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__§c
+,
+
+567 
+size_t
+ 
+__nwc
+, size_à
+__Àn
+,
+
+568 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+), 
+wc¢πombs
+);
+
+569 
+size_t
+ 
+	`__REDIRECT_NTH
+ (
+__wc¢πombs_chk_w¨n
+,
+
+570 (*
+__ª°ri˘
+ 
+__d°
+,
+
+571 c⁄° 
+wch¨_t
+ **
+__ª°ri˘
+ 
+__§c
+,
+
+572 
+size_t
+ 
+__nwc
+, size_à
+__Àn
+,
+
+573 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+,
+
+574 
+size_t
+ 
+__d°Àn
+), 
+__wc¢πombs_chk
+)
+
+575 
+	`__w¨«âr
+ ("wcsnrtombs called with dst buffer smallerÅhanÜen");
+
+577 
+__f‹tify_fun˘i⁄
+ 
+size_t
+
+
+578 
+	`__NTH
+ (
+	$wc¢πombs
+ (*
+__ª°ri˘
+ 
+__d°
+, c⁄° 
+wch¨_t
+ **__ª°ri˘ 
+__§c
+,
+
+579 
+size_t
+ 
+__nwc
+, size_à
+__Àn
+, 
+mb°©e_t
+ *
+__ª°ri˘
+ 
+__ps
+))
+
+581 i‡(
+	`__bos
+ (
+__d°
+Ë!(
+size_t
+) -1)
+
+583 i‡(!
+	`__buûtö_c⁄°™t_p
+ (
+__Àn
+))
+
+584  
+	`__wc¢πombs_chk
+ (
+__d°
+, 
+__§c
+, 
+__nwc
+, 
+__Àn
+, 
+__ps
+,
+
+585 
+	`__bos
+ (
+__d°
+));
+
+587 i‡(
+__Àn
+ > 
+	`__bos
+ (
+__d°
+))
+
+588  
+	`__wc¢πombs_chk_w¨n
+ (
+__d°
+, 
+__§c
+, 
+__nwc
+, 
+__Àn
+, 
+__ps
+,
+
+589 
+	`__bos
+ (
+__d°
+));
+
+591  
+	`__wc¢πombs_Æüs
+ (
+__d°
+, 
+__§c
+, 
+__nwc
+, 
+__Àn
+, 
+__ps
+);
+
+592 
+	}
+}
+
+	@/usr/include/sys/select.h
+
+21 #i‚de‡
+_SYS_SELECT_H
+
+
+22 
+	#_SYS_SELECT_H
+ 1
+
+	)
+
+24 
+	~<„©uªs.h
+>
+
+27 
+	~<bôs/ty≥s.h
+>
+
+30 
+	~<bôs/£À˘.h
+>
+
+33 
+	~<bôs/sig£t.h
+>
+
+35 #i‚de‡
+__sig£t_t_deföed
+
+
+36 
+	#__sig£t_t_deföed
+
+
+	)
+
+37 
+__sig£t_t
+ 
+	tsig£t_t
+;
+
+41 
+	#__√ed_time_t
+
+
+	)
+
+42 
+	#__√ed_time•ec
+
+
+	)
+
+43 
+	~<time.h
+>
+
+44 
+	#__√ed_timevÆ
+
+
+	)
+
+45 
+	~<bôs/time.h
+>
+
+47 #i‚de‡
+__su£c⁄ds_t_deföed
+
+
+48 
+__su£c⁄ds_t
+ 
+	tsu£c⁄ds_t
+;
+
+49 
+	#__su£c⁄ds_t_deföed
+
+
+	)
+
+54 
+	t__fd_mask
+;
+
+57 #unde‡
+__NFDBITS
+
+
+59 
+	#__NFDBITS
+ (8 * (Ë (
+__fd_mask
+))
+
+	)
+
+60 
+	#__FD_ELT
+(
+d
+Ë((dË/ 
+__NFDBITS
+)
+
+	)
+
+61 
+	#__FD_MASK
+(
+d
+Ë((
+__fd_mask
+Ë(1UL << ((dË% 
+__NFDBITS
+)))
+
+	)
+
+68 #ifde‡
+__USE_XOPEN
+
+
+69 
+__fd_mask
+ 
+	mfds_bôs
+[
+__FD_SETSIZE
+ / 
+__NFDBITS
+];
+
+70 
+	#__FDS_BITS
+(
+£t
+Ë((£t)->
+fds_bôs
+)
+
+	)
+
+72 
+__fd_mask
+ 
+	m__fds_bôs
+[
+__FD_SETSIZE
+ / 
+__NFDBITS
+];
+
+73 
+	#__FDS_BITS
+(
+£t
+Ë((£t)->
+__fds_bôs
+)
+
+	)
+
+75 } 
+	tfd_£t
+;
+
+78 
+	#FD_SETSIZE
+ 
+__FD_SETSIZE
+
+
+	)
+
+80 #ifde‡
+__USE_MISC
+
+
+82 
+__fd_mask
+ 
+	tfd_mask
+;
+
+85 
+	#NFDBITS
+ 
+__NFDBITS
+
+
+	)
+
+90 
+	#FD_SET
+(
+fd
+, 
+fd£ç
+Ë
+	`__FD_SET
+ (fd, fd£ç)
+
+	)
+
+91 
+	#FD_CLR
+(
+fd
+, 
+fd£ç
+Ë
+	`__FD_CLR
+ (fd, fd£ç)
+
+	)
+
+92 
+	#FD_ISSET
+(
+fd
+, 
+fd£ç
+Ë
+	`__FD_ISSET
+ (fd, fd£ç)
+
+	)
+
+93 
+	#FD_ZERO
+(
+fd£ç
+Ë
+	`__FD_ZERO
+ (fd£ç)
+
+	)
+
+96 
+__BEGIN_DECLS
+
+
+106 
+£À˘
+ (
+__nfds
+, 
+fd_£t
+ *
+__ª°ri˘
+ 
+__ªadfds
+,
+
+107 
+fd_£t
+ *
+__ª°ri˘
+ 
+__wrôefds
+,
+
+108 
+fd_£t
+ *
+__ª°ri˘
+ 
+__ex˚±fds
+,
+
+109 
+timevÆ
+ *
+__ª°ri˘
+ 
+__timeout
+);
+
+111 #ifde‡
+__USE_XOPEN2K
+
+
+118 
+p£À˘
+ (
+__nfds
+, 
+fd_£t
+ *
+__ª°ri˘
+ 
+__ªadfds
+,
+
+119 
+fd_£t
+ *
+__ª°ri˘
+ 
+__wrôefds
+,
+
+120 
+fd_£t
+ *
+__ª°ri˘
+ 
+__ex˚±fds
+,
+
+121 c⁄° 
+time•ec
+ *
+__ª°ri˘
+ 
+__timeout
+,
+
+122 c⁄° 
+__sig£t_t
+ *
+__ª°ri˘
+ 
+__sigmask
+);
+
+127 #i‡
+__USE_FORTIFY_LEVEL
+ > 0 && 
+deföed
+ 
+__GNUC__
+
+
+128 
+	~<bôs/£À˘2.h
+>
+
+131 
+	g__END_DECLS
+
+
+	@/usr/include/sys/sysmacros.h
+
+19 #i‚de‡
+_SYS_SYSMACROS_H
+
+
+20 
+	#_SYS_SYSMACROS_H
+ 1
+
+	)
+
+22 
+	~<„©uªs.h
+>
+
+24 
+__BEGIN_DECLS
+
+
+26 
+__exãnsi⁄__
+
+
+27 
+	$gnu_dev_maj‹
+ (
+__dev
+)
+
+28 
+__THROW
+ 
+__©åibuã_c⁄°__
+;
+
+29 
+__exãnsi⁄__
+
+
+30 
+	$gnu_dev_mö‹
+ (
+__dev
+)
+
+31 
+__THROW
+ 
+__©åibuã_c⁄°__
+;
+
+32 
+__exãnsi⁄__
+
+
+33 
+	$gnu_dev_makedev
+ (
+__maj‹
+,
+
+34 
+__mö‹
+)
+
+35 
+__THROW
+ 
+__©åibuã_c⁄°__
+;
+
+37 #ifde‡
+__USE_EXTERN_INLINES
+
+
+38 
+__exãnsi⁄__
+ 
+__exã∫_ölöe
+ 
+__©åibuã_c⁄°__
+ 
+
+39 
+	`__NTH
+ (
+	$gnu_dev_maj‹
+ (
+__dev
+))
+
+41  ((
+__dev
+ >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);
+
+42 
+	}
+}
+
+44 
+__exãnsi⁄__
+ 
+__exã∫_ölöe
+ 
+__©åibuã_c⁄°__
+ 
+
+45 
+__NTH
+ (
+	$gnu_dev_mö‹
+ (
+__dev
+))
+
+47  (
+__dev
+ & 0xff) | (() (__dev >> 12) & ~0xff);
+
+48 
+	}
+}
+
+50 
+__exãnsi⁄__
+ 
+__exã∫_ölöe
+ 
+__©åibuã_c⁄°__
+ 
+
+51 
+__NTH
+ (
+	$gnu_dev_makedev
+ (
+__maj‹
+, 
+__mö‹
+))
+
+53  ((
+__mö‹
+ & 0xffË| ((
+__maj‹
+ & 0xfff) << 8)
+
+54 | (((Ë(
+__mö‹
+ & ~0xff)) << 12)
+
+55 | (((Ë(
+__maj‹
+ & ~0xfff)) << 32));
+
+56 
+	}
+}
+
+58 
+	g__END_DECLS
+
+
+61 
+	#maj‹
+(
+dev
+Ë
+	`gnu_dev_maj‹
+ (dev)
+
+	)
+
+62 
+	#mö‹
+(
+dev
+Ë
+	`gnu_dev_mö‹
+ (dev)
+
+	)
+
+63 
+	#makedev
+(
+maj
+, 
+mö
+Ë
+	`gnu_dev_makedev
+ (maj, mö)
+
+	)
+
+	@/usr/include/wctype.h
+
+23 #i‚de‡
+_WCTYPE_H
+
+
+25 
+	~<„©uªs.h
+>
+
+26 
+	~<bôs/ty≥s.h
+>
+
+28 #i‚de‡
+__√ed_iswxxx
+
+
+29 
+	#_WCTYPE_H
+ 1
+
+	)
+
+32 
+	#__√ed_wöt_t
+
+
+	)
+
+33 
+	~<wch¨.h
+>
+
+37 #i‚de‡
+WEOF
+
+
+38 
+	#WEOF
+ (0xffffffffu)
+
+	)
+
+41 #unde‡
+__√ed_iswxxx
+
+
+46 #i‚de‡
+__iswxxx_deföed
+
+
+47 
+	#__iswxxx_deföed
+ 1
+
+	)
+
+49 
+__BEGIN_NAMESPACE_C99
+
+
+52 
+	tw˘y≥_t
+;
+
+53 
+	g__END_NAMESPACE_C99
+
+
+55 #i‚de‡
+_ISwbô
+
+
+60 
+	~<ídün.h
+>
+
+61 #i‡
+__BYTE_ORDER
+ =
+__BIG_ENDIAN
+
+
+62 
+	#_ISwbô
+(
+bô
+Ë(1 << (bô))
+
+	)
+
+64 
+	#_ISwbô
+(
+bô
+) \
+
+65 ((
+bô
+) < 8 ? () ((1UL << (bit)) << 24) \
+
+66 : ((
+bô
+) < 16 ? () ((1UL << (bit)) << 8) \
+
+67 : ((
+bô
+) < 24 ? () ((1UL << (bit)) >> 8) \
+
+68 : (Ë((1UL << (
+bô
+)Ë>> 24))))
+
+	)
+
+73 
+	m__ISwuµî
+ = 0,
+
+74 
+	m__ISwlowî
+ = 1,
+
+75 
+	m__ISwÆpha
+ = 2,
+
+76 
+	m__ISwdigô
+ = 3,
+
+77 
+	m__ISwxdigô
+ = 4,
+
+78 
+	m__ISw•a˚
+ = 5,
+
+79 
+	m__ISw¥öt
+ = 6,
+
+80 
+	m__ISwgøph
+ = 7,
+
+81 
+	m__ISwbœnk
+ = 8,
+
+82 
+	m__ISw˙ål
+ = 9,
+
+83 
+	m__ISwpun˘
+ = 10,
+
+84 
+	m__ISwÆnum
+ = 11,
+
+86 
+	m_ISwuµî
+ = 
+_ISwbô
+ (
+__ISwuµî
+),
+
+87 
+	m_ISwlowî
+ = 
+_ISwbô
+ (
+__ISwlowî
+),
+
+88 
+	m_ISwÆpha
+ = 
+_ISwbô
+ (
+__ISwÆpha
+),
+
+89 
+	m_ISwdigô
+ = 
+_ISwbô
+ (
+__ISwdigô
+),
+
+90 
+	m_ISwxdigô
+ = 
+_ISwbô
+ (
+__ISwxdigô
+),
+
+91 
+	m_ISw•a˚
+ = 
+_ISwbô
+ (
+__ISw•a˚
+),
+
+92 
+	m_ISw¥öt
+ = 
+_ISwbô
+ (
+__ISw¥öt
+),
+
+93 
+	m_ISwgøph
+ = 
+_ISwbô
+ (
+__ISwgøph
+),
+
+94 
+	m_ISwbœnk
+ = 
+_ISwbô
+ (
+__ISwbœnk
+),
+
+95 
+	m_ISw˙ål
+ = 
+_ISwbô
+ (
+__ISw˙ål
+),
+
+96 
+	m_ISwpun˘
+ = 
+_ISwbô
+ (
+__ISwpun˘
+),
+
+97 
+	m_ISwÆnum
+ = 
+_ISwbô
+ (
+__ISwÆnum
+)
+
+102 
+__BEGIN_DECLS
+
+
+104 
+__BEGIN_NAMESPACE_C99
+
+
+111 
+	$iswÆnum
+ (
+wöt_t
+ 
+__wc
+Ë
+__THROW
+;
+
+117 
+	$iswÆpha
+ (
+wöt_t
+ 
+__wc
+Ë
+__THROW
+;
+
+120 
+	$isw˙ål
+ (
+wöt_t
+ 
+__wc
+Ë
+__THROW
+;
+
+124 
+	$iswdigô
+ (
+wöt_t
+ 
+__wc
+Ë
+__THROW
+;
+
+128 
+	$iswgøph
+ (
+wöt_t
+ 
+__wc
+Ë
+__THROW
+;
+
+133 
+	$iswlowî
+ (
+wöt_t
+ 
+__wc
+Ë
+__THROW
+;
+
+136 
+	$isw¥öt
+ (
+wöt_t
+ 
+__wc
+Ë
+__THROW
+;
+
+141 
+	$iswpun˘
+ (
+wöt_t
+ 
+__wc
+Ë
+__THROW
+;
+
+146 
+	$isw•a˚
+ (
+wöt_t
+ 
+__wc
+Ë
+__THROW
+;
+
+151 
+	$iswuµî
+ (
+wöt_t
+ 
+__wc
+Ë
+__THROW
+;
+
+156 
+	$iswxdigô
+ (
+wöt_t
+ 
+__wc
+Ë
+__THROW
+;
+
+161 #ifde‡
+__USE_ISOC99
+
+
+162 
+	$iswbœnk
+ (
+wöt_t
+ 
+__wc
+Ë
+__THROW
+;
+
+171 
+w˘y≥_t
+ 
+	$w˘y≥
+ (c⁄° *
+__¥›îty
+Ë
+__THROW
+;
+
+175 
+	$isw˘y≥
+ (
+wöt_t
+ 
+__wc
+, 
+w˘y≥_t
+ 
+__desc
+Ë
+__THROW
+;
+
+176 
+__END_NAMESPACE_C99
+
+
+183 
+__BEGIN_NAMESPACE_C99
+
+
+186 c⁄° 
+	t__öt32_t
+ *
+	tw˘øns_t
+;
+
+187 
+__END_NAMESPACE_C99
+
+
+188 #ifde‡
+__USE_GNU
+
+
+189 
+	$__USING_NAMESPACE_C99
+(
+w˘øns_t
+)
+
+192 
+__BEGIN_NAMESPACE_C99
+
+
+194 
+wöt_t
+ 
+	$towlowî
+ (
+wöt_t
+ 
+__wc
+Ë
+__THROW
+;
+
+197 
+wöt_t
+ 
+	$towuµî
+ (
+wöt_t
+ 
+__wc
+Ë
+__THROW
+;
+
+198 
+__END_NAMESPACE_C99
+
+
+200 
+__END_DECLS
+
+
+207 #ifde‡
+_WCTYPE_H
+
+
+213 
+__BEGIN_DECLS
+
+
+215 
+__BEGIN_NAMESPACE_C99
+
+
+218 
+w˘øns_t
+ 
+	$w˘øns
+ (c⁄° *
+__¥›îty
+Ë
+__THROW
+;
+
+221 
+wöt_t
+ 
+	$tow˘øns
+ (
+wöt_t
+ 
+__wc
+, 
+w˘øns_t
+ 
+__desc
+Ë
+__THROW
+;
+
+222 
+__END_NAMESPACE_C99
+
+
+224 #ifde‡
+__USE_XOPEN2K8
+
+
+226 
+	~<xloˇÀ.h
+>
+
+230 
+	$iswÆnum_l
+ (
+wöt_t
+ 
+__wc
+, 
+__loˇÀ_t
+ 
+__loˇÀ
+Ë
+__THROW
+;
+
+236 
+	$iswÆpha_l
+ (
+wöt_t
+ 
+__wc
+, 
+__loˇÀ_t
+ 
+__loˇÀ
+Ë
+__THROW
+;
+
+239 
+	$isw˙ål_l
+ (
+wöt_t
+ 
+__wc
+, 
+__loˇÀ_t
+ 
+__loˇÀ
+Ë
+__THROW
+;
+
+243 
+	$iswdigô_l
+ (
+wöt_t
+ 
+__wc
+, 
+__loˇÀ_t
+ 
+__loˇÀ
+Ë
+__THROW
+;
+
+247 
+	$iswgøph_l
+ (
+wöt_t
+ 
+__wc
+, 
+__loˇÀ_t
+ 
+__loˇÀ
+Ë
+__THROW
+;
+
+252 
+	$iswlowî_l
+ (
+wöt_t
+ 
+__wc
+, 
+__loˇÀ_t
+ 
+__loˇÀ
+Ë
+__THROW
+;
+
+255 
+	$isw¥öt_l
+ (
+wöt_t
+ 
+__wc
+, 
+__loˇÀ_t
+ 
+__loˇÀ
+Ë
+__THROW
+;
+
+260 
+	$iswpun˘_l
+ (
+wöt_t
+ 
+__wc
+, 
+__loˇÀ_t
+ 
+__loˇÀ
+Ë
+__THROW
+;
+
+265 
+	$isw•a˚_l
+ (
+wöt_t
+ 
+__wc
+, 
+__loˇÀ_t
+ 
+__loˇÀ
+Ë
+__THROW
+;
+
+270 
+	$iswuµî_l
+ (
+wöt_t
+ 
+__wc
+, 
+__loˇÀ_t
+ 
+__loˇÀ
+Ë
+__THROW
+;
+
+275 
+	$iswxdigô_l
+ (
+wöt_t
+ 
+__wc
+, 
+__loˇÀ_t
+ 
+__loˇÀ
+Ë
+__THROW
+;
+
+280 
+	$iswbœnk_l
+ (
+wöt_t
+ 
+__wc
+, 
+__loˇÀ_t
+ 
+__loˇÀ
+Ë
+__THROW
+;
+
+284 
+w˘y≥_t
+ 
+	$w˘y≥_l
+ (c⁄° *
+__¥›îty
+, 
+__loˇÀ_t
+ 
+__loˇÀ
+)
+
+285 
+__THROW
+;
+
+289 
+	$isw˘y≥_l
+ (
+wöt_t
+ 
+__wc
+, 
+w˘y≥_t
+ 
+__desc
+, 
+__loˇÀ_t
+ 
+__loˇÀ
+)
+
+290 
+__THROW
+;
+
+298 
+wöt_t
+ 
+	$towlowî_l
+ (
+wöt_t
+ 
+__wc
+, 
+__loˇÀ_t
+ 
+__loˇÀ
+Ë
+__THROW
+;
+
+301 
+wöt_t
+ 
+	$towuµî_l
+ (
+wöt_t
+ 
+__wc
+, 
+__loˇÀ_t
+ 
+__loˇÀ
+Ë
+__THROW
+;
+
+305 
+w˘øns_t
+ 
+	$w˘øns_l
+ (c⁄° *
+__¥›îty
+, 
+__loˇÀ_t
+ 
+__loˇÀ
+)
+
+306 
+__THROW
+;
+
+309 
+wöt_t
+ 
+	$tow˘øns_l
+ (
+wöt_t
+ 
+__wc
+, 
+w˘øns_t
+ 
+__desc
+,
+
+310 
+__loˇÀ_t
+ 
+__loˇÀ
+Ë
+__THROW
+;
+
+314 
+__END_DECLS
+
+
+	@/usr/include/asm-generic/errno-base.h
+
+1 #i‚de‡
+_ASM_GENERIC_ERRNO_BASE_H
+
+
+2 
+	#_ASM_GENERIC_ERRNO_BASE_H
+
+
+	)
+
+4 
+	#EPERM
+ 1
+
+	)
+
+5 
+	#ENOENT
+ 2
+
+	)
+
+6 
+	#ESRCH
+ 3
+
+	)
+
+7 
+	#EINTR
+ 4
+
+	)
+
+8 
+	#EIO
+ 5
+
+	)
+
+9 
+	#ENXIO
+ 6
+
+	)
+
+10 
+	#E2BIG
+ 7
+
+	)
+
+11 
+	#ENOEXEC
+ 8
+
+	)
+
+12 
+	#EBADF
+ 9
+
+	)
+
+13 
+	#ECHILD
+ 10
+
+	)
+
+14 
+	#EAGAIN
+ 11
+
+	)
+
+15 
+	#ENOMEM
+ 12
+
+	)
+
+16 
+	#EACCES
+ 13
+
+	)
+
+17 
+	#EFAULT
+ 14
+
+	)
+
+18 
+	#ENOTBLK
+ 15
+
+	)
+
+19 
+	#EBUSY
+ 16
+
+	)
+
+20 
+	#EEXIST
+ 17
+
+	)
+
+21 
+	#EXDEV
+ 18
+
+	)
+
+22 
+	#ENODEV
+ 19
+
+	)
+
+23 
+	#ENOTDIR
+ 20
+
+	)
+
+24 
+	#EISDIR
+ 21
+
+	)
+
+25 
+	#EINVAL
+ 22
+
+	)
+
+26 
+	#ENFILE
+ 23
+
+	)
+
+27 
+	#EMFILE
+ 24
+
+	)
+
+28 
+	#ENOTTY
+ 25
+
+	)
+
+29 
+	#ETXTBSY
+ 26
+
+	)
+
+30 
+	#EFBIG
+ 27
+
+	)
+
+31 
+	#ENOSPC
+ 28
+
+	)
+
+32 
+	#ESPIPE
+ 29
+
+	)
+
+33 
+	#EROFS
+ 30
+
+	)
+
+34 
+	#EMLINK
+ 31
+
+	)
+
+35 
+	#EPIPE
+ 32
+
+	)
+
+36 
+	#EDOM
+ 33
+
+	)
+
+37 
+	#ERANGE
+ 34
+
+	)
+
+	@/usr/include/bits/select.h
+
+18 #i‚de‡
+_SYS_SELECT_H
+
+
+22 
+	~<bôs/w‹dsize.h
+>
+
+25 #i‡
+deföed
+ 
+__GNUC__
+ && __GNUC__ >= 2
+
+27 #i‡
+__WORDSIZE
+ == 64
+
+28 
+	#__FD_ZERO_STOS
+ "°osq"
+
+	)
+
+30 
+	#__FD_ZERO_STOS
+ "°o¶"
+
+	)
+
+33 
+	#__FD_ZERO
+(
+fd•
+) \
+
+35 
+__d0
+, 
+__d1
+; \
+
+36 
+__asm__
+ 
+	`__vﬁ©ûe__
+ ("˛d;Ñï; " 
+__FD_ZERO_STOS
+ \
+
+37 : "=c" (
+__d0
+), "=D" (
+__d1
+) \
+
+38 : "a" (0), "0" ( (
+fd_£t
+) \
+
+39 /  (
+__fd_mask
+)), \
+
+40 "1" (&
+	`__FDS_BITS
+ (
+fd•
+)[0]) \
+
+42 } 0)
+
+	)
+
+48 
+	#__FD_ZERO
+(
+£t
+) \
+
+50 
+__i
+; \
+
+51 
+fd_£t
+ *
+__¨r
+ = (
+£t
+); \
+
+52 
+__i
+ = 0; __ò<  (
+fd_£t
+Ë/  (
+__fd_mask
+); ++__i) \
+
+53 
+	`__FDS_BITS
+ (
+__¨r
+)[
+__i
+] = 0; \
+
+54 } 0)
+
+	)
+
+58 
+	#__FD_SET
+(
+d
+, 
+£t
+) \
+
+59 ((Ë(
+	`__FDS_BITS
+ (
+£t
+)[
+	`__FD_ELT
+ (
+d
+)] |
+	`__FD_MASK
+ (d)))
+
+	)
+
+60 
+	#__FD_CLR
+(
+d
+, 
+£t
+) \
+
+61 ((Ë(
+	`__FDS_BITS
+ (
+£t
+)[
+	`__FD_ELT
+ (
+d
+)] &~
+	`__FD_MASK
+ (d)))
+
+	)
+
+62 
+	#__FD_ISSET
+(
+d
+, 
+£t
+) \
+
+63 ((
+	`__FDS_BITS
+ (
+£t
+)[
+	`__FD_ELT
+ (
+d
+)] & 
+	`__FD_MASK
+ (d)Ë!0)
+
+	)
+
+	@/usr/include/bits/select2.h
+
+19 #i‚de‡
+_SYS_SELECT_H
+
+
+24 
+__fdñt_chk
+ (
+__d
+);
+
+25 
+	$__fdñt_w¨n
+ (
+__d
+)
+
+26 
+	`__w¨«âr
+ ("bit outside of fd_set selected");
+
+27 #unde‡
+__FD_ELT
+
+
+28 
+	#__FD_ELT
+(
+d
+) \
+
+29 
+__exãnsi⁄__
+ \
+
+30 ({ 
+__d
+ = (
+d
+); \
+
+31 (
+	`__buûtö_c⁄°™t_p
+ (
+__d
+) \
+
+32 ? (0 <
+__d
+ && __d < 
+__FD_SETSIZE
+ \
+
+33 ? (
+__d
+ / 
+__NFDBITS
+) \
+
+34 : 
+	`__fdñt_w¨n
+ (
+__d
+)) \
+
+35 : 
+	`__fdñt_chk
+ (
+__d
+)); 
+	}
+})
+
+	)
+
+	@/usr/include/bits/sigset.h
+
+19 #i‚def 
+_SIGSET_H_ty≥s
+
+
+20 
+	#_SIGSET_H_ty≥s
+ 1
+
+	)
+
+22 
+	t__sig_©omic_t
+;
+
+26 
+	#_SIGSET_NWORDS
+ (1024 / (8 *  ()))
+
+	)
+
+29 
+	m__vÆ
+[
+_SIGSET_NWORDS
+];
+
+30 } 
+	t__sig£t_t
+;
+
+41 #i‡!
+deföed
+ 
+_SIGSET_H_‚s
+ && deföed 
+_SIGNAL_H
+
+
+42 
+	#_SIGSET_H_‚s
+ 1
+
+	)
+
+44 #i‚de‡
+_EXTERN_INLINE
+
+
+45 
+	#_EXTERN_INLINE
+ 
+__exã∫_ölöe
+
+
+	)
+
+49 
+	#__sigmask
+(
+sig
+) \
+
+50 (((Ë1Ë<< (((
+sig
+Ë- 1Ë% (8 *  ())))
+
+	)
+
+53 
+	#__sigw‹d
+(
+sig
+Ë(((sigË- 1Ë/ (8 *  ()))
+
+	)
+
+55 #i‡
+deföed
+ 
+__GNUC__
+ && __GNUC__ >= 2
+
+56 
+	#__sigem±y£t
+(
+£t
+) \
+
+57 (
+	`__exãnsi⁄__
+ ({ 
+__˙t
+ = 
+_SIGSET_NWORDS
+; \
+
+58 
+sig£t_t
+ *
+__£t
+ = (
+£t
+); \
+
+59 --
+__˙t
+ >0Ë
+__£t
+->
+__vÆ
+[__cnt] = 0; \
+
+60 0; }))
+
+	)
+
+61 
+	#__sigfûl£t
+(
+£t
+) \
+
+62 (
+	`__exãnsi⁄__
+ ({ 
+__˙t
+ = 
+_SIGSET_NWORDS
+; \
+
+63 
+sig£t_t
+ *
+__£t
+ = (
+£t
+); \
+
+64 --
+__˙t
+ >0Ë
+__£t
+->
+__vÆ
+[__cnt] = ~0UL; \
+
+65 0; }))
+
+	)
+
+67 #ifde‡
+__USE_GNU
+
+
+71 
+	#__sigi£m±y£t
+(
+£t
+) \
+
+72 (
+	`__exãnsi⁄__
+ ({ 
+__˙t
+ = 
+_SIGSET_NWORDS
+; \
+
+73 c⁄° 
+sig£t_t
+ *
+__£t
+ = (
+£t
+); \
+
+74 
+__ªt
+ = 
+__£t
+->
+__vÆ
+[--
+__˙t
+]; \
+
+75 !
+__ªt
+ && --
+__˙t
+ >= 0) \
+
+76 
+__ªt
+ = 
+__£t
+->
+__vÆ
+[
+__˙t
+]; \
+
+77 
+__ªt
+ =0; }))
+
+	)
+
+78 
+	#__sig™d£t
+(
+de°
+, 
+À·
+, 
+right
+) \
+
+79 (
+	`__exãnsi⁄__
+ ({ 
+__˙t
+ = 
+_SIGSET_NWORDS
+; \
+
+80 
+sig£t_t
+ *
+__de°
+ = (
+de°
+); \
+
+81 c⁄° 
+sig£t_t
+ *
+__À·
+ = (
+À·
+); \
+
+82 c⁄° 
+sig£t_t
+ *
+__right
+ = (
+right
+); \
+
+83 --
+__˙t
+ >= 0) \
+
+84 
+__de°
+->
+__vÆ
+[
+__˙t
+] = (
+__À·
+->__val[__cnt] \
+
+85 & 
+__right
+->
+__vÆ
+[
+__˙t
+]); \
+
+86 0; }))
+
+	)
+
+87 
+	#__sig‹£t
+(
+de°
+, 
+À·
+, 
+right
+) \
+
+88 (
+	`__exãnsi⁄__
+ ({ 
+__˙t
+ = 
+_SIGSET_NWORDS
+; \
+
+89 
+sig£t_t
+ *
+__de°
+ = (
+de°
+); \
+
+90 c⁄° 
+sig£t_t
+ *
+__À·
+ = (
+À·
+); \
+
+91 c⁄° 
+sig£t_t
+ *
+__right
+ = (
+right
+); \
+
+92 --
+__˙t
+ >= 0) \
+
+93 
+__de°
+->
+__vÆ
+[
+__˙t
+] = (
+__À·
+->__val[__cnt] \
+
+94 | 
+__right
+->
+__vÆ
+[
+__˙t
+]); \
+
+95 0; }))
+
+	)
+
+102 
+__sigismembî
+ (c⁄° 
+__sig£t_t
+ *, );
+
+103 
+__sigadd£t
+ (
+__sig£t_t
+ *, );
+
+104 
+__sigdñ£t
+ (
+__sig£t_t
+ *, );
+
+106 #ifde‡
+__USE_EXTERN_INLINES
+
+
+107 
+	#__SIGSETFN
+(
+NAME
+, 
+BODY
+, 
+CONST
+) \
+
+108 
+_EXTERN_INLINE
+ \
+
+109 
+	`NAME
+ (
+CONST
+ 
+__sig£t_t
+ *
+__£t
+, 
+__sig
+) \
+
+111 
+__mask
+ = 
+	`__sigmask
+ (
+__sig
+); \
+
+112 
+__w‹d
+ = 
+	`__sigw‹d
+ (
+__sig
+); \
+
+113  
+BODY
+; \
+
+114 }
+
+	)
+
+116 
+__SIGSETFN
+ (
+__sigismembî
+, (
+__£t
+->
+__vÆ
+[
+__w‹d
+] & 
+__mask
+) ? 1 : 0, const)
+
+117 
+__SIGSETFN
+ (
+__sigadd£t
+, ((
+__£t
+->
+__vÆ
+[
+__w‹d
+] |
+__mask
+), 0), )
+
+118 
+__SIGSETFN
+ (
+__sigdñ£t
+, ((
+__£t
+->
+__vÆ
+[
+__w‹d
+] &~
+__mask
+), 0), )
+
+120 #unde‡
+__SIGSETFN
+
+
+	@
+1
+.
+1
+/usr/include
+113
+2581
+boot/asm.h
+boot/bootmain.c
+kern/debug/assert.h
+kern/debug/kdebug.c
+kern/debug/kdebug.h
+kern/debug/kmonitor.c
+kern/debug/kmonitor.h
+kern/debug/panic.c
+kern/debug/stab.h
+kern/driver/clock.c
+kern/driver/clock.h
+kern/driver/console.c
+kern/driver/console.h
+kern/driver/intr.c
+kern/driver/intr.h
+kern/driver/kbdreg.h
+kern/driver/picirq.c
+kern/driver/picirq.h
+kern/init/init.c
+kern/libs/readline.c
+kern/libs/stdio.c
+kern/mm/default_pmm.c
+kern/mm/default_pmm.h
+kern/mm/memlayout.h
+kern/mm/mmu.h
+kern/mm/pmm.c
+kern/mm/pmm.h
+kern/sync/sync.h
+kern/trap/trap.c
+kern/trap/trap.h
+libs/atomic.h
+libs/defs.h
+libs/elf.h
+libs/error.h
+libs/list.h
+libs/printfmt.c
+libs/stdarg.h
+libs/stdio.h
+libs/string.c
+libs/string.h
+libs/x86.h
+tools/sign.c
+tools/vector.c
+/usr/include/assert.h
+/usr/include/elf.h
+/usr/include/errno.h
+/usr/include/error.h
+/usr/include/stab.h
+/usr/include/stdio.h
+/usr/include/string.h
+/usr/include/sys/stat.h
+/usr/include/bits/auxv.h
+/usr/include/bits/errno.h
+/usr/include/bits/error.h
+/usr/include/bits/stab.def
+/usr/include/bits/stat.h
+/usr/include/bits/stdio-ldbl.h
+/usr/include/bits/stdio.h
+/usr/include/bits/stdio2.h
+/usr/include/bits/stdio_lim.h
+/usr/include/bits/string.h
+/usr/include/bits/string2.h
+/usr/include/bits/string3.h
+/usr/include/bits/sys_errlist.h
+/usr/include/bits/types.h
+/usr/include/features.h
+/usr/include/getopt.h
+/usr/include/libio.h
+/usr/include/stdint.h
+/usr/include/time.h
+/usr/include/xlocale.h
+/usr/include/_G_config.h
+/usr/include/bits/libio-ldbl.h
+/usr/include/bits/time.h
+/usr/include/bits/typesizes.h
+/usr/include/bits/wchar.h
+/usr/include/bits/wordsize.h
+/usr/include/ctype.h
+/usr/include/endian.h
+/usr/include/gnu/stubs.h
+/usr/include/linux/errno.h
+/usr/include/stdc-predef.h
+/usr/include/stdlib.h
+/usr/include/sys/cdefs.h
+/usr/include/alloca.h
+/usr/include/asm/errno.h
+/usr/include/bits/byteswap.h
+/usr/include/bits/endian.h
+/usr/include/bits/stdlib-bsearch.h
+/usr/include/bits/stdlib-float.h
+/usr/include/bits/stdlib-ldbl.h
+/usr/include/bits/stdlib.h
+/usr/include/bits/timex.h
+/usr/include/bits/waitflags.h
+/usr/include/bits/waitstatus.h
+/usr/include/gconv.h
+/usr/include/gnu/stubs-32.h
+/usr/include/gnu/stubs-64.h
+/usr/include/gnu/stubs-x32.h
+/usr/include/sys/types.h
+/usr/include/wchar.h
+/usr/include/asm-generic/errno.h
+/usr/include/bits/byteswap-16.h
+/usr/include/bits/pthreadtypes.h
+/usr/include/bits/wchar-ldbl.h
+/usr/include/bits/wchar2.h
+/usr/include/sys/select.h
+/usr/include/sys/sysmacros.h
+/usr/include/wctype.h
+/usr/include/asm-generic/errno-base.h
+/usr/include/bits/select.h
+/usr/include/bits/select2.h
+/usr/include/bits/sigset.h
diff -Nru lab1/kern/debug/' lab2/kern/debug/'
--- lab1/kern/debug/'	2017-03-01 11:09:31.714693072 +0800
+++ lab2/kern/debug/'	1970-01-01 08:00:00.000000000 +0800
@@ -1,320 +0,0 @@
-#include <defs.h>
-#include <x86.h>
-#include <stab.h>
-#include <stdio.h>
-#include <string.h>
-#include <kdebug.h>
-
-#define STACKFRAME_DEPTH 20
-
-extern const struct stab __STAB_BEGIN__[];  // beginning of stabs table
-extern const struct stab __STAB_END__[];    // end of stabs table
-extern const char __STABSTR_BEGIN__[];      // beginning of string table
-extern const char __STABSTR_END__[];        // end of string table
-
-/* debug information about a particular instruction pointer */
-struct eipdebuginfo {
-    const char *eip_file;                   // source code filename for eip
-    int eip_line;                           // source code line number for eip
-    const char *eip_fn_name;                // name of function containing eip
-    int eip_fn_namelen;                     // length of function's name
-    uintptr_t eip_fn_addr;                  // start address of function
-    int eip_fn_narg;                        // number of function arguments
-};
-
-/* *
- * stab_binsearch - according to the input, the initial value of
- * range [*@region_left, *@region_right], find a single stab entry
- * that includes the address @addr and matches the type @type,
- * and then save its boundary to the locations that pointed
- * by @region_left and @region_right.
- *
- * Some stab types are arranged in increasing order by instruction address.
- * For example, N_FUN stabs (stab entries with n_type == N_FUN), which
- * mark functions, and N_SO stabs, which mark source files.
- *
- * Given an instruction address, this function finds the single stab entry
- * of type @type that contains that address.
- *
- * The search takes place within the range [*@region_left, *@region_right].
- * Thus, to search an entire set of N stabs, you might do:
- *
- *      left = 0;
- *      right = N - 1;    (rightmost stab)
- *      stab_binsearch(stabs, &left, &right, type, addr);
- *
- * The search modifies *region_left and *region_right to bracket the @addr.
- * *@region_left points to the matching stab that contains @addr,
- * and *@region_right points just before the next stab.
- * If *@region_left > *region_right, then @addr is not contained in any
- * matching stab.
- *
- * For example, given these N_SO stabs:
- *      Index  Type   Address
- *      0      SO     f0100000
- *      13     SO     f0100040
- *      117    SO     f0100176
- *      118    SO     f0100178
- *      555    SO     f0100652
- *      556    SO     f0100654
- *      657    SO     f0100849
- * this code:
- *      left = 0, right = 657;
- *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
- * will exit setting left = 118, right = 554.
- * */
-static void
-stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
-           int type, uintptr_t addr) {
-    int l = *region_left, r = *region_right, any_matches = 0;
-
-    while (l <= r) {
-        int true_m = (l + r) / 2, m = true_m;
-
-        // search for earliest stab with right type
-        while (m >= l && stabs[m].n_type != type) {
-            m --;
-        }
-        if (m < l) {    // no match in [l, m]
-            l = true_m + 1;
-            continue;
-        }
-
-        // actual binary search
-        any_matches = 1;
-        if (stabs[m].n_value < addr) {
-            *region_left = m;
-            l = true_m + 1;
-        } else if (stabs[m].n_value > addr) {
-            *region_right = m - 1;
-            r = m - 1;
-        } else {
-            // exact match for 'addr', but continue loop to find
-            // *region_right
-            *region_left = m;
-            l = m;
-            addr ++;
-        }
-    }
-
-    if (!any_matches) {
-        *region_right = *region_left - 1;
-    }
-    else {
-        // find rightmost region containing 'addr'
-        l = *region_right;
-        for (; l > *region_left && stabs[l].n_type != type; l --)
-            /* do nothing */;
-        *region_left = l;
-    }
-}
-
-/* *
- * debuginfo_eip - Fill in the @info structure with information about
- * the specified instruction address, @addr.  Returns 0 if information
- * was found, and negative if not.  But even if it returns negative it
- * has stored some information into '*info'.
- * */
-int
-debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
-    const struct stab *stabs, *stab_end;
-    const char *stabstr, *stabstr_end;
-
-    info->eip_file = "<unknown>";
-    info->eip_line = 0;
-    info->eip_fn_name = "<unknown>";
-    info->eip_fn_namelen = 9;
-    info->eip_fn_addr = addr;
-    info->eip_fn_narg = 0;
-
-    stabs = __STAB_BEGIN__;
-    stab_end = __STAB_END__;
-    stabstr = __STABSTR_BEGIN__;
-    stabstr_end = __STABSTR_END__;
-
-    // String table validity checks
-    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
-        return -1;
-    }
-
-    // Now we find the right stabs that define the function containing
-    // 'eip'.  First, we find the basic source file containing 'eip'.
-    // Then, we look in that source file for the function.  Then we look
-    // for the line number.
-
-    // Search the entire set of stabs for the source file (type N_SO).
-    int lfile = 0, rfile = (stab_end - stabs) - 1;
-    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
-    if (lfile == 0)
-        return -1;
-
-    // Search within that file's stabs for the function definition
-    // (N_FUN).
-    int lfun = lfile, rfun = rfile;
-    int lline, rline;
-    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
-
-    if (lfun <= rfun) {
-        // stabs[lfun] points to the function name
-        // in the string table, but check bounds just in case.
-        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
-            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
-        }
-        info->eip_fn_addr = stabs[lfun].n_value;
-        addr -= info->eip_fn_addr;
-        // Search within the function definition for the line number.
-        lline = lfun;
-        rline = rfun;
-    } else {
-        // Couldn't find function stab!  Maybe we're in an assembly
-        // file.  Search the whole file for the line number.
-        info->eip_fn_addr = addr;
-        lline = lfile;
-        rline = rfile;
-    }
-    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
-
-    // Search within [lline, rline] for the line number stab.
-    // If found, set info->eip_line to the right line number.
-    // If not found, return -1.
-    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
-    if (lline <= rline) {
-        info->eip_line = stabs[rline].n_desc;
-    } else {
-        return -1;
-    }
-
-    // Search backwards from the line number for the relevant filename stab.
-    // We can't just use the "lfile" stab because inlined functions
-    // can interpolate code from a different file!
-    // Such included source files use the N_SOL stab type.
-    while (lline >= lfile
-           && stabs[lline].n_type != N_SOL
-           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
-        lline --;
-    }
-    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
-        info->eip_file = stabstr + stabs[lline].n_strx;
-    }
-
-    // Set eip_fn_narg to the number of arguments taken by the function,
-    // or 0 if there was no containing function.
-    if (lfun < rfun) {
-        for (lline = lfun + 1;
-             lline < rfun && stabs[lline].n_type == N_PSYM;
-             lline ++) {
-            info->eip_fn_narg ++;
-        }
-    }
-    return 0;
-}
-
-/* *
- * print_kerninfo - print the information about kernel, including the location
- * of kernel entry, the start addresses of data and text segements, the start
- * address of free memory and how many memory that kernel has used.
- * */
-void
-print_kerninfo(void) {
-    extern char etext[], edata[], end[], kern_init[];
-    cprintf("Special kernel symbols:\n");
-    cprintf("  entry  0x%08x (phys)\n", kern_init);
-    cprintf("  etext  0x%08x (phys)\n", etext);
-    cprintf("  edata  0x%08x (phys)\n", edata);
-    cprintf("  end    0x%08x (phys)\n", end);
-    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
-}
-
-/* *
- * print_debuginfo - read and print the stat information for the address @eip,
- * and info.eip_fn_addr should be the first address of the related function.
- * */
-void
-print_debuginfo(uintptr_t eip) {
-    struct eipdebuginfo info;
-    if (debuginfo_eip(eip, &info) != 0) {
-        cprintf("    <unknow>: -- 0x%08x --\n", eip);
-    }
-    else {
-        char fnname[256];
-        int j;
-        for (j = 0; j < info.eip_fn_namelen; j ++) {
-            fnname[j] = info.eip_fn_name[j];
-        }
-        fnname[j] = '\0';
-        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
-                fnname, eip - info.eip_fn_addr);
-    }
-}
-
-static __noinline uint32_t
-read_eip(void) {
-    uint32_t eip;
-    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
-    return eip;
-}
-
-/* *
- * print_stackframe - print a list of the saved eip values from the nested 'call'
- * instructions that led to the current point of execution
- *
- * The x86 stack pointer, namely esp, points to the lowest location on the stack
- * that is currently in use. Everything below that location in stack is free. Pushing
- * a value onto the stack will invole decreasing the stack pointer and then writing
- * the value to the place that stack pointer pointes to. And popping a value do the
- * opposite.
- *
- * The ebp (base pointer) register, in contrast, is associated with the stack
- * primarily by software convention. On entry to a C function, the function's
- * prologue code normally saves the previous function's base pointer by pushing
- * it onto the stack, and then copies the current esp value into ebp for the duration
- * of the function. If all the functions in a program obey this convention,
- * then at any given point during the program's execution, it is possible to trace
- * back through the stack by following the chain of saved ebp pointers and determining
- * exactly what nested sequence of function calls caused this particular point in the
- * program to be reached. This capability can be particularly useful, for example,
- * when a particular function causes an assert failure or panic because bad arguments
- * were passed to it, but you aren't sure who passed the bad arguments. A stack
- * backtrace lets you find the offending function.
- *
- * The inline function read_ebp() can tell us the value of current ebp. And the
- * non-inline function read_eip() is useful, it can read the value of current eip,
- * since while calling this function, read_eip() can read the caller's eip from
- * stack easily.
- *
- * In print_debuginfo(), the function debuginfo_eip() can get enough information about
- * calling-chain. Finally print_stackframe() will trace and print them for debugging.
- *
- * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
- * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
- * */
-void
-print_stackframe(void) {
-    int i;
-    for(i=0;i<STACKFRAME_DEPTH;i++){
-        cprintf("ebp:0x%x ", read_eip());
-        cprintf("eip:0x%x ", read_eip());
-        uintptr_t ebp;
-        asm volatile("movl %%ebp, %0" : "=r" (ebp));
-        cprintf("args:");
-        int j;
-        for(j=0;j<4;j++){
-            cprintf("0x%08x ",*(ebp+1+j));
-        }
-        cprintf("\n");
-
-    }
-     /* LAB1 YOUR CODE : STEP 1 */
-     /* (1) call read_ebp() to get the value of ebp. the type is (uint32_t);
-      * (2) call read_eip() to get the value of eip. the type is (uint32_t);
-      * (3) from 0 .. STACKFRAME_DEPTH
-      *    (3.1) printf value of ebp, eip
-      *    (3.2) (uint32_t)calling arguments [0..4] = the contents in address (unit32_t)ebp +2 [0..4]
-      *    (3.3) cprintf("\n");
-      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
-      *    (3.5) popup a calling stackframe
-      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
-      *                   the calling funciton's ebp = ss:[ebp]
-      */
-}
-
diff -Nru lab1/kern/debug/kdebug.c lab2/kern/debug/kdebug.c
--- lab1/kern/debug/kdebug.c	2017-03-04 16:13:49.602289152 +0800
+++ lab2/kern/debug/kdebug.c	2017-02-25 15:39:39.991783592 +0800
@@ -3,7 +3,10 @@
 #include <stab.h>
 #include <stdio.h>
 #include <string.h>
+#include <sync.h>
 #include <kdebug.h>
+#include <kmonitor.h>
+#include <assert.h>
 
 #define STACKFRAME_DEPTH 20
 
@@ -290,7 +293,7 @@
  * */
 void
 print_stackframe(void) {
-     /* LAB1 2013012291 : STEP 1 */
+     /* LAB1 YOUR CODE : STEP 1 */
      /* (1) call read_ebp() to get the value of ebp. the type is (uint32_t);
       * (2) call read_eip() to get the value of eip. the type is (uint32_t);
       * (3) from 0 .. STACKFRAME_DEPTH
@@ -302,21 +305,5 @@
       *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
       *                   the calling funciton's ebp = ss:[ebp]
       */
-    uint32_t ebp = read_ebp();
-    uint32_t eip = read_eip();
-    int i;
-    for(i=0;i<STACKFRAME_DEPTH;i++){
-        if(0 == ebp) break;
-        cprintf("ebp:0x%08x eip:0x%08x ", ebp, eip);
-        cprintf("args:");
-        int j;
-        for(j=0;j<4;j++){
-            cprintf("0x%08x ",*((uint32_t*)ebp+2+j));
-        }
-        cprintf("\n");
-        print_debuginfo(eip-1);
-        eip = *((uint32_t*)ebp + 1);
-        ebp = *((uint32_t*)ebp);
-    }
 }
 
diff -Nru lab1/kern/debug/kdebug.h lab2/kern/debug/kdebug.h
--- lab1/kern/debug/kdebug.h	2017-02-25 15:39:39.991783592 +0800
+++ lab2/kern/debug/kdebug.h	2017-02-25 15:39:39.991783592 +0800
@@ -2,6 +2,7 @@
 #define __KERN_DEBUG_KDEBUG_H__
 
 #include <defs.h>
+#include <trap.h>
 
 void print_kerninfo(void);
 void print_stackframe(void);
diff -Nru lab1/kern/debug/kmonitor.c lab2/kern/debug/kmonitor.c
--- lab1/kern/debug/kmonitor.c	2017-02-25 15:39:39.991783592 +0800
+++ lab2/kern/debug/kmonitor.c	2017-02-25 15:39:39.991783592 +0800
@@ -1,5 +1,6 @@
 #include <stdio.h>
 #include <string.h>
+#include <mmu.h>
 #include <trap.h>
 #include <kmonitor.h>
 #include <kdebug.h>
@@ -22,6 +23,9 @@
     {"backtrace", "Print backtrace of stack frame.", mon_backtrace},
 };
 
+/* return if kernel is panic, in kern/debug/panic.c */
+bool is_kernel_panic(void);
+
 #define NCOMMANDS (sizeof(commands)/sizeof(struct command))
 
 /***** Kernel monitor command interpreter *****/
diff -Nru lab1/kern/debug/kmonitor.h lab2/kern/debug/kmonitor.h
--- lab1/kern/debug/kmonitor.h	2017-02-25 15:39:39.991783592 +0800
+++ lab2/kern/debug/kmonitor.h	2017-02-25 15:39:39.991783592 +0800
@@ -8,6 +8,12 @@
 int mon_help(int argc, char **argv, struct trapframe *tf);
 int mon_kerninfo(int argc, char **argv, struct trapframe *tf);
 int mon_backtrace(int argc, char **argv, struct trapframe *tf);
+int mon_continue(int argc, char **argv, struct trapframe *tf);
+int mon_step(int argc, char **argv, struct trapframe *tf);
+int mon_breakpoint(int argc, char **argv, struct trapframe *tf);
+int mon_watchpoint(int argc, char **argv, struct trapframe *tf);
+int mon_delete_dr(int argc, char **argv, struct trapframe *tf);
+int mon_list_dr(int argc, char **argv, struct trapframe *tf);
 
 #endif /* !__KERN_DEBUG_MONITOR_H__ */
 
diff -Nru lab1/kern/driver/console.c lab2/kern/driver/console.c
--- lab1/kern/driver/console.c	2017-02-25 15:39:39.991783592 +0800
+++ lab2/kern/driver/console.c	2017-02-25 15:39:39.991783592 +0800
@@ -5,6 +5,8 @@
 #include <kbdreg.h>
 #include <picirq.h>
 #include <trap.h>
+#include <memlayout.h>
+#include <sync.h>
 
 /* stupid I/O delay routine necessitated by historical PC design flaws */
 static void
@@ -52,41 +54,30 @@
 static uint16_t crt_pos;
 static uint16_t addr_6845;
 
-// ÊòæÁ§∫Âô®ÂàùÂßãÂåñÔºåCGA ÊòØ Color Graphics Adapter ÁöÑÁº©ÂÜô
-// CGAÊòæÂ≠òÊåâÁÖß‰∏ãÈù¢ÁöÑÊñπÂºèÊò†Â∞ÑÔºö
-//   -- 0xB0000 - 0xB7777 ÂçïËâ≤Â≠óÁ¨¶Ê®°Âºè
-//   -- 0xB8000 - 0xBFFFF ÂΩ©Ëâ≤Â≠óÁ¨¶Ê®°ÂºèÂèä CGA ÂÖºÂÆπÂõæÂΩ¢Ê®°Âºè
-// 6845ËäØÁâáÊòØIBM PC‰∏≠ÁöÑËßÜÈ¢ëÊéßÂà∂Âô®
-// CPUÈÄöËøáIOÂú∞ÂùÄ0x3B4-0x3B5Êù•È©±Âä®6845ÊéßÂà∂ÂçïËâ≤ÊòæÁ§∫ÔºåÈÄöËøáIOÂú∞ÂùÄ0x3D4-0x3D5Êù•ÊéßÂà∂ÂΩ©Ëâ≤ÊòæÁ§∫„ÄÇ
-//    -- Êï∞ÊçÆÂØÑÂ≠òÂô® Êò†Â∞Ñ Âà∞ Á´ØÂè£ 0x3D5Êàñ0x3B5 
-//    -- Á¥¢ÂºïÂØÑÂ≠òÂô® 0x3D4Êàñ0x3B4,ÂÜ≥ÂÆöÂú®Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏≠ÁöÑÊï∞ÊçÆË°®Á§∫‰ªÄ‰πà„ÄÇ
-
 /* TEXT-mode CGA/VGA display output */
+
 static void
 cga_init(void) {
-    volatile uint16_t *cp = (uint16_t *)CGA_BUF;   //CGA_BUF: 0xB8000 (ÂΩ©Ëâ≤ÊòæÁ§∫ÁöÑÊòæÂ≠òÁâ©ÁêÜÂü∫ÂùÄ)
-    uint16_t was = *cp;                                            //‰øùÂ≠òÂΩìÂâçÊòæÂ≠ò0xB8000Â§ÑÁöÑÂÄº
-    *cp = (uint16_t) 0xA55A;                                   // ÁªôËøô‰∏™Âú∞ÂùÄÈöè‰æøÂÜô‰∏™ÂÄºÔºåÁúãÁúãËÉΩÂê¶ÂÜçËØªÂá∫ÂêåÊ†∑ÁöÑÂÄº
-    if (*cp != 0xA55A) {                                            // Â¶ÇÊûúËØª‰∏çÂá∫Êù•ÔºåËØ¥ÊòéÊ≤°ÊúâËøôÂùóÊòæÂ≠òÔºåÂç≥ÊòØÂçïÊòæÈÖçÁΩÆ
-        cp = (uint16_t*)MONO_BUF;                         //ËÆæÁΩÆ‰∏∫ÂçïÊòæÁöÑÊòæÂ≠òÂü∫ÂùÄ MONO_BUFÔºö 0xB0000
-        addr_6845 = MONO_BASE;                           //ËÆæÁΩÆ‰∏∫ÂçïÊòæÊéßÂà∂ÁöÑIOÂú∞ÂùÄÔºåMONO_BASE: 0x3B4
-    } else {                                                                // Â¶ÇÊûúËØªÂá∫Êù•‰∫ÜÔºåÊúâËøôÂùóÊòæÂ≠òÔºåÂç≥ÊòØÂΩ©ÊòæÈÖçÁΩÆ
-        *cp = was;                                                      //ËøòÂéüÂéüÊù•ÊòæÂ≠ò‰ΩçÁΩÆÁöÑÂÄº
-        addr_6845 = CGA_BASE;                               // ËÆæÁΩÆ‰∏∫ÂΩ©ÊòæÊéßÂà∂ÁöÑIOÂú∞ÂùÄÔºåCGA_BASE: 0x3D4 
+    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
+    uint16_t was = *cp;
+    *cp = (uint16_t) 0xA55A;
+    if (*cp != 0xA55A) {
+        cp = (uint16_t*)(MONO_BUF + KERNBASE);
+        addr_6845 = MONO_BASE;
+    } else {
+        *cp = was;
+        addr_6845 = CGA_BASE;
     }
 
     // Extract cursor location
-    // 6845Á¥¢ÂºïÂØÑÂ≠òÂô®ÁöÑindex 0x0EÔºàÂèäÂçÅËøõÂà∂ÁöÑ14Ôºâ== ÂÖâÊ†á‰ΩçÁΩÆ(È´ò‰Ωç)
-    // 6845Á¥¢ÂºïÂØÑÂ≠òÂô®ÁöÑindex 0x0FÔºàÂèäÂçÅËøõÂà∂ÁöÑ15Ôºâ== ÂÖâÊ†á‰ΩçÁΩÆ(‰Ωé‰Ωç)
-    // 6845 reg 15 : Cursor Address (Low Byte)
     uint32_t pos;
-    outb(addr_6845, 14);                                        
-    pos = inb(addr_6845 + 1) << 8;                       //ËØªÂá∫‰∫ÜÂÖâÊ†á‰ΩçÁΩÆ(È´ò‰Ωç)
+    outb(addr_6845, 14);
+    pos = inb(addr_6845 + 1) << 8;
     outb(addr_6845, 15);
-    pos |= inb(addr_6845 + 1);                             //ËØªÂá∫‰∫ÜÂÖâÊ†á‰ΩçÁΩÆ(‰Ωé‰Ωç)
+    pos |= inb(addr_6845 + 1);
 
-    crt_buf = (uint16_t*) cp;                                  //crt_bufÊòØCGAÊòæÂ≠òËµ∑ÂßãÂú∞ÂùÄ
-    crt_pos = pos;                                                  //crt_posÊòØCGAÂΩìÂâçÂÖâÊ†á‰ΩçÁΩÆ
+    crt_buf = (uint16_t*) cp;
+    crt_pos = pos;
 }
 
 static bool serial_exists = 0;
@@ -434,9 +425,14 @@
 /* cons_putc - print a single character @c to console devices */
 void
 cons_putc(int c) {
-    lpt_putc(c);
-    cga_putc(c);
-    serial_putc(c);
+    bool intr_flag;
+    local_intr_save(intr_flag);
+    {
+        lpt_putc(c);
+        cga_putc(c);
+        serial_putc(c);
+    }
+    local_intr_restore(intr_flag);
 }
 
 /* *
@@ -445,22 +441,25 @@
  * */
 int
 cons_getc(void) {
-    int c;
-
-    // poll for any pending input characters,
-    // so that this function works even when interrupts are disabled
-    // (e.g., when called from the kernel monitor).
-    serial_intr();
-    kbd_intr();
-
-    // grab the next character from the input buffer.
-    if (cons.rpos != cons.wpos) {
-        c = cons.buf[cons.rpos ++];
-        if (cons.rpos == CONSBUFSIZE) {
-            cons.rpos = 0;
+    int c = 0;
+    bool intr_flag;
+    local_intr_save(intr_flag);
+    {
+        // poll for any pending input characters,
+        // so that this function works even when interrupts are disabled
+        // (e.g., when called from the kernel monitor).
+        serial_intr();
+        kbd_intr();
+
+        // grab the next character from the input buffer.
+        if (cons.rpos != cons.wpos) {
+            c = cons.buf[cons.rpos ++];
+            if (cons.rpos == CONSBUFSIZE) {
+                cons.rpos = 0;
+            }
         }
-        return c;
     }
-    return 0;
+    local_intr_restore(intr_flag);
+    return c;
 }
 
diff -Nru lab1/kern/init/entry.S lab2/kern/init/entry.S
--- lab1/kern/init/entry.S	1970-01-01 08:00:00.000000000 +0800
+++ lab2/kern/init/entry.S	2017-02-25 15:39:39.991783592 +0800
@@ -0,0 +1,49 @@
+#include <mmu.h>
+#include <memlayout.h>
+
+#define REALLOC(x) (x - KERNBASE)
+
+.text
+.globl kern_entry
+kern_entry:
+    # reload temperate gdt (second time) to remap all physical memory
+    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
+    lgdt REALLOC(__gdtdesc)
+    movl $KERNEL_DS, %eax
+    movw %ax, %ds
+    movw %ax, %es
+    movw %ax, %ss
+
+    ljmp $KERNEL_CS, $relocated
+
+relocated:
+
+    # set ebp, esp
+    movl $0x0, %ebp
+    # the kernel stack region is from bootstack -- bootstacktop,
+    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
+    movl $bootstacktop, %esp
+    # now kernel stack is ready , call the first C function
+    call kern_init
+
+# should never get here
+spin:
+    jmp spin
+
+.data
+.align PGSIZE
+    .globl bootstack
+bootstack:
+    .space KSTACKSIZE
+    .globl bootstacktop
+bootstacktop:
+
+.align 4
+__gdt:
+    SEG_NULL
+    SEG_ASM(STA_X | STA_R, - KERNBASE, 0xFFFFFFFF)      # code segment
+    SEG_ASM(STA_W, - KERNBASE, 0xFFFFFFFF)              # data segment
+__gdtdesc:
+    .word 0x17                                          # sizeof(__gdt) - 1
+    .long REALLOC(__gdt)
+
diff -Nru lab1/kern/init/init.c lab2/kern/init/init.c
--- lab1/kern/init/init.c	2017-03-04 16:16:01.339886825 +0800
+++ lab2/kern/init/init.c	2017-02-25 15:39:39.991783592 +0800
@@ -9,6 +9,7 @@
 #include <intr.h>
 #include <pmm.h>
 #include <kmonitor.h>
+
 int kern_init(void) __attribute__((noreturn));
 void grade_backtrace(void);
 static void lab1_switch_test(void);
@@ -37,7 +38,7 @@
 
     //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
     // user/kernel mode switch test
-    lab1_switch_test();
+    //lab1_switch_test();
 
     /* do nothing */
     while (1);
@@ -84,28 +85,11 @@
 static void
 lab1_switch_to_user(void) {
     //LAB1 CHALLENGE 1 : TODO
-    // Make room for esp and ss
-    asm volatile ( "subl $8, %%esp \n"
-            "int %0 \n"
-    // restore esp from pushl ebp;movl esp,ebp
-            "movl %%ebp, %%esp"
-             : 
-             : "i" (T_SWITCH_TOU));
 }
 
 static void
 lab1_switch_to_kernel(void) {
     //LAB1 CHALLENGE 1 :  TODO
-    // It is commented in trapframe that the last 2 bytes of struct trapframe
-    // is reserved for crossing rings. As far as I am concerned, switching from
-    // user to kernel is crossing ring. So I left 2 bytes here just in case. If 
-    // it's not necessary it doesn't matter, because in the end it's what's 
-    // stores in %ebp that determines the value of %esp
-    asm volatile ( "subl $8, %%esp \n"
-            "int %0 \n"
-            "movl %%ebp, %%esp"
-             : 
-             : "i" (T_SWITCH_TOK));
 }
 
 static void
diff -Nru lab1/kern/libs/readline.c lab2/kern/libs/readline.c
--- lab1/kern/libs/readline.c	2017-02-25 15:39:39.991783592 +0800
+++ lab2/kern/libs/readline.c	2017-02-25 15:39:39.991783592 +0800
@@ -1,11 +1,11 @@
 #include <stdio.h>
 
-#define BUFSIZE    1024
+#define BUFSIZE 1024
 static char buf[BUFSIZE];
 
 /* *
  * readline - get a line from stdin
- * @prompt:        the string to be written to stdout
+ * @prompt:     the string to be written to stdout
  *
  * The readline() function will write the input string @prompt to
  * stdout first. If the @prompt is NULL or the empty string,
diff -Nru lab1/kern/mm/default_pmm.c lab2/kern/mm/default_pmm.c
--- lab1/kern/mm/default_pmm.c	1970-01-01 08:00:00.000000000 +0800
+++ lab2/kern/mm/default_pmm.c	2017-02-25 15:39:39.991783592 +0800
@@ -0,0 +1,272 @@
+#include <pmm.h>
+#include <list.h>
+#include <string.h>
+#include <default_pmm.h>
+
+/* In the first fit algorithm, the allocator keeps a list of free blocks (known as the free list) and,
+   on receiving a request for memory, scans along the list for the first block that is large enough to
+   satisfy the request. If the chosen block is significantly larger than that requested, then it is 
+   usually split, and the remainder added to the list as another free block.
+   Please see Page 196~198, Section 8.2 of Yan Wei Min's chinese book "Data Structure -- C programming language"
+*/
+// LAB2 EXERCISE 1: YOUR CODE
+// you should rewrite functions: default_init,default_init_memmap,default_alloc_pages, default_free_pages.
+/*
+ * Details of FFMA
+ * (1) Prepare: In order to implement the First-Fit Mem Alloc (FFMA), we should manage the free mem block use some list.
+ *              The struct free_area_t is used for the management of free mem blocks. At first you should
+ *              be familiar to the struct list in list.h. struct list is a simple doubly linked list implementation.
+ *              You should know howto USE: list_init, list_add(list_add_after), list_add_before, list_del, list_next, list_prev
+ *              Another tricky method is to transform a general list struct to a special struct (such as struct page):
+ *              you can find some MACRO: le2page (in memlayout.h), (in future labs: le2vma (in vmm.h), le2proc (in proc.h),etc.)
+ * (2) default_init: you can reuse the  demo default_init fun to init the free_list and set nr_free to 0.
+ *              free_list is used to record the free mem blocks. nr_free is the total number for free mem blocks.
+ * (3) default_init_memmap:  CALL GRAPH: kern_init --> pmm_init-->page_init-->init_memmap--> pmm_manager->init_memmap
+ *              This fun is used to init a free block (with parameter: addr_base, page_number).
+ *              First you should init each page (in memlayout.h) in this free block, include:
+ *                  p->flags should be set bit PG_property (means this page is valid. In pmm_init fun (in pmm.c),
+ *                  the bit PG_reserved is setted in p->flags)
+ *                  if this page  is free and is not the first page of free block, p->property should be set to 0.
+ *                  if this page  is free and is the first page of free block, p->property should be set to total num of block.
+ *                  p->ref should be 0, because now p is free and no reference.
+ *                  We can use p->page_link to link this page to free_list, (such as: list_add_before(&free_list, &(p->page_link)); )
+ *              Finally, we should sum the number of free mem block: nr_free+=n
+ * (4) default_alloc_pages: search find a first free block (block size >=n) in free list and reszie the free block, return the addr
+ *              of malloced block.
+ *              (4.1) So you should search freelist like this:
+ *                       list_entry_t le = &free_list;
+ *                       while((le=list_next(le)) != &free_list) {
+ *                       ....
+ *                 (4.1.1) In while loop, get the struct page and check the p->property (record the num of free block) >=n?
+ *                       struct Page *p = le2page(le, page_link);
+ *                       if(p->property >= n){ ...
+ *                 (4.1.2) If we find this p, then it' means we find a free block(block size >=n), and the first n pages can be malloced.
+ *                     Some flag bits of this page should be setted: PG_reserved =1, PG_property =0
+ *                     unlink the pages from free_list
+ *                     (4.1.2.1) If (p->property >n), we should re-caluclate number of the the rest of this free block,
+ *                           (such as: le2page(le,page_link))->property = p->property - n;)
+ *                 (4.1.3)  re-caluclate nr_free (number of the the rest of all free block)
+ *                 (4.1.4)  return p
+ *               (4.2) If we can not find a free block (block size >=n), then return NULL
+ * (5) default_free_pages: relink the pages into  free list, maybe merge small free blocks into big free blocks.
+ *               (5.1) according the base addr of withdrawed blocks, search free list, find the correct position
+ *                     (from low to high addr), and insert the pages. (may use list_next, le2page, list_add_before)
+ *               (5.2) reset the fields of pages, such as p->ref, p->flags (PageProperty)
+ *               (5.3) try to merge low addr or high addr blocks. Notice: should change some pages's p->property correctly.
+ */
+free_area_t free_area;
+
+#define free_list (free_area.free_list)
+#define nr_free (free_area.nr_free)
+
+static void
+default_init(void) {
+    list_init(&free_list);
+    nr_free = 0;
+}
+
+static void
+default_init_memmap(struct Page *base, size_t n) {
+    assert(n > 0);
+    struct Page *p = base;
+    for (; p != base + n; p ++) {
+        assert(PageReserved(p));
+        p->flags = p->property = 0;
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+    SetPageProperty(base);
+    nr_free += n;
+    list_add(&free_list, &(base->page_link));
+}
+
+static struct Page *
+default_alloc_pages(size_t n) {
+    assert(n > 0);
+    if (n > nr_free) {
+        return NULL;
+    }
+    struct Page *page = NULL;
+    list_entry_t *le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+        struct Page *p = le2page(le, page_link);
+        if (p->property >= n) {
+            page = p;
+            break;
+        }
+    }
+    if (page != NULL) {
+        list_del(&(page->page_link));
+        if (page->property > n) {
+            struct Page *p = page + n;
+            p->property = page->property - n;
+            list_add(&free_list, &(p->page_link));
+    }
+        nr_free -= n;
+        ClearPageProperty(page);
+    }
+    return page;
+}
+
+static void
+default_free_pages(struct Page *base, size_t n) {
+    assert(n > 0);
+    struct Page *p = base;
+    for (; p != base + n; p ++) {
+        assert(!PageReserved(p) && !PageProperty(p));
+        p->flags = 0;
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+    SetPageProperty(base);
+    list_entry_t *le = list_next(&free_list);
+    while (le != &free_list) {
+        p = le2page(le, page_link);
+        le = list_next(le);
+        if (base + base->property == p) {
+            base->property += p->property;
+            ClearPageProperty(p);
+            list_del(&(p->page_link));
+        }
+        else if (p + p->property == base) {
+            p->property += base->property;
+            ClearPageProperty(base);
+            base = p;
+            list_del(&(p->page_link));
+        }
+    }
+    nr_free += n;
+    list_add(&free_list, &(base->page_link));
+}
+
+static size_t
+default_nr_free_pages(void) {
+    return nr_free;
+}
+
+static void
+basic_check(void) {
+    struct Page *p0, *p1, *p2;
+    p0 = p1 = p2 = NULL;
+    assert((p0 = alloc_page()) != NULL);
+    assert((p1 = alloc_page()) != NULL);
+    assert((p2 = alloc_page()) != NULL);
+
+    assert(p0 != p1 && p0 != p2 && p1 != p2);
+    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
+
+    assert(page2pa(p0) < npage * PGSIZE);
+    assert(page2pa(p1) < npage * PGSIZE);
+    assert(page2pa(p2) < npage * PGSIZE);
+
+    list_entry_t free_list_store = free_list;
+    list_init(&free_list);
+    assert(list_empty(&free_list));
+
+    unsigned int nr_free_store = nr_free;
+    nr_free = 0;
+
+    assert(alloc_page() == NULL);
+
+    free_page(p0);
+    free_page(p1);
+    free_page(p2);
+    assert(nr_free == 3);
+
+    assert((p0 = alloc_page()) != NULL);
+    assert((p1 = alloc_page()) != NULL);
+    assert((p2 = alloc_page()) != NULL);
+
+    assert(alloc_page() == NULL);
+
+    free_page(p0);
+    assert(!list_empty(&free_list));
+
+    struct Page *p;
+    assert((p = alloc_page()) == p0);
+    assert(alloc_page() == NULL);
+
+    assert(nr_free == 0);
+    free_list = free_list_store;
+    nr_free = nr_free_store;
+
+    free_page(p);
+    free_page(p1);
+    free_page(p2);
+}
+
+// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
+// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
+static void
+default_check(void) {
+    int count = 0, total = 0;
+    list_entry_t *le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+        struct Page *p = le2page(le, page_link);
+        assert(PageProperty(p));
+        count ++, total += p->property;
+    }
+    assert(total == nr_free_pages());
+
+    basic_check();
+
+    struct Page *p0 = alloc_pages(5), *p1, *p2;
+    assert(p0 != NULL);
+    assert(!PageProperty(p0));
+
+    list_entry_t free_list_store = free_list;
+    list_init(&free_list);
+    assert(list_empty(&free_list));
+    assert(alloc_page() == NULL);
+
+    unsigned int nr_free_store = nr_free;
+    nr_free = 0;
+
+    free_pages(p0 + 2, 3);
+    assert(alloc_pages(4) == NULL);
+    assert(PageProperty(p0 + 2) && p0[2].property == 3);
+    assert((p1 = alloc_pages(3)) != NULL);
+    assert(alloc_page() == NULL);
+    assert(p0 + 2 == p1);
+
+    p2 = p0 + 1;
+    free_page(p0);
+    free_pages(p1, 3);
+    assert(PageProperty(p0) && p0->property == 1);
+    assert(PageProperty(p1) && p1->property == 3);
+
+    assert((p0 = alloc_page()) == p2 - 1);
+    free_page(p0);
+    assert((p0 = alloc_pages(2)) == p2 + 1);
+
+    free_pages(p0, 2);
+    free_page(p2);
+
+    assert((p0 = alloc_pages(5)) != NULL);
+    assert(alloc_page() == NULL);
+
+    assert(nr_free == 0);
+    nr_free = nr_free_store;
+
+    free_list = free_list_store;
+    free_pages(p0, 5);
+
+    le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+        struct Page *p = le2page(le, page_link);
+        count --, total -= p->property;
+    }
+    assert(count == 0);
+    assert(total == 0);
+}
+
+const struct pmm_manager default_pmm_manager = {
+    .name = "default_pmm_manager",
+    .init = default_init,
+    .init_memmap = default_init_memmap,
+    .alloc_pages = default_alloc_pages,
+    .free_pages = default_free_pages,
+    .nr_free_pages = default_nr_free_pages,
+    .check = default_check,
+};
+
diff -Nru lab1/kern/mm/default_pmm.h lab2/kern/mm/default_pmm.h
--- lab1/kern/mm/default_pmm.h	1970-01-01 08:00:00.000000000 +0800
+++ lab2/kern/mm/default_pmm.h	2017-02-25 15:39:39.991783592 +0800
@@ -0,0 +1,9 @@
+#ifndef __KERN_MM_DEFAULT_PMM_H__
+#define  __KERN_MM_DEFAULT_PMM_H__
+
+#include <pmm.h>
+
+extern const struct pmm_manager default_pmm_manager;
+
+#endif /* ! __KERN_MM_DEFAULT_PMM_H__ */
+
diff -Nru lab1/kern/mm/memlayout.h lab2/kern/mm/memlayout.h
--- lab1/kern/mm/memlayout.h	2017-02-25 15:39:39.991783592 +0800
+++ lab2/kern/mm/memlayout.h	2017-02-25 15:39:39.991783592 +0800
@@ -4,26 +4,127 @@
 /* This file contains the definitions for memory management in our OS. */
 
 /* global segment number */
-#define SEG_KTEXT    1
-#define SEG_KDATA    2
-#define SEG_UTEXT    3
-#define SEG_UDATA    4
-#define SEG_TSS        5
-
-/* global descriptor numbers */
-#define GD_KTEXT    ((SEG_KTEXT) << 3)        // kernel text
-#define GD_KDATA    ((SEG_KDATA) << 3)        // kernel data
-#define GD_UTEXT    ((SEG_UTEXT) << 3)        // user text
-#define GD_UDATA    ((SEG_UDATA) << 3)        // user data
-#define GD_TSS        ((SEG_TSS) << 3)        // task segment selector
+#define SEG_KTEXT   1
+#define SEG_KDATA   2
+#define SEG_UTEXT   3
+#define SEG_UDATA   4
+#define SEG_TSS     5
+
+/* global descrptor numbers */
+#define GD_KTEXT    ((SEG_KTEXT) << 3)      // kernel text
+#define GD_KDATA    ((SEG_KDATA) << 3)      // kernel data
+#define GD_UTEXT    ((SEG_UTEXT) << 3)      // user text
+#define GD_UDATA    ((SEG_UDATA) << 3)      // user data
+#define GD_TSS      ((SEG_TSS) << 3)        // task segment selector
 
-#define DPL_KERNEL    (0)
+#define DPL_KERNEL  (0)
 #define DPL_USER    (3)
 
-#define KERNEL_CS    ((GD_KTEXT) | DPL_KERNEL)
-#define KERNEL_DS    ((GD_KDATA) | DPL_KERNEL)
-#define USER_CS        ((GD_UTEXT) | DPL_USER)
-#define USER_DS        ((GD_UDATA) | DPL_USER)
+#define KERNEL_CS   ((GD_KTEXT) | DPL_KERNEL)
+#define KERNEL_DS   ((GD_KDATA) | DPL_KERNEL)
+#define USER_CS     ((GD_UTEXT) | DPL_USER)
+#define USER_DS     ((GD_UDATA) | DPL_USER)
+
+/* *
+ * Virtual memory map:                                          Permissions
+ *                                                              kernel/user
+ *
+ *     4G ------------------> +---------------------------------+
+ *                            |                                 |
+ *                            |         Empty Memory (*)        |
+ *                            |                                 |
+ *                            +---------------------------------+ 0xFB000000
+ *                            |   Cur. Page Table (Kern, RW)    | RW/-- PTSIZE
+ *     VPT -----------------> +---------------------------------+ 0xFAC00000
+ *                            |        Invalid Memory (*)       | --/--
+ *     KERNTOP -------------> +---------------------------------+ 0xF8000000
+ *                            |                                 |
+ *                            |    Remapped Physical Memory     | RW/-- KMEMSIZE
+ *                            |                                 |
+ *     KERNBASE ------------> +---------------------------------+ 0xC0000000
+ *                            |                                 |
+ *                            |                                 |
+ *                            |                                 |
+ *                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ * (*) Note: The kernel ensures that "Invalid Memory" is *never* mapped.
+ *     "Empty Memory" is normally unmapped, but user programs may map pages
+ *     there if desired.
+ *
+ * */
+
+/* All physical memory mapped at this address */
+#define KERNBASE            0xC0000000
+#define KMEMSIZE            0x38000000                  // the maximum amount of physical memory
+#define KERNTOP             (KERNBASE + KMEMSIZE)
+
+/* *
+ * Virtual page table. Entry PDX[VPT] in the PD (Page Directory) contains
+ * a pointer to the page directory itself, thereby turning the PD into a page
+ * table, which maps all the PTEs (Page Table Entry) containing the page mappings
+ * for the entire virtual address space into that 4 Meg region starting at VPT.
+ * */
+#define VPT                 0xFAC00000
+
+#define KSTACKPAGE          2                           // # of pages in kernel stack
+#define KSTACKSIZE          (KSTACKPAGE * PGSIZE)       // sizeof kernel stack
+
+#ifndef __ASSEMBLER__
+
+#include <defs.h>
+#include <atomic.h>
+#include <list.h>
+
+typedef uintptr_t pte_t;
+typedef uintptr_t pde_t;
+
+// some constants for bios interrupt 15h AX = 0xE820
+#define E820MAX             20      // number of entries in E820MAP
+#define E820_ARM            1       // address range memory
+#define E820_ARR            2       // address range reserved
+
+struct e820map {
+    int nr_map;
+    struct {
+        uint64_t addr;
+        uint64_t size;
+        uint32_t type;
+    } __attribute__((packed)) map[E820MAX];
+};
+
+/* *
+ * struct Page - Page descriptor structures. Each Page describes one
+ * physical page. In kern/mm/pmm.h, you can find lots of useful functions
+ * that convert Page to other data types, such as phyical address.
+ * */
+struct Page {
+    int ref;                        // page frame's reference counter
+    uint32_t flags;                 // array of flags that describe the status of the page frame
+    unsigned int property;          // the num of free block, used in first fit pm manager
+    list_entry_t page_link;         // free list link
+};
+
+/* Flags describing the status of a page frame */
+#define PG_reserved                 0       // if this bit=1: the Page is reserved for kernel, cannot be used in alloc/free_pages; otherwise, this bit=0 
+#define PG_property                 1       // if this bit=1: the Page is the head page of a free memory block(contains some continuous_addrress pages), and can be used in alloc_pages; if this bit=0: if the Page is the the head page of a free memory block, then this Page and the memory block is alloced. Or this Page isn't the head page.
+
+#define SetPageReserved(page)       set_bit(PG_reserved, &((page)->flags))
+#define ClearPageReserved(page)     clear_bit(PG_reserved, &((page)->flags))
+#define PageReserved(page)          test_bit(PG_reserved, &((page)->flags))
+#define SetPageProperty(page)       set_bit(PG_property, &((page)->flags))
+#define ClearPageProperty(page)     clear_bit(PG_property, &((page)->flags))
+#define PageProperty(page)          test_bit(PG_property, &((page)->flags))
+
+// convert list entry to page
+#define le2page(le, member)                 \
+    to_struct((le), struct Page, member)
+
+/* free_area_t - maintains a doubly linked list to record free (unused) pages */
+typedef struct {
+    list_entry_t free_list;         // the list header
+    unsigned int nr_free;           // # of free pages in this free list
+} free_area_t;
+
+#endif /* !__ASSEMBLER__ */
 
 #endif /* !__KERN_MM_MEMLAYOUT_H__ */
 
diff -Nru lab1/kern/mm/mmu.h lab2/kern/mm/mmu.h
--- lab1/kern/mm/mmu.h	2017-02-25 15:39:39.991783592 +0800
+++ lab2/kern/mm/mmu.h	2017-02-25 15:39:39.991783592 +0800
@@ -2,61 +2,76 @@
 #define __KERN_MM_MMU_H__
 
 /* Eflags register */
-#define FL_CF            0x00000001    // Carry Flag
-#define FL_PF            0x00000004    // Parity Flag
-#define FL_AF            0x00000010    // Auxiliary carry Flag
-#define FL_ZF            0x00000040    // Zero Flag
-#define FL_SF            0x00000080    // Sign Flag
-#define FL_TF            0x00000100    // Trap Flag
-#define FL_IF            0x00000200    // Interrupt Flag
-#define FL_DF            0x00000400    // Direction Flag
-#define FL_OF            0x00000800    // Overflow Flag
-#define FL_IOPL_MASK    0x00003000    // I/O Privilege Level bitmask
-#define FL_IOPL_0        0x00000000    //   IOPL == 0
-#define FL_IOPL_1        0x00001000    //   IOPL == 1
-#define FL_IOPL_2        0x00002000    //   IOPL == 2
-#define FL_IOPL_3        0x00003000    //   IOPL == 3
-#define FL_NT            0x00004000    // Nested Task
-#define FL_RF            0x00010000    // Resume Flag
-#define FL_VM            0x00020000    // Virtual 8086 mode
-#define FL_AC            0x00040000    // Alignment Check
-#define FL_VIF            0x00080000    // Virtual Interrupt Flag
-#define FL_VIP            0x00100000    // Virtual Interrupt Pending
-#define FL_ID            0x00200000    // ID flag
+#define FL_CF           0x00000001  // Carry Flag
+#define FL_PF           0x00000004  // Parity Flag
+#define FL_AF           0x00000010  // Auxiliary carry Flag
+#define FL_ZF           0x00000040  // Zero Flag
+#define FL_SF           0x00000080  // Sign Flag
+#define FL_TF           0x00000100  // Trap Flag
+#define FL_IF           0x00000200  // Interrupt Flag
+#define FL_DF           0x00000400  // Direction Flag
+#define FL_OF           0x00000800  // Overflow Flag
+#define FL_IOPL_MASK    0x00003000  // I/O Privilege Level bitmask
+#define FL_IOPL_0       0x00000000  //   IOPL == 0
+#define FL_IOPL_1       0x00001000  //   IOPL == 1
+#define FL_IOPL_2       0x00002000  //   IOPL == 2
+#define FL_IOPL_3       0x00003000  //   IOPL == 3
+#define FL_NT           0x00004000  // Nested Task
+#define FL_RF           0x00010000  // Resume Flag
+#define FL_VM           0x00020000  // Virtual 8086 mode
+#define FL_AC           0x00040000  // Alignment Check
+#define FL_VIF          0x00080000  // Virtual Interrupt Flag
+#define FL_VIP          0x00100000  // Virtual Interrupt Pending
+#define FL_ID           0x00200000  // ID flag
 
 /* Application segment type bits */
-#define STA_X            0x8            // Executable segment
-#define STA_E            0x4            // Expand down (non-executable segments)
-#define STA_C            0x4            // Conforming code segment (executable only)
-#define STA_W            0x2            // Writeable (non-executable segments)
-#define STA_R            0x2            // Readable (executable segments)
-#define STA_A            0x1            // Accessed
+#define STA_X           0x8         // Executable segment
+#define STA_E           0x4         // Expand down (non-executable segments)
+#define STA_C           0x4         // Conforming code segment (executable only)
+#define STA_W           0x2         // Writeable (non-executable segments)
+#define STA_R           0x2         // Readable (executable segments)
+#define STA_A           0x1         // Accessed
 
 /* System segment type bits */
-#define STS_T16A        0x1            // Available 16-bit TSS
-#define STS_LDT            0x2            // Local Descriptor Table
-#define STS_T16B        0x3            // Busy 16-bit TSS
-#define STS_CG16        0x4            // 16-bit Call Gate
-#define STS_TG            0x5            // Task Gate / Coum Transmitions
-#define STS_IG16        0x6            // 16-bit Interrupt Gate
-#define STS_TG16        0x7            // 16-bit Trap Gate
-#define STS_T32A        0x9            // Available 32-bit TSS
-#define STS_T32B        0xB            // Busy 32-bit TSS
-#define STS_CG32        0xC            // 32-bit Call Gate
-#define STS_IG32        0xE            // 32-bit Interrupt Gate
-#define STS_TG32        0xF            // 32-bit Trap Gate
+#define STS_T16A        0x1         // Available 16-bit TSS
+#define STS_LDT         0x2         // Local Descriptor Table
+#define STS_T16B        0x3         // Busy 16-bit TSS
+#define STS_CG16        0x4         // 16-bit Call Gate
+#define STS_TG          0x5         // Task Gate / Coum Transmitions
+#define STS_IG16        0x6         // 16-bit Interrupt Gate
+#define STS_TG16        0x7         // 16-bit Trap Gate
+#define STS_T32A        0x9         // Available 32-bit TSS
+#define STS_T32B        0xB         // Busy 32-bit TSS
+#define STS_CG32        0xC         // 32-bit Call Gate
+#define STS_IG32        0xE         // 32-bit Interrupt Gate
+#define STS_TG32        0xF         // 32-bit Trap Gate
+
+#ifdef __ASSEMBLER__
+
+#define SEG_NULL                                                \
+    .word 0, 0;                                                 \
+    .byte 0, 0, 0, 0
+
+#define SEG_ASM(type,base,lim)                                  \
+    .word (((lim) >> 12) & 0xffff), ((base) & 0xffff);          \
+    .byte (((base) >> 16) & 0xff), (0x90 | (type)),             \
+        (0xC0 | (((lim) >> 28) & 0xf)), (((base) >> 24) & 0xff)
+
+#else /* not __ASSEMBLER__ */
+
+#include <defs.h>
 
 /* Gate descriptors for interrupts and traps */
 struct gatedesc {
-    unsigned gd_off_15_0 : 16;        // low 16 bits of offset in segment
+    unsigned gd_off_15_0 : 16;      // low 16 bits of offset in segment
     unsigned gd_ss : 16;            // segment selector
-    unsigned gd_args : 5;            // # args, 0 for interrupt/trap gates
-    unsigned gd_rsv1 : 3;            // reserved(should be zero I guess)
-    unsigned gd_type : 4;            // type(STS_{TG,IG32,TG32})
-    unsigned gd_s : 1;                // must be 0 (system)
+    unsigned gd_args : 5;           // # args, 0 for interrupt/trap gates
+    unsigned gd_rsv1 : 3;           // reserved(should be zero I guess)
+    unsigned gd_type : 4;           // type(STS_{TG,IG32,TG32})
+    unsigned gd_s : 1;              // must be 0 (system)
     unsigned gd_dpl : 2;            // descriptor(meaning new) privilege level
-    unsigned gd_p : 1;                // Present
-    unsigned gd_off_31_16 : 16;        // high bits of offset in segment
+    unsigned gd_p : 1;              // Present
+    unsigned gd_off_31_16 : 16;     // high bits of offset in segment
 };
 
 /* *
@@ -68,71 +83,71 @@
  *          for software to invoke this interrupt/trap gate explicitly
  *          using an int instruction.
  * */
-#define SETGATE(gate, istrap, sel, off, dpl) {            \
-    (gate).gd_off_15_0 = (uint32_t)(off) & 0xffff;        \
-    (gate).gd_ss = (sel);                                \
-    (gate).gd_args = 0;                                    \
-    (gate).gd_rsv1 = 0;                                    \
-    (gate).gd_type = (istrap) ? STS_TG32 : STS_IG32;    \
-    (gate).gd_s = 0;                                    \
-    (gate).gd_dpl = (dpl);                                \
-    (gate).gd_p = 1;                                    \
-    (gate).gd_off_31_16 = (uint32_t)(off) >> 16;        \
-}
+#define SETGATE(gate, istrap, sel, off, dpl) {               \
+        (gate).gd_off_15_0 = (uint32_t)(off) & 0xffff;      \
+        (gate).gd_ss = (sel);                                \
+        (gate).gd_args = 0;                                 \
+        (gate).gd_rsv1 = 0;                                 \
+        (gate).gd_type = (istrap) ? STS_TG32 : STS_IG32;    \
+        (gate).gd_s = 0;                                    \
+        (gate).gd_dpl = (dpl);                              \
+        (gate).gd_p = 1;                                    \
+        (gate).gd_off_31_16 = (uint32_t)(off) >> 16;        \
+    }
 
 /* Set up a call gate descriptor */
-#define SETCALLGATE(gate, ss, off, dpl) {                \
-    (gate).gd_off_15_0 = (uint32_t)(off) & 0xffff;        \
-    (gate).gd_ss = (ss);                                \
-    (gate).gd_args = 0;                                    \
-    (gate).gd_rsv1 = 0;                                    \
-    (gate).gd_type = STS_CG32;                            \
-    (gate).gd_s = 0;                                    \
-    (gate).gd_dpl = (dpl);                                \
-    (gate).gd_p = 1;                                    \
-    (gate).gd_off_31_16 = (uint32_t)(off) >> 16;        \
-}
+#define SETCALLGATE(gate, ss, off, dpl) {                   \
+        (gate).gd_off_15_0 = (uint32_t)(off) & 0xffff;      \
+        (gate).gd_ss = (ss);                                \
+        (gate).gd_args = 0;                                 \
+        (gate).gd_rsv1 = 0;                                 \
+        (gate).gd_type = STS_CG32;                          \
+        (gate).gd_s = 0;                                    \
+        (gate).gd_dpl = (dpl);                              \
+        (gate).gd_p = 1;                                    \
+        (gate).gd_off_31_16 = (uint32_t)(off) >> 16;        \
+    }
 
 /* segment descriptors */
 struct segdesc {
-    unsigned sd_lim_15_0 : 16;        // low bits of segment limit
-    unsigned sd_base_15_0 : 16;        // low bits of segment base address
-    unsigned sd_base_23_16 : 8;        // middle bits of segment base address
-    unsigned sd_type : 4;            // segment type (see STS_ constants)
-    unsigned sd_s : 1;                // 0 = system, 1 = application
+    unsigned sd_lim_15_0 : 16;      // low bits of segment limit
+    unsigned sd_base_15_0 : 16;     // low bits of segment base address
+    unsigned sd_base_23_16 : 8;     // middle bits of segment base address
+    unsigned sd_type : 4;           // segment type (see STS_ constants)
+    unsigned sd_s : 1;              // 0 = system, 1 = application
     unsigned sd_dpl : 2;            // descriptor Privilege Level
-    unsigned sd_p : 1;                // present
-    unsigned sd_lim_19_16 : 4;        // high bits of segment limit
+    unsigned sd_p : 1;              // present
+    unsigned sd_lim_19_16 : 4;      // high bits of segment limit
     unsigned sd_avl : 1;            // unused (available for software use)
-    unsigned sd_rsv1 : 1;            // reserved
-    unsigned sd_db : 1;                // 0 = 16-bit segment, 1 = 32-bit segment
-    unsigned sd_g : 1;                // granularity: limit scaled by 4K when set
-    unsigned sd_base_31_24 : 8;        // high bits of segment base address
+    unsigned sd_rsv1 : 1;           // reserved
+    unsigned sd_db : 1;             // 0 = 16-bit segment, 1 = 32-bit segment
+    unsigned sd_g : 1;              // granularity: limit scaled by 4K when set
+    unsigned sd_base_31_24 : 8;     // high bits of segment base address
 };
 
 #define SEG_NULL                                            \
-    (struct segdesc){0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
+    (struct segdesc) {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
 
-#define SEG(type, base, lim, dpl)                        \
-    (struct segdesc){                                    \
-        ((lim) >> 12) & 0xffff, (base) & 0xffff,        \
-        ((base) >> 16) & 0xff, type, 1, dpl, 1,            \
-        (unsigned)(lim) >> 28, 0, 0, 1, 1,                \
-        (unsigned) (base) >> 24                            \
+#define SEG(type, base, lim, dpl)                           \
+    (struct segdesc) {                                      \
+        ((lim) >> 12) & 0xffff, (base) & 0xffff,            \
+        ((base) >> 16) & 0xff, type, 1, dpl, 1,             \
+        (unsigned)(lim) >> 28, 0, 0, 1, 1,                  \
+        (unsigned) (base) >> 24                             \
     }
 
-#define SEG16(type, base, lim, dpl)                        \
-    (struct segdesc){                                    \
-        (lim) & 0xffff, (base) & 0xffff,                \
-        ((base) >> 16) & 0xff, type, 1, dpl, 1,            \
-        (unsigned) (lim) >> 16, 0, 0, 1, 0,                \
-        (unsigned) (base) >> 24                            \
+#define SEGTSS(type, base, lim, dpl)                        \
+    (struct segdesc) {                                      \
+        (lim) & 0xffff, (base) & 0xffff,                    \
+        ((base) >> 16) & 0xff, type, 0, dpl, 1,             \
+        (unsigned) (lim) >> 16, 0, 0, 1, 0,                 \
+        (unsigned) (base) >> 24                             \
     }
 
 /* task state segment format (as described by the Pentium architecture book) */
 struct taskstate {
-    uint32_t ts_link;        // old ts selector
-    uintptr_t ts_esp0;        // stack pointers and segment selectors
+    uint32_t ts_link;       // old ts selector
+    uintptr_t ts_esp0;      // stack pointers and segment selectors
     uint16_t ts_ss0;        // after an increase in privilege level
     uint16_t ts_padding1;
     uintptr_t ts_esp1;
@@ -141,8 +156,8 @@
     uintptr_t ts_esp2;
     uint16_t ts_ss2;
     uint16_t ts_padding3;
-    uintptr_t ts_cr3;        // page directory base
-    uintptr_t ts_eip;        // saved state from last task switch
+    uintptr_t ts_cr3;       // page directory base
+    uintptr_t ts_eip;       // saved state from last task switch
     uint32_t ts_eflags;
     uint32_t ts_eax;        // more saved state (registers)
     uint32_t ts_ecx;
@@ -152,7 +167,7 @@
     uintptr_t ts_ebp;
     uint32_t ts_esi;
     uint32_t ts_edi;
-    uint16_t ts_es;            // even more saved state (segment selectors)
+    uint16_t ts_es;         // even more saved state (segment selectors)
     uint16_t ts_padding4;
     uint16_t ts_cs;
     uint16_t ts_padding5;
@@ -166,9 +181,92 @@
     uint16_t ts_padding9;
     uint16_t ts_ldt;
     uint16_t ts_padding10;
-    uint16_t ts_t;            // trap on task switch
-    uint16_t ts_iomb;        // i/o map base address
-};
+    uint16_t ts_t;          // trap on task switch
+    uint16_t ts_iomb;       // i/o map base address
+} __attribute__((packed));
+
+#endif /* !__ASSEMBLER__ */
+
+// A linear address 'la' has a three-part structure as follows:
+//
+// +--------10------+-------10-------+---------12----------+
+// | Page Directory |   Page Table   | Offset within Page  |
+// |      Index     |     Index      |                     |
+// +----------------+----------------+---------------------+
+//  \--- PDX(la) --/ \--- PTX(la) --/ \---- PGOFF(la) ----/
+//  \----------- PPN(la) -----------/
+//
+// The PDX, PTX, PGOFF, and PPN macros decompose linear addresses as shown.
+// To construct a linear address la from PDX(la), PTX(la), and PGOFF(la),
+// use PGADDR(PDX(la), PTX(la), PGOFF(la)).
+
+// page directory index
+#define PDX(la) ((((uintptr_t)(la)) >> PDXSHIFT) & 0x3FF)
+
+// page table index
+#define PTX(la) ((((uintptr_t)(la)) >> PTXSHIFT) & 0x3FF)
+
+// page number field of address
+#define PPN(la) (((uintptr_t)(la)) >> PTXSHIFT)
+
+// offset in page
+#define PGOFF(la) (((uintptr_t)(la)) & 0xFFF)
+
+// construct linear address from indexes and offset
+#define PGADDR(d, t, o) ((uintptr_t)((d) << PDXSHIFT | (t) << PTXSHIFT | (o)))
+
+// address in page table or page directory entry
+#define PTE_ADDR(pte)   ((uintptr_t)(pte) & ~0xFFF)
+#define PDE_ADDR(pde)   PTE_ADDR(pde)
+
+/* page directory and page table constants */
+#define NPDEENTRY       1024                    // page directory entries per page directory
+#define NPTEENTRY       1024                    // page table entries per page table
+
+#define PGSIZE          4096                    // bytes mapped by a page
+#define PGSHIFT         12                      // log2(PGSIZE)
+#define PTSIZE          (PGSIZE * NPTEENTRY)    // bytes mapped by a page directory entry
+#define PTSHIFT         22                      // log2(PTSIZE)
+
+#define PTXSHIFT        12                      // offset of PTX in a linear address
+#define PDXSHIFT        22                      // offset of PDX in a linear address
+
+/* page table/directory entry flags */
+#define PTE_P           0x001                   // Present
+#define PTE_W           0x002                   // Writeable
+#define PTE_U           0x004                   // User
+#define PTE_PWT         0x008                   // Write-Through
+#define PTE_PCD         0x010                   // Cache-Disable
+#define PTE_A           0x020                   // Accessed
+#define PTE_D           0x040                   // Dirty
+#define PTE_PS          0x080                   // Page Size
+#define PTE_MBZ         0x180                   // Bits must be zero
+#define PTE_AVAIL       0xE00                   // Available for software use
+                                                // The PTE_AVAIL bits aren't used by the kernel or interpreted by the
+                                                // hardware, so user processes are allowed to set them arbitrarily.
+
+#define PTE_USER        (PTE_U | PTE_W | PTE_P)
+
+/* Control Register flags */
+#define CR0_PE          0x00000001              // Protection Enable
+#define CR0_MP          0x00000002              // Monitor coProcessor
+#define CR0_EM          0x00000004              // Emulation
+#define CR0_TS          0x00000008              // Task Switched
+#define CR0_ET          0x00000010              // Extension Type
+#define CR0_NE          0x00000020              // Numeric Errror
+#define CR0_WP          0x00010000              // Write Protect
+#define CR0_AM          0x00040000              // Alignment Mask
+#define CR0_NW          0x20000000              // Not Writethrough
+#define CR0_CD          0x40000000              // Cache Disable
+#define CR0_PG          0x80000000              // Paging
+
+#define CR4_PCE         0x00000100              // Performance counter enable
+#define CR4_MCE         0x00000040              // Machine Check Enable
+#define CR4_PSE         0x00000010              // Page Size Extensions
+#define CR4_DE          0x00000008              // Debugging Extensions
+#define CR4_TSD         0x00000004              // Time Stamp Disable
+#define CR4_PVI         0x00000002              // Protected-Mode Virtual Interrupts
+#define CR4_VME         0x00000001              // V86 Mode Extensions
 
 #endif /* !__KERN_MM_MMU_H__ */
 
diff -Nru lab1/kern/mm/pmm.c lab2/kern/mm/pmm.c
--- lab1/kern/mm/pmm.c	2017-02-25 15:39:39.991783592 +0800
+++ lab2/kern/mm/pmm.c	2017-02-25 15:39:39.991783592 +0800
@@ -1,8 +1,13 @@
 #include <defs.h>
 #include <x86.h>
+#include <stdio.h>
+#include <string.h>
 #include <mmu.h>
 #include <memlayout.h>
 #include <pmm.h>
+#include <default_pmm.h>
+#include <sync.h>
+#include <error.h>
 
 /* *
  * Task State Segment:
@@ -26,6 +31,35 @@
  * */
 static struct taskstate ts = {0};
 
+// virtual address of physicall page array
+struct Page *pages;
+// amount of physical memory (in pages)
+size_t npage = 0;
+
+// virtual address of boot-time page directory
+pde_t *boot_pgdir = NULL;
+// physical address of boot-time page directory
+uintptr_t boot_cr3;
+
+// physical memory management
+const struct pmm_manager *pmm_manager;
+
+/* *
+ * The page directory entry corresponding to the virtual address range
+ * [VPT, VPT + PTSIZE) points to the page directory itself. Thus, the page
+ * directory is treated as a page table as well as a page directory.
+ *
+ * One result of treating the page directory as a page table is that all PTEs
+ * can be accessed though a "virtual page table" at virtual address VPT. And the
+ * PTE for number n is stored in vpt[n].
+ *
+ * A second consequence is that the contents of the current page directory will
+ * always available at virtual address PGADDR(PDX(VPT), PDX(VPT), 0), to which
+ * vpd is set bellow.
+ * */
+pte_t * const vpt = (pte_t *)VPT;
+pde_t * const vpd = (pde_t *)PGADDR(PDX(VPT), PDX(VPT), 0);
+
 /* *
  * Global Descriptor Table:
  *
@@ -45,13 +79,17 @@
     [SEG_KDATA] = SEG(STA_W, 0x0, 0xFFFFFFFF, DPL_KERNEL),
     [SEG_UTEXT] = SEG(STA_X | STA_R, 0x0, 0xFFFFFFFF, DPL_USER),
     [SEG_UDATA] = SEG(STA_W, 0x0, 0xFFFFFFFF, DPL_USER),
-    [SEG_TSS]    = SEG_NULL,
+    [SEG_TSS]   = SEG_NULL,
 };
 
 static struct pseudodesc gdt_pd = {
-    sizeof(gdt) - 1, (uint32_t)gdt
+    sizeof(gdt) - 1, (uintptr_t)gdt
 };
 
+static void check_alloc_page(void);
+static void check_pgdir(void);
+static void check_boot_pgdir(void);
+
 /* *
  * lgdt - load the global descriptor table register and reset the
  * data/code segement registers for kernel.
@@ -68,21 +106,25 @@
     asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
 }
 
-/* temporary kernel stack */
-uint8_t stack0[1024];
+/* *
+ * load_esp0 - change the ESP0 in default task state segment,
+ * so that we can use different kernel stack when we trap frame
+ * user to kernel.
+ * */
+void
+load_esp0(uintptr_t esp0) {
+    ts.ts_esp0 = esp0;
+}
 
 /* gdt_init - initialize the default GDT and TSS */
 static void
 gdt_init(void) {
-    // Setup a TSS so that we can get the right stack when we trap from
-    // user to the kernel. But not safe here, it's only a temporary value,
-    // it will be set to KSTACKTOP in lab2.
-    ts.ts_esp0 = (uint32_t)&stack0 + sizeof(stack0);
+    // set boot kernel stack and default SS0
+    load_esp0((uintptr_t)bootstacktop);
     ts.ts_ss0 = KERNEL_DS;
 
     // initialize the TSS filed of the gdt
-    gdt[SEG_TSS] = SEG16(STS_T32A, (uint32_t)&ts, sizeof(ts), DPL_KERNEL);
-    gdt[SEG_TSS].sd_s = 0;
+    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
 
     // reload all segment registers
     lgdt(&gdt_pd);
@@ -91,9 +133,495 @@
     ltr(GD_TSS);
 }
 
+//init_pmm_manager - initialize a pmm_manager instance
+static void
+init_pmm_manager(void) {
+    pmm_manager = &default_pmm_manager;
+    cprintf("memory management: %s\n", pmm_manager->name);
+    pmm_manager->init();
+}
+
+//init_memmap - call pmm->init_memmap to build Page struct for free memory  
+static void
+init_memmap(struct Page *base, size_t n) {
+    pmm_manager->init_memmap(base, n);
+}
+
+//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
+struct Page *
+alloc_pages(size_t n) {
+    struct Page *page=NULL;
+    bool intr_flag;
+    local_intr_save(intr_flag);
+    {
+        page = pmm_manager->alloc_pages(n);
+    }
+    local_intr_restore(intr_flag);
+    return page;
+}
+
+//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
+void
+free_pages(struct Page *base, size_t n) {
+    bool intr_flag;
+    local_intr_save(intr_flag);
+    {
+        pmm_manager->free_pages(base, n);
+    }
+    local_intr_restore(intr_flag);
+}
+
+//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
+//of current free memory
+size_t
+nr_free_pages(void) {
+    size_t ret;
+    bool intr_flag;
+    local_intr_save(intr_flag);
+    {
+        ret = pmm_manager->nr_free_pages();
+    }
+    local_intr_restore(intr_flag);
+    return ret;
+}
+
 /* pmm_init - initialize the physical memory management */
+static void
+page_init(void) {
+    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
+    uint64_t maxpa = 0;
+
+    cprintf("e820map:\n");
+    int i;
+    for (i = 0; i < memmap->nr_map; i ++) {
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
+                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
+        if (memmap->map[i].type == E820_ARM) {
+            if (maxpa < end && begin < KMEMSIZE) {
+                maxpa = end;
+            }
+        }
+    }
+    if (maxpa > KMEMSIZE) {
+        maxpa = KMEMSIZE;
+    }
+
+    extern char end[];
+
+    npage = maxpa / PGSIZE;
+    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
+
+    for (i = 0; i < npage; i ++) {
+        SetPageReserved(pages + i);
+    }
+
+    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
+
+    for (i = 0; i < memmap->nr_map; i ++) {
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+        if (memmap->map[i].type == E820_ARM) {
+            if (begin < freemem) {
+                begin = freemem;
+            }
+            if (end > KMEMSIZE) {
+                end = KMEMSIZE;
+            }
+            if (begin < end) {
+                begin = ROUNDUP(begin, PGSIZE);
+                end = ROUNDDOWN(end, PGSIZE);
+                if (begin < end) {
+                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
+                }
+            }
+        }
+    }
+}
+
+static void
+enable_paging(void) {
+    lcr3(boot_cr3);
+
+    // turn on paging
+    uint32_t cr0 = rcr0();
+    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
+    cr0 &= ~(CR0_TS | CR0_EM);
+    lcr0(cr0);
+}
+
+//boot_map_segment - setup&enable the paging mechanism
+// parameters
+//  la:   linear address of this memory need to map (after x86 segment map)
+//  size: memory size
+//  pa:   physical address of this memory
+//  perm: permission of this memory  
+static void
+boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
+    assert(PGOFF(la) == PGOFF(pa));
+    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
+    la = ROUNDDOWN(la, PGSIZE);
+    pa = ROUNDDOWN(pa, PGSIZE);
+    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
+        pte_t *ptep = get_pte(pgdir, la, 1);
+        assert(ptep != NULL);
+        *ptep = pa | PTE_P | perm;
+    }
+}
+
+//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
+// return value: the kernel virtual address of this allocated page
+//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
+static void *
+boot_alloc_page(void) {
+    struct Page *p = alloc_page();
+    if (p == NULL) {
+        panic("boot_alloc_page failed.\n");
+    }
+    return page2kva(p);
+}
+
+//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
+//         - check the correctness of pmm & paging mechanism, print PDT&PT
 void
 pmm_init(void) {
+    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
+    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
+    //First we should init a physical memory manager(pmm) based on the framework.
+    //Then pmm can alloc/free the physical memory. 
+    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
+    init_pmm_manager();
+
+    // detect physical memory space, reserve already used memory,
+    // then use pmm->init_memmap to create free page list
+    page_init();
+
+    //use pmm->check to verify the correctness of the alloc/free function in a pmm
+    check_alloc_page();
+
+    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
+    boot_pgdir = boot_alloc_page();
+    memset(boot_pgdir, 0, PGSIZE);
+    boot_cr3 = PADDR(boot_pgdir);
+
+    check_pgdir();
+
+    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);
+
+    // recursively insert boot_pgdir in itself
+    // to form a virtual page table at virtual address VPT
+    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
+
+    // map all physical memory to linear memory with base linear addr KERNBASE
+    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
+    //But shouldn't use this map until enable_paging() & gdt_init() finished.
+    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
+
+    //temporary map: 
+    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
+    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
+
+    enable_paging();
+
+    //reload gdt(third time,the last time) to map all physical memory
+    //virtual_addr 0~4G=liear_addr 0~4G
+    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
     gdt_init();
+
+    //disable the map of virtual_addr 0~4M
+    boot_pgdir[0] = 0;
+
+    //now the basic virtual memory map(see memalyout.h) is established.
+    //check the correctness of the basic virtual memory map.
+    check_boot_pgdir();
+
+    print_pgdir();
+
+}
+
+//get_pte - get pte and return the kernel virtual address of this pte for la
+//        - if the PT contians this pte didn't exist, alloc a page for PT
+// parameter:
+//  pgdir:  the kernel virtual base address of PDT
+//  la:     the linear address need to map
+//  create: a logical value to decide if alloc a page for PT
+// return vaule: the kernel virtual address of this pte
+pte_t *
+get_pte(pde_t *pgdir, uintptr_t la, bool create) {
+    /* LAB2 EXERCISE 2: YOUR CODE
+     *
+     * If you need to visit a physical address, please use KADDR()
+     * please read pmm.h for useful macros
+     *
+     * Maybe you want help comment, BELOW comments can help you finish the code
+     *
+     * Some Useful MACROs and DEFINEs, you can use them in below implementation.
+     * MACROs or Functions:
+     *   PDX(la) = the index of page directory entry of VIRTUAL ADDRESS la.
+     *   KADDR(pa) : takes a physical address and returns the corresponding kernel virtual address.
+     *   set_page_ref(page,1) : means the page be referenced by one time
+     *   page2pa(page): get the physical address of memory which this (struct Page *) page  manages
+     *   struct Page * alloc_page() : allocation a page
+     *   memset(void *s, char c, size_t n) : sets the first n bytes of the memory area pointed by s
+     *                                       to the specified value c.
+     * DEFINEs:
+     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
+     *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable
+     *   PTE_U           0x004                   // page table/directory entry flags bit : User can access
+     */
+#if 0
+    pde_t *pdep = NULL;   // (1) find page directory entry
+    if (0) {              // (2) check if entry is not present
+                          // (3) check if creating is needed, then alloc page for page table
+                          // CAUTION: this page is used for page table, not for common data page
+                          // (4) set page reference
+        uintptr_t pa = 0; // (5) get linear address of page
+                          // (6) clear page content using memset
+                          // (7) set page directory entry's permission
+    }
+    return NULL;          // (8) return page table entry
+#endif
+}
+
+//get_page - get related Page struct for linear address la using PDT pgdir
+struct Page *
+get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
+    pte_t *ptep = get_pte(pgdir, la, 0);
+    if (ptep_store != NULL) {
+        *ptep_store = ptep;
+    }
+    if (ptep != NULL && *ptep & PTE_P) {
+        return pte2page(*ptep);
+    }
+    return NULL;
+}
+
+//page_remove_pte - free an Page sturct which is related linear address la
+//                - and clean(invalidate) pte which is related linear address la
+//note: PT is changed, so the TLB need to be invalidate 
+static inline void
+page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
+    /* LAB2 EXERCISE 3: YOUR CODE
+     *
+     * Please check if ptep is valid, and tlb must be manually updated if mapping is updated
+     *
+     * Maybe you want help comment, BELOW comments can help you finish the code
+     *
+     * Some Useful MACROs and DEFINEs, you can use them in below implementation.
+     * MACROs or Functions:
+     *   struct Page *page pte2page(*ptep): get the according page from the value of a ptep
+     *   free_page : free a page
+     *   page_ref_dec(page) : decrease page->ref. NOTICE: ff page->ref == 0 , then this page should be free.
+     *   tlb_invalidate(pde_t *pgdir, uintptr_t la) : Invalidate a TLB entry, but only if the page tables being
+     *                        edited are the ones currently in use by the processor.
+     * DEFINEs:
+     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
+     */
+#if 0
+    if (0) {                      //(1) check if this page table entry is present
+        struct Page *page = NULL; //(2) find corresponding page to pte
+                                  //(3) decrease page reference
+                                  //(4) and free this page when page reference reachs 0
+                                  //(5) clear second page table entry
+                                  //(6) flush tlb
+    }
+#endif
+}
+
+//page_remove - free an Page which is related linear address la and has an validated pte
+void
+page_remove(pde_t *pgdir, uintptr_t la) {
+    pte_t *ptep = get_pte(pgdir, la, 0);
+    if (ptep != NULL) {
+        page_remove_pte(pgdir, la, ptep);
+    }
+}
+
+//page_insert - build the map of phy addr of an Page with the linear addr la
+// paramemters:
+//  pgdir: the kernel virtual base address of PDT
+//  page:  the Page which need to map
+//  la:    the linear address need to map
+//  perm:  the permission of this Page which is setted in related pte
+// return value: always 0
+//note: PT is changed, so the TLB need to be invalidate 
+int
+page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
+    pte_t *ptep = get_pte(pgdir, la, 1);
+    if (ptep == NULL) {
+        return -E_NO_MEM;
+    }
+    page_ref_inc(page);
+    if (*ptep & PTE_P) {
+        struct Page *p = pte2page(*ptep);
+        if (p == page) {
+            page_ref_dec(page);
+        }
+        else {
+            page_remove_pte(pgdir, la, ptep);
+        }
+    }
+    *ptep = page2pa(page) | PTE_P | perm;
+    tlb_invalidate(pgdir, la);
+    return 0;
+}
+
+// invalidate a TLB entry, but only if the page tables being
+// edited are the ones currently in use by the processor.
+void
+tlb_invalidate(pde_t *pgdir, uintptr_t la) {
+    if (rcr3() == PADDR(pgdir)) {
+        invlpg((void *)la);
+    }
+}
+
+static void
+check_alloc_page(void) {
+    pmm_manager->check();
+    cprintf("check_alloc_page() succeeded!\n");
+}
+
+static void
+check_pgdir(void) {
+    assert(npage <= KMEMSIZE / PGSIZE);
+    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
+    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
+
+    struct Page *p1, *p2;
+    p1 = alloc_page();
+    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
+
+    pte_t *ptep;
+    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
+    assert(pte2page(*ptep) == p1);
+    assert(page_ref(p1) == 1);
+
+    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
+    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
+
+    p2 = alloc_page();
+    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+    assert(*ptep & PTE_U);
+    assert(*ptep & PTE_W);
+    assert(boot_pgdir[0] & PTE_U);
+    assert(page_ref(p2) == 1);
+
+    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
+    assert(page_ref(p1) == 2);
+    assert(page_ref(p2) == 0);
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+    assert(pte2page(*ptep) == p1);
+    assert((*ptep & PTE_U) == 0);
+
+    page_remove(boot_pgdir, 0x0);
+    assert(page_ref(p1) == 1);
+    assert(page_ref(p2) == 0);
+
+    page_remove(boot_pgdir, PGSIZE);
+    assert(page_ref(p1) == 0);
+    assert(page_ref(p2) == 0);
+
+    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
+    free_page(pde2page(boot_pgdir[0]));
+    boot_pgdir[0] = 0;
+
+    cprintf("check_pgdir() succeeded!\n");
+}
+
+static void
+check_boot_pgdir(void) {
+    pte_t *ptep;
+    int i;
+    for (i = 0; i < npage; i += PGSIZE) {
+        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
+        assert(PTE_ADDR(*ptep) == i);
+    }
+
+    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
+
+    assert(boot_pgdir[0] == 0);
+
+    struct Page *p;
+    p = alloc_page();
+    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
+    assert(page_ref(p) == 1);
+    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
+    assert(page_ref(p) == 2);
+
+    const char *str = "ucore: Hello world!!";
+    strcpy((void *)0x100, str);
+    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
+
+    *(char *)(page2kva(p) + 0x100) = '\0';
+    assert(strlen((const char *)0x100) == 0);
+
+    free_page(p);
+    free_page(pde2page(boot_pgdir[0]));
+    boot_pgdir[0] = 0;
+
+    cprintf("check_boot_pgdir() succeeded!\n");
+}
+
+//perm2str - use string 'u,r,w,-' to present the permission
+static const char *
+perm2str(int perm) {
+    static char str[4];
+    str[0] = (perm & PTE_U) ? 'u' : '-';
+    str[1] = 'r';
+    str[2] = (perm & PTE_W) ? 'w' : '-';
+    str[3] = '\0';
+    return str;
+}
+
+//get_pgtable_items - In [left, right] range of PDT or PT, find a continuous linear addr space
+//                  - (left_store*X_SIZE~right_store*X_SIZE) for PDT or PT
+//                  - X_SIZE=PTSIZE=4M, if PDT; X_SIZE=PGSIZE=4K, if PT
+// paramemters:
+//  left:        no use ???
+//  right:       the high side of table's range
+//  start:       the low side of table's range
+//  table:       the beginning addr of table
+//  left_store:  the pointer of the high side of table's next range
+//  right_store: the pointer of the low side of table's next range
+// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
+static int
+get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
+    if (start >= right) {
+        return 0;
+    }
+    while (start < right && !(table[start] & PTE_P)) {
+        start ++;
+    }
+    if (start < right) {
+        if (left_store != NULL) {
+            *left_store = start;
+        }
+        int perm = (table[start ++] & PTE_USER);
+        while (start < right && (table[start] & PTE_USER) == perm) {
+            start ++;
+        }
+        if (right_store != NULL) {
+            *right_store = start;
+        }
+        return perm;
+    }
+    return 0;
+}
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+    cprintf("-------------------- BEGIN --------------------\n");
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
+        }
+    }
+    cprintf("--------------------- END ---------------------\n");
 }
 
diff -Nru lab1/kern/mm/pmm.h lab2/kern/mm/pmm.h
--- lab1/kern/mm/pmm.h	2017-02-25 15:39:39.991783592 +0800
+++ lab2/kern/mm/pmm.h	2017-02-25 15:39:39.991783592 +0800
@@ -1,7 +1,143 @@
 #ifndef __KERN_MM_PMM_H__
 #define __KERN_MM_PMM_H__
 
+#include <defs.h>
+#include <mmu.h>
+#include <memlayout.h>
+#include <atomic.h>
+#include <assert.h>
+
+// pmm_manager is a physical memory management class. A special pmm manager - XXX_pmm_manager
+// only needs to implement the methods in pmm_manager class, then XXX_pmm_manager can be used
+// by ucore to manage the total physical memory space.
+struct pmm_manager {
+    const char *name;                                 // XXX_pmm_manager's name
+    void (*init)(void);                               // initialize internal description&management data structure
+                                                      // (free block list, number of free block) of XXX_pmm_manager 
+    void (*init_memmap)(struct Page *base, size_t n); // setup description&management data structcure according to
+                                                      // the initial free physical memory space 
+    struct Page *(*alloc_pages)(size_t n);            // allocate >=n pages, depend on the allocation algorithm 
+    void (*free_pages)(struct Page *base, size_t n);  // free >=n pages with "base" addr of Page descriptor structures(memlayout.h)
+    size_t (*nr_free_pages)(void);                    // return the number of free pages 
+    void (*check)(void);                              // check the correctness of XXX_pmm_manager 
+};
+
+extern const struct pmm_manager *pmm_manager;
+extern pde_t *boot_pgdir;
+extern uintptr_t boot_cr3;
+
 void pmm_init(void);
 
+struct Page *alloc_pages(size_t n);
+void free_pages(struct Page *base, size_t n);
+size_t nr_free_pages(void);
+
+#define alloc_page() alloc_pages(1)
+#define free_page(page) free_pages(page, 1)
+
+pte_t *get_pte(pde_t *pgdir, uintptr_t la, bool create);
+struct Page *get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store);
+void page_remove(pde_t *pgdir, uintptr_t la);
+int page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm);
+
+void load_esp0(uintptr_t esp0);
+void tlb_invalidate(pde_t *pgdir, uintptr_t la);
+
+void print_pgdir(void);
+
+/* *
+ * PADDR - takes a kernel virtual address (an address that points above KERNBASE),
+ * where the machine's maximum 256MB of physical memory is mapped and returns the
+ * corresponding physical address.  It panics if you pass it a non-kernel virtual address.
+ * */
+#define PADDR(kva) ({                                                   \
+            uintptr_t __m_kva = (uintptr_t)(kva);                       \
+            if (__m_kva < KERNBASE) {                                   \
+                panic("PADDR called with invalid kva %08lx", __m_kva);  \
+            }                                                           \
+            __m_kva - KERNBASE;                                         \
+        })
+
+/* *
+ * KADDR - takes a physical address and returns the corresponding kernel virtual
+ * address. It panics if you pass an invalid physical address.
+ * */
+#define KADDR(pa) ({                                                    \
+            uintptr_t __m_pa = (pa);                                    \
+            size_t __m_ppn = PPN(__m_pa);                               \
+            if (__m_ppn >= npage) {                                     \
+                panic("KADDR called with invalid pa %08lx", __m_pa);    \
+            }                                                           \
+            (void *) (__m_pa + KERNBASE);                               \
+        })
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+    return page - pages;
+}
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+    return page2ppn(page) << PGSHIFT;
+}
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+    if (PPN(pa) >= npage) {
+        panic("pa2page called with invalid pa");
+    }
+    return &pages[PPN(pa)];
+}
+
+static inline void *
+page2kva(struct Page *page) {
+    return KADDR(page2pa(page));
+}
+
+static inline struct Page *
+kva2page(void *kva) {
+    return pa2page(PADDR(kva));
+}
+
+static inline struct Page *
+pte2page(pte_t pte) {
+    if (!(pte & PTE_P)) {
+        panic("pte2page called with invalid pte");
+    }
+    return pa2page(PTE_ADDR(pte));
+}
+
+static inline struct Page *
+pde2page(pde_t pde) {
+    return pa2page(PDE_ADDR(pde));
+}
+
+static inline int
+page_ref(struct Page *page) {
+    return page->ref;
+}
+
+static inline void
+set_page_ref(struct Page *page, int val) {
+    page->ref = val;
+}
+
+static inline int
+page_ref_inc(struct Page *page) {
+    page->ref += 1;
+    return page->ref;
+}
+
+static inline int
+page_ref_dec(struct Page *page) {
+    page->ref -= 1;
+    return page->ref;
+}
+
+extern char bootstack[], bootstacktop[];
+
 #endif /* !__KERN_MM_PMM_H__ */
 
diff -Nru lab1/kern/sync/sync.h lab2/kern/sync/sync.h
--- lab1/kern/sync/sync.h	1970-01-01 08:00:00.000000000 +0800
+++ lab2/kern/sync/sync.h	2017-02-25 15:39:39.991783592 +0800
@@ -0,0 +1,28 @@
+#ifndef __KERN_SYNC_SYNC_H__
+#define __KERN_SYNC_SYNC_H__
+
+#include <x86.h>
+#include <intr.h>
+#include <mmu.h>
+
+static inline bool
+__intr_save(void) {
+    if (read_eflags() & FL_IF) {
+        intr_disable();
+        return 1;
+    }
+    return 0;
+}
+
+static inline void
+__intr_restore(bool flag) {
+    if (flag) {
+        intr_enable();
+    }
+}
+
+#define local_intr_save(x)      do { x = __intr_save(); } while (0)
+#define local_intr_restore(x)   __intr_restore(x);
+
+#endif /* !__KERN_SYNC_SYNC_H__ */
+
diff -Nru lab1/kern/trap/trap.c lab2/kern/trap/trap.c
--- lab1/kern/trap/trap.c	2017-03-04 16:15:23.436365958 +0800
+++ lab2/kern/trap/trap.c	2017-02-25 15:39:39.991783592 +0800
@@ -34,7 +34,7 @@
 /* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
 void
 idt_init(void) {
-     /* LAB1 2013012291 : STEP 2 */
+     /* LAB1 YOUR CODE : STEP 2 */
      /* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?
       *     All ISR's entry addrs are stored in __vectors. where is uintptr_t __vectors[] ?
       *     __vectors[] is in kern/trap/vector.S which is produced by tools/vector.c
@@ -46,13 +46,6 @@
       *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
       *     Notice: the argument of lidt is idt_pd. try to find it!
       */
-    extern uintptr_t __vectors[];
-    int i;
-    for(i=0;i<256;i++){
-        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
-    } 
-    SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
-    lidt(&idt_pd);
 }
 
 static const char *
@@ -148,16 +141,12 @@
 
     switch (tf->tf_trapno) {
     case IRQ_OFFSET + IRQ_TIMER:
-        /* LAB1 2013012291 : STEP 3 */
+        /* LAB1 YOUR CODE : STEP 3 */
         /* handle the timer interrupt */
         /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
          * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
          * (3) Too Simple? Yes, I think so!
          */
-        ticks++;
-        if(0 == ticks%TICK_NUM){
-            print_ticks();
-        }
         break;
     case IRQ_OFFSET + IRQ_COM1:
         c = cons_getc();
@@ -166,26 +155,11 @@
     case IRQ_OFFSET + IRQ_KBD:
         c = cons_getc();
         cprintf("kbd [%03d] %c\n", c, c);
-        if ('3' == c){
-            goto t_switch_tou;
-        }
-        if ('0' == c){
-            goto t_switch_tok;
-        }
         break;
-    //LAB1 CHALLENGE 1 : 2013012291 you should modify below codes.
+    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
     case T_SWITCH_TOU:
-    t_switch_tou:
-        // Switch segment (also ring in cs)
-        tf->tf_cs = USER_CS;
-        tf->tf_ss = tf->tf_es = tf->tf_ds = USER_DS;
-        // enable IO in user ring
-        tf->tf_eflags |= FL_IOPL_MASK;
-        break;
     case T_SWITCH_TOK:
-    t_switch_tok:
-        tf->tf_cs = KERNEL_CS;
-        tf->tf_ss = tf->tf_es = tf->tf_ds = KERNEL_DS;
+        panic("T_SWITCH_** ??\n");
         break;
     case IRQ_OFFSET + IRQ_IDE1:
     case IRQ_OFFSET + IRQ_IDE2:
diff -Nru lab1/kern/trap/trap.h lab2/kern/trap/trap.h
--- lab1/kern/trap/trap.h	2017-02-25 15:39:39.991783592 +0800
+++ lab2/kern/trap/trap.h	2017-02-25 15:39:39.991783592 +0800
@@ -6,39 +6,39 @@
 /* Trap Numbers */
 
 /* Processor-defined: */
-#define T_DIVIDE                0    // divide error
-#define T_DEBUG                    1    // debug exception
-#define T_NMI                    2    // non-maskable interrupt
-#define T_BRKPT                    3    // breakpoint
-#define T_OFLOW                    4    // overflow
-#define T_BOUND                    5    // bounds check
-#define T_ILLOP                    6    // illegal opcode
-#define T_DEVICE                7    // device not available
-#define T_DBLFLT                8    // double fault
-// #define T_COPROC                9    // reserved (not used since 486)
-#define T_TSS                    10    // invalid task switch segment
-#define T_SEGNP                    11    // segment not present
-#define T_STACK                    12    // stack exception
-#define T_GPFLT                    13    // general protection fault
-#define T_PGFLT                    14    // page fault
-// #define T_RES                15    // reserved
-#define T_FPERR                    16    // floating point error
-#define T_ALIGN                    17    // aligment check
-#define T_MCHK                    18    // machine check
-#define T_SIMDERR                19    // SIMD floating point error
+#define T_DIVIDE                0   // divide error
+#define T_DEBUG                 1   // debug exception
+#define T_NMI                   2   // non-maskable interrupt
+#define T_BRKPT                 3   // breakpoint
+#define T_OFLOW                 4   // overflow
+#define T_BOUND                 5   // bounds check
+#define T_ILLOP                 6   // illegal opcode
+#define T_DEVICE                7   // device not available
+#define T_DBLFLT                8   // double fault
+// #define T_COPROC             9   // reserved (not used since 486)
+#define T_TSS                   10  // invalid task switch segment
+#define T_SEGNP                 11  // segment not present
+#define T_STACK                 12  // stack exception
+#define T_GPFLT                 13  // general protection fault
+#define T_PGFLT                 14  // page fault
+// #define T_RES                15  // reserved
+#define T_FPERR                 16  // floating point error
+#define T_ALIGN                 17  // aligment check
+#define T_MCHK                  18  // machine check
+#define T_SIMDERR               19  // SIMD floating point error
 
 #define T_SYSCALL               0x80 // SYSCALL, ONLY FOR THIS PROJ
 
 /* Hardware IRQ numbers. We receive these as (IRQ_OFFSET + IRQ_xx) */
-#define IRQ_OFFSET                32    // IRQ 0 corresponds to int IRQ_OFFSET
+#define IRQ_OFFSET              32  // IRQ 0 corresponds to int IRQ_OFFSET
 
-#define IRQ_TIMER                0
-#define IRQ_KBD                    1
+#define IRQ_TIMER               0
+#define IRQ_KBD                 1
 #define IRQ_COM1                4
 #define IRQ_IDE1                14
 #define IRQ_IDE2                15
-#define IRQ_ERROR                19
-#define IRQ_SPURIOUS                31
+#define IRQ_ERROR               19
+#define IRQ_SPURIOUS            31
 
 /* *
  * These are arbitrarily chosen, but with care not to overlap
@@ -52,7 +52,7 @@
     uint32_t reg_edi;
     uint32_t reg_esi;
     uint32_t reg_ebp;
-    uint32_t reg_oesp;            /* Useless */
+    uint32_t reg_oesp;          /* Useless */
     uint32_t reg_ebx;
     uint32_t reg_edx;
     uint32_t reg_ecx;
diff -Nru lab1/lab1-2013012291.md lab2/lab1-2013012291.md
--- lab1/lab1-2013012291.md	2017-03-04 17:16:24.508906871 +0800
+++ lab2/lab1-2013012291.md	1970-01-01 08:00:00.000000000 +0800
@@ -1,209 +0,0 @@
-# Lab 1
-
-- Why English?
-
-    Because installing pinyin in ubuntu is really painful......After all, English is the official language for OS and CS.
-
-## Ex1
-### List of knowledge and concept
-- compilation, linking, makefile, main boot loader.
-- qemu and gdb.
-- protection mode, GDT.
-- structure of harddisk, ELF format.
-- meanings of registers(ebp and eip), function call stack.
-- defination and function of interruption descriptor
-
-### How ucore.img is generated?
-
-- Compile kernel and bootloader respectively.
-
-    There are a lot of options for the GCC compiler, and the meanings can be found at the end of this ex.
-
-    With those options, the components are compiled to be suitable for IA-32 platform, with GDB debugging infomation, and without unnecessary protections like the canary.
-
-- Link the compiled object files.
-
-    By seperating compilation and linking we don't have to remake the whole project when the source files are changed.
-
-    There are also many options for ld command, which could also be found at the end of the ex.
-
-    The linking for the kernel uses a special script. The meaning of the script is detailed in the script file by comments. Frankly speaking I don't know much about the syntax of ld script. 
-
-    The linking for the bootloader is simpler. The linker have to set 'start' in boot/bootasm. S as the entry of the program and its address have to be set to 0x7C00 where CPU will find its second instruction.
-
-- Sign the bootblock.
-
-    Sign the bootblock using sign generated from tools/sign.c.
-
-    The effect is to set the last 2 bytes of the linked bootloader to be 'AA55'. This is necessary for a legal MBR.
-
-- Build the img.
-
-    Build img by dd command. To mimic a harddisk create an empty file with 10000 sectors first.
-
-    Then copy bootblock and kernel into the file subsequently.
-
-### What consists of a legal MBR?
-- 446 Bytes of bootstrap code.
-- 64 Bytes of partition info.
-- 2 Bytes of signature.
-
-### GCC options for compilation
-- -I indicate the first dir in which to find headers.
-- -fno-builtin do not use builtin functions (to prevent name collision).
-- -Wall enable all warnings.
-- -ggdb generate GDB debugging info.
-- -m32 set target machine CPU as 32bit.
-- -gstabs generate stabs debugging info.
-- -nostdinc do not search header in standard dirs.
-- -fno-stack-protector disable stack protector.
-- -Os optimize as long as the size of the file does not increase.
-
-### ld options (GNU linker)
-- -m emulate the indicated linker.
-- -nostdlib do not search lib in std. Only search those indicated in the command line.
-- -T specify a script file to control the linking process.
-- -o indicate linking object.
-- -N set text and data section to be readable and writable.
-- -e explicitly set the entry point of the program.
-- -Ttext locate specified address.
-
-## Ex2
-### Track from BIOS intructions.
-- Simply typing in 'make debug' under labcodes/lab1/ dir does not give the desired starting address 0xFFFF0. On the contrary, the starting address is 0x100000, the entrance of kernel rather than bootloader, which does not meet the requirement of the exercise.
-
-- So, qemu and GDB must start manually and stop before bootloader is executed.
-
-- To do this, first, start qemu using 'qemu-system-i386 -hda bin/ucore.img -parallel stdio -s -S'
-
-    The meaning of parameters:<br>
-    '-hda bin/ucore.img' means loading bin/ucore.img as the first hard drive.<br>
-    'parallel stdio' means redirecting parallel communication to stdio.<br>
-    '-s -S' makes qemu stop at the first instruction and wait for GDB command.
-    
-    Qemu will start in a different window and it's completely blank.
-
-- Then, start GDB in a different terminal using 'GDB obj/bootblock.o'. The parameter helps GDB to find symbols for the bootloader.
-- In the GDB interface, establish remote debugging by 'target remote localhost:1234'.
-
-    The connection is successfully established when 'Remote debugging using localhost:1234' shows. Current address is 0xFFFF0, but GDB can not resolve this. Indeed, The command is in BIOS and I have no idea how to show it in GDB.
-
-### Add a break point at 0x7C00 using 'b * 0x7C00'. Then test it.
-    
-- 'Breakpoint 1 at 0x7C00: file boot/bootasm.S, line 16.' shows, the break point is set successfully.
-
-- Typing 'c' to let the paused program continue. The program will stop at Breakpoint 1, the 16th line of boot/bootasm.S. The command is 'cli' which is to disable interruptions.
-
-- Some messages about the basic info of the system are shown in qemu window. They're probably generated by BIOS.
-
-### Single-step tracking of the code using 'step' and check the differences.
-
-- Typing 'layout asm' and GDB will display all asm instructions of the program. 
-
-    Bootblock.asm, bootasm.S and the disassembly provided by GDB are all slightly different from each other. A major difference is the format of instructions and registers. For example, in bootasm.S, all instuctions are carried out at word level and registers are 16 bits, while in bootblock.asm generated by disassembler, the suffixes of instructions are neglected and the prefixes of the registers are also strange. 
-
-    In most cases, those difference do not matter. What interests me most is 3 cases of %al, (%bx, %si) in the disassembly by GDB at protcseg+17, +22 and +27 respectively. I don't know what's their meanings yet.
-
-### Add customized break point and test it.
-
-- Tried to add a break point at the entrace of a function. Typing in 'break bootmain' and then 'c', The program stopped at 0x7D1E the entrace of bootmain function.
-
-## Ex3
-
-### Why and how to enable A20?
-
-- For backwards compatibility, A20 must be enabled manually to make 4G memory available to CPU.
-
-- The register controling the status of A20 is set by sending command to 8042 MCU. First tell the MCU you wish to write data by sending 0x61, then send 0xDF to set A20 bit.
-
-- Note you have to wait for input buffer not busy to send commands.
-
-### How to initialize GDT?
-
-- GDT is initialized before switching to protected mode by using lgdt command.
-    
-- The GDT is set to be "blank", which means virtual addresses is identical to physical addresses.
-
-### How to switch to protected mode?
-
-- The protected mode is set by setting certain bit of CR0 register. Fetch CR0 to %eax and manipulate the bits and then send it back and it's done.
-
-## Ex4
-
-### How the bootloader reads sectors of hard disk (HD)?
-
-- First wait for the HD to be ready by checking 0x1F7 port.
-- When it's ready, Send 4 bytes to 0x1F3~0x1F6 to inform the HD which sector to read.
-- Then instruct the HD to read.
-- Wait for HD to be ready again.
-- Read the content of the sector from port 0x1F0.
-
-### How the bootloader loads OS in ELF format?
-
-- Read the first page of the OS ELF file as the ELF header.
-- Check if it's valid by checking if the first 4 bytes of the file agrees with the ELF magic number.
-- Then read the rest of the ELF according to the program headers indicated by ELF header.
-
-## Ex5
-
-### The implementation 
-
-- Get current %ebp and %eip by implemented function.
-- Acquire stack info according to %ebp. The previous %ebp is stored at @ebp, the %eip to return is stored at @(ebp+1). 
-- And parameters for the stackframe are stored above the %eip one by one.
-- Next, to trace back to the previous stackframe, set %ebp and %eip to those stored at @ebp and @(ebp+1)
-
-### The meaning of the last line of output
-- %ebp
-
-    Value of %ebp and in the current frame. The base of the stackframe.
-
-- %eip
-
-    The address %eip would jump to after returning from current frame.
-
-- args
-
-    Value of parameters for the currently called function.
-
-- \<unknow\>
-
-    Because when calling the current function the kernel hasn't initialized, there's no stabbing.
-
-    So print_debuginfo() which relies on stabbing does not work and returns unknow.
-
-## Ex6
-
-### Info of IDT
-
-- Each item of IDT consists of 64 bits, aka 8 bytes. 
-
-- The entrance of interruption code is determined by 3 parts of the descriptor. 
-
-    First, the selector at 16bit~31bit determines the segment of the code.
-
-    Second, combining lower bits at 0bit~15bit and higher bits at 48bit~63bit gives the offset from the segment.
-
-### The implementation
-
-- Initialize idt[] using pre-defined macro SETGATE. 
-
-    The parameters, except for 'sel', actually hardly matter at this stage. However, I set my codes the same as those shown in the vedio.
-
-- Add sth in the interruption subroutine (ISR).
-
-    Just print sth.
-
-## Challenge
-
-- Switching rings actually means changing contents of registers. This could be achieved by inline asm, but it's not safe and less modulized.
-
-- A better way is to use interruption, as suggested in the code and lab book.
-
-- In the interruption ISR, change the contents of trapframe and when it's returned, the registers are set according to the ISR.
-
-- There are two ways to change the contents of a trapframe. The first one is to change in the current trapframe directly, and the second one is to build another trapframe and set current %esp to the new trapframe.
-
-    Both ways are applicable. The first way is not safe enough, but it's more efficient for it saves the time of copying. The second way is safer, but it must copy the current trapframe first, which is time and resources consuming.
-
-- To enable keyboard interactive mode switching, check input in the IRQ_KBD ISR. if it's '0' or '3', 'goto' corresponding mode switching ISR.
diff -Nru lab1/libs/atomic.h lab2/libs/atomic.h
--- lab1/libs/atomic.h	1970-01-01 08:00:00.000000000 +0800
+++ lab2/libs/atomic.h	2017-02-25 15:39:39.991783592 +0800
@@ -0,0 +1,57 @@
+#ifndef __LIBS_ATOMIC_H__
+#define __LIBS_ATOMIC_H__
+
+/* Atomic operations that C can't guarantee us. Useful for resource counting etc.. */
+
+static inline void set_bit(int nr, volatile void *addr) __attribute__((always_inline));
+static inline void clear_bit(int nr, volatile void *addr) __attribute__((always_inline));
+static inline void change_bit(int nr, volatile void *addr) __attribute__((always_inline));
+static inline bool test_bit(int nr, volatile void *addr) __attribute__((always_inline));
+
+/* *
+ * set_bit - Atomically set a bit in memory
+ * @nr:     the bit to set
+ * @addr:   the address to start counting from
+ *
+ * Note that @nr may be almost arbitrarily large; this function is not
+ * restricted to acting on a single-word quantity.
+ * */
+static inline void
+set_bit(int nr, volatile void *addr) {
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+}
+
+/* *
+ * clear_bit - Atomically clears a bit in memory
+ * @nr:     the bit to clear
+ * @addr:   the address to start counting from
+ * */
+static inline void
+clear_bit(int nr, volatile void *addr) {
+    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+}
+
+/* *
+ * change_bit - Atomically toggle a bit in memory
+ * @nr:     the bit to change
+ * @addr:   the address to start counting from
+ * */
+static inline void
+change_bit(int nr, volatile void *addr) {
+    asm volatile ("btcl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+}
+
+/* *
+ * test_bit - Determine whether a bit is set
+ * @nr:     the bit to test
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+    return oldbit != 0;
+}
+
+#endif /* !__LIBS_ATOMIC_H__ */
+
diff -Nru lab1/libs/elf.h lab2/libs/elf.h
--- lab1/libs/elf.h	2017-02-25 15:39:39.991783592 +0800
+++ lab2/libs/elf.h	2017-02-25 15:39:39.991783592 +0800
@@ -3,7 +3,7 @@
 
 #include <defs.h>
 
-#define ELF_MAGIC    0x464C457FU            // "\x7FELF" in little endian
+#define ELF_MAGIC   0x464C457FU         // "\x7FELF" in little endian
 
 /* file header */
 struct elfhdr {
diff -Nru lab1/libs/error.h lab2/libs/error.h
--- lab1/libs/error.h	2017-02-25 15:39:39.991783592 +0800
+++ lab2/libs/error.h	2017-02-25 15:39:39.991783592 +0800
@@ -2,12 +2,12 @@
 #define __LIBS_ERROR_H__
 
 /* kernel error codes -- keep in sync with list in lib/printfmt.c */
-#define E_UNSPECIFIED        1    // Unspecified or unknown problem
-#define E_BAD_PROC            2    // Process doesn't exist or otherwise
-#define E_INVAL                3    // Invalid parameter
-#define E_NO_MEM            4    // Request failed due to memory shortage
-#define E_NO_FREE_PROC        5    // Attempt to create a new process beyond
-#define E_FAULT                6    // Memory fault
+#define E_UNSPECIFIED       1   // Unspecified or unknown problem
+#define E_BAD_PROC          2   // Process doesn't exist or otherwise
+#define E_INVAL             3   // Invalid parameter
+#define E_NO_MEM            4   // Request failed due to memory shortage
+#define E_NO_FREE_PROC      5   // Attempt to create a new process beyond
+#define E_FAULT             6   // Memory fault
 
 /* the maximum allowed */
 #define MAXERROR            6
diff -Nru lab1/libs/list.h lab2/libs/list.h
--- lab1/libs/list.h	1970-01-01 08:00:00.000000000 +0800
+++ lab2/libs/list.h	2017-02-25 15:39:39.991783592 +0800
@@ -0,0 +1,163 @@
+#ifndef __LIBS_LIST_H__
+#define __LIBS_LIST_H__
+
+#ifndef __ASSEMBLER__
+
+#include <defs.h>
+
+/* *
+ * Simple doubly linked list implementation.
+ *
+ * Some of the internal functions ("__xxx") are useful when manipulating
+ * whole lists rather than single entries, as sometimes we already know
+ * the next/prev entries and we can generate better code by using them
+ * directly rather than using the generic single-entry routines.
+ * */
+
+struct list_entry {
+    struct list_entry *prev, *next;
+};
+
+typedef struct list_entry list_entry_t;
+
+static inline void list_init(list_entry_t *elm) __attribute__((always_inline));
+static inline void list_add(list_entry_t *listelm, list_entry_t *elm) __attribute__((always_inline));
+static inline void list_add_before(list_entry_t *listelm, list_entry_t *elm) __attribute__((always_inline));
+static inline void list_add_after(list_entry_t *listelm, list_entry_t *elm) __attribute__((always_inline));
+static inline void list_del(list_entry_t *listelm) __attribute__((always_inline));
+static inline void list_del_init(list_entry_t *listelm) __attribute__((always_inline));
+static inline bool list_empty(list_entry_t *list) __attribute__((always_inline));
+static inline list_entry_t *list_next(list_entry_t *listelm) __attribute__((always_inline));
+static inline list_entry_t *list_prev(list_entry_t *listelm) __attribute__((always_inline));
+
+static inline void __list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) __attribute__((always_inline));
+static inline void __list_del(list_entry_t *prev, list_entry_t *next) __attribute__((always_inline));
+
+/* *
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+}
+
+/* *
+ * list_add - add a new entry
+ * @listelm:    list head to add after
+ * @elm:        new entry to be added
+ *
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add(list_entry_t *listelm, list_entry_t *elm) {
+    list_add_after(listelm, elm);
+}
+
+/* *
+ * list_add_before - add a new entry
+ * @listelm:    list head to add before
+ * @elm:        new entry to be added
+ *
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+}
+
+/* *
+ * list_add_after - add a new entry
+ * @listelm:    list head to add after
+ * @elm:        new entry to be added
+ *
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+}
+
+/* *
+ * list_del - deletes entry from list
+ * @listelm:    the element to delete from the list
+ *
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+}
+
+/* *
+ * list_del_init - deletes entry from list and reinitialize it.
+ * @listelm:    the element to delete from the list.
+ *
+ * Note: list_empty() on @listelm returns true after this.
+ * */
+static inline void
+list_del_init(list_entry_t *listelm) {
+    list_del(listelm);
+    list_init(listelm);
+}
+
+/* *
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+}
+
+/* *
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+}
+
+/* *
+ * list_prev - get the previous entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_prev(list_entry_t *listelm) {
+    return listelm->prev;
+}
+
+/* *
+ * Insert a new entry between two known consecutive entries.
+ *
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+    elm->next = next;
+    elm->prev = prev;
+}
+
+/* *
+ * Delete a list entry by making the prev/next entries point to each other.
+ *
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+    next->prev = prev;
+}
+
+#endif /* !__ASSEMBLER__ */
+
+#endif /* !__LIBS_LIST_H__ */
+
diff -Nru lab1/libs/printfmt.c lab2/libs/printfmt.c
--- lab1/libs/printfmt.c	2017-02-25 15:39:39.991783592 +0800
+++ lab2/libs/printfmt.c	2017-02-25 15:39:39.991783592 +0800
@@ -15,23 +15,23 @@
  * */
 
 static const char * const error_string[MAXERROR + 1] = {
-    [0]                        NULL,
-    [E_UNSPECIFIED]            "unspecified error",
+    [0]                     NULL,
+    [E_UNSPECIFIED]         "unspecified error",
     [E_BAD_PROC]            "bad process",
-    [E_INVAL]                "invalid parameter",
-    [E_NO_MEM]                "out of memory",
+    [E_INVAL]               "invalid parameter",
+    [E_NO_MEM]              "out of memory",
     [E_NO_FREE_PROC]        "out of processes",
-    [E_FAULT]                "segmentation fault",
+    [E_FAULT]               "segmentation fault",
 };
 
 /* *
  * printnum - print a number (base <= 16) in reverse order
- * @putch:        specified putch function, print a single character
- * @putdat:        used by @putch function
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
  * @num:        the number will be printed
- * @base:        base for print, must be in [1, 16]
- * @width:         maximum number of digits, if the actual width is less than @width, use @padc instead
- * @padc:        character that padded on the left if the actual width is less than @width
+ * @base:       base for print, must be in [1, 16]
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
  * */
 static void
 printnum(void (*putch)(int, void*), void *putdat,
@@ -53,8 +53,8 @@
 
 /* *
  * getuint - get an unsigned int of various possible sizes from a varargs list
- * @ap:            a varargs list pointer
- * @lflag:        determines the size of the vararg that @ap points to
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
  * */
 static unsigned long long
 getuint(va_list *ap, int lflag) {
@@ -71,8 +71,8 @@
 
 /* *
  * getint - same as getuint but signed, we can't use getuint because of sign extension
- * @ap:            a varargs list pointer
- * @lflag:        determines the size of the vararg that @ap points to
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
  * */
 static long long
 getint(va_list *ap, int lflag) {
@@ -89,8 +89,8 @@
 
 /* *
  * printfmt - format a string and print it by using putch
- * @putch:        specified putch function, print a single character
- * @putdat:        used by @putch function
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
  * @fmt:        the format string to use
  * */
 void
@@ -105,10 +105,10 @@
 /* *
  * vprintfmt - format a string and print it by using putch, it's called with a va_list
  * instead of a variable number of arguments
- * @putch:        specified putch function, print a single character
- * @putdat:        used by @putch function
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
  * @fmt:        the format string to use
- * @ap:            arguments for the format string
+ * @ap:         arguments for the format string
  *
  * Call this function if you are already dealing with a va_list.
  * Or you probably want printfmt() instead.
@@ -277,15 +277,15 @@
 
 /* sprintbuf is used to save enough information of a buffer */
 struct sprintbuf {
-    char *buf;            // address pointer points to the first unused memory
-    char *ebuf;            // points the end of the buffer
+    char *buf;          // address pointer points to the first unused memory
+    char *ebuf;         // points the end of the buffer
     int cnt;            // the number of characters that have been placed in this buffer
 };
 
 /* *
  * sprintputch - 'print' a single character in a buffer
- * @ch:            the character will be printed
- * @b:            the buffer to place the character @ch
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
  * */
 static void
 sprintputch(int ch, struct sprintbuf *b) {
@@ -298,7 +298,7 @@
 /* *
  * snprintf - format a string and place it in a buffer
  * @str:        the buffer to place the result into
- * @size:        the size of buffer, including the trailing null space
+ * @size:       the size of buffer, including the trailing null space
  * @fmt:        the format string to use
  * */
 int
@@ -315,9 +315,9 @@
  * vsnprintf - format a string and place it in a buffer, it's called with a va_list
  * instead of a variable number of arguments
  * @str:        the buffer to place the result into
- * @size:        the size of buffer, including the trailing null space
+ * @size:       the size of buffer, including the trailing null space
  * @fmt:        the format string to use
- * @ap:            arguments for the format string
+ * @ap:         arguments for the format string
  *
  * The return value is the number of characters which would be generated for the
  * given input, excluding the trailing '\0'.
diff -Nru lab1/libs/string.c lab2/libs/string.c
--- lab1/libs/string.c	2017-02-25 15:39:39.991783592 +0800
+++ lab2/libs/string.c	2017-02-25 15:39:39.991783592 +0800
@@ -4,7 +4,7 @@
 /* *
  * strlen - calculate the length of the string @s, not including
  * the terminating '\0' character.
- * @s:        the input string
+ * @s:      the input string
  *
  * The strlen() function returns the length of string @s.
  * */
@@ -20,7 +20,7 @@
 /* *
  * strnlen - calculate the length of the string @s, not including
  * the terminating '\0' char acter, but at most @len.
- * @s:        the input string
+ * @s:      the input string
  * @len:    the max-length that function will scan
  *
  * Note that, this function looks only at the first @len characters
@@ -87,8 +87,8 @@
 
 /* *
  * strcmp - compares the string @s1 and @s2
- * @s1:        string to be compared
- * @s2:        string to be compared
+ * @s1:     string to be compared
+ * @s2:     string to be compared
  *
  * This function starts comparing the first character of each string. If
  * they are equal to each other, it continues with the following pairs until
@@ -114,9 +114,9 @@
 
 /* *
  * strncmp - compares up to @n characters of the string @s1 to those of the string @s2
- * @s1:        string to be compared
- * @s2:        string to be compared
- * @n:        maximum number of characters to compare
+ * @s1:     string to be compared
+ * @s2:     string to be compared
+ * @n:      maximum number of characters to compare
  *
  * This function starts comparing the first character of each string. If
  * they are equal to each other, it continues with the following pairs until
@@ -133,8 +133,8 @@
 
 /* *
  * strchr - locates first occurrence of character in string
- * @s:        the input string
- * @c:        character to be located
+ * @s:      the input string
+ * @c:      character to be located
  *
  * The strchr() function returns a pointer to the first occurrence of
  * character in @s. If the value is not found, the function returns 'NULL'.
@@ -152,8 +152,8 @@
 
 /* *
  * strfind - locates first occurrence of character in string
- * @s:        the input string
- * @c:        character to be located
+ * @s:      the input string
+ * @c:      character to be located
  *
  * The strfind() function is like strchr() except that if @c is
  * not found in @s, then it returns a pointer to the null byte at the
@@ -172,11 +172,11 @@
 
 /* *
  * strtol - converts string to long integer
- * @s:        the input string that contains the representation of an integer number
- * @endptr:    reference to an object of type char *, whose value is set by the
- *             function to the next character in @s after the numerical value. This
- *             parameter can also be a null pointer, in which case it is not used.
- * @base:    x
+ * @s:      the input string that contains the representation of an integer number
+ * @endptr: reference to an object of type char *, whose value is set by the
+ *          function to the next character in @s after the numerical value. This
+ *          parameter can also be a null pointer, in which case it is not used.
+ * @base:   x
  *
  * The function first discards as many whitespace characters as necessary until
  * the first non-whitespace character is found. Then, starting from this character,
@@ -261,9 +261,9 @@
 /* *
  * memset - sets the first @n bytes of the memory area pointed by @s
  * to the specified value @c.
- * @s:        pointer the the memory area to fill
- * @c:        value to set
- * @n:        number of bytes to be set to the value
+ * @s:      pointer the the memory area to fill
+ * @c:      value to set
+ * @n:      number of bytes to be set to the value
  *
  * The memset() function returns @s.
  * */
@@ -283,9 +283,9 @@
 /* *
  * memmove - copies the values of @n bytes from the location pointed by @src to
  * the memory area pointed by @dst. @src and @dst are allowed to overlap.
- * @dst        pointer to the destination array where the content is to be copied
- * @src        pointer to the source of data to by copied
- * @n:        number of bytes to copy
+ * @dst     pointer to the destination array where the content is to be copied
+ * @src     pointer to the source of data to by copied
+ * @n:      number of bytes to copy
  *
  * The memmove() function returns @dst.
  * */
@@ -313,9 +313,9 @@
 /* *
  * memcpy - copies the value of @n bytes from the location pointed by @src to
  * the memory area pointed by @dst.
- * @dst        pointer to the destination array where the content is to be copied
- * @src        pointer to the source of data to by copied
- * @n:        number of bytes to copy
+ * @dst     pointer to the destination array where the content is to be copied
+ * @src     pointer to the source of data to by copied
+ * @n:      number of bytes to copy
  *
  * The memcpy() returns @dst.
  *
@@ -340,9 +340,9 @@
 
 /* *
  * memcmp - compares two blocks of memory
- * @v1:        pointer to block of memory
- * @v2:        pointer to block of memory
- * @n:        number of bytes to compare
+ * @v1:     pointer to block of memory
+ * @v2:     pointer to block of memory
+ * @n:      number of bytes to compare
  *
  * The memcmp() functions returns an integral value indicating the
  * relationship between the content of the memory blocks:
diff -Nru lab1/libs/x86.h lab2/libs/x86.h
--- lab1/libs/x86.h	2017-02-25 15:39:39.991783592 +0800
+++ lab2/libs/x86.h	2017-02-25 15:39:39.991783592 +0800
@@ -3,63 +3,88 @@
 
 #include <defs.h>
 
-#define do_div(n, base) ({                                        \
-    unsigned long __upper, __low, __high, __mod, __base;        \
-    __base = (base);                                            \
-    asm("" : "=a" (__low), "=d" (__high) : "A" (n));            \
-    __upper = __high;                                            \
-    if (__high != 0) {                                            \
-        __upper = __high % __base;                                \
-        __high = __high / __base;                                \
-    }                                                            \
-    asm("divl %2" : "=a" (__low), "=d" (__mod)                    \
-        : "rm" (__base), "0" (__low), "1" (__upper));            \
-    asm("" : "=A" (n) : "a" (__low), "d" (__high));                \
-    __mod;                                                        \
- })
+#define do_div(n, base) ({                                          \
+            unsigned long __upper, __low, __high, __mod, __base;    \
+            __base = (base);                                        \
+            asm ("" : "=a" (__low), "=d" (__high) : "A" (n));       \
+            __upper = __high;                                       \
+            if (__high != 0) {                                      \
+                __upper = __high % __base;                          \
+                __high = __high / __base;                           \
+            }                                                       \
+            asm ("divl %2" : "=a" (__low), "=d" (__mod)             \
+                : "rm" (__base), "0" (__low), "1" (__upper));       \
+            asm ("" : "=A" (n) : "a" (__low), "d" (__high));        \
+            __mod;                                                  \
+        })
+
+#define barrier() __asm__ __volatile__ ("" ::: "memory")
 
 static inline uint8_t inb(uint16_t port) __attribute__((always_inline));
 static inline void insl(uint32_t port, void *addr, int cnt) __attribute__((always_inline));
 static inline void outb(uint16_t port, uint8_t data) __attribute__((always_inline));
 static inline void outw(uint16_t port, uint16_t data) __attribute__((always_inline));
+static inline void outsl(uint32_t port, const void *addr, int cnt) __attribute__((always_inline));
 static inline uint32_t read_ebp(void) __attribute__((always_inline));
+static inline void breakpoint(void) __attribute__((always_inline));
+static inline uint32_t read_dr(unsigned regnum) __attribute__((always_inline));
+static inline void write_dr(unsigned regnum, uint32_t value) __attribute__((always_inline));
 
 /* Pseudo-descriptors used for LGDT, LLDT(not used) and LIDT instructions. */
 struct pseudodesc {
     uint16_t pd_lim;        // Limit
-    uint32_t pd_base;        // Base address
+    uintptr_t pd_base;      // Base address
 } __attribute__ ((packed));
 
 static inline void lidt(struct pseudodesc *pd) __attribute__((always_inline));
 static inline void sti(void) __attribute__((always_inline));
 static inline void cli(void) __attribute__((always_inline));
 static inline void ltr(uint16_t sel) __attribute__((always_inline));
+static inline uint32_t read_eflags(void) __attribute__((always_inline));
+static inline void write_eflags(uint32_t eflags) __attribute__((always_inline));
+static inline void lcr0(uintptr_t cr0) __attribute__((always_inline));
+static inline void lcr3(uintptr_t cr3) __attribute__((always_inline));
+static inline uintptr_t rcr0(void) __attribute__((always_inline));
+static inline uintptr_t rcr1(void) __attribute__((always_inline));
+static inline uintptr_t rcr2(void) __attribute__((always_inline));
+static inline uintptr_t rcr3(void) __attribute__((always_inline));
+static inline void invlpg(void *addr) __attribute__((always_inline));
 
 static inline uint8_t
 inb(uint16_t port) {
     uint8_t data;
-    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port));
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
     return data;
 }
 
 static inline void
 insl(uint32_t port, void *addr, int cnt) {
     asm volatile (
-            "cld;"
-            "repne; insl;"
-            : "=D" (addr), "=c" (cnt)
-            : "d" (port), "0" (addr), "1" (cnt)
-            : "memory", "cc");
+        "cld;"
+        "repne; insl;"
+        : "=D" (addr), "=c" (cnt)
+        : "d" (port), "0" (addr), "1" (cnt)
+        : "memory", "cc");
 }
 
 static inline void
 outb(uint16_t port, uint8_t data) {
-    asm volatile ("outb %0, %1" :: "a" (data), "d" (port));
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
 }
 
 static inline void
 outw(uint16_t port, uint16_t data) {
-    asm volatile ("outw %0, %1" :: "a" (data), "d" (port));
+    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
+}
+
+static inline void
+outsl(uint32_t port, const void *addr, int cnt) {
+    asm volatile (
+        "cld;"
+        "repne; outsl;"
+        : "=S" (addr), "=c" (cnt)
+        : "d" (port), "0" (addr), "1" (cnt)
+        : "memory", "cc");
 }
 
 static inline uint32_t
@@ -70,8 +95,39 @@
 }
 
 static inline void
+breakpoint(void) {
+    asm volatile ("int $3");
+}
+
+static inline uint32_t
+read_dr(unsigned regnum) {
+    uint32_t value = 0;
+    switch (regnum) {
+    case 0: asm volatile ("movl %%db0, %0" : "=r" (value)); break;
+    case 1: asm volatile ("movl %%db1, %0" : "=r" (value)); break;
+    case 2: asm volatile ("movl %%db2, %0" : "=r" (value)); break;
+    case 3: asm volatile ("movl %%db3, %0" : "=r" (value)); break;
+    case 6: asm volatile ("movl %%db6, %0" : "=r" (value)); break;
+    case 7: asm volatile ("movl %%db7, %0" : "=r" (value)); break;
+    }
+    return value;
+}
+
+static void
+write_dr(unsigned regnum, uint32_t value) {
+    switch (regnum) {
+    case 0: asm volatile ("movl %0, %%db0" :: "r" (value)); break;
+    case 1: asm volatile ("movl %0, %%db1" :: "r" (value)); break;
+    case 2: asm volatile ("movl %0, %%db2" :: "r" (value)); break;
+    case 3: asm volatile ("movl %0, %%db3" :: "r" (value)); break;
+    case 6: asm volatile ("movl %0, %%db6" :: "r" (value)); break;
+    case 7: asm volatile ("movl %0, %%db7" :: "r" (value)); break;
+    }
+}
+
+static inline void
 lidt(struct pseudodesc *pd) {
-    asm volatile ("lidt (%0)" :: "r" (pd));
+    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
 }
 
 static inline void
@@ -81,12 +137,67 @@
 
 static inline void
 cli(void) {
-    asm volatile ("cli");
+    asm volatile ("cli" ::: "memory");
 }
 
 static inline void
 ltr(uint16_t sel) {
-    asm volatile ("ltr %0" :: "r" (sel));
+    asm volatile ("ltr %0" :: "r" (sel) : "memory");
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+    return eflags;
+}
+
+static inline void
+write_eflags(uint32_t eflags) {
+    asm volatile ("pushl %0; popfl" :: "r" (eflags));
+}
+
+static inline void
+lcr0(uintptr_t cr0) {
+    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
+}
+
+static inline void
+lcr3(uintptr_t cr3) {
+    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
+}
+
+static inline uintptr_t
+rcr0(void) {
+    uintptr_t cr0;
+    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
+    return cr0;
+}
+
+static inline uintptr_t
+rcr1(void) {
+    uintptr_t cr1;
+    asm volatile ("mov %%cr1, %0" : "=r" (cr1) :: "memory");
+    return cr1;
+}
+
+static inline uintptr_t
+rcr2(void) {
+    uintptr_t cr2;
+    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
+    return cr2;
+}
+
+static inline uintptr_t
+rcr3(void) {
+    uintptr_t cr3;
+    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
+    return cr3;
+}
+
+static inline void
+invlpg(void *addr) {
+    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
 }
 
 static inline int __strcmp(const char *s1, const char *s2) __attribute__((always_inline));
@@ -101,19 +212,19 @@
 __strcmp(const char *s1, const char *s2) {
     int d0, d1, ret;
     asm volatile (
-            "1: lodsb;"
-            "scasb;"
-            "jne 2f;"
-            "testb %%al, %%al;"
-            "jne 1b;"
-            "xorl %%eax, %%eax;"
-            "jmp 3f;"
-            "2: sbbl %%eax, %%eax;"
-            "orb $1, %%al;"
-            "3:"
-            : "=a" (ret), "=&S" (d0), "=&D" (d1)
-            : "1" (s1), "2" (s2)
-            : "memory");
+        "1: lodsb;"
+        "scasb;"
+        "jne 2f;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        "xorl %%eax, %%eax;"
+        "jmp 3f;"
+        "2: sbbl %%eax, %%eax;"
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
     return ret;
 }
 
@@ -125,12 +236,12 @@
 __strcpy(char *dst, const char *src) {
     int d0, d1, d2;
     asm volatile (
-            "1: lodsb;"
-            "stosb;"
-            "testb %%al, %%al;"
-            "jne 1b;"
-            : "=&S" (d0), "=&D" (d1), "=&a" (d2)
-            : "0" (src), "1" (dst) : "memory");
+        "1: lodsb;"
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
     return dst;
 }
 #endif /* __HAVE_ARCH_STRCPY */
@@ -141,10 +252,10 @@
 __memset(void *s, char c, size_t n) {
     int d0, d1;
     asm volatile (
-            "rep; stosb;"
-            : "=&c" (d0), "=&D" (d1)
-            : "0" (n), "a" (c), "1" (s)
-            : "memory");
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
     return s;
 }
 #endif /* __HAVE_ARCH_MEMSET */
@@ -158,12 +269,12 @@
     }
     int d0, d1, d2;
     asm volatile (
-            "std;"
-            "rep; movsb;"
-            "cld;"
-            : "=&c" (d0), "=&S" (d1), "=&D" (d2)
-            : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
-            : "memory");
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
     return dst;
 }
 #endif /* __HAVE_ARCH_MEMMOVE */
@@ -174,15 +285,15 @@
 __memcpy(void *dst, const void *src, size_t n) {
     int d0, d1, d2;
     asm volatile (
-            "rep; movsl;"
-            "movl %4, %%ecx;"
-            "andl $3, %%ecx;"
-            "jz 1f;"
-            "rep; movsb;"
-            "1:"
-            : "=&c" (d0), "=&D" (d1), "=&S" (d2)
-            : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
-            : "memory");
+        "rep; movsl;"
+        "movl %4, %%ecx;"
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
     return dst;
 }
 #endif /* __HAVE_ARCH_MEMCPY */
diff -Nru lab1/Makefile lab2/Makefile
--- lab1/Makefile	2017-02-25 15:39:39.991783592 +0800
+++ lab2/Makefile	2017-02-25 15:39:39.991783592 +0800
@@ -1,4 +1,4 @@
-PROJ	:= challenge
+PROJ	:= 5
 EMPTY	:=
 SPACE	:= $(EMPTY) $(EMPTY)
 SLASH	:= /
@@ -8,15 +8,15 @@
 #USELLVM := 1
 # try to infer the correct GCCPREFX
 ifndef GCCPREFIX
-GCCPREFIX := $(shell if i386-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/dev/null 2>&1; \
-	then echo 'i386-elf-'; \
+GCCPREFIX := $(shell if i386-ucore-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/dev/null 2>&1; \
+	then echo 'i386-ucore-elf-'; \
 	elif objdump -i 2>&1 | grep 'elf32-i386' >/dev/null 2>&1; \
 	then echo ''; \
 	else echo "***" 1>&2; \
-	echo "*** Error: Couldn't find an i386-elf version of GCC/binutils." 1>&2; \
-	echo "*** Is the directory with i386-elf-gcc in your PATH?" 1>&2; \
-	echo "*** If your i386-elf toolchain is installed with a command" 1>&2; \
-	echo "*** prefix other than 'i386-elf-', set your GCCPREFIX" 1>&2; \
+	echo "*** Error: Couldn't find an i386-ucore-elf version of GCC/binutils." 1>&2; \
+	echo "*** Is the directory with i386-ucore-elf-gcc in your PATH?" 1>&2; \
+	echo "*** If your i386-ucore-elf toolchain is installed with a command" 1>&2; \
+	echo "*** prefix other than 'i386-ucore-elf-', set your GCCPREFIX" 1>&2; \
 	echo "*** environment variable to that prefix and run 'make' again." 1>&2; \
 	echo "*** To turn off this error, run 'gmake GCCPREFIX= ...'." 1>&2; \
 	echo "***" 1>&2; exit 1; fi)
@@ -58,6 +58,7 @@
 CFLAGS	+= $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
 endif
 
+GDB		:= $(GCCPREFIX)gdb
 CTYPE	:= c S
 
 LD      := $(GCCPREFIX)ld
@@ -77,6 +78,9 @@
 TR		:= tr
 TOUCH	:= touch -c
 
+TAR		:= tar
+ZIP		:= gzip
+
 OBJDIR	:= obj
 BINDIR	:= bin
 
@@ -122,14 +126,17 @@
 KINCLUDE	+= kern/debug/ \
 			   kern/driver/ \
 			   kern/trap/ \
-			   kern/mm/
+			   kern/mm/ \
+			   kern/libs/ \
+			   kern/sync/
 
 KSRCDIR		+= kern/init \
 			   kern/libs \
 			   kern/debug \
 			   kern/driver \
 			   kern/trap \
-			   kern/mm
+			   kern/mm \
+			   kern/sync
 
 KCFLAGS		+= $(addprefix -I,$(KINCLUDE))
 
@@ -150,6 +157,20 @@
 
 $(call create_target,kernel)
 
+
+# create kernel_nopage target
+kernel_nopage = $(call totarget,kernel_nopage)
+
+$(kernel_nopage): tools/kernel_nopage.ld
+
+$(kernel_nopage): $(KOBJS)
+	@echo + ld $@
+	$(V)$(LD) $(LDFLAGS) -T tools/kernel_nopage.ld -o $@ $(KOBJS)
+	@$(OBJDUMP) -S $@ > $(call asmfile,kernel_nopage)
+	@$(OBJDUMP) -t $@ | $(SED) '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $(call symfile,kernel_nopage)
+
+$(call create_target,kernel)
+
 # -------------------------------------------------------------------
 
 # create bootblock
@@ -158,9 +179,9 @@
 
 bootblock = $(call totarget,bootblock)
 
-$(bootblock): $(call toobj,$(bootfiles)) | $(call totarget,sign)
+$(bootblock): $(call toobj,boot/bootasm.S) $(call toobj,$(bootfiles)) | $(call totarget,sign)
 	@echo + ld $@
-	$(V)$(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 $^ -o $(call toobj,bootblock)
+	$(V)$(LD) $(LDFLAGS) -N -T tools/boot.ld $^ -o $(call toobj,bootblock)
 	@$(OBJDUMP) -S $(call objfile,bootblock) > $(call asmfile,bootblock)
 	@$(OBJCOPY) -S -O binary $(call objfile,bootblock) $(call outfile,bootblock)
 	@$(call totarget,sign) $(call outfile,bootblock) $(bootblock)
@@ -178,7 +199,7 @@
 # create ucore.img
 UCOREIMG	:= $(call totarget,ucore.img)
 
-$(UCOREIMG): $(kernel) $(bootblock)
+$(UCOREIMG): $(kernel) $(bootblock) $(kernel_nopage)
 	$(V)dd if=/dev/zero of=$@ count=10000
 	$(V)dd if=$(bootblock) of=$@ conv=notrunc
 	$(V)dd if=$(kernel) of=$@ seek=1 conv=notrunc
@@ -189,8 +210,9 @@
 
 $(call finish_all)
 
-IGNORE_ALLDEPS	= clean \
-				  dist-clean \
+IGNORE_ALLDEPS	= gdb \
+				  clean \
+				  distclean \
 				  grade \
 				  touch \
 				  print-.+ \
@@ -206,31 +228,34 @@
 
 .DEFAULT_GOAL := TARGETS
 
+QEMUOPTS = -hda $(UCOREIMG)
+
 .PHONY: qemu qemu-nox debug debug-nox
 qemu-mon: $(UCOREIMG)
-	$(V)$(QEMU)  -no-reboot -monitor stdio -hda $< -serial null
+	$(V)$(QEMU)  -no-reboot -monitor stdio $(QEMUOPTS) -serial null
 qemu: $(UCOREIMG)
-	$(V)$(QEMU) -no-reboot -parallel stdio -hda $< -serial null
-log: $(UCOREIMG)
-	$(V)$(QEMU) -no-reboot -d int,cpu_reset  -D q.log -parallel stdio -hda $< -serial null
-qemu-nox: $(UCOREIMG)
-	$(V)$(QEMU)   -no-reboot -serial mon:stdio -hda $< -nographic
-TERMINAL        :=gnome-terminal
+	$(V)$(QEMU)  -no-reboot -parallel stdio $(QEMUOPTS) -serial null
+
+qemu-nox: targets
+	$(V)$(QEMU)  -no-reboot -serial mon:stdio $(QEMUOPTS) -nographic
+
+TERMINAL := gnome-terminal
+
 debug: $(UCOREIMG)
-	$(V)$(QEMU) -S -s -parallel stdio -hda $< -serial null &
+	$(V)$(QEMU) -S -s -parallel stdio $(QEMUOPTS) -serial null &
 	$(V)sleep 2
-	$(V)$(TERMINAL) -e "gdb -q -tui -x tools/gdbinit"
-	
+	$(V)$(TERMINAL) -e "$(GDB) -q -x tools/gdbinit"
+
 debug-nox: $(UCOREIMG)
-	$(V)$(QEMU) -S -s -serial mon:stdio -hda $< -nographic &
+	$(V)$(QEMU) -S -s -serial mon:stdio $(QEMUOPTS) -nographic &
 	$(V)sleep 2
-	$(V)$(TERMINAL) -e "gdb -q -x tools/gdbinit"
+	$(V)$(TERMINAL) -e "$(GDB) -q -x tools/gdbinit"
 
 .PHONY: grade touch
 
 GRADE_GDB_IN	:= .gdb.in
 GRADE_QEMU_OUT	:= .qemu.out
-HANDIN			:= proj$(PROJ)-handin.tar.gz
+HANDIN			:= lab2-handin.tar.gz
 
 TOUCH_FILES		:= kern/trap/trap.c
 
@@ -246,21 +271,19 @@
 print-%:
 	@echo $($(shell echo $(patsubst print-%,%,$@) | $(TR) [a-z] [A-Z]))
 
-.PHONY: clean dist-clean handin packall tags
+.PHONY: clean distclean handin tags
 clean:
 	$(V)$(RM) $(GRADE_GDB_IN) $(GRADE_QEMU_OUT) cscope* tags
-	-$(RM) -r $(OBJDIR) $(BINDIR)
-
-dist-clean: clean
-	-$(RM) $(HANDIN)
-
-handin: packall
-	@echo Please visit http://learn.tsinghua.edu.cn and upload $(HANDIN). Thanks!
+	$(V)$(RM) -r $(OBJDIR) $(BINDIR)
 
-packall: clean
-	@$(RM) -f $(HANDIN)
-	@tar -czf $(HANDIN) `find . -type f -o -type d | grep -v '^\.*$$' | grep -vF '$(HANDIN)'`
+distclean: clean
+	$(V)$(RM) $(HANDIN)
 
+handin: distclean
+	$(V)$(TAR) -cf - `find . -type f -o -type d | grep -v '^\.$$' | grep -v '/CVS/' \
+					| grep -v '/\.git/' | grep -v '/\.svn/' | grep -v "$(HANDIN)"` \
+					| $(ZIP) > $(HANDIN)
+					
 tags:
 	@echo TAGS ALL
 	$(V)rm -f cscope.files cscope.in.out cscope.out cscope.po.out tags
diff -Nru lab1/make.log lab2/make.log
--- lab1/make.log	2017-02-26 11:51:59.619095209 +0800
+++ lab2/make.log	1970-01-01 08:00:00.000000000 +0800
@@ -1,48 +0,0 @@
-+ cc kern/init/init.c
-gcc -Ikern/init/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/init/init.c -o obj/kern/init/init.o
-+ cc kern/libs/stdio.c
-gcc -Ikern/libs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/libs/stdio.c -o obj/kern/libs/stdio.o
-+ cc kern/libs/readline.c
-gcc -Ikern/libs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/libs/readline.c -o obj/kern/libs/readline.o
-+ cc kern/debug/panic.c
-gcc -Ikern/debug/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/debug/panic.c -o obj/kern/debug/panic.o
-+ cc kern/debug/kdebug.c
-gcc -Ikern/debug/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/debug/kdebug.c -o obj/kern/debug/kdebug.o
-+ cc kern/debug/kmonitor.c
-gcc -Ikern/debug/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/debug/kmonitor.c -o obj/kern/debug/kmonitor.o
-+ cc kern/driver/clock.c
-gcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/driver/clock.c -o obj/kern/driver/clock.o
-+ cc kern/driver/console.c
-gcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/driver/console.c -o obj/kern/driver/console.o
-+ cc kern/driver/picirq.c
-gcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/driver/picirq.c -o obj/kern/driver/picirq.o
-+ cc kern/driver/intr.c
-gcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/driver/intr.c -o obj/kern/driver/intr.o
-+ cc kern/trap/trap.c
-gcc -Ikern/trap/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/trap/trap.c -o obj/kern/trap/trap.o
-+ cc kern/trap/vectors.S
-gcc -Ikern/trap/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/trap/vectors.S -o obj/kern/trap/vectors.o
-+ cc kern/trap/trapentry.S
-gcc -Ikern/trap/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/trap/trapentry.S -o obj/kern/trap/trapentry.o
-+ cc kern/mm/pmm.c
-gcc -Ikern/mm/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/mm/pmm.c -o obj/kern/mm/pmm.o
-+ cc libs/string.c
-gcc -Ilibs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/  -c libs/string.c -o obj/libs/string.o
-+ cc libs/printfmt.c
-gcc -Ilibs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/  -c libs/printfmt.c -o obj/libs/printfmt.o
-+ ld bin/kernel
-ld -m    elf_i386 -nostdlib -T tools/kernel.ld -o bin/kernel  obj/kern/init/init.o obj/kern/libs/stdio.o obj/kern/libs/readline.o obj/kern/debug/panic.o obj/kern/debug/kdebug.o obj/kern/debug/kmonitor.o obj/kern/driver/clock.o obj/kern/driver/console.o obj/kern/driver/picirq.o obj/kern/driver/intr.o obj/kern/trap/trap.o obj/kern/trap/vectors.o obj/kern/trap/trapentry.o obj/kern/mm/pmm.o  obj/libs/string.o obj/libs/printfmt.o
-+ cc boot/bootasm.S
-gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootasm.S -o obj/boot/bootasm.o
-+ cc boot/bootmain.c
-gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootmain.c -o obj/boot/bootmain.o
-+ cc tools/sign.c
-gcc -Itools/ -g -Wall -O2 -c tools/sign.c -o obj/sign/tools/sign.o
-gcc -g -Wall -O2 obj/sign/tools/sign.o -o bin/sign
-+ ld bin/bootblock
-ld -m    elf_i386 -nostdlib -N -e start -Ttext 0x7C00 obj/boot/bootasm.o obj/boot/bootmain.o -o obj/bootblock.o
-'obj/bootblock.out' size: 488 bytes
-build 512 bytes boot sector: 'bin/bootblock' success!
-dd if=/dev/zero of=bin/ucore.img count=10000
-dd if=bin/bootblock of=bin/ucore.img conv=notrunc
-dd if=bin/kernel of=bin/ucore.img seek=1 conv=notrunc
Binary files lab1/projchallenge-handin.tar.gz and lab2/projchallenge-handin.tar.gz differ
diff -Nru lab1/tags lab2/tags
--- lab1/tags	1970-01-01 08:00:00.000000000 +0800
+++ lab2/tags	2017-03-07 16:17:34.175619537 +0800
@@ -0,0 +1,1146 @@
+!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
+!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
+!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
+!_TAG_PROGRAM_NAME	Exuberant Ctags	//
+!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
+!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
+.DEFAULT_GOAL	Makefile	/^.DEFAULT_GOAL := TARGETS$/;"	m
+ALLDEPS	Makefile	/^ALLDEPS	:=$/;"	m
+ALLOBJS	Makefile	/^ALLOBJS	:=$/;"	m
+ALT	kern/driver/console.c	260;"	d	file:
+AWK	Makefile	/^AWK		:= awk$/;"	m
+BINDIR	Makefile	/^BINDIR	:= bin$/;"	m
+BS_OCMD	kern/driver/kbdreg.h	23;"	d
+BUFSIZE	kern/libs/readline.c	3;"	d	file:
+C	kern/driver/console.c	323;"	d	file:
+CAPSLOCK	kern/driver/console.c	262;"	d	file:
+CC	Makefile	/^CC		:= $(GCCPREFIX)gcc$/;"	m
+CC	Makefile	/^CC		:= clang$/;"	m
+CFLAGS	Makefile	/^CFLAGS	:= -fno-builtin -Wall -g -m32 -mno-sse -nostdinc $(DEFS)$/;"	m
+CFLAGS	Makefile	/^CFLAGS	:= -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc $(DEFS)$/;"	m
+CGA_BASE	kern/driver/console.c	45;"	d	file:
+CGA_BUF	kern/driver/console.c	46;"	d	file:
+CMDBYTE	kern/driver/kbdreg.h	60;"	d
+COM1	kern/driver/console.c	21;"	d	file:
+COM_DLL	kern/driver/console.c	25;"	d	file:
+COM_DLM	kern/driver/console.c	26;"	d	file:
+COM_FCR	kern/driver/console.c	30;"	d	file:
+COM_IER	kern/driver/console.c	27;"	d	file:
+COM_IER_RDI	kern/driver/console.c	28;"	d	file:
+COM_IIR	kern/driver/console.c	29;"	d	file:
+COM_LCR	kern/driver/console.c	31;"	d	file:
+COM_LCR_DLAB	kern/driver/console.c	32;"	d	file:
+COM_LCR_WLEN8	kern/driver/console.c	33;"	d	file:
+COM_LSR	kern/driver/console.c	38;"	d	file:
+COM_LSR_DATA	kern/driver/console.c	39;"	d	file:
+COM_LSR_TSRE	kern/driver/console.c	41;"	d	file:
+COM_LSR_TXRDY	kern/driver/console.c	40;"	d	file:
+COM_MCR	kern/driver/console.c	34;"	d	file:
+COM_MCR_DTR	kern/driver/console.c	36;"	d	file:
+COM_MCR_OUT2	kern/driver/console.c	37;"	d	file:
+COM_MCR_RTS	kern/driver/console.c	35;"	d	file:
+COM_RX	kern/driver/console.c	23;"	d	file:
+COM_TX	kern/driver/console.c	24;"	d	file:
+CONSBUFSIZE	kern/driver/console.c	208;"	d	file:
+COPY	Makefile	/^COPY	:= cp$/;"	m
+CR0_AM	kern/mm/mmu.h	258;"	d
+CR0_CD	kern/mm/mmu.h	260;"	d
+CR0_EM	kern/mm/mmu.h	253;"	d
+CR0_ET	kern/mm/mmu.h	255;"	d
+CR0_MP	kern/mm/mmu.h	252;"	d
+CR0_NE	kern/mm/mmu.h	256;"	d
+CR0_NW	kern/mm/mmu.h	259;"	d
+CR0_PE	kern/mm/mmu.h	251;"	d
+CR0_PG	kern/mm/mmu.h	261;"	d
+CR0_TS	kern/mm/mmu.h	254;"	d
+CR0_WP	kern/mm/mmu.h	257;"	d
+CR4_DE	kern/mm/mmu.h	266;"	d
+CR4_MCE	kern/mm/mmu.h	264;"	d
+CR4_PCE	kern/mm/mmu.h	263;"	d
+CR4_PSE	kern/mm/mmu.h	265;"	d
+CR4_PVI	kern/mm/mmu.h	268;"	d
+CR4_TSD	kern/mm/mmu.h	267;"	d
+CR4_VME	kern/mm/mmu.h	269;"	d
+CRT_COLS	kern/driver/console.c	48;"	d	file:
+CRT_ROWS	kern/driver/console.c	47;"	d	file:
+CRT_SIZE	kern/driver/console.c	49;"	d	file:
+CTL	kern/driver/console.c	259;"	d	file:
+CTYPE	Makefile	/^CTYPE	:= c S$/;"	m
+ClearPageProperty	kern/mm/memlayout.h	114;"	d
+ClearPageReserved	kern/mm/memlayout.h	111;"	d
+DPL_KERNEL	kern/mm/memlayout.h	20;"	d
+DPL_USER	kern/mm/memlayout.h	21;"	d
+E0ESC	kern/driver/console.c	266;"	d	file:
+E820MAX	kern/mm/memlayout.h	81;"	d
+E820_ARM	kern/mm/memlayout.h	82;"	d
+E820_ARR	kern/mm/memlayout.h	83;"	d
+ELFHDR	boot/bootmain.c	34;"	d	file:
+ELF_MAGIC	libs/elf.h	6;"	d
+EMPTY	Makefile	/^EMPTY	:=$/;"	m
+E_BAD_PROC	libs/error.h	6;"	d
+E_FAULT	libs/error.h	10;"	d
+E_INVAL	libs/error.h	7;"	d
+E_NO_FREE_PROC	libs/error.h	9;"	d
+E_NO_MEM	libs/error.h	8;"	d
+E_UNSPECIFIED	libs/error.h	5;"	d
+FL_AC	kern/mm/mmu.h	22;"	d
+FL_AF	kern/mm/mmu.h	7;"	d
+FL_CF	kern/mm/mmu.h	5;"	d
+FL_DF	kern/mm/mmu.h	12;"	d
+FL_ID	kern/mm/mmu.h	25;"	d
+FL_IF	kern/mm/mmu.h	11;"	d
+FL_IOPL_0	kern/mm/mmu.h	15;"	d
+FL_IOPL_1	kern/mm/mmu.h	16;"	d
+FL_IOPL_2	kern/mm/mmu.h	17;"	d
+FL_IOPL_3	kern/mm/mmu.h	18;"	d
+FL_IOPL_MASK	kern/mm/mmu.h	14;"	d
+FL_NT	kern/mm/mmu.h	19;"	d
+FL_OF	kern/mm/mmu.h	13;"	d
+FL_PF	kern/mm/mmu.h	6;"	d
+FL_RF	kern/mm/mmu.h	20;"	d
+FL_SF	kern/mm/mmu.h	9;"	d
+FL_TF	kern/mm/mmu.h	10;"	d
+FL_VIF	kern/mm/mmu.h	23;"	d
+FL_VIP	kern/mm/mmu.h	24;"	d
+FL_VM	kern/mm/mmu.h	21;"	d
+FL_ZF	kern/mm/mmu.h	8;"	d
+GCCPREFIX	Makefile	/^GCCPREFIX := $(shell if i386-ucore-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >\/dev\/null 2>&1; \\$/;"	m
+GDB	Makefile	/^GDB		:= $(GCCPREFIX)gdb$/;"	m
+GD_KDATA	kern/mm/memlayout.h	15;"	d
+GD_KTEXT	kern/mm/memlayout.h	14;"	d
+GD_TSS	kern/mm/memlayout.h	18;"	d
+GD_UDATA	kern/mm/memlayout.h	17;"	d
+GD_UTEXT	kern/mm/memlayout.h	16;"	d
+GRADE_GDB_IN	Makefile	/^GRADE_GDB_IN	:= .gdb.in$/;"	m
+GRADE_QEMU_OUT	Makefile	/^GRADE_QEMU_OUT	:= .qemu.out$/;"	m
+HANDIN	Makefile	/^HANDIN			:= lab2-handin.tar.gz$/;"	m
+HOSTCC	Makefile	/^HOSTCC		:= clang$/;"	m
+HOSTCC	Makefile	/^HOSTCC		:= gcc$/;"	m
+HOSTCFLAGS	Makefile	/^HOSTCFLAGS	:= -g -Wall -O2$/;"	m
+IA32flags	kern/trap/trap.c	/^static const char *IA32flags[] = {$/;"	v	file:
+IGNORE_ALLDEPS	Makefile	/^IGNORE_ALLDEPS	= gdb \\$/;"	m
+IO_PIC1	kern/driver/picirq.c	6;"	d	file:
+IO_PIC2	kern/driver/picirq.c	7;"	d	file:
+IO_TIMER1	kern/driver/clock.c	11;"	d	file:
+IRQ_COM1	kern/trap/trap.h	37;"	d
+IRQ_ERROR	kern/trap/trap.h	40;"	d
+IRQ_IDE1	kern/trap/trap.h	38;"	d
+IRQ_IDE2	kern/trap/trap.h	39;"	d
+IRQ_KBD	kern/trap/trap.h	36;"	d
+IRQ_OFFSET	kern/driver/picirq.h	7;"	d
+IRQ_OFFSET	kern/trap/trap.h	33;"	d
+IRQ_SLAVE	kern/driver/picirq.c	9;"	d	file:
+IRQ_SPURIOUS	kern/trap/trap.h	41;"	d
+IRQ_TIMER	kern/trap/trap.h	35;"	d
+KADDR	kern/mm/pmm.h	65;"	d
+KBCMDP	kern/driver/kbdreg.h	29;"	d
+KBC_AUXDISABLE	kern/driver/kbdreg.h	32;"	d
+KBC_AUXECHO	kern/driver/kbdreg.h	36;"	d
+KBC_AUXENABLE	kern/driver/kbdreg.h	33;"	d
+KBC_AUXTEST	kern/driver/kbdreg.h	34;"	d
+KBC_AUXWRITE	kern/driver/kbdreg.h	37;"	d
+KBC_DISABLE	kern/driver/kbdreg.h	66;"	d
+KBC_ECHO	kern/driver/kbdreg.h	71;"	d
+KBC_ENABLE	kern/driver/kbdreg.h	67;"	d
+KBC_KBDDISABLE	kern/driver/kbdreg.h	40;"	d
+KBC_KBDECHO	kern/driver/kbdreg.h	35;"	d
+KBC_KBDENABLE	kern/driver/kbdreg.h	41;"	d
+KBC_KBDTEST	kern/driver/kbdreg.h	39;"	d
+KBC_MODEIND	kern/driver/kbdreg.h	70;"	d
+KBC_PULSE0	kern/driver/kbdreg.h	42;"	d
+KBC_PULSE1	kern/driver/kbdreg.h	43;"	d
+KBC_PULSE2	kern/driver/kbdreg.h	44;"	d
+KBC_PULSE3	kern/driver/kbdreg.h	45;"	d
+KBC_RAMREAD	kern/driver/kbdreg.h	30;"	d
+KBC_RAMWRITE	kern/driver/kbdreg.h	31;"	d
+KBC_RESEND	kern/driver/kbdreg.h	64;"	d
+KBC_RESET	kern/driver/kbdreg.h	63;"	d
+KBC_SELFTEST	kern/driver/kbdreg.h	38;"	d
+KBC_SETDEFAULT	kern/driver/kbdreg.h	65;"	d
+KBC_SETTABLE	kern/driver/kbdreg.h	69;"	d
+KBC_TYPEMATIC	kern/driver/kbdreg.h	68;"	d
+KBDATAP	kern/driver/kbdreg.h	47;"	d
+KBOUTP	kern/driver/kbdreg.h	48;"	d
+KBR_ACK	kern/driver/kbdreg.h	76;"	d
+KBR_BREAK	kern/driver/kbdreg.h	79;"	d
+KBR_ECHO	kern/driver/kbdreg.h	81;"	d
+KBR_EXTENDED	kern/driver/kbdreg.h	74;"	d
+KBR_FAILURE	kern/driver/kbdreg.h	78;"	d
+KBR_OVERRUN	kern/driver/kbdreg.h	77;"	d
+KBR_RESEND	kern/driver/kbdreg.h	75;"	d
+KBR_RSTDONE	kern/driver/kbdreg.h	80;"	d
+KBSTATP	kern/driver/kbdreg.h	19;"	d
+KBS_DIB	kern/driver/kbdreg.h	20;"	d
+KBS_IBF	kern/driver/kbdreg.h	21;"	d
+KBS_NOSEC	kern/driver/kbdreg.h	24;"	d
+KBS_PERR	kern/driver/kbdreg.h	27;"	d
+KBS_RERR	kern/driver/kbdreg.h	26;"	d
+KBS_TERR	kern/driver/kbdreg.h	25;"	d
+KBS_WARM	kern/driver/kbdreg.h	22;"	d
+KC8_CPU	kern/driver/kbdreg.h	57;"	d
+KC8_IGNSEC	kern/driver/kbdreg.h	56;"	d
+KC8_KDISABLE	kern/driver/kbdreg.h	55;"	d
+KC8_KENABLE	kern/driver/kbdreg.h	59;"	d
+KC8_MDISABLE	kern/driver/kbdreg.h	54;"	d
+KC8_MENABLE	kern/driver/kbdreg.h	58;"	d
+KC8_TRANS	kern/driver/kbdreg.h	53;"	d
+KERNBASE	kern/mm/memlayout.h	56;"	d
+KERNEL_CS	kern/mm/memlayout.h	23;"	d
+KERNEL_DS	kern/mm/memlayout.h	24;"	d
+KERNTOP	kern/mm/memlayout.h	58;"	d
+KEY_DEL	kern/driver/kbdreg.h	14;"	d
+KEY_DN	kern/driver/kbdreg.h	8;"	d
+KEY_END	kern/driver/kbdreg.h	6;"	d
+KEY_HOME	kern/driver/kbdreg.h	5;"	d
+KEY_INS	kern/driver/kbdreg.h	13;"	d
+KEY_LF	kern/driver/kbdreg.h	9;"	d
+KEY_PGDN	kern/driver/kbdreg.h	12;"	d
+KEY_PGUP	kern/driver/kbdreg.h	11;"	d
+KEY_RT	kern/driver/kbdreg.h	10;"	d
+KEY_UP	kern/driver/kbdreg.h	7;"	d
+KMEMSIZE	kern/mm/memlayout.h	57;"	d
+KOBJS	Makefile	/^KOBJS	= $(call read_packet,kernel libs)$/;"	m
+KSTACKPAGE	kern/mm/memlayout.h	68;"	d
+KSTACKSIZE	kern/mm/memlayout.h	69;"	d
+K_LDCMDBYTE	kern/driver/kbdreg.h	51;"	d
+K_RDCMDBYTE	kern/driver/kbdreg.h	50;"	d
+LD	Makefile	/^LD      := $(GCCPREFIX)ld$/;"	m
+LDFLAGS	Makefile	/^LDFLAGS	:= -m $(shell $(LD) -V | grep elf_i386 2>\/dev\/null)$/;"	m
+LPTPORT	kern/driver/console.c	51;"	d	file:
+MAKEOPTS	Makefile	/^MAKEOPTS		:= --quiet --no-print-directory$/;"	m
+MAXARGS	kern/debug/kmonitor.c	33;"	d	file:
+MAXERROR	libs/error.h	13;"	d
+MKDIR	Makefile	/^MKDIR   := mkdir -p$/;"	m
+MONO_BASE	kern/driver/console.c	43;"	d	file:
+MONO_BUF	kern/driver/console.c	44;"	d	file:
+MV	Makefile	/^MV		:= mv$/;"	m
+NCOMMANDS	kern/debug/kmonitor.c	29;"	d	file:
+NO	kern/driver/console.c	256;"	d	file:
+NPDEENTRY	kern/mm/mmu.h	223;"	d
+NPTEENTRY	kern/mm/mmu.h	224;"	d
+NULL	libs/defs.h	5;"	d
+NUMLOCK	kern/driver/console.c	263;"	d	file:
+N_BCOMM	kern/debug/stab.h	39;"	d
+N_BINCL	kern/debug/stab.h	31;"	d
+N_BSLINE	kern/debug/stab.h	27;"	d
+N_DSLINE	kern/debug/stab.h	26;"	d
+N_ECOML	kern/debug/stab.h	41;"	d
+N_ECOMM	kern/debug/stab.h	40;"	d
+N_EINCL	kern/debug/stab.h	34;"	d
+N_ENTRY	kern/debug/stab.h	35;"	d
+N_EXCL	kern/debug/stab.h	37;"	d
+N_FNAME	kern/debug/stab.h	18;"	d
+N_FUN	kern/debug/stab.h	19;"	d
+N_GSYM	kern/debug/stab.h	17;"	d
+N_LBRAC	kern/debug/stab.h	36;"	d
+N_LCSYM	kern/debug/stab.h	21;"	d
+N_LENG	kern/debug/stab.h	42;"	d
+N_LSYM	kern/debug/stab.h	30;"	d
+N_MAIN	kern/debug/stab.h	22;"	d
+N_PC	kern/debug/stab.h	23;"	d
+N_PSYM	kern/debug/stab.h	33;"	d
+N_RBRAC	kern/debug/stab.h	38;"	d
+N_RSYM	kern/debug/stab.h	24;"	d
+N_SLINE	kern/debug/stab.h	25;"	d
+N_SO	kern/debug/stab.h	29;"	d
+N_SOL	kern/debug/stab.h	32;"	d
+N_SSYM	kern/debug/stab.h	28;"	d
+N_STSYM	kern/debug/stab.h	20;"	d
+OBJCOPY	Makefile	/^OBJCOPY := $(GCCPREFIX)objcopy$/;"	m
+OBJDIR	Makefile	/^OBJDIR	:= obj$/;"	m
+OBJDUMP	Makefile	/^OBJDUMP := $(GCCPREFIX)objdump$/;"	m
+OBJPREFIX	tools/function.mk	/^OBJPREFIX	:= __objs_$/;"	m
+PADDR	kern/mm/pmm.h	53;"	d
+PDE_ADDR	kern/mm/mmu.h	220;"	d
+PDX	kern/mm/mmu.h	204;"	d
+PDXSHIFT	kern/mm/mmu.h	232;"	d
+PGADDR	kern/mm/mmu.h	216;"	d
+PGOFF	kern/mm/mmu.h	213;"	d
+PGSHIFT	kern/mm/mmu.h	227;"	d
+PGSIZE	kern/mm/mmu.h	226;"	d
+PG_property	kern/mm/memlayout.h	108;"	d
+PG_reserved	kern/mm/memlayout.h	107;"	d
+PPN	kern/mm/mmu.h	210;"	d
+PROJ	Makefile	/^PROJ	:= 5$/;"	m
+PTE_A	kern/mm/mmu.h	240;"	d
+PTE_ADDR	kern/mm/mmu.h	219;"	d
+PTE_AVAIL	kern/mm/mmu.h	244;"	d
+PTE_D	kern/mm/mmu.h	241;"	d
+PTE_MBZ	kern/mm/mmu.h	243;"	d
+PTE_P	kern/mm/mmu.h	235;"	d
+PTE_PCD	kern/mm/mmu.h	239;"	d
+PTE_PS	kern/mm/mmu.h	242;"	d
+PTE_PWT	kern/mm/mmu.h	238;"	d
+PTE_U	kern/mm/mmu.h	237;"	d
+PTE_USER	kern/mm/mmu.h	248;"	d
+PTE_W	kern/mm/mmu.h	236;"	d
+PTSHIFT	kern/mm/mmu.h	229;"	d
+PTSIZE	kern/mm/mmu.h	228;"	d
+PTX	kern/mm/mmu.h	207;"	d
+PTXSHIFT	kern/mm/mmu.h	231;"	d
+Page	kern/mm/memlayout.h	/^struct Page {$/;"	s
+PageProperty	kern/mm/memlayout.h	115;"	d
+PageReserved	kern/mm/memlayout.h	112;"	d
+QEMU	Makefile	/^QEMU := $(shell if which qemu-system-i386 > \/dev\/null; \\$/;"	m
+QEMUOPTS	Makefile	/^QEMUOPTS = -hda $(UCOREIMG)$/;"	m
+REALLOC	kern/init/entry.S	/^#define REALLOC(x) (x - KERNBASE)$/;"	d
+RM	Makefile	/^RM		:= rm -f$/;"	m
+ROUNDDOWN	libs/defs.h	43;"	d
+ROUNDUP	libs/defs.h	49;"	d
+SCROLLLOCK	kern/driver/console.c	264;"	d	file:
+SECTSIZE	boot/bootmain.c	33;"	d	file:
+SED	Makefile	/^SED		:= sed$/;"	m
+SEG	kern/mm/mmu.h	131;"	d
+SEGTSS	kern/mm/mmu.h	139;"	d
+SEG_ASM	boot/asm.h	11;"	d
+SEG_ASM	kern/mm/mmu.h	55;"	d
+SEG_KDATA	kern/mm/memlayout.h	8;"	d
+SEG_KTEXT	kern/mm/memlayout.h	7;"	d
+SEG_NULL	kern/mm/mmu.h	128;"	d
+SEG_NULL	kern/mm/mmu.h	51;"	d
+SEG_NULLASM	boot/asm.h	7;"	d
+SEG_TSS	kern/mm/memlayout.h	11;"	d
+SEG_UDATA	kern/mm/memlayout.h	10;"	d
+SEG_UTEXT	kern/mm/memlayout.h	9;"	d
+SETCALLGATE	kern/mm/mmu.h	99;"	d
+SETGATE	kern/mm/mmu.h	86;"	d
+SH	Makefile	/^SH		:= sh$/;"	m
+SHIFT	kern/driver/console.c	258;"	d	file:
+SLASH	Makefile	/^SLASH	:= \/$/;"	m
+SPACE	Makefile	/^SPACE	:= $(EMPTY) $(EMPTY)$/;"	m
+STACKFRAME_DEPTH	kern/debug/kdebug.c	11;"	d	file:
+STA_A	boot/asm.h	23;"	d
+STA_A	kern/mm/mmu.h	33;"	d
+STA_C	boot/asm.h	20;"	d
+STA_C	kern/mm/mmu.h	30;"	d
+STA_E	boot/asm.h	19;"	d
+STA_E	kern/mm/mmu.h	29;"	d
+STA_R	boot/asm.h	22;"	d
+STA_R	kern/mm/mmu.h	32;"	d
+STA_W	boot/asm.h	21;"	d
+STA_W	kern/mm/mmu.h	31;"	d
+STA_X	boot/asm.h	18;"	d
+STA_X	kern/mm/mmu.h	28;"	d
+STS_CG16	kern/mm/mmu.h	39;"	d
+STS_CG32	kern/mm/mmu.h	45;"	d
+STS_IG16	kern/mm/mmu.h	41;"	d
+STS_IG32	kern/mm/mmu.h	46;"	d
+STS_LDT	kern/mm/mmu.h	37;"	d
+STS_T16A	kern/mm/mmu.h	36;"	d
+STS_T16B	kern/mm/mmu.h	38;"	d
+STS_T32A	kern/mm/mmu.h	43;"	d
+STS_T32B	kern/mm/mmu.h	44;"	d
+STS_TG	kern/mm/mmu.h	40;"	d
+STS_TG16	kern/mm/mmu.h	42;"	d
+STS_TG32	kern/mm/mmu.h	47;"	d
+SetPageProperty	kern/mm/memlayout.h	113;"	d
+SetPageReserved	kern/mm/memlayout.h	110;"	d
+TAR	Makefile	/^TAR		:= tar$/;"	m
+TARGETS	Makefile	/^TARGETS	:=$/;"	m
+TERMINAL	Makefile	/^TERMINAL := gnome-terminal$/;"	m
+TICK_NUM	kern/trap/trap.c	12;"	d	file:
+TIMER_16BIT	kern/driver/clock.c	24;"	d	file:
+TIMER_DIV	kern/driver/clock.c	19;"	d	file:
+TIMER_FREQ	kern/driver/clock.c	18;"	d	file:
+TIMER_MODE	kern/driver/clock.c	21;"	d	file:
+TIMER_RATEGEN	kern/driver/clock.c	23;"	d	file:
+TIMER_SEL0	kern/driver/clock.c	22;"	d	file:
+TOUCH	Makefile	/^TOUCH	:= touch -c$/;"	m
+TOUCH_FILES	Makefile	/^TOUCH_FILES		:= kern\/trap\/trap.c$/;"	m
+TR	Makefile	/^TR		:= tr$/;"	m
+T_ALIGN	kern/trap/trap.h	26;"	d
+T_BOUND	kern/trap/trap.h	14;"	d
+T_BRKPT	kern/trap/trap.h	12;"	d
+T_DBLFLT	kern/trap/trap.h	17;"	d
+T_DEBUG	kern/trap/trap.h	10;"	d
+T_DEVICE	kern/trap/trap.h	16;"	d
+T_DIVIDE	kern/trap/trap.h	9;"	d
+T_FPERR	kern/trap/trap.h	25;"	d
+T_GPFLT	kern/trap/trap.h	22;"	d
+T_ILLOP	kern/trap/trap.h	15;"	d
+T_MCHK	kern/trap/trap.h	27;"	d
+T_NMI	kern/trap/trap.h	11;"	d
+T_OFLOW	kern/trap/trap.h	13;"	d
+T_PGFLT	kern/trap/trap.h	23;"	d
+T_SEGNP	kern/trap/trap.h	20;"	d
+T_SIMDERR	kern/trap/trap.h	28;"	d
+T_STACK	kern/trap/trap.h	21;"	d
+T_SWITCH_TOK	kern/trap/trap.h	48;"	d
+T_SWITCH_TOU	kern/trap/trap.h	47;"	d
+T_SYSCALL	kern/trap/trap.h	30;"	d
+T_TSS	kern/trap/trap.h	19;"	d
+UCOREIMG	Makefile	/^UCOREIMG	:= $(call totarget,ucore.img)$/;"	m
+USER_CS	kern/mm/memlayout.h	25;"	d
+USER_DS	kern/mm/memlayout.h	26;"	d
+V	Makefile	/^V       := @$/;"	m
+VPT	kern/mm/memlayout.h	66;"	d
+WHITESPACE	kern/debug/kmonitor.c	34;"	d	file:
+ZIP	Makefile	/^ZIP		:= gzip$/;"	m
+__BOOT_ASM_H__	boot/asm.h	2;"	d
+__HAVE_ARCH_MEMCPY	libs/x86.h	283;"	d
+__HAVE_ARCH_MEMMOVE	libs/x86.h	264;"	d
+__HAVE_ARCH_MEMSET	libs/x86.h	250;"	d
+__HAVE_ARCH_STRCMP	libs/x86.h	210;"	d
+__HAVE_ARCH_STRCPY	libs/x86.h	234;"	d
+__KERN_DEBUG_ASSERT_H__	kern/debug/assert.h	2;"	d
+__KERN_DEBUG_KDEBUG_H__	kern/debug/kdebug.h	2;"	d
+__KERN_DEBUG_MONITOR_H__	kern/debug/kmonitor.h	2;"	d
+__KERN_DEBUG_STAB_H__	kern/debug/stab.h	2;"	d
+__KERN_DRIVER_CLOCK_H__	kern/driver/clock.h	2;"	d
+__KERN_DRIVER_CONSOLE_H__	kern/driver/console.h	2;"	d
+__KERN_DRIVER_INTR_H__	kern/driver/intr.h	2;"	d
+__KERN_DRIVER_KBDREG_H__	kern/driver/kbdreg.h	2;"	d
+__KERN_DRIVER_PICIRQ_H__	kern/driver/picirq.h	2;"	d
+__KERN_MM_DEFAULT_PMM_H__	kern/mm/default_pmm.h	2;"	d
+__KERN_MM_MEMLAYOUT_H__	kern/mm/memlayout.h	2;"	d
+__KERN_MM_MMU_H__	kern/mm/mmu.h	2;"	d
+__KERN_MM_PMM_H__	kern/mm/pmm.h	2;"	d
+__KERN_SYNC_SYNC_H__	kern/sync/sync.h	2;"	d
+__KERN_TRAP_TRAP_H__	kern/trap/trap.h	2;"	d
+__LIBS_ATOMIC_H__	libs/atomic.h	2;"	d
+__LIBS_DEFS_H__	libs/defs.h	2;"	d
+__LIBS_ELF_H__	libs/elf.h	2;"	d
+__LIBS_ERROR_H__	libs/error.h	2;"	d
+__LIBS_LIST_H__	libs/list.h	2;"	d
+__LIBS_STDARG_H__	libs/stdarg.h	2;"	d
+__LIBS_STDIO_H__	libs/stdio.h	2;"	d
+__LIBS_STRING_H__	libs/string.h	2;"	d
+__LIBS_X86_H__	libs/x86.h	2;"	d
+__alltraps	kern/trap/trapentry.S	/^__alltraps:$/;"	l
+__always_inline	libs/defs.h	8;"	d
+__gdt	kern/init/entry.S	/^__gdt:$/;"	l
+__gdtdesc	kern/init/entry.S	/^__gdtdesc:$/;"	l
+__intr_restore	kern/sync/sync.h	/^__intr_restore(bool flag) {$/;"	f
+__intr_save	kern/sync/sync.h	/^__intr_save(void) {$/;"	f
+__list_add	libs/list.h	/^__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {$/;"	f
+__list_del	libs/list.h	/^__list_del(list_entry_t *prev, list_entry_t *next) {$/;"	f
+__memcpy	libs/x86.h	/^__memcpy(void *dst, const void *src, size_t n) {$/;"	f
+__memmove	libs/x86.h	/^__memmove(void *dst, const void *src, size_t n) {$/;"	f
+__memset	libs/x86.h	/^__memset(void *s, char c, size_t n) {$/;"	f
+__noinline	libs/defs.h	9;"	d
+__noreturn	libs/defs.h	10;"	d
+__panic	kern/debug/panic.c	/^__panic(const char *file, int line, const char *fmt, ...) {$/;"	f
+__strcmp	libs/x86.h	/^__strcmp(const char *s1, const char *s2) {$/;"	f
+__strcpy	libs/x86.h	/^__strcpy(char *dst, const char *src) {$/;"	f
+__trapret	kern/trap/trapentry.S	/^__trapret:$/;"	l
+__vectors	kern/trap/vectors.S	/^__vectors:$/;"	l
+__warn	kern/debug/panic.c	/^__warn(const char *file, int line, const char *fmt, ...) {$/;"	f
+add_dependency	tools/function.mk	/^add_dependency = $(eval $(1): $(2))$/;"	m
+add_files	tools/function.mk	/^add_files = $(eval $(call do_add_files_to_packet,$(1),$(2),$(3),$(4),$(5)))$/;"	m
+add_files_cc	Makefile	/^add_files_cc = $(call add_files,$(1),$(CC),$(CFLAGS) $(3),$(2),$(4))$/;"	m
+add_files_host	Makefile	/^add_files_host = $(call add_files,$(1),$(HOSTCC),$(HOSTCFLAGS),$(2),$(3))$/;"	m
+add_objs	tools/function.mk	/^add_objs = $(eval $(call do_add_objs_to_packet,$(1),$(2)))$/;"	m
+addr	kern/mm/memlayout.h	/^        uint64_t addr;$/;"	m	struct:e820map::__anon1
+addr_6845	kern/driver/console.c	/^static uint16_t addr_6845;$/;"	v	file:
+alloc_page	kern/mm/pmm.h	35;"	d
+alloc_pages	kern/mm/pmm.c	/^alloc_pages(size_t n) {$/;"	f
+alloc_pages	kern/mm/pmm.h	/^    struct Page *(*alloc_pages)(size_t n);            \/\/ allocate >=n pages, depend on the allocation algorithm $/;"	m	struct:pmm_manager	typeref:struct:pmm_manager::alloc_pages
+asmfile	Makefile	/^asmfile = $(call cgtype,$(call toobj,$(1)),o,asm)$/;"	m
+assert	kern/debug/assert.h	15;"	d
+barrier	libs/x86.h	21;"	d
+basic_check	kern/mm/default_pmm.c	/^basic_check(void) {$/;"	f	file:
+bool	libs/defs.h	/^typedef int bool;$/;"	t
+boot_alloc_page	kern/mm/pmm.c	/^boot_alloc_page(void) {$/;"	f	file:
+boot_cr3	kern/mm/pmm.c	/^uintptr_t boot_cr3;$/;"	v
+boot_map_segment	kern/mm/pmm.c	/^boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {$/;"	f	file:
+boot_pgdir	kern/mm/pmm.c	/^pde_t *boot_pgdir = NULL;$/;"	v
+bootblock	Makefile	/^bootblock = $(call totarget,bootblock)$/;"	m
+bootfiles	Makefile	/^bootfiles = $(call listf_cc,boot)$/;"	m
+bootmain	boot/bootmain.c	/^bootmain(void) {$/;"	f
+bootstack	kern/init/entry.S	/^bootstack:$/;"	l
+bootstacktop	kern/init/entry.S	/^bootstacktop:$/;"	l
+breakpoint	libs/x86.h	/^breakpoint(void) {$/;"	f
+buf	kern/driver/console.c	/^    uint8_t buf[CONSBUFSIZE];$/;"	m	struct:__anon3	file:
+buf	kern/libs/readline.c	/^static char buf[BUFSIZE];$/;"	v	file:
+buf	libs/printfmt.c	/^    char *buf;          \/\/ address pointer points to the first unused memory$/;"	m	struct:sprintbuf	file:
+build_run	tools/grade.sh	/^build_run() {$/;"	f
+cc_compile	tools/function.mk	/^cc_compile = $(eval $(call do_cc_compile,$(1),$(2),$(3),$(4)))$/;"	m
+cc_template	tools/function.mk	/^define cc_template$/;"	m
+cga_init	kern/driver/console.c	/^cga_init(void) {$/;"	f	file:
+cga_putc	kern/driver/console.c	/^cga_putc(int c) {$/;"	f	file:
+cgtype	Makefile	/^cgtype = $(patsubst %.$(2),%.$(3),$(1))$/;"	m
+change_bit	libs/atomic.h	/^change_bit(int nr, volatile void *addr) {$/;"	f
+charcode	kern/driver/console.c	/^static uint8_t *charcode[4] = {$/;"	v	file:
+check	kern/mm/pmm.h	/^    void (*check)(void);                              \/\/ check the correctness of XXX_pmm_manager $/;"	m	struct:pmm_manager
+check_alloc_page	kern/mm/pmm.c	/^check_alloc_page(void) {$/;"	f	file:
+check_boot_pgdir	kern/mm/pmm.c	/^check_boot_pgdir(void) {$/;"	f	file:
+check_pgdir	kern/mm/pmm.c	/^check_pgdir(void) {$/;"	f	file:
+check_regexps	tools/grade.sh	/^check_regexps() {$/;"	f
+check_result	tools/grade.sh	/^check_result() {$/;"	f
+clear_bit	libs/atomic.h	/^clear_bit(int nr, volatile void *addr) {$/;"	f
+cli	libs/x86.h	/^cli(void) {$/;"	f
+clock_init	kern/driver/clock.c	/^clock_init(void) {$/;"	f
+cnt	libs/printfmt.c	/^    int cnt;            \/\/ the number of characters that have been placed in this buffer$/;"	m	struct:sprintbuf	file:
+command	kern/debug/kmonitor.c	/^struct command {$/;"	s	file:
+commands	kern/debug/kmonitor.c	/^static struct command commands[] = {$/;"	v	typeref:struct:command	file:
+cons	kern/driver/console.c	/^} cons;$/;"	v	typeref:struct:__anon3	file:
+cons_getc	kern/driver/console.c	/^cons_getc(void) {$/;"	f
+cons_init	kern/driver/console.c	/^cons_init(void) {$/;"	f
+cons_intr	kern/driver/console.c	/^cons_intr(int (*proc)(void)) {$/;"	f	file:
+cons_putc	kern/driver/console.c	/^cons_putc(int c) {$/;"	f
+cont	boot/bootasm.S	/^cont:$/;"	l
+cprintf	kern/libs/stdio.c	/^cprintf(const char *fmt, ...) {$/;"	f
+cputch	kern/libs/stdio.c	/^cputch(int c, int *cnt) {$/;"	f	file:
+cputchar	kern/libs/stdio.c	/^cputchar(int c) {$/;"	f
+cputs	kern/libs/stdio.c	/^cputs(const char *str) {$/;"	f
+create_target	tools/function.mk	/^create_target = $(eval $(call do_create_target,$(1),$(2),$(3),$(4),$(5)))$/;"	m
+create_target_cc	Makefile	/^create_target_cc = $(call create_target,$(1),$(2),$(3),$(CC),$(CFLAGS))$/;"	m
+create_target_host	Makefile	/^create_target_host = $(call create_target,$(1),$(2),$(3),$(HOSTCC),$(HOSTCFLAGS))$/;"	m
+crt_buf	kern/driver/console.c	/^static uint16_t *crt_buf;$/;"	v	file:
+crt_pos	kern/driver/console.c	/^static uint16_t crt_pos;$/;"	v	file:
+ctlmap	kern/driver/console.c	/^static uint8_t ctlmap[256] = {$/;"	v	file:
+debuginfo_eip	kern/debug/kdebug.c	/^debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {$/;"	f
+default_alloc_pages	kern/mm/default_pmm.c	/^default_alloc_pages(size_t n) {$/;"	f	file:
+default_check	kern/mm/default_pmm.c	/^default_check(void) {$/;"	f	file:
+default_free_pages	kern/mm/default_pmm.c	/^default_free_pages(struct Page *base, size_t n) {$/;"	f	file:
+default_init	kern/mm/default_pmm.c	/^default_init(void) {$/;"	f	file:
+default_init_memmap	kern/mm/default_pmm.c	/^default_init_memmap(struct Page *base, size_t n) {$/;"	f	file:
+default_nr_free_pages	kern/mm/default_pmm.c	/^default_nr_free_pages(void) {$/;"	f	file:
+default_pmm_manager	kern/mm/default_pmm.c	/^const struct pmm_manager default_pmm_manager = {$/;"	v	typeref:struct:pmm_manager
+delay	kern/driver/console.c	/^delay(void) {$/;"	f	file:
+desc	kern/debug/kmonitor.c	/^    const char *desc;$/;"	m	struct:command	file:
+did_init	kern/driver/picirq.c	/^static bool did_init = 0;$/;"	v	file:
+do_add_files_to_packet	tools/function.mk	/^define do_add_files_to_packet$/;"	m
+do_add_objs_to_packet	tools/function.mk	/^define do_add_objs_to_packet$/;"	m
+do_cc_compile	tools/function.mk	/^define do_cc_compile$/;"	m
+do_create_target	tools/function.mk	/^define do_create_target$/;"	m
+do_div	libs/x86.h	6;"	d
+do_finish_all	tools/function.mk	/^define do_finish_all$/;"	m
+e820map	kern/mm/memlayout.h	/^struct e820map {$/;"	s
+e_ehsize	libs/elf.h	/^    uint16_t e_ehsize;    \/\/ size of this elf header$/;"	m	struct:elfhdr
+e_elf	libs/elf.h	/^    uint8_t e_elf[12];$/;"	m	struct:elfhdr
+e_entry	libs/elf.h	/^    uint32_t e_entry;     \/\/ entry point if executable$/;"	m	struct:elfhdr
+e_flags	libs/elf.h	/^    uint32_t e_flags;     \/\/ architecture-specific flags, usually 0$/;"	m	struct:elfhdr
+e_machine	libs/elf.h	/^    uint16_t e_machine;   \/\/ 3=x86, 4=68K, etc.$/;"	m	struct:elfhdr
+e_magic	libs/elf.h	/^    uint32_t e_magic;     \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr
+e_phentsize	libs/elf.h	/^    uint16_t e_phentsize; \/\/ size of an entry in program header$/;"	m	struct:elfhdr
+e_phnum	libs/elf.h	/^    uint16_t e_phnum;     \/\/ number of entries in program header or 0$/;"	m	struct:elfhdr
+e_phoff	libs/elf.h	/^    uint32_t e_phoff;     \/\/ file position of program header or 0$/;"	m	struct:elfhdr
+e_shentsize	libs/elf.h	/^    uint16_t e_shentsize; \/\/ size of an entry in section header$/;"	m	struct:elfhdr
+e_shnum	libs/elf.h	/^    uint16_t e_shnum;     \/\/ number of entries in section header or 0$/;"	m	struct:elfhdr
+e_shoff	libs/elf.h	/^    uint32_t e_shoff;     \/\/ file position of section header or 0$/;"	m	struct:elfhdr
+e_shstrndx	libs/elf.h	/^    uint16_t e_shstrndx;  \/\/ section number that contains section name strings$/;"	m	struct:elfhdr
+e_type	libs/elf.h	/^    uint16_t e_type;      \/\/ 1=relocatable, 2=executable, 3=shared object, 4=core image$/;"	m	struct:elfhdr
+e_version	libs/elf.h	/^    uint32_t e_version;   \/\/ file version, always 1$/;"	m	struct:elfhdr
+ebuf	libs/printfmt.c	/^    char *ebuf;         \/\/ points the end of the buffer$/;"	m	struct:sprintbuf	file:
+eip_file	kern/debug/kdebug.c	/^    const char *eip_file;                   \/\/ source code filename for eip$/;"	m	struct:eipdebuginfo	file:
+eip_fn_addr	kern/debug/kdebug.c	/^    uintptr_t eip_fn_addr;                  \/\/ start address of function$/;"	m	struct:eipdebuginfo	file:
+eip_fn_name	kern/debug/kdebug.c	/^    const char *eip_fn_name;                \/\/ name of function containing eip$/;"	m	struct:eipdebuginfo	file:
+eip_fn_namelen	kern/debug/kdebug.c	/^    int eip_fn_namelen;                     \/\/ length of function's name$/;"	m	struct:eipdebuginfo	file:
+eip_fn_narg	kern/debug/kdebug.c	/^    int eip_fn_narg;                        \/\/ number of function arguments$/;"	m	struct:eipdebuginfo	file:
+eip_line	kern/debug/kdebug.c	/^    int eip_line;                           \/\/ source code line number for eip$/;"	m	struct:eipdebuginfo	file:
+eipdebuginfo	kern/debug/kdebug.c	/^struct eipdebuginfo {$/;"	s	file:
+elfhdr	libs/elf.h	/^struct elfhdr {$/;"	s
+enable_paging	kern/mm/pmm.c	/^enable_paging(void) {$/;"	f	file:
+error_string	libs/printfmt.c	/^static const char * const error_string[MAXERROR + 1] = {$/;"	v	file:
+fail	tools/grade.sh	/^fail() {$/;"	f
+finish_all	tools/function.mk	/^finish_all = $(eval $(call do_finish_all))$/;"	m
+finish_probe	boot/bootasm.S	/^finish_probe:$/;"	l
+flags	kern/mm/memlayout.h	/^    uint32_t flags;                 \/\/ array of flags that describe the status of the page frame$/;"	m	struct:Page
+free_area	kern/mm/default_pmm.c	/^free_area_t free_area;$/;"	v
+free_area_t	kern/mm/memlayout.h	/^} free_area_t;$/;"	t	typeref:struct:__anon2
+free_list	kern/mm/default_pmm.c	59;"	d	file:
+free_list	kern/mm/memlayout.h	/^    list_entry_t free_list;         \/\/ the list header$/;"	m	struct:__anon2
+free_page	kern/mm/pmm.h	36;"	d
+free_pages	kern/mm/pmm.c	/^free_pages(struct Page *base, size_t n) {$/;"	f
+free_pages	kern/mm/pmm.h	/^    void (*free_pages)(struct Page *base, size_t n);  \/\/ free >=n pages with "base" addr of Page descriptor structures(memlayout.h)$/;"	m	struct:pmm_manager
+func	kern/debug/kmonitor.c	/^    int(*func)(int argc, char **argv, struct trapframe *tf);$/;"	m	struct:command	file:
+gatedesc	kern/mm/mmu.h	/^struct gatedesc {$/;"	s
+gd_args	kern/mm/mmu.h	/^    unsigned gd_args : 5;           \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc
+gd_dpl	kern/mm/mmu.h	/^    unsigned gd_dpl : 2;            \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc
+gd_off_15_0	kern/mm/mmu.h	/^    unsigned gd_off_15_0 : 16;      \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc
+gd_off_31_16	kern/mm/mmu.h	/^    unsigned gd_off_31_16 : 16;     \/\/ high bits of offset in segment$/;"	m	struct:gatedesc
+gd_p	kern/mm/mmu.h	/^    unsigned gd_p : 1;              \/\/ Present$/;"	m	struct:gatedesc
+gd_rsv1	kern/mm/mmu.h	/^    unsigned gd_rsv1 : 3;           \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc
+gd_s	kern/mm/mmu.h	/^    unsigned gd_s : 1;              \/\/ must be 0 (system)$/;"	m	struct:gatedesc
+gd_ss	kern/mm/mmu.h	/^    unsigned gd_ss : 16;            \/\/ segment selector$/;"	m	struct:gatedesc
+gd_type	kern/mm/mmu.h	/^    unsigned gd_type : 4;           \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:gatedesc
+gdt	boot/bootasm.S	/^gdt:$/;"	l
+gdt	kern/mm/pmm.c	/^static struct segdesc gdt[] = {$/;"	v	typeref:struct:segdesc	file:
+gdt_init	kern/mm/pmm.c	/^gdt_init(void) {$/;"	f	file:
+gdt_pd	kern/mm/pmm.c	/^static struct pseudodesc gdt_pd = {$/;"	v	typeref:struct:pseudodesc	file:
+gdtdesc	boot/bootasm.S	/^gdtdesc:$/;"	l
+get_page	kern/mm/pmm.c	/^get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {$/;"	f
+get_pgtable_items	kern/mm/pmm.c	/^get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {$/;"	f	file:
+get_pte	kern/mm/pmm.c	/^get_pte(pde_t *pgdir, uintptr_t la, bool create) {$/;"	f
+get_time	tools/grade.sh	/^get_time() {$/;"	f
+getchar	kern/libs/stdio.c	/^getchar(void) {$/;"	f
+getint	libs/printfmt.c	/^getint(va_list *ap, int lflag) {$/;"	f	file:
+getuint	libs/printfmt.c	/^getuint(va_list *ap, int lflag) {$/;"	f	file:
+grade_backtrace	kern/init/init.c	/^grade_backtrace(void) {$/;"	f
+grade_backtrace0	kern/init/init.c	/^grade_backtrace0(int arg0, int arg1, int arg2) {$/;"	f
+grade_backtrace1	kern/init/init.c	/^grade_backtrace1(int arg0, int arg1) {$/;"	f
+grade_backtrace2	kern/init/init.c	/^grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {$/;"	f
+idt	kern/trap/trap.c	/^static struct gatedesc idt[256] = {{0}};$/;"	v	typeref:struct:gatedesc	file:
+idt_init	kern/trap/trap.c	/^idt_init(void) {$/;"	f
+idt_pd	kern/trap/trap.c	/^static struct pseudodesc idt_pd = {$/;"	v	typeref:struct:pseudodesc	file:
+inb	libs/x86.h	/^inb(uint16_t port) {$/;"	f
+init	kern/mm/pmm.h	/^    void (*init)(void);                               \/\/ initialize internal description&management data structure$/;"	m	struct:pmm_manager
+init_memmap	kern/mm/pmm.c	/^init_memmap(struct Page *base, size_t n) {$/;"	f	file:
+init_memmap	kern/mm/pmm.h	/^    void (*init_memmap)(struct Page *base, size_t n); \/\/ setup description&management data structcure according to$/;"	m	struct:pmm_manager
+init_pmm_manager	kern/mm/pmm.c	/^init_pmm_manager(void) {$/;"	f	file:
+insl	libs/x86.h	/^insl(uint32_t port, void *addr, int cnt) {$/;"	f
+int16_t	libs/defs.h	/^typedef short int16_t;$/;"	t
+int32_t	libs/defs.h	/^typedef int int32_t;$/;"	t
+int64_t	libs/defs.h	/^typedef long long int64_t;$/;"	t
+int8_t	libs/defs.h	/^typedef char int8_t;$/;"	t
+intptr_t	libs/defs.h	/^typedef int32_t intptr_t;$/;"	t
+intr_disable	kern/driver/intr.c	/^intr_disable(void) {$/;"	f
+intr_enable	kern/driver/intr.c	/^intr_enable(void) {$/;"	f
+invlpg	libs/x86.h	/^invlpg(void *addr) {$/;"	f
+irq_mask	kern/driver/picirq.c	/^static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);$/;"	v	file:
+is_kernel_panic	kern/debug/panic.c	/^is_kernel_panic(void) {$/;"	f
+is_panic	kern/debug/panic.c	/^static bool is_panic = 0;$/;"	v	file:
+kbd_init	kern/driver/console.c	/^kbd_init(void) {$/;"	f	file:
+kbd_intr	kern/driver/console.c	/^kbd_intr(void) {$/;"	f	file:
+kbd_proc_data	kern/driver/console.c	/^kbd_proc_data(void) {$/;"	f	file:
+kern_entry	kern/init/entry.S	/^kern_entry:$/;"	l
+kern_init	kern/init/init.c	/^kern_init(void) {$/;"	f
+kernel	Makefile	/^kernel = $(call totarget,kernel)$/;"	m
+kernel_nopage	Makefile	/^kernel_nopage = $(call totarget,kernel_nopage)$/;"	m
+kmonitor	kern/debug/kmonitor.c	/^kmonitor(struct trapframe *tf) {$/;"	f
+kva2page	kern/mm/pmm.h	/^kva2page(void *kva) {$/;"	f
+lab1_print_cur_status	kern/init/init.c	/^lab1_print_cur_status(void) {$/;"	f	file:
+lab1_switch_test	kern/init/init.c	/^lab1_switch_test(void) {$/;"	f	file:
+lab1_switch_to_kernel	kern/init/init.c	/^lab1_switch_to_kernel(void) {$/;"	f	file:
+lab1_switch_to_user	kern/init/init.c	/^lab1_switch_to_user(void) {$/;"	f	file:
+lcr0	libs/x86.h	/^lcr0(uintptr_t cr0) {$/;"	f
+lcr3	libs/x86.h	/^lcr3(uintptr_t cr3) {$/;"	f
+le2page	kern/mm/memlayout.h	118;"	d
+lgdt	kern/mm/pmm.c	/^lgdt(struct pseudodesc *pd) {$/;"	f	file:
+lidt	libs/x86.h	/^lidt(struct pseudodesc *pd) {$/;"	f
+list_add	libs/list.h	/^list_add(list_entry_t *listelm, list_entry_t *elm) {$/;"	f
+list_add_after	libs/list.h	/^list_add_after(list_entry_t *listelm, list_entry_t *elm) {$/;"	f
+list_add_before	libs/list.h	/^list_add_before(list_entry_t *listelm, list_entry_t *elm) {$/;"	f
+list_del	libs/list.h	/^list_del(list_entry_t *listelm) {$/;"	f
+list_del_init	libs/list.h	/^list_del_init(list_entry_t *listelm) {$/;"	f
+list_empty	libs/list.h	/^list_empty(list_entry_t *list) {$/;"	f
+list_entry	libs/list.h	/^struct list_entry {$/;"	s
+list_entry_t	libs/list.h	/^typedef struct list_entry list_entry_t;$/;"	t	typeref:struct:list_entry
+list_init	libs/list.h	/^list_init(list_entry_t *elm) {$/;"	f
+list_next	libs/list.h	/^list_next(list_entry_t *listelm) {$/;"	f
+list_prev	libs/list.h	/^list_prev(list_entry_t *listelm) {$/;"	f
+listf	tools/function.mk	/^listf = $(filter $(if $(2),$(addprefix %.,$(2)),%),\\$/;"	m
+listf_cc	Makefile	/^listf_cc = $(call listf,$(1),$(CTYPE))$/;"	m
+load_esp0	kern/mm/pmm.c	/^load_esp0(uintptr_t esp0) {$/;"	f
+local_intr_restore	kern/sync/sync.h	25;"	d
+local_intr_save	kern/sync/sync.h	24;"	d
+lpt_putc	kern/driver/console.c	/^lpt_putc(int c) {$/;"	f	file:
+lpt_putc_sub	kern/driver/console.c	/^lpt_putc_sub(int c) {$/;"	f	file:
+ltr	libs/x86.h	/^ltr(uint16_t sel) {$/;"	f
+main	tools/sign.c	/^main(int argc, char *argv[]) {$/;"	f
+main	tools/vector.c	/^main(void) {$/;"	f
+make_print	tools/grade.sh	/^make_print() {$/;"	f
+map	kern/mm/memlayout.h	/^    } __attribute__((packed)) map[E820MAX];$/;"	m	struct:e820map	typeref:struct:e820map::__anon1
+match	Makefile	/^match = $(shell echo $(2) | $(AWK) '{for(i=1;i<=NF;i++){if(match("$(1)","^"$$(i)"$$")){exit 1;}}}'; echo $$?)$/;"	m
+memcmp	libs/string.c	/^memcmp(const void *v1, const void *v2, size_t n) {$/;"	f
+memcpy	libs/string.c	/^memcpy(void *dst, const void *src, size_t n) {$/;"	f
+memmove	libs/string.c	/^memmove(void *dst, const void *src, size_t n) {$/;"	f
+memset	libs/string.c	/^memset(void *s, char c, size_t n) {$/;"	f
+mon_backtrace	kern/debug/kmonitor.c	/^mon_backtrace(int argc, char **argv, struct trapframe *tf) {$/;"	f
+mon_help	kern/debug/kmonitor.c	/^mon_help(int argc, char **argv, struct trapframe *tf) {$/;"	f
+mon_kerninfo	kern/debug/kmonitor.c	/^mon_kerninfo(int argc, char **argv, struct trapframe *tf) {$/;"	f
+n_desc	kern/debug/stab.h	/^    uint16_t n_desc;        \/\/ description field$/;"	m	struct:stab
+n_other	kern/debug/stab.h	/^    uint8_t n_other;        \/\/ misc info (usually empty)$/;"	m	struct:stab
+n_strx	kern/debug/stab.h	/^    uint32_t n_strx;        \/\/ index into string table of name$/;"	m	struct:stab
+n_type	kern/debug/stab.h	/^    uint8_t n_type;         \/\/ type of symbol$/;"	m	struct:stab
+n_value	kern/debug/stab.h	/^    uintptr_t n_value;      \/\/ value of symbol$/;"	m	struct:stab
+name	kern/debug/kmonitor.c	/^    const char *name;$/;"	m	struct:command	file:
+name	kern/mm/pmm.h	/^    const char *name;                                 \/\/ XXX_pmm_manager's name$/;"	m	struct:pmm_manager
+next	libs/list.h	/^    struct list_entry *prev, *next;$/;"	m	struct:list_entry	typeref:struct:list_entry::
+normalmap	kern/driver/console.c	/^static uint8_t normalmap[256] = {$/;"	v	file:
+npage	kern/mm/pmm.c	/^size_t npage = 0;$/;"	v
+nr_free	kern/mm/default_pmm.c	60;"	d	file:
+nr_free	kern/mm/memlayout.h	/^    unsigned int nr_free;           \/\/ # of free pages in this free list$/;"	m	struct:__anon2
+nr_free_pages	kern/mm/pmm.c	/^nr_free_pages(void) {$/;"	f
+nr_free_pages	kern/mm/pmm.h	/^    size_t (*nr_free_pages)(void);                    \/\/ return the number of free pages $/;"	m	struct:pmm_manager
+nr_map	kern/mm/memlayout.h	/^    int nr_map;$/;"	m	struct:e820map
+objfile	Makefile	/^objfile = $(call toobj,$(1))$/;"	m
+offsetof	libs/defs.h	55;"	d
+outb	libs/x86.h	/^outb(uint16_t port, uint8_t data) {$/;"	f
+outfile	Makefile	/^outfile = $(call cgtype,$(call toobj,$(1)),o,out)$/;"	m
+outsl	libs/x86.h	/^outsl(uint32_t port, const void *addr, int cnt) {$/;"	f
+outw	libs/x86.h	/^outw(uint16_t port, uint16_t data) {$/;"	f
+p_align	libs/elf.h	/^    uint32_t p_align;  \/\/ required alignment, invariably hardware page size$/;"	m	struct:proghdr
+p_filesz	libs/elf.h	/^    uint32_t p_filesz; \/\/ size of segment in file$/;"	m	struct:proghdr
+p_flags	libs/elf.h	/^    uint32_t p_flags;  \/\/ read\/write\/execute bits$/;"	m	struct:proghdr
+p_memsz	libs/elf.h	/^    uint32_t p_memsz;  \/\/ size of segment in memory (bigger if contains bssÔºâ$/;"	m	struct:proghdr
+p_offset	libs/elf.h	/^    uint32_t p_offset; \/\/ file offset of segment$/;"	m	struct:proghdr
+p_pa	libs/elf.h	/^    uint32_t p_pa;     \/\/ physical address, not used$/;"	m	struct:proghdr
+p_type	libs/elf.h	/^    uint32_t p_type;   \/\/ loadable code or data, dynamic linking info,etc.$/;"	m	struct:proghdr
+p_va	libs/elf.h	/^    uint32_t p_va;     \/\/ virtual address to map segment$/;"	m	struct:proghdr
+pa2page	kern/mm/pmm.h	/^pa2page(uintptr_t pa) {$/;"	f
+packetname	tools/function.mk	/^packetname = $(if $(1),$(addprefix $(OBJPREFIX),$(1)),$(OBJPREFIX))$/;"	m
+page2kva	kern/mm/pmm.h	/^page2kva(struct Page *page) {$/;"	f
+page2pa	kern/mm/pmm.h	/^page2pa(struct Page *page) {$/;"	f
+page2ppn	kern/mm/pmm.h	/^page2ppn(struct Page *page) {$/;"	f
+page_init	kern/mm/pmm.c	/^page_init(void) {$/;"	f	file:
+page_insert	kern/mm/pmm.c	/^page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {$/;"	f
+page_link	kern/mm/memlayout.h	/^    list_entry_t page_link;         \/\/ free list link$/;"	m	struct:Page
+page_ref	kern/mm/pmm.h	/^page_ref(struct Page *page) {$/;"	f
+page_ref_dec	kern/mm/pmm.h	/^page_ref_dec(struct Page *page) {$/;"	f
+page_ref_inc	kern/mm/pmm.h	/^page_ref_inc(struct Page *page) {$/;"	f
+page_remove	kern/mm/pmm.c	/^page_remove(pde_t *pgdir, uintptr_t la) {$/;"	f
+page_remove_pte	kern/mm/pmm.c	/^page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {$/;"	f	file:
+pages	kern/mm/pmm.c	/^struct Page *pages;$/;"	v	typeref:struct:Page
+panic	kern/debug/assert.h	12;"	d
+parse	kern/debug/kmonitor.c	/^parse(char *buf, char **argv) {$/;"	f	file:
+pass	tools/grade.sh	/^pass() {$/;"	f
+pd_base	libs/x86.h	/^    uintptr_t pd_base;      \/\/ Base address$/;"	m	struct:pseudodesc
+pd_lim	libs/x86.h	/^    uint16_t pd_lim;        \/\/ Limit$/;"	m	struct:pseudodesc
+pde2page	kern/mm/pmm.h	/^pde2page(pde_t pde) {$/;"	f
+pde_t	kern/mm/memlayout.h	/^typedef uintptr_t pde_t;$/;"	t
+perm2str	kern/mm/pmm.c	/^perm2str(int perm) {$/;"	f	file:
+pic_enable	kern/driver/picirq.c	/^pic_enable(unsigned int irq) {$/;"	f
+pic_init	kern/driver/picirq.c	/^pic_init(void) {$/;"	f
+pic_setmask	kern/driver/picirq.c	/^pic_setmask(uint16_t mask) {$/;"	f	file:
+pmm_init	kern/mm/pmm.c	/^pmm_init(void) {$/;"	f
+pmm_manager	kern/mm/pmm.c	/^const struct pmm_manager *pmm_manager;$/;"	v	typeref:struct:pmm_manager
+pmm_manager	kern/mm/pmm.h	/^struct pmm_manager {$/;"	s
+ppn_t	libs/defs.h	/^typedef size_t ppn_t;$/;"	t
+prev	libs/list.h	/^    struct list_entry *prev, *next;$/;"	m	struct:list_entry	typeref:struct:list_entry::list_entry
+print_debuginfo	kern/debug/kdebug.c	/^print_debuginfo(uintptr_t eip) {$/;"	f
+print_kerninfo	kern/debug/kdebug.c	/^print_kerninfo(void) {$/;"	f
+print_pgdir	kern/mm/pmm.c	/^print_pgdir(void) {$/;"	f
+print_regs	kern/trap/trap.c	/^print_regs(struct pushregs *regs) {$/;"	f
+print_stackframe	kern/debug/kdebug.c	/^print_stackframe(void) {$/;"	f
+print_ticks	kern/trap/trap.c	/^static void print_ticks() {$/;"	f	file:
+print_trapframe	kern/trap/trap.c	/^print_trapframe(struct trapframe *tf) {$/;"	f
+printfmt	libs/printfmt.c	/^printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {$/;"	f
+printnum	libs/printfmt.c	/^printnum(void (*putch)(int, void*), void *putdat,$/;"	f	file:
+probe_memory	boot/bootasm.S	/^probe_memory:$/;"	l
+proghdr	libs/elf.h	/^struct proghdr {$/;"	s
+property	kern/mm/memlayout.h	/^    unsigned int property;          \/\/ the num of free block, used in first fit pm manager$/;"	m	struct:Page
+protcseg	boot/bootasm.S	/^protcseg:$/;"	l
+pseudodesc	libs/x86.h	/^struct pseudodesc {$/;"	s
+pte2page	kern/mm/pmm.h	/^pte2page(pte_t pte) {$/;"	f
+pte_t	kern/mm/memlayout.h	/^typedef uintptr_t pte_t;$/;"	t
+pushregs	kern/trap/trap.h	/^struct pushregs {$/;"	s
+quick_check	tools/grade.sh	/^quick_check() {$/;"	f
+quick_run	tools/grade.sh	/^quick_run() {$/;"	f
+rcr0	libs/x86.h	/^rcr0(void) {$/;"	f
+rcr1	libs/x86.h	/^rcr1(void) {$/;"	f
+rcr2	libs/x86.h	/^rcr2(void) {$/;"	f
+rcr3	libs/x86.h	/^rcr3(void) {$/;"	f
+read_dr	libs/x86.h	/^read_dr(unsigned regnum) {$/;"	f
+read_ebp	libs/x86.h	/^read_ebp(void) {$/;"	f
+read_eflags	libs/x86.h	/^read_eflags(void) {$/;"	f
+read_eip	kern/debug/kdebug.c	/^read_eip(void) {$/;"	f	file:
+read_packet	tools/function.mk	/^read_packet = $(foreach p,$(call packetname,$(1)),$($(p)))$/;"	m
+readline	kern/libs/readline.c	/^readline(const char *prompt) {$/;"	f
+readsect	boot/bootmain.c	/^readsect(void *dst, uint32_t secno) {$/;"	f	file:
+readseg	boot/bootmain.c	/^readseg(uintptr_t va, uint32_t count, uint32_t offset) {$/;"	f	file:
+ref	kern/mm/memlayout.h	/^    int ref;                        \/\/ page frame's reference counter$/;"	m	struct:Page
+reg_eax	kern/trap/trap.h	/^    uint32_t reg_eax;$/;"	m	struct:pushregs
+reg_ebp	kern/trap/trap.h	/^    uint32_t reg_ebp;$/;"	m	struct:pushregs
+reg_ebx	kern/trap/trap.h	/^    uint32_t reg_ebx;$/;"	m	struct:pushregs
+reg_ecx	kern/trap/trap.h	/^    uint32_t reg_ecx;$/;"	m	struct:pushregs
+reg_edi	kern/trap/trap.h	/^    uint32_t reg_edi;$/;"	m	struct:pushregs
+reg_edx	kern/trap/trap.h	/^    uint32_t reg_edx;$/;"	m	struct:pushregs
+reg_esi	kern/trap/trap.h	/^    uint32_t reg_esi;$/;"	m	struct:pushregs
+reg_oesp	kern/trap/trap.h	/^    uint32_t reg_oesp;          \/* Useless *\/$/;"	m	struct:pushregs
+relocated	kern/init/entry.S	/^relocated:$/;"	l
+rpos	kern/driver/console.c	/^    uint32_t rpos;$/;"	m	struct:__anon3	file:
+run_qemu	tools/grade.sh	/^run_qemu() {$/;"	f
+run_test	tools/grade.sh	/^run_test() {$/;"	f
+runcmd	kern/debug/kmonitor.c	/^runcmd(char *buf, struct trapframe *tf) {$/;"	f	file:
+sd_avl	kern/mm/mmu.h	/^    unsigned sd_avl : 1;            \/\/ unused (available for software use)$/;"	m	struct:segdesc
+sd_base_15_0	kern/mm/mmu.h	/^    unsigned sd_base_15_0 : 16;     \/\/ low bits of segment base address$/;"	m	struct:segdesc
+sd_base_23_16	kern/mm/mmu.h	/^    unsigned sd_base_23_16 : 8;     \/\/ middle bits of segment base address$/;"	m	struct:segdesc
+sd_base_31_24	kern/mm/mmu.h	/^    unsigned sd_base_31_24 : 8;     \/\/ high bits of segment base address$/;"	m	struct:segdesc
+sd_db	kern/mm/mmu.h	/^    unsigned sd_db : 1;             \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc
+sd_dpl	kern/mm/mmu.h	/^    unsigned sd_dpl : 2;            \/\/ descriptor Privilege Level$/;"	m	struct:segdesc
+sd_g	kern/mm/mmu.h	/^    unsigned sd_g : 1;              \/\/ granularity: limit scaled by 4K when set$/;"	m	struct:segdesc
+sd_lim_15_0	kern/mm/mmu.h	/^    unsigned sd_lim_15_0 : 16;      \/\/ low bits of segment limit$/;"	m	struct:segdesc
+sd_lim_19_16	kern/mm/mmu.h	/^    unsigned sd_lim_19_16 : 4;      \/\/ high bits of segment limit$/;"	m	struct:segdesc
+sd_p	kern/mm/mmu.h	/^    unsigned sd_p : 1;              \/\/ present$/;"	m	struct:segdesc
+sd_rsv1	kern/mm/mmu.h	/^    unsigned sd_rsv1 : 1;           \/\/ reserved$/;"	m	struct:segdesc
+sd_s	kern/mm/mmu.h	/^    unsigned sd_s : 1;              \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc
+sd_type	kern/mm/mmu.h	/^    unsigned sd_type : 4;           \/\/ segment type (see STS_ constants)$/;"	m	struct:segdesc
+segdesc	kern/mm/mmu.h	/^struct segdesc {$/;"	s
+serial_exists	kern/driver/console.c	/^static bool serial_exists = 0;$/;"	v	file:
+serial_init	kern/driver/console.c	/^serial_init(void) {$/;"	f	file:
+serial_intr	kern/driver/console.c	/^serial_intr(void) {$/;"	f
+serial_proc_data	kern/driver/console.c	/^serial_proc_data(void) {$/;"	f	file:
+serial_putc	kern/driver/console.c	/^serial_putc(int c) {$/;"	f	file:
+serial_putc_sub	kern/driver/console.c	/^serial_putc_sub(int c) {$/;"	f	file:
+set_bit	libs/atomic.h	/^set_bit(int nr, volatile void *addr) {$/;"	f
+set_page_ref	kern/mm/pmm.h	/^set_page_ref(struct Page *page, int val) {$/;"	f
+shiftcode	kern/driver/console.c	/^static uint8_t shiftcode[256] = {$/;"	v	file:
+shiftmap	kern/driver/console.c	/^static uint8_t shiftmap[256] = {$/;"	v	file:
+show_build_tag	tools/grade.sh	/^show_build_tag() {$/;"	f
+show_check_tag	tools/grade.sh	/^show_check_tag() {$/;"	f
+show_final	tools/grade.sh	/^show_final() {$/;"	f
+show_msg	tools/grade.sh	/^show_msg() {$/;"	f
+show_part	tools/grade.sh	/^show_part() {$/;"	f
+show_time	tools/grade.sh	/^show_time() {$/;"	f
+size	kern/mm/memlayout.h	/^        uint64_t size;$/;"	m	struct:e820map::__anon1
+size_t	libs/defs.h	/^typedef uintptr_t size_t;$/;"	t
+snprintf	libs/printfmt.c	/^snprintf(char *str, size_t size, const char *fmt, ...) {$/;"	f
+spin	boot/bootasm.S	/^spin:$/;"	l
+spin	kern/init/entry.S	/^spin:$/;"	l
+sprintbuf	libs/printfmt.c	/^struct sprintbuf {$/;"	s	file:
+sprintputch	libs/printfmt.c	/^sprintputch(int ch, struct sprintbuf *b) {$/;"	f	file:
+stab	kern/debug/stab.h	/^struct stab {$/;"	s
+stab_binsearch	kern/debug/kdebug.c	/^stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,$/;"	f	file:
+start	boot/bootasm.S	/^start:$/;"	l
+start_probe	boot/bootasm.S	/^start_probe:$/;"	l
+static_assert	kern/debug/assert.h	23;"	d
+sti	libs/x86.h	/^sti(void) {$/;"	f
+strchr	libs/string.c	/^strchr(const char *s, char c) {$/;"	f
+strcmp	libs/string.c	/^strcmp(const char *s1, const char *s2) {$/;"	f
+strcpy	libs/string.c	/^strcpy(char *dst, const char *src) {$/;"	f
+strfind	libs/string.c	/^strfind(const char *s, char c) {$/;"	f
+strlen	libs/string.c	/^strlen(const char *s) {$/;"	f
+strncmp	libs/string.c	/^strncmp(const char *s1, const char *s2, size_t n) {$/;"	f
+strncpy	libs/string.c	/^strncpy(char *dst, const char *src, size_t len) {$/;"	f
+strnlen	libs/string.c	/^strnlen(const char *s, size_t len) {$/;"	f
+strtol	libs/string.c	/^strtol(const char *s, char **endptr, int base) {$/;"	f
+symfile	Makefile	/^symfile = $(call cgtype,$(call toobj,$(1)),o,sym)$/;"	m
+taskstate	kern/mm/mmu.h	/^struct taskstate {$/;"	s
+test_bit	libs/atomic.h	/^test_bit(int nr, volatile void *addr) {$/;"	f
+tf_cs	kern/trap/trap.h	/^    uint16_t tf_cs;$/;"	m	struct:trapframe
+tf_ds	kern/trap/trap.h	/^    uint16_t tf_ds;$/;"	m	struct:trapframe
+tf_eflags	kern/trap/trap.h	/^    uint32_t tf_eflags;$/;"	m	struct:trapframe
+tf_eip	kern/trap/trap.h	/^    uintptr_t tf_eip;$/;"	m	struct:trapframe
+tf_err	kern/trap/trap.h	/^    uint32_t tf_err;$/;"	m	struct:trapframe
+tf_es	kern/trap/trap.h	/^    uint16_t tf_es;$/;"	m	struct:trapframe
+tf_esp	kern/trap/trap.h	/^    uintptr_t tf_esp;$/;"	m	struct:trapframe
+tf_fs	kern/trap/trap.h	/^    uint16_t tf_fs;$/;"	m	struct:trapframe
+tf_gs	kern/trap/trap.h	/^    uint16_t tf_gs;$/;"	m	struct:trapframe
+tf_padding0	kern/trap/trap.h	/^    uint16_t tf_padding0;$/;"	m	struct:trapframe
+tf_padding1	kern/trap/trap.h	/^    uint16_t tf_padding1;$/;"	m	struct:trapframe
+tf_padding2	kern/trap/trap.h	/^    uint16_t tf_padding2;$/;"	m	struct:trapframe
+tf_padding3	kern/trap/trap.h	/^    uint16_t tf_padding3;$/;"	m	struct:trapframe
+tf_padding4	kern/trap/trap.h	/^    uint16_t tf_padding4;$/;"	m	struct:trapframe
+tf_padding5	kern/trap/trap.h	/^    uint16_t tf_padding5;$/;"	m	struct:trapframe
+tf_regs	kern/trap/trap.h	/^    struct pushregs tf_regs;$/;"	m	struct:trapframe	typeref:struct:trapframe::pushregs
+tf_ss	kern/trap/trap.h	/^    uint16_t tf_ss;$/;"	m	struct:trapframe
+tf_trapno	kern/trap/trap.h	/^    uint32_t tf_trapno;$/;"	m	struct:trapframe
+ticks	kern/driver/clock.c	/^volatile size_t ticks;$/;"	v
+tlb_invalidate	kern/mm/pmm.c	/^tlb_invalidate(pde_t *pgdir, uintptr_t la) {$/;"	f
+to_struct	libs/defs.h	64;"	d
+todep	tools/function.mk	/^todep = $(patsubst %.o,%.d,$(call toobj,$(1),$(2)))$/;"	m
+togglecode	kern/driver/console.c	/^static uint8_t togglecode[256] = {$/;"	v	file:
+toobj	tools/function.mk	/^toobj = $(addprefix $(OBJDIR)$(SLASH)$(if $(2),$(2)$(SLASH)),\\$/;"	m
+totarget	tools/function.mk	/^totarget = $(addprefix $(BINDIR)$(SLASH),$(1))$/;"	m
+trap	kern/trap/trap.c	/^trap(struct trapframe *tf) {$/;"	f
+trap_dispatch	kern/trap/trap.c	/^trap_dispatch(struct trapframe *tf) {$/;"	f	file:
+trap_in_kernel	kern/trap/trap.c	/^trap_in_kernel(struct trapframe *tf) {$/;"	f
+trapframe	kern/trap/trap.h	/^struct trapframe {$/;"	s
+trapname	kern/trap/trap.c	/^trapname(int trapno) {$/;"	f	file:
+ts	kern/mm/pmm.c	/^static struct taskstate ts = {0};$/;"	v	typeref:struct:taskstate	file:
+ts_cr3	kern/mm/mmu.h	/^    uintptr_t ts_cr3;       \/\/ page directory base$/;"	m	struct:taskstate
+ts_cs	kern/mm/mmu.h	/^    uint16_t ts_cs;$/;"	m	struct:taskstate
+ts_ds	kern/mm/mmu.h	/^    uint16_t ts_ds;$/;"	m	struct:taskstate
+ts_eax	kern/mm/mmu.h	/^    uint32_t ts_eax;        \/\/ more saved state (registers)$/;"	m	struct:taskstate
+ts_ebp	kern/mm/mmu.h	/^    uintptr_t ts_ebp;$/;"	m	struct:taskstate
+ts_ebx	kern/mm/mmu.h	/^    uint32_t ts_ebx;$/;"	m	struct:taskstate
+ts_ecx	kern/mm/mmu.h	/^    uint32_t ts_ecx;$/;"	m	struct:taskstate
+ts_edi	kern/mm/mmu.h	/^    uint32_t ts_edi;$/;"	m	struct:taskstate
+ts_edx	kern/mm/mmu.h	/^    uint32_t ts_edx;$/;"	m	struct:taskstate
+ts_eflags	kern/mm/mmu.h	/^    uint32_t ts_eflags;$/;"	m	struct:taskstate
+ts_eip	kern/mm/mmu.h	/^    uintptr_t ts_eip;       \/\/ saved state from last task switch$/;"	m	struct:taskstate
+ts_es	kern/mm/mmu.h	/^    uint16_t ts_es;         \/\/ even more saved state (segment selectors)$/;"	m	struct:taskstate
+ts_esi	kern/mm/mmu.h	/^    uint32_t ts_esi;$/;"	m	struct:taskstate
+ts_esp	kern/mm/mmu.h	/^    uintptr_t ts_esp;$/;"	m	struct:taskstate
+ts_esp0	kern/mm/mmu.h	/^    uintptr_t ts_esp0;      \/\/ stack pointers and segment selectors$/;"	m	struct:taskstate
+ts_esp1	kern/mm/mmu.h	/^    uintptr_t ts_esp1;$/;"	m	struct:taskstate
+ts_esp2	kern/mm/mmu.h	/^    uintptr_t ts_esp2;$/;"	m	struct:taskstate
+ts_fs	kern/mm/mmu.h	/^    uint16_t ts_fs;$/;"	m	struct:taskstate
+ts_gs	kern/mm/mmu.h	/^    uint16_t ts_gs;$/;"	m	struct:taskstate
+ts_iomb	kern/mm/mmu.h	/^    uint16_t ts_iomb;       \/\/ i\/o map base address$/;"	m	struct:taskstate
+ts_ldt	kern/mm/mmu.h	/^    uint16_t ts_ldt;$/;"	m	struct:taskstate
+ts_link	kern/mm/mmu.h	/^    uint32_t ts_link;       \/\/ old ts selector$/;"	m	struct:taskstate
+ts_padding1	kern/mm/mmu.h	/^    uint16_t ts_padding1;$/;"	m	struct:taskstate
+ts_padding10	kern/mm/mmu.h	/^    uint16_t ts_padding10;$/;"	m	struct:taskstate
+ts_padding2	kern/mm/mmu.h	/^    uint16_t ts_padding2;$/;"	m	struct:taskstate
+ts_padding3	kern/mm/mmu.h	/^    uint16_t ts_padding3;$/;"	m	struct:taskstate
+ts_padding4	kern/mm/mmu.h	/^    uint16_t ts_padding4;$/;"	m	struct:taskstate
+ts_padding5	kern/mm/mmu.h	/^    uint16_t ts_padding5;$/;"	m	struct:taskstate
+ts_padding6	kern/mm/mmu.h	/^    uint16_t ts_padding6;$/;"	m	struct:taskstate
+ts_padding7	kern/mm/mmu.h	/^    uint16_t ts_padding7;$/;"	m	struct:taskstate
+ts_padding8	kern/mm/mmu.h	/^    uint16_t ts_padding8;$/;"	m	struct:taskstate
+ts_padding9	kern/mm/mmu.h	/^    uint16_t ts_padding9;$/;"	m	struct:taskstate
+ts_ss	kern/mm/mmu.h	/^    uint16_t ts_ss;$/;"	m	struct:taskstate
+ts_ss0	kern/mm/mmu.h	/^    uint16_t ts_ss0;        \/\/ after an increase in privilege level$/;"	m	struct:taskstate
+ts_ss1	kern/mm/mmu.h	/^    uint16_t ts_ss1;$/;"	m	struct:taskstate
+ts_ss2	kern/mm/mmu.h	/^    uint16_t ts_ss2;$/;"	m	struct:taskstate
+ts_t	kern/mm/mmu.h	/^    uint16_t ts_t;          \/\/ trap on task switch$/;"	m	struct:taskstate
+type	kern/mm/memlayout.h	/^        uint32_t type;$/;"	m	struct:e820map::__anon1
+uint16_t	libs/defs.h	/^typedef unsigned short uint16_t;$/;"	t
+uint32_t	libs/defs.h	/^typedef unsigned int uint32_t;$/;"	t
+uint64_t	libs/defs.h	/^typedef unsigned long long uint64_t;$/;"	t
+uint8_t	libs/defs.h	/^typedef unsigned char uint8_t;$/;"	t
+uintptr_t	libs/defs.h	/^typedef uint32_t uintptr_t;$/;"	t
+update_score	tools/grade.sh	/^update_score() {$/;"	f
+va_arg	libs/stdarg.h	8;"	d
+va_end	libs/stdarg.h	9;"	d
+va_list	libs/stdarg.h	/^typedef __builtin_va_list va_list;$/;"	t
+va_start	libs/stdarg.h	7;"	d
+vcprintf	kern/libs/stdio.c	/^vcprintf(const char *fmt, va_list ap) {$/;"	f
+vector0	kern/trap/vectors.S	/^vector0:$/;"	l
+vector1	kern/trap/vectors.S	/^vector1:$/;"	l
+vector10	kern/trap/vectors.S	/^vector10:$/;"	l
+vector100	kern/trap/vectors.S	/^vector100:$/;"	l
+vector101	kern/trap/vectors.S	/^vector101:$/;"	l
+vector102	kern/trap/vectors.S	/^vector102:$/;"	l
+vector103	kern/trap/vectors.S	/^vector103:$/;"	l
+vector104	kern/trap/vectors.S	/^vector104:$/;"	l
+vector105	kern/trap/vectors.S	/^vector105:$/;"	l
+vector106	kern/trap/vectors.S	/^vector106:$/;"	l
+vector107	kern/trap/vectors.S	/^vector107:$/;"	l
+vector108	kern/trap/vectors.S	/^vector108:$/;"	l
+vector109	kern/trap/vectors.S	/^vector109:$/;"	l
+vector11	kern/trap/vectors.S	/^vector11:$/;"	l
+vector110	kern/trap/vectors.S	/^vector110:$/;"	l
+vector111	kern/trap/vectors.S	/^vector111:$/;"	l
+vector112	kern/trap/vectors.S	/^vector112:$/;"	l
+vector113	kern/trap/vectors.S	/^vector113:$/;"	l
+vector114	kern/trap/vectors.S	/^vector114:$/;"	l
+vector115	kern/trap/vectors.S	/^vector115:$/;"	l
+vector116	kern/trap/vectors.S	/^vector116:$/;"	l
+vector117	kern/trap/vectors.S	/^vector117:$/;"	l
+vector118	kern/trap/vectors.S	/^vector118:$/;"	l
+vector119	kern/trap/vectors.S	/^vector119:$/;"	l
+vector12	kern/trap/vectors.S	/^vector12:$/;"	l
+vector120	kern/trap/vectors.S	/^vector120:$/;"	l
+vector121	kern/trap/vectors.S	/^vector121:$/;"	l
+vector122	kern/trap/vectors.S	/^vector122:$/;"	l
+vector123	kern/trap/vectors.S	/^vector123:$/;"	l
+vector124	kern/trap/vectors.S	/^vector124:$/;"	l
+vector125	kern/trap/vectors.S	/^vector125:$/;"	l
+vector126	kern/trap/vectors.S	/^vector126:$/;"	l
+vector127	kern/trap/vectors.S	/^vector127:$/;"	l
+vector128	kern/trap/vectors.S	/^vector128:$/;"	l
+vector129	kern/trap/vectors.S	/^vector129:$/;"	l
+vector13	kern/trap/vectors.S	/^vector13:$/;"	l
+vector130	kern/trap/vectors.S	/^vector130:$/;"	l
+vector131	kern/trap/vectors.S	/^vector131:$/;"	l
+vector132	kern/trap/vectors.S	/^vector132:$/;"	l
+vector133	kern/trap/vectors.S	/^vector133:$/;"	l
+vector134	kern/trap/vectors.S	/^vector134:$/;"	l
+vector135	kern/trap/vectors.S	/^vector135:$/;"	l
+vector136	kern/trap/vectors.S	/^vector136:$/;"	l
+vector137	kern/trap/vectors.S	/^vector137:$/;"	l
+vector138	kern/trap/vectors.S	/^vector138:$/;"	l
+vector139	kern/trap/vectors.S	/^vector139:$/;"	l
+vector14	kern/trap/vectors.S	/^vector14:$/;"	l
+vector140	kern/trap/vectors.S	/^vector140:$/;"	l
+vector141	kern/trap/vectors.S	/^vector141:$/;"	l
+vector142	kern/trap/vectors.S	/^vector142:$/;"	l
+vector143	kern/trap/vectors.S	/^vector143:$/;"	l
+vector144	kern/trap/vectors.S	/^vector144:$/;"	l
+vector145	kern/trap/vectors.S	/^vector145:$/;"	l
+vector146	kern/trap/vectors.S	/^vector146:$/;"	l
+vector147	kern/trap/vectors.S	/^vector147:$/;"	l
+vector148	kern/trap/vectors.S	/^vector148:$/;"	l
+vector149	kern/trap/vectors.S	/^vector149:$/;"	l
+vector15	kern/trap/vectors.S	/^vector15:$/;"	l
+vector150	kern/trap/vectors.S	/^vector150:$/;"	l
+vector151	kern/trap/vectors.S	/^vector151:$/;"	l
+vector152	kern/trap/vectors.S	/^vector152:$/;"	l
+vector153	kern/trap/vectors.S	/^vector153:$/;"	l
+vector154	kern/trap/vectors.S	/^vector154:$/;"	l
+vector155	kern/trap/vectors.S	/^vector155:$/;"	l
+vector156	kern/trap/vectors.S	/^vector156:$/;"	l
+vector157	kern/trap/vectors.S	/^vector157:$/;"	l
+vector158	kern/trap/vectors.S	/^vector158:$/;"	l
+vector159	kern/trap/vectors.S	/^vector159:$/;"	l
+vector16	kern/trap/vectors.S	/^vector16:$/;"	l
+vector160	kern/trap/vectors.S	/^vector160:$/;"	l
+vector161	kern/trap/vectors.S	/^vector161:$/;"	l
+vector162	kern/trap/vectors.S	/^vector162:$/;"	l
+vector163	kern/trap/vectors.S	/^vector163:$/;"	l
+vector164	kern/trap/vectors.S	/^vector164:$/;"	l
+vector165	kern/trap/vectors.S	/^vector165:$/;"	l
+vector166	kern/trap/vectors.S	/^vector166:$/;"	l
+vector167	kern/trap/vectors.S	/^vector167:$/;"	l
+vector168	kern/trap/vectors.S	/^vector168:$/;"	l
+vector169	kern/trap/vectors.S	/^vector169:$/;"	l
+vector17	kern/trap/vectors.S	/^vector17:$/;"	l
+vector170	kern/trap/vectors.S	/^vector170:$/;"	l
+vector171	kern/trap/vectors.S	/^vector171:$/;"	l
+vector172	kern/trap/vectors.S	/^vector172:$/;"	l
+vector173	kern/trap/vectors.S	/^vector173:$/;"	l
+vector174	kern/trap/vectors.S	/^vector174:$/;"	l
+vector175	kern/trap/vectors.S	/^vector175:$/;"	l
+vector176	kern/trap/vectors.S	/^vector176:$/;"	l
+vector177	kern/trap/vectors.S	/^vector177:$/;"	l
+vector178	kern/trap/vectors.S	/^vector178:$/;"	l
+vector179	kern/trap/vectors.S	/^vector179:$/;"	l
+vector18	kern/trap/vectors.S	/^vector18:$/;"	l
+vector180	kern/trap/vectors.S	/^vector180:$/;"	l
+vector181	kern/trap/vectors.S	/^vector181:$/;"	l
+vector182	kern/trap/vectors.S	/^vector182:$/;"	l
+vector183	kern/trap/vectors.S	/^vector183:$/;"	l
+vector184	kern/trap/vectors.S	/^vector184:$/;"	l
+vector185	kern/trap/vectors.S	/^vector185:$/;"	l
+vector186	kern/trap/vectors.S	/^vector186:$/;"	l
+vector187	kern/trap/vectors.S	/^vector187:$/;"	l
+vector188	kern/trap/vectors.S	/^vector188:$/;"	l
+vector189	kern/trap/vectors.S	/^vector189:$/;"	l
+vector19	kern/trap/vectors.S	/^vector19:$/;"	l
+vector190	kern/trap/vectors.S	/^vector190:$/;"	l
+vector191	kern/trap/vectors.S	/^vector191:$/;"	l
+vector192	kern/trap/vectors.S	/^vector192:$/;"	l
+vector193	kern/trap/vectors.S	/^vector193:$/;"	l
+vector194	kern/trap/vectors.S	/^vector194:$/;"	l
+vector195	kern/trap/vectors.S	/^vector195:$/;"	l
+vector196	kern/trap/vectors.S	/^vector196:$/;"	l
+vector197	kern/trap/vectors.S	/^vector197:$/;"	l
+vector198	kern/trap/vectors.S	/^vector198:$/;"	l
+vector199	kern/trap/vectors.S	/^vector199:$/;"	l
+vector2	kern/trap/vectors.S	/^vector2:$/;"	l
+vector20	kern/trap/vectors.S	/^vector20:$/;"	l
+vector200	kern/trap/vectors.S	/^vector200:$/;"	l
+vector201	kern/trap/vectors.S	/^vector201:$/;"	l
+vector202	kern/trap/vectors.S	/^vector202:$/;"	l
+vector203	kern/trap/vectors.S	/^vector203:$/;"	l
+vector204	kern/trap/vectors.S	/^vector204:$/;"	l
+vector205	kern/trap/vectors.S	/^vector205:$/;"	l
+vector206	kern/trap/vectors.S	/^vector206:$/;"	l
+vector207	kern/trap/vectors.S	/^vector207:$/;"	l
+vector208	kern/trap/vectors.S	/^vector208:$/;"	l
+vector209	kern/trap/vectors.S	/^vector209:$/;"	l
+vector21	kern/trap/vectors.S	/^vector21:$/;"	l
+vector210	kern/trap/vectors.S	/^vector210:$/;"	l
+vector211	kern/trap/vectors.S	/^vector211:$/;"	l
+vector212	kern/trap/vectors.S	/^vector212:$/;"	l
+vector213	kern/trap/vectors.S	/^vector213:$/;"	l
+vector214	kern/trap/vectors.S	/^vector214:$/;"	l
+vector215	kern/trap/vectors.S	/^vector215:$/;"	l
+vector216	kern/trap/vectors.S	/^vector216:$/;"	l
+vector217	kern/trap/vectors.S	/^vector217:$/;"	l
+vector218	kern/trap/vectors.S	/^vector218:$/;"	l
+vector219	kern/trap/vectors.S	/^vector219:$/;"	l
+vector22	kern/trap/vectors.S	/^vector22:$/;"	l
+vector220	kern/trap/vectors.S	/^vector220:$/;"	l
+vector221	kern/trap/vectors.S	/^vector221:$/;"	l
+vector222	kern/trap/vectors.S	/^vector222:$/;"	l
+vector223	kern/trap/vectors.S	/^vector223:$/;"	l
+vector224	kern/trap/vectors.S	/^vector224:$/;"	l
+vector225	kern/trap/vectors.S	/^vector225:$/;"	l
+vector226	kern/trap/vectors.S	/^vector226:$/;"	l
+vector227	kern/trap/vectors.S	/^vector227:$/;"	l
+vector228	kern/trap/vectors.S	/^vector228:$/;"	l
+vector229	kern/trap/vectors.S	/^vector229:$/;"	l
+vector23	kern/trap/vectors.S	/^vector23:$/;"	l
+vector230	kern/trap/vectors.S	/^vector230:$/;"	l
+vector231	kern/trap/vectors.S	/^vector231:$/;"	l
+vector232	kern/trap/vectors.S	/^vector232:$/;"	l
+vector233	kern/trap/vectors.S	/^vector233:$/;"	l
+vector234	kern/trap/vectors.S	/^vector234:$/;"	l
+vector235	kern/trap/vectors.S	/^vector235:$/;"	l
+vector236	kern/trap/vectors.S	/^vector236:$/;"	l
+vector237	kern/trap/vectors.S	/^vector237:$/;"	l
+vector238	kern/trap/vectors.S	/^vector238:$/;"	l
+vector239	kern/trap/vectors.S	/^vector239:$/;"	l
+vector24	kern/trap/vectors.S	/^vector24:$/;"	l
+vector240	kern/trap/vectors.S	/^vector240:$/;"	l
+vector241	kern/trap/vectors.S	/^vector241:$/;"	l
+vector242	kern/trap/vectors.S	/^vector242:$/;"	l
+vector243	kern/trap/vectors.S	/^vector243:$/;"	l
+vector244	kern/trap/vectors.S	/^vector244:$/;"	l
+vector245	kern/trap/vectors.S	/^vector245:$/;"	l
+vector246	kern/trap/vectors.S	/^vector246:$/;"	l
+vector247	kern/trap/vectors.S	/^vector247:$/;"	l
+vector248	kern/trap/vectors.S	/^vector248:$/;"	l
+vector249	kern/trap/vectors.S	/^vector249:$/;"	l
+vector25	kern/trap/vectors.S	/^vector25:$/;"	l
+vector250	kern/trap/vectors.S	/^vector250:$/;"	l
+vector251	kern/trap/vectors.S	/^vector251:$/;"	l
+vector252	kern/trap/vectors.S	/^vector252:$/;"	l
+vector253	kern/trap/vectors.S	/^vector253:$/;"	l
+vector254	kern/trap/vectors.S	/^vector254:$/;"	l
+vector255	kern/trap/vectors.S	/^vector255:$/;"	l
+vector26	kern/trap/vectors.S	/^vector26:$/;"	l
+vector27	kern/trap/vectors.S	/^vector27:$/;"	l
+vector28	kern/trap/vectors.S	/^vector28:$/;"	l
+vector29	kern/trap/vectors.S	/^vector29:$/;"	l
+vector3	kern/trap/vectors.S	/^vector3:$/;"	l
+vector30	kern/trap/vectors.S	/^vector30:$/;"	l
+vector31	kern/trap/vectors.S	/^vector31:$/;"	l
+vector32	kern/trap/vectors.S	/^vector32:$/;"	l
+vector33	kern/trap/vectors.S	/^vector33:$/;"	l
+vector34	kern/trap/vectors.S	/^vector34:$/;"	l
+vector35	kern/trap/vectors.S	/^vector35:$/;"	l
+vector36	kern/trap/vectors.S	/^vector36:$/;"	l
+vector37	kern/trap/vectors.S	/^vector37:$/;"	l
+vector38	kern/trap/vectors.S	/^vector38:$/;"	l
+vector39	kern/trap/vectors.S	/^vector39:$/;"	l
+vector4	kern/trap/vectors.S	/^vector4:$/;"	l
+vector40	kern/trap/vectors.S	/^vector40:$/;"	l
+vector41	kern/trap/vectors.S	/^vector41:$/;"	l
+vector42	kern/trap/vectors.S	/^vector42:$/;"	l
+vector43	kern/trap/vectors.S	/^vector43:$/;"	l
+vector44	kern/trap/vectors.S	/^vector44:$/;"	l
+vector45	kern/trap/vectors.S	/^vector45:$/;"	l
+vector46	kern/trap/vectors.S	/^vector46:$/;"	l
+vector47	kern/trap/vectors.S	/^vector47:$/;"	l
+vector48	kern/trap/vectors.S	/^vector48:$/;"	l
+vector49	kern/trap/vectors.S	/^vector49:$/;"	l
+vector5	kern/trap/vectors.S	/^vector5:$/;"	l
+vector50	kern/trap/vectors.S	/^vector50:$/;"	l
+vector51	kern/trap/vectors.S	/^vector51:$/;"	l
+vector52	kern/trap/vectors.S	/^vector52:$/;"	l
+vector53	kern/trap/vectors.S	/^vector53:$/;"	l
+vector54	kern/trap/vectors.S	/^vector54:$/;"	l
+vector55	kern/trap/vectors.S	/^vector55:$/;"	l
+vector56	kern/trap/vectors.S	/^vector56:$/;"	l
+vector57	kern/trap/vectors.S	/^vector57:$/;"	l
+vector58	kern/trap/vectors.S	/^vector58:$/;"	l
+vector59	kern/trap/vectors.S	/^vector59:$/;"	l
+vector6	kern/trap/vectors.S	/^vector6:$/;"	l
+vector60	kern/trap/vectors.S	/^vector60:$/;"	l
+vector61	kern/trap/vectors.S	/^vector61:$/;"	l
+vector62	kern/trap/vectors.S	/^vector62:$/;"	l
+vector63	kern/trap/vectors.S	/^vector63:$/;"	l
+vector64	kern/trap/vectors.S	/^vector64:$/;"	l
+vector65	kern/trap/vectors.S	/^vector65:$/;"	l
+vector66	kern/trap/vectors.S	/^vector66:$/;"	l
+vector67	kern/trap/vectors.S	/^vector67:$/;"	l
+vector68	kern/trap/vectors.S	/^vector68:$/;"	l
+vector69	kern/trap/vectors.S	/^vector69:$/;"	l
+vector7	kern/trap/vectors.S	/^vector7:$/;"	l
+vector70	kern/trap/vectors.S	/^vector70:$/;"	l
+vector71	kern/trap/vectors.S	/^vector71:$/;"	l
+vector72	kern/trap/vectors.S	/^vector72:$/;"	l
+vector73	kern/trap/vectors.S	/^vector73:$/;"	l
+vector74	kern/trap/vectors.S	/^vector74:$/;"	l
+vector75	kern/trap/vectors.S	/^vector75:$/;"	l
+vector76	kern/trap/vectors.S	/^vector76:$/;"	l
+vector77	kern/trap/vectors.S	/^vector77:$/;"	l
+vector78	kern/trap/vectors.S	/^vector78:$/;"	l
+vector79	kern/trap/vectors.S	/^vector79:$/;"	l
+vector8	kern/trap/vectors.S	/^vector8:$/;"	l
+vector80	kern/trap/vectors.S	/^vector80:$/;"	l
+vector81	kern/trap/vectors.S	/^vector81:$/;"	l
+vector82	kern/trap/vectors.S	/^vector82:$/;"	l
+vector83	kern/trap/vectors.S	/^vector83:$/;"	l
+vector84	kern/trap/vectors.S	/^vector84:$/;"	l
+vector85	kern/trap/vectors.S	/^vector85:$/;"	l
+vector86	kern/trap/vectors.S	/^vector86:$/;"	l
+vector87	kern/trap/vectors.S	/^vector87:$/;"	l
+vector88	kern/trap/vectors.S	/^vector88:$/;"	l
+vector89	kern/trap/vectors.S	/^vector89:$/;"	l
+vector9	kern/trap/vectors.S	/^vector9:$/;"	l
+vector90	kern/trap/vectors.S	/^vector90:$/;"	l
+vector91	kern/trap/vectors.S	/^vector91:$/;"	l
+vector92	kern/trap/vectors.S	/^vector92:$/;"	l
+vector93	kern/trap/vectors.S	/^vector93:$/;"	l
+vector94	kern/trap/vectors.S	/^vector94:$/;"	l
+vector95	kern/trap/vectors.S	/^vector95:$/;"	l
+vector96	kern/trap/vectors.S	/^vector96:$/;"	l
+vector97	kern/trap/vectors.S	/^vector97:$/;"	l
+vector98	kern/trap/vectors.S	/^vector98:$/;"	l
+vector99	kern/trap/vectors.S	/^vector99:$/;"	l
+vpd	kern/mm/pmm.c	/^pde_t * const vpd = (pde_t *)PGADDR(PDX(VPT), PDX(VPT), 0);$/;"	v
+vprintfmt	libs/printfmt.c	/^vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {$/;"	f
+vpt	kern/mm/pmm.c	/^pte_t * const vpt = (pte_t *)VPT;$/;"	v
+vsnprintf	libs/printfmt.c	/^vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {$/;"	f
+waitdisk	boot/bootmain.c	/^waitdisk(void) {$/;"	f	file:
+warn	kern/debug/assert.h	9;"	d
+wpos	kern/driver/console.c	/^    uint32_t wpos;$/;"	m	struct:__anon3	file:
+write_dr	libs/x86.h	/^write_dr(unsigned regnum, uint32_t value) {$/;"	f
+write_eflags	libs/x86.h	/^write_eflags(uint32_t eflags) {$/;"	f
diff -Nru lab1/tools/boot.ld lab2/tools/boot.ld
--- lab1/tools/boot.ld	1970-01-01 08:00:00.000000000 +0800
+++ lab2/tools/boot.ld	2017-02-25 15:39:39.991783592 +0800
@@ -0,0 +1,15 @@
+OUTPUT_FORMAT("elf32-i386")
+OUTPUT_ARCH(i386)
+
+SECTIONS {
+    . = 0x7C00;
+
+    .startup : {
+        *bootasm.o(.text)
+    }
+
+    .text : { *(.text) }
+    .data : { *(.data .rodata) }
+    
+    /DISCARD/ : { *(.eh_*) }
+}
diff -Nru lab1/tools/gdbinit lab2/tools/gdbinit
--- lab1/tools/gdbinit	2017-02-26 16:46:42.024296757 +0800
+++ lab2/tools/gdbinit	2017-02-25 15:39:39.991783592 +0800
@@ -1,5 +1,3 @@
 file bin/kernel
-set architecture i8086
 target remote :1234
 break kern_init
-continue
diff -Nru lab1/tools/grade.sh lab2/tools/grade.sh
--- lab1/tools/grade.sh	2017-02-25 15:39:39.991783592 +0800
+++ lab2/tools/grade.sh	2017-02-25 15:39:39.991783592 +0800
@@ -2,25 +2,25 @@
 
 verbose=false
 if [ "x$1" = "x-v" ]; then
-	verbose=true
-	out=/dev/stdout
-	err=/dev/stderr
+    verbose=true
+    out=/dev/stdout
+    err=/dev/stderr
 else
-	out=/dev/null
-	err=/dev/null
+    out=/dev/null
+    err=/dev/null
 fi
 
 ## make & makeopts
 if gmake --version > /dev/null 2>&1; then
-	make=gmake;
+    make=gmake;
 else
-	make=make;
+    make=make;
 fi
 
 makeopts="--quiet --no-print-directory -j"
 
 make_print() {
-	echo `$make $makeopts print-$1`
+    echo `$make $makeopts print-$1`
 }
 
 ## command tools
@@ -35,7 +35,7 @@
 sym_table='obj/kernel.sym'
 
 ## gdb & gdbopts
-gdb="$(make_print GCCPREFIX)gdb"
+gdb="$(make_print GDB)"
 gdbport='1234'
 
 gdb_in="$(make_print GRADE_GDB_IN)"
@@ -46,9 +46,9 @@
 qemu_out="$(make_print GRADE_QEMU_OUT)"
 
 if $qemu -nographic -help | grep -q '^-gdb'; then
-	qemugdb="-gdb tcp::$gdbport"
+    qemugdb="-gdb tcp::$gdbport"
 else
-	qemugdb="-s -p $gdbport"
+    qemugdb="-s -p $gdbport"
 fi
 
 ## default variables
@@ -63,248 +63,248 @@
 
 ## default functions
 update_score() {
-	total=`expr $total + $part`
-	total_pos=`expr $total_pos + $part_pos`
-	part=0
-	part_pos=0
+    total=`expr $total + $part`
+    total_pos=`expr $total_pos + $part_pos`
+    part=0
+    part_pos=0
 }
 
 get_time() {
-	echo `$date +%s.%N 2> /dev/null`
+    echo `$date +%s.%N 2> /dev/null`
 }
 
 show_part() {
-	echo "Part $1 Score: $part/$part_pos"
-	echo
-	update_score
+    echo "Part $1 Score: $part/$part_pos"
+    echo
+    update_score
 }
 
 show_final() {
-	update_score
-	echo "Total Score: $total/$total_pos"
-	if [ $total -lt $total_pos ]; then
-		exit 1
-	fi
+    update_score
+    echo "Total Score: $total/$total_pos"
+    if [ $total -lt $total_pos ]; then
+        exit 1
+    fi
 }
 
 show_time() {
-	t1=$(get_time)
-	time=`echo "scale=1; ($t1-$t0)/1" | $sed 's/.N/.0/g' | $bc 2> /dev/null`
-	echo "(${time}s)"
+    t1=$(get_time)
+    time=`echo "scale=1; ($t1-$t0)/1" | $sed 's/.N/.0/g' | $bc 2> /dev/null`
+    echo "(${time}s)"
 }
 
 show_build_tag() {
-	echo "$1:" | $awk '{printf "%-24s ", $0}'
+    echo "$1:" | $awk '{printf "%-24s ", $0}'
 }
 
 show_check_tag() {
-	echo "$1:" | $awk '{printf "  -%-40s  ", $0}'
+    echo "$1:" | $awk '{printf "  -%-40s  ", $0}'
 }
 
 show_msg() {
-	echo $1
-	shift
-	if [ $# -gt 0 ]; then
-		echo -e "$@" | awk '{printf "   %s\n", $0}'
-		echo
-	fi
+    echo $1
+    shift
+    if [ $# -gt 0 ]; then
+        echo -e "$@" | awk '{printf "   %s\n", $0}'
+        echo
+    fi
 }
 
 pass() {
-	show_msg OK "$@"
-	part=`expr $part + $pts`
-	part_pos=`expr $part_pos + $pts`
+    show_msg OK "$@"
+    part=`expr $part + $pts`
+    part_pos=`expr $part_pos + $pts`
 }
 
 fail() {
-	show_msg WRONG "$@"
-	part_pos=`expr $part_pos + $pts`
+    show_msg WRONG "$@"
+    part_pos=`expr $part_pos + $pts`
 }
 
 run_qemu() {
-	# Run qemu with serial output redirected to $qemu_out. If $brkfun is non-empty,
-	# wait until $brkfun is reached or $timeout expires, then kill QEMU
-	qemuextra=
-	if [ "$brkfun" ]; then
-		qemuextra="-S $qemugdb"
-	fi
-
-	if [ -z "$timeout" ] || [ $timeout -le 0 ]; then
-		timeout=$default_timeout;
-	fi
-
-	t0=$(get_time)
-	(
-		ulimit -t $timeout
-		exec $qemu -nographic $qemuopts -serial file:$qemu_out -monitor null -no-reboot $qemuextra
-	) > $out 2> $err &
-	pid=$!
-
-	# wait for QEMU to start
-	sleep 1
-
-	if [ -n "$brkfun" ]; then
-		# find the address of the kernel $brkfun function
-		brkaddr=`$grep " $brkfun\$" $sym_table | $sed -e's/ .*$//g'`
-		brkaddr_phys=`echo $brkaddr | sed "s/^c0/00/g"`
-		(
-			echo "target remote localhost:$gdbport"
-			echo "break *0x$brkaddr"
-			if [ "$brkaddr" != "$brkaddr_phys" ]; then
-			    echo "break *0x$brkaddr_phys"
-			fi
-			echo "continue"
-		) > $gdb_in
-
-		$gdb -batch -nx -x $gdb_in > /dev/null 2>&1
-
-		# make sure that QEMU is dead
-		# on OS X, exiting gdb doesn't always exit qemu
-		kill $pid > /dev/null 2>&1
-	fi
+    # Run qemu with serial output redirected to $qemu_out. If $brkfun is non-empty,
+    # wait until $brkfun is reached or $timeout expires, then kill QEMU
+    qemuextra=
+    if [ "$brkfun" ]; then
+        qemuextra="-S $qemugdb"
+    fi
+
+    if [ -z "$timeout" ] || [ $timeout -le 0 ]; then
+        timeout=$default_timeout;
+    fi
+
+    t0=$(get_time)
+    (
+        ulimit -t $timeout
+        exec $qemu -nographic $qemuopts -serial file:$qemu_out -monitor null -no-reboot $qemuextra
+    ) > $out 2> $err &
+    pid=$!
+
+    # wait for QEMU to start
+    sleep 1
+
+    if [ -n "$brkfun" ]; then
+        # find the address of the kernel $brkfun function
+        brkaddr=`$grep " $brkfun\$" $sym_table | $sed -e's/ .*$//g'`
+        brkaddr_phys=`echo $brkaddr | sed "s/^c0/00/g"`
+        (
+            echo "target remote localhost:$gdbport"
+            echo "break *0x$brkaddr"
+            if [ "$brkaddr" != "$brkaddr_phys" ]; then
+                echo "break *0x$brkaddr_phys"
+            fi
+            echo "continue"
+        ) > $gdb_in
+
+        $gdb -batch -nx -x $gdb_in > /dev/null 2>&1
+
+        # make sure that QEMU is dead
+        # on OS X, exiting gdb doesn't always exit qemu
+        kill $pid > /dev/null 2>&1
+    fi
 }
 
 build_run() {
-	# usage: build_run <tag> <args>
-	show_build_tag "$1"
-	shift
-
-	if $verbose; then
-		echo "$make $@ ..."
-	fi
-	$make $makeopts $@ 'DEFS+=-DDEBUG_GRADE' > $out 2> $err
-
-	if [ $? -ne 0 ]; then
-		echo $make $@ failed
-		exit 1
-	fi
+    # usage: build_run <tag> <args>
+    show_build_tag "$1"
+    shift
+
+    if $verbose; then
+        echo "$make $@ ..."
+    fi
+    $make $makeopts $@ 'DEFS+=-DDEBUG_GRADE' > $out 2> $err
+
+    if [ $? -ne 0 ]; then
+        echo $make $@ failed
+        exit 1
+    fi
 
-	# now run qemu and save the output
-	run_qemu
+    # now run qemu and save the output
+    run_qemu
 
-	show_time
+    show_time
 
-	cp $qemu_out .`echo $tag | tr '[:upper:]' '[:lower:]' | sed 's/ /_/g'`.log
+    cp $qemu_out .`echo $tag | tr '[:upper:]' '[:lower:]' | sed 's/ /_/g'`.log
 }
 
 check_result() {
-	# usage: check_result <tag> <check> <check args...>
-	show_check_tag "$1"
-	shift
-
-	# give qemu some time to run (for asynchronous mode)
-	if [ ! -s $qemu_out ]; then
-		sleep 4
-	fi
-
-	if [ ! -s $qemu_out ]; then
-		fail > /dev/null
-		echo 'no $qemu_out'
-	else
-		check=$1
-		shift
-		$check "$@"
-	fi
+    # usage: check_result <tag> <check> <check args...>
+    show_check_tag "$1"
+    shift
+
+    # give qemu some time to run (for asynchronous mode)
+    if [ ! -s $qemu_out ]; then
+        sleep 4
+    fi
+
+    if [ ! -s $qemu_out ]; then
+        fail > /dev/null
+        echo 'no $qemu_out'
+    else
+        check=$1
+        shift
+        $check "$@"
+    fi
 }
 
 check_regexps() {
-	okay=yes
-	not=0
-	reg=0
-	error=
-	for i do
-		if [ "x$i" = "x!" ]; then
-			not=1
-		elif [ "x$i" = "x-" ]; then
-			reg=1
-		else
-			if [ $reg -ne 0 ]; then
-				$grep '-E' "^$i\$" $qemu_out > /dev/null
-			else
-				$grep '-F' "$i" $qemu_out > /dev/null
-			fi
-			found=$(($? == 0))
-			if [ $found -eq $not ]; then
-				if [ $found -eq 0 ]; then
-					msg="!! error: missing '$i'"
-				else
-					msg="!! error: got unexpected line '$i'"
-				fi
-				okay=no
-				if [ -z "$error" ]; then
-					error="$msg"
-				else
-					error="$error\n$msg"
-				fi
-			fi
-			not=0
-			reg=0
-		fi
-	done
-	if [ "$okay" = "yes" ]; then
-		pass
-	else
-		fail "$error"
-		if $verbose; then
-			exit 1
-		fi
-	fi
+    okay=yes
+    not=0
+    reg=0
+    error=
+    for i do
+        if [ "x$i" = "x!" ]; then
+            not=1
+        elif [ "x$i" = "x-" ]; then
+            reg=1
+        else
+            if [ $reg -ne 0 ]; then
+                $grep '-E' "^$i\$" $qemu_out > /dev/null
+            else
+                $grep '-F' "$i" $qemu_out > /dev/null
+            fi
+            found=$(($? == 0))
+            if [ $found -eq $not ]; then
+                if [ $found -eq 0 ]; then
+                    msg="!! error: missing '$i'"
+                else
+                    msg="!! error: got unexpected line '$i'"
+                fi
+                okay=no
+                if [ -z "$error" ]; then
+                    error="$msg"
+                else
+                    error="$error\n$msg"
+                fi
+            fi
+            not=0
+            reg=0
+        fi
+    done
+    if [ "$okay" = "yes" ]; then
+        pass
+    else
+        fail "$error"
+        if $verbose; then
+            exit 1
+        fi
+    fi
 }
 
 run_test() {
-	# usage: run_test [-tag <tag>] [-Ddef...] [-check <check>] checkargs ...
-	tag=
-	check=check_regexps
-	while true; do
-		select=
-		case $1 in
-			-tag)
-				select=`expr substr $1 2 ${#1}`
-				eval $select='$2'
-				;;
-		esac
-		if [ -z "$select" ]; then
-			break
-		fi
-		shift
-		shift
-	done
-	defs=
-	while expr "x$1" : "x-D.*" > /dev/null; do
-		defs="DEFS+='$1' $defs"
-		shift
-	done
-	if [ "x$1" = "x-check" ]; then
-		check=$2
-		shift
-		shift
-	fi
+    # usage: run_test [-tag <tag>] [-Ddef...] [-check <check>] checkargs ...
+    tag=
+    check=check_regexps
+    while true; do
+        select=
+        case $1 in
+            -tag)
+                select=`expr substr $1 2 ${#1}`
+                eval $select='$2'
+                ;;
+        esac
+        if [ -z "$select" ]; then
+            break
+        fi
+        shift
+        shift
+    done
+    defs=
+    while expr "x$1" : "x-D.*" > /dev/null; do
+        defs="DEFS+='$1' $defs"
+        shift
+    done
+    if [ "x$1" = "x-check" ]; then
+        check=$2
+        shift
+        shift
+    fi
 
-	$make $makeopts touch > /dev/null 2>&1
-	build_run "$tag" "$defs"
+    $make $makeopts touch > /dev/null 2>&1
+    build_run "$tag" "$defs"
 
-	check_result 'check result' "$check" "$@"
+    check_result 'check result' "$check" "$@"
 }
 
 quick_run() {
-	# usage: quick_run <tag> [-Ddef...]
-	tag="$1"
-	shift
-	defs=
-	while expr "x$1" : "x-D.*" > /dev/null; do
-		defs="DEFS+='$1' $defs"
-		shift
-	done
+    # usage: quick_run <tag> [-Ddef...]
+    tag="$1"
+    shift
+    defs=
+    while expr "x$1" : "x-D.*" > /dev/null; do
+        defs="DEFS+='$1' $defs"
+        shift
+    done
 
-	$make $makeopts touch > /dev/null 2>&1
-	build_run "$tag" "$defs"
+    $make $makeopts touch > /dev/null 2>&1
+    build_run "$tag" "$defs"
 }
 
 quick_check() {
-	# usage: quick_check <tag> checkargs ...
-	tag="$1"
-	shift
-	check_result "$tag" check_regexps "$@"
+    # usage: quick_check <tag> checkargs ...
+    tag="$1"
+    shift
+    check_result "$tag" check_regexps "$@"
 }
 
 ## kernel image
@@ -318,36 +318,28 @@
 
 ## check now!!
 
-quick_run 'Check Output'
+quick_run 'Check PMM'
+
+pts=20
+quick_check 'check pmm'                                         \
+    'memory management: default_pmm_manager'                     \
+    'check_alloc_page() succeeded!'                             \
+    'check_pgdir() succeeded!'                                  \
+    'check_boot_pgdir() succeeded!'
+
+pts=20
+quick_check 'check page table'                                  \
+    'PDE(0e0) c0000000-f8000000 38000000 urw'                   \
+    '  |-- PTE(38000) c0000000-f8000000 38000000 -rw'           \
+    'PDE(001) fac00000-fb000000 00400000 -rw'                   \
+    '  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw'           \
+    '  |-- PTE(00001) fafeb000-fafec000 00001000 -rw'
 
 pts=10
-quick_check 'check ring 0'										\
-	'0: @ring 0'												\
-	'0:  cs = 8'												\
-	'0:  ds = 10'												\
-	'0:  es = 10'												\
-	'0:  ss = 10'
-
-quick_check 'check switch to ring 3'							\
-	'+++ switch to  user  mode +++'								\
-	'1: @ring 3'												\
-	'1:  cs = 1b'												\
-	'1:  ds = 23'												\
-	'1:  es = 23'												\
-	'1:  ss = 23'
-
-quick_check 'check switch to ring 0'							\
-	'+++ switch to kernel mode +++'								\
-	'2: @ring 0'												\
-	'2:  cs = 8'												\
-	'2:  ds = 10'												\
-	'2:  es = 10'												\
-	'2:  ss = 10'
-
-quick_check 'check ticks'										\
-	'++ setup timer interrupts'									\
-	'100 ticks'													\
-	'End of Test.'
+quick_check 'check ticks'                                       \
+    '++ setup timer interrupts'                                 \
+    '100 ticks'                                                 \
+    'End of Test.'
 
 ## print final-score
 show_final
diff -Nru lab1/tools/kernel.ld lab2/tools/kernel.ld
--- lab1/tools/kernel.ld	2017-02-25 15:39:39.991783592 +0800
+++ lab2/tools/kernel.ld	2017-02-25 15:39:39.991783592 +0800
@@ -1,58 +1,58 @@
-/* Simple linker script for the JOS kernel.
+/* Simple linker script for the ucore kernel.
    See the GNU ld 'info' manual ("info ld") to learn the syntax. */
 
 OUTPUT_FORMAT("elf32-i386", "elf32-i386", "elf32-i386")
 OUTPUT_ARCH(i386)
-ENTRY(kern_init)
+ENTRY(kern_entry)
 
 SECTIONS {
-	/* Load the kernel at this address: "." means the current address */
-	. = 0x100000;
+    /* Load the kernel at this address: "." means the current address */
+    . = 0xC0100000;
 
-	.text : {
-		*(.text .stub .text.* .gnu.linkonce.t.*)
-	}
-
-	PROVIDE(etext = .);	/* Define the 'etext' symbol to this value */
-
-	.rodata : {
-		*(.rodata .rodata.* .gnu.linkonce.r.*)
-	}
-
-	/* Include debugging information in kernel memory */
-	.stab : {
-		PROVIDE(__STAB_BEGIN__ = .);
-		*(.stab);
-		PROVIDE(__STAB_END__ = .);
-		BYTE(0)		/* Force the linker to allocate space
-				   for this section */
-	}
-
-	.stabstr : {
-		PROVIDE(__STABSTR_BEGIN__ = .);
-		*(.stabstr);
-		PROVIDE(__STABSTR_END__ = .);
-		BYTE(0)		/* Force the linker to allocate space
-				   for this section */
-	}
-
-	/* Adjust the address for the data segment to the next page */
-	. = ALIGN(0x1000);
-
-	/* The data segment */
-	.data : {
-		*(.data)
-	}
-
-	PROVIDE(edata = .);
-
-	.bss : {
-		*(.bss)
-	}
-
-	PROVIDE(end = .);
-
-	/DISCARD/ : {
-		*(.eh_frame .note.GNU-stack)
-	}
+    .text : {
+        *(.text .stub .text.* .gnu.linkonce.t.*)
+    }
+
+    PROVIDE(etext = .); /* Define the 'etext' symbol to this value */
+
+    .rodata : {
+        *(.rodata .rodata.* .gnu.linkonce.r.*)
+    }
+
+    /* Include debugging information in kernel memory */
+    .stab : {
+        PROVIDE(__STAB_BEGIN__ = .);
+        *(.stab);
+        PROVIDE(__STAB_END__ = .);
+        BYTE(0)     /* Force the linker to allocate space
+                   for this section */
+    }
+
+    .stabstr : {
+        PROVIDE(__STABSTR_BEGIN__ = .);
+        *(.stabstr);
+        PROVIDE(__STABSTR_END__ = .);
+        BYTE(0)     /* Force the linker to allocate space
+                   for this section */
+    }
+
+    /* Adjust the address for the data segment to the next page */
+    . = ALIGN(0x1000);
+
+    /* The data segment */
+    .data : {
+        *(.data)
+    }
+
+    PROVIDE(edata = .);
+
+    .bss : {
+        *(.bss)
+    }
+
+    PROVIDE(end = .);
+
+    /DISCARD/ : {
+        *(.eh_frame .note.GNU-stack)
+    }
 }
diff -Nru lab1/tools/kernel_nopage.ld lab2/tools/kernel_nopage.ld
--- lab1/tools/kernel_nopage.ld	1970-01-01 08:00:00.000000000 +0800
+++ lab2/tools/kernel_nopage.ld	2017-02-25 15:39:39.991783592 +0800
@@ -0,0 +1,59 @@
+/* Simple linker script for the ucore kernel.
+   See the GNU ld 'info' manual ("info ld") to learn the syntax. */
+
+OUTPUT_FORMAT("elf32-i386", "elf32-i386", "elf32-i386")
+OUTPUT_ARCH(i386)
+ENTRY(kern_entry)
+
+SECTIONS {
+    /* Load the kernel at this address: "." means the current address */
+    /* the phy addr of ucore (before ucore enable paging mechanism*/
+    . = 0x0100000;
+
+    .text : {
+        *(.text .stub .text.* .gnu.linkonce.t.*)
+    }
+
+    PROVIDE(etext = .); /* Define the 'etext' symbol to this value */
+
+    .rodata : {
+        *(.rodata .rodata.* .gnu.linkonce.r.*)
+    }
+
+    /* Include debugging information in kernel memory */
+    .stab : {
+        PROVIDE(__STAB_BEGIN__ = .);
+        *(.stab);
+        PROVIDE(__STAB_END__ = .);
+        BYTE(0)     /* Force the linker to allocate space
+                   for this section */
+    }
+
+    .stabstr : {
+        PROVIDE(__STABSTR_BEGIN__ = .);
+        *(.stabstr);
+        PROVIDE(__STABSTR_END__ = .);
+        BYTE(0)     /* Force the linker to allocate space
+                   for this section */
+    }
+
+    /* Adjust the address for the data segment to the next page */
+    . = ALIGN(0x1000);
+
+    /* The data segment */
+    .data : {
+        *(.data)
+    }
+
+    PROVIDE(edata = .);
+
+    .bss : {
+        *(.bss)
+    }
+
+    PROVIDE(end = .);
+
+    /DISCARD/ : {
+        *(.eh_frame .note.GNU-stack)
+    }
+}
diff -Nru lab1/tools/sign.c lab2/tools/sign.c
--- lab1/tools/sign.c	2017-02-26 16:04:19.548476574 +0800
+++ lab2/tools/sign.c	2017-02-25 15:39:39.991783592 +0800
@@ -1,4 +1,3 @@
-// Add a signature to the input file (must smaller than 510bytes) to make it legal for MBR
 #include <stdio.h>
 #include <errno.h>
 #include <string.h>
@@ -7,15 +6,11 @@
 int
 main(int argc, char *argv[]) {
     struct stat st;
-	// stat: clib to obtain status of a certain file
-	// the struct contains all kinds of info related to the file, such as size isdir and so on.
     if (argc != 3) {
         fprintf(stderr, "Usage: <input filename> <output filename>\n");
         return -1;
     }
     if (stat(argv[1], &st) != 0) {
-		// stat function : check the status of the first parameter and copy it to the second parameter
-		// if the process is successful, return 0, else return -1
         fprintf(stderr, "Error opening file '%s': %s\n", argv[1], strerror(errno));
         return -1;
     }
diff -Nru lab1/tools/vector.c lab2/tools/vector.c
--- lab1/tools/vector.c	2017-02-25 15:39:39.991783592 +0800
+++ lab2/tools/vector.c	2017-02-25 15:39:39.991783592 +0800
@@ -2,6 +2,7 @@
 
 int
 main(void) {
+    printf("# handler\n");
     printf(".text\n");
     printf(".globl __alltraps\n");
 
@@ -10,7 +11,7 @@
         printf(".globl vector%d\n", i);
         printf("vector%d:\n", i);
         if ((i < 8 || i > 14) && i != 17) {
-            printf("  pushl \\$0\n");
+            printf("  pushl $0\n");
         }
         printf("  pushl $%d\n", i);
         printf("  jmp __alltraps\n");
